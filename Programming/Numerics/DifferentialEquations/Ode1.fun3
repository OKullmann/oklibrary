// Plotting

plots[0].emplace_back(y,true);
const F_t h = [](Float_t x, Float_t y) {return std::sin(x)*y;};
plots[0].emplace_back(h,true);

plots[1].emplace_back(y,true);
plots[1].emplace_back(acc);
plots[1].emplace_back(rk->F, true);



const F_t h0 = [](Float_t x, Float_t) {return Tau::kpmean(x,1);};
const F_t h1 = [](Float_t x, Float_t) {return Tau::kpmean(x,0.5);};
const F_t h7 = [](Float_t x, Float_t) {return Tau::kpmean(x,0.3L);};
const F_t h2 = [](Float_t x, Float_t) {return Tau::kpmean(x,0);};

const F_t h3 = [](Float_t x, Float_t) {return Tau::ktau(x);};

const F_t h4 = [h0,h3](Float_t x, Float_t) {return h3(x,0)-h0(x,0);};
const F_t h5 = [h1,h3](Float_t x, Float_t) {return h3(x,0)-h1(x,0);};
const F_t h6 = [h2,h3](Float_t x, Float_t) {return h3(x,0)-h2(x,0);};
const F_t h8 = [h7,h3](Float_t x, Float_t) {return h3(x,0)-h7(x,0);};

plots[0].emplace_back(h0,false);
plots[0].emplace_back(h1,false);
plots[0].emplace_back(h2,false);
plots[0].emplace_back(h3,false);

plots[1].emplace_back(h4,true);
plots[1].emplace_back(h5,true);
plots[1].emplace_back(h6,true);
plots[1].emplace_back(h8,true);

