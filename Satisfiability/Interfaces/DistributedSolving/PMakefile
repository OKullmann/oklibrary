# Copyright 2020, 2021, 2024 Oliver Kullmann
# This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
# it and/or modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation and included in this library; either version 3 of the
# License, or any later version.

# Assumes for extraction, that the Extract-script-output has sat-status in
# column 4, and runtime in column 3.

# TODOS:
# 1. Compare with DQCNF/ExpMakefile

# Version 0.3.5

exit_handling?=test-exit
error_output?=let-through
removevargaps?=none
apply_form?=apply-call

SHELL := /bin/bash
.SUFFIXES :
.PHONY : all run beginrun runjobs endrun extract transfer clean cleanall

MAKE_PID := $(shell echo $$PPID)
JOB_FLAG := $(filter -j%, $(subst -j ,-j,$(shell ps T | grep "^\s*$(MAKE_PID).*$(MAKE)")))
ifeq ($(JOB_FLAG),)
  JOBS := 1
else ifeq ($(JOB_FLAG),-j)
  JOBS := INF
else
  JOBS := $(subst -j,,$(JOB_FLAG))
endif

resultfile := SubinstanceStatistics
apply_call := ApplyPass-O3-DNDEBUG

solver_call := SOLVERCALL
solver_suffix := SOLVERSUFFIX
extraction_tool := EXTRACT
number_cubes := CUBES


joblist := $(shell for (( i=1; i<=$(number_cubes); ++i )); do echo $$i; done)
extjoblist := $(addprefix Results/,$(joblist))

all : run transfer
run : beginrun runjobs endrun

beginrun :
	echo -e "\nBegin run, PID=$(MAKE_PID)" >> Log
	@date -Ins >> Log
	echo "Parallel: j=$(JOBS)" >> Log

runjobs : | beginrun
runjobs : $(extjoblist)

endrun : | runjobs
endrun :
	@ps -o "%t" --pid $(MAKE_PID) | tee -a Log
	@echo "End run, PID=$(MAKE_PID)" >> Log
	@date -Ins >> Log


Results/% :
ifeq ($(apply_form),apply-call)
  ifeq ($(removevargaps),none)
	@cat instance | $(apply_call) Instances/$* Temp$*.cnf
  else
	@cat instance | $(apply_call) Instances/$* Temp$*.cnf; RemoveVarGaps Temp$*.cnf
  endif
  ifeq ($(exit_handling),test-exit)
	@$(solver_call) Temp$*.cnf $(solver_suffix) > Temp$*.out; if [[ $$? != 0 && $$? != 10 && $$? != 20 ]]; then exit 1; fi
else
    ifeq ($(error_output),let-through)
	@$(solver_call) Temp$*.cnf $(solver_suffix) > Temp$*.out; true
    else
	@$(solver_call) Temp$*.cnf $(solver_suffix) > Temp$*.out 2> /dev/null; true
    endif
  endif
	@cat Temp$*.out | $(extraction_tool) data-only > $@
	@rm Temp$*.cnf Temp$*.out
else
	@cat Instances/$* instance | InsertPassAsUnit.awk | $(solver_call) /dev/stdin $(solver_suffix) | $(extraction_tool) data-only > $@
endif


transfer : | run
	$(extraction_tool) header-only >> $(resultfile)
	@for (( i=1; i<=$(number_cubes); ++i )); do echo -n "$$i " >> $(resultfile); cat Results/$$i >> $(resultfile); done
	@tail -n $(number_cubes) $(resultfile) | awk 'BEGIN {unsat=0; sat=0; indet=0; tunsat=0; tsat=0; tindet=0} {if ($$5==0) {++unsat; tunsat+=$$4} else if ($$5==1) {++sat; tsat+=$$4} else {++indet; tindet+=$$4}} END {print "unsat:" unsat ", " tunsat "s; sat:" sat ", " tsat "s; unknown:" indet ", " tindet "s"}' | tee -a Log

extract :
	$(extraction_tool) header-only >> $(resultfile)
	@count=0; for (( i=1; i<=$(number_cubes); ++i )); do if [ -s Results/$$i ]; then ((++count)); echo -n "$$i " >> $(resultfile); cat Results/$$i >> $(resultfile); fi; done; echo "#cubes=$$count";\
	tail -n $${count} $(resultfile) | awk 'BEGIN {unsat=0; sat=0; indet=0; tunsat=0; tsat=0; tindet=0} {if ($$5==0) {++unsat; tunsat+=$$4} else if ($$5==1) {++sat; tsat+=$$4} else if ($$5==2) {++indet; tindet+=$$4}} END {print "unsat:" unsat ", " tunsat "s; sat:" sat ", " tsat "s; unknown:" indet ", " tindet "s"}' | tee -a Log



clean :
	- rm Results/*
	@echo -e "\nclean" >> Log
	@date -Ins >> Log

cleanall : clean
	- rm $(resultfile)
	@echo -e "cleanall" >> Log
