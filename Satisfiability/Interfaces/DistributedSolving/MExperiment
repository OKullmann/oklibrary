#!/bin/bash
# Oliver Kullmann, 28.2.2024 (Swansea)
# Copyright 2024 Oliver Kullmann
# This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
# it and/or modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation and included in this library; either version 3 of the
# License, or any later version.

# Preparing processing of a command with an argument MEINDEX, which is
# run through 1, ..., N, storing the outputs, via producing a Makefile.



# USAGE:
# MExperiment N command

# where N is a natural number, and command is the string for execution:
#  - MEINDEX in command is replaced by 1, ..., N
#  - no further changes in command (as it is passed to the shell)
#  - it is the responsibility of the command to store appropriately the result
#    in Results/MEINDEX
#  - the calling-place of the command is within the experiment-directory.

# EXAMPLES:

# Just waiting 20s, and then printing the running index:
# > MExperiment 60 "sleep 20; echo MEINDEX > Results/MEINDEX"
# MExperiment in version 0.1.0 started.
# Created new processing-directory "MEProcess_2024-02-29-161329"
# > cd MEProcess_2024-02-29-161329
# MEProcess_2024-02-29-161329> make -j 20
#     ELAPSED
#      01:00
# MEProcess_2024-02-29-161329> cat Results/1 Results/60
# 1
# 60
# Note that the special variable MEINDEX is just used as is (without
# something like "$").

# Running a SAT-solver and storing the output:
# > MExperiment 3815 "clasp -n 0 -q ../SAT_instances/MEINDEX > Results/MEINDEX 2>&1 || true"
# In the calling-directory there is the directory SAT_instances, containing
# the Dimacs-files "1", ..., "3815". Run clasp in counting-mode, and store the
# complete output (including error-messages).
# Note that SAT-solvers (and related solvers) use the exit-code in a
# non-standard way --- usually an exit-code different from 0 indicates failure,
# but not for these solvers. Easiest to just ignore the exit-code, as
# done here (via "|| true").

# Running a SAT-solver, storing the solutions:
# > MExperiment 3815 "ctawSolver ../SAT_instances/MEINDEX Results/MEINDEX.sol > Results/MEINDEX || true"
# Same place for the Dimacs-instances as above; here we just store the
# standard-output in the result-file (not standard-error), while storing the
# solutions (the second argument to the tawSolver) in the (additional) files
# Results/1.sol etc. (belonging to Results/1 etc.).


set -o errexit
set -o nounset

script_name="MExperiment"
version_number=0.1.0

if [[ $# -ne 2 ]]; then
  echo "ERROR[${script_name}]: Exactly two parameter are needed, N and command."
  exit 1
fi

timestamp=$(date +"%Y-%m-%d-%H%M%S")

N=$1
command="$2"

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
  DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
emakefile="${DIR}/EMakefile"

echo "${script_name} in version ${version_number} started."

directory="MEProcess_${timestamp}"
mkdir ${directory}
echo -e "Created new processing-directory \"${directory}\""

cd ${directory}
mkdir Results
cp ${emakefile} Makefile

echo -n "Run ${script_name}: " > Log
date >> Log
echo "  in version ${version_number}" >> Log
echo "N=$N" >> Log
echo -e "command=\"${command}\"" >> Log

uname -a > Environment
echo >> Environment
cat /proc/cpuinfo >> Environment
echo >> Environment
free -m >> Environment

sed -i "s/ORIGINALN/$N/" Makefile
sed -i "s!ORIGINALCOMMAND!${command}!" Makefile
sed -i "s/EXPDIRECTORY/${directory}/" Makefile
