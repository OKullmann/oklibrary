#!/bin/bash
# Oleg Zaikin, 29.1.2021 (Swansea)
# Copyright 2021 Oliver Kullmann
# This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
# it and/or modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation and included in this library; either version 3 of the
# License, or any later version.

# Preparing processing instances from a directory by a solver
# producing a Makefile.

# USAGE:
# MRunSolver dir

# creates the experiment-directory "MRunSolver_solvername_dirname_timestamp"
# (in the current directory) containing the files
#  - Log: general logging information (general information, and the runs of make)
#  - Environment: information on the computer environment
#  - Makefile: to be run
#  - SubinstanceStatistics: in R-format the collected data, as produced by
#    ExtractTawSolver-like scripts
#  and containing the directories:
#  - Instances: an symbolic link to instances in the given directory
#  - Results: the targets for the Makefile, where the extracts of the
#    solver-runs are stored)
# Furthermore $instance.out contains the solver output of the solved instance
# (these are temporary files, which are deleted after successful processing).

# Also MRunSolver creates Makefile in the same path where it is. This Makefile\
# can be used to recoursively call make in all subdirectories
# of the kind "MRunSolver_solvername_dirname_timestamp" in the current directory.

# By default the solver is tawSolver. To use a different solver, set
# variable "solver", for example

# solver="ttawSolver"

# By default the time-limit for running the solver is 1000 seconds,
# it can be changed by setting variable "solver_prefix", for instance

# solver_prefix="timeout --signal=SIGINT 1000"

# To run the default-solver with time-limit of 20 seconds in directory
# "data/CNF", use
#   solver_prefix="timeout --signal=SIGINT 20" MRunSolver "/data/CNF/"

# Expected return-values of the solver are 0 (return without a result),
# 10 (sat), 20 (unsat), and 124 (interrupted by timeout).

# The Makefile has the following targets:
#  - run : beginrun runjobs endrun
#  - begin/endrun: logging
#  - runjobs: run the solver on the instances
#  - extract: puts the data under Results into SubinstanceStatistics,
#    and outputs the number of unsatisfiable, satisfiable and unknown
#    subinstances, together with their total run-times
#  - transfer : run, followed by extract
#  - all : run transfer
#  - clean: rm the results under Results
#  - cleanall: rm also SubinstanceStatistics.
# The order and indexing of the instances is as output by the solver.

# Run with
#   make
# for sequential mode, and with
#   make -j M
# for M parallel processes (just "make -j" uses unrestricted parallelism).

# TODO:
# DONE 0. Force Makefile in "MRunSolver_solvername_dirname_timestamp" deal with
#    all instances in dir's subdirectories of any depth.

# Version 0.1.1

set -o errexit
set -o nounset

script_name="MRunSolver"
version_number=0.1.0

timestamp=$(date +"%Y-%m-%d-%H%M%S")

if [[ $# -ne 1 ]]; then
  echo "ERROR[${script_name}]: Exactly one parameter is needed, the directory to be processed."
  exit 1
fi

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
  DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"

solver="${solver:=tawSolver}"
solver_prefix="${solver_prefix:=timeout --signal=SIGINT 1000}"
solver_call="${solver_prefix:+$solver_prefix }${solver}"

extraction_tool=$(SelectExtractionTool ${solver})
if [[ ${extraction_tool} == "UNKNOWN" ]]; then
  echo -e "ERROR[${script_name}]: Unknown solver: \"${solver}\"."
  exit 1
fi

echo "${script_name} in version ${version_number} started."
echo -e "Using solver-call \"${solver_call}\"."

pmakefile="${DIR}/PMakefile"
rmakefile="${DIR}/RMakefile"
directory1=$1

last_two_dir1=$(basename "$(dirname "$directory1")")-$(basename "$directory1")

directory2="MRunSolver_${solver}_${last_two_dir1}_${timestamp}"
mkdir ${directory2}
echo -e "Created new processing-directory \"${directory2}\""

cp ${rmakefile} Makefile
cd ${directory2}
mkdir Results
mkdir Instances
find ${directory1} -type f -name "*.cnf" -exec ln -s {} ./Instances/ \;
cp ${pmakefile} Makefile

echo -n "Run ${script_name}: " > Log
date >> Log
echo "  in version ${version_number}" >> Log
echo -e "Original directory: \"../${directory1}\"" >> Log
echo -e "This directory: \"${directory2}\"" >> Log
echo -e "Solver-call: \"${solver_call}\"" >> Log

uname -a > Environment
echo >> Environment
cat /proc/cpuinfo >> Environment
echo >> Environment
free -m >> Environment

sed -i "s@SOLVERCALL@${solver_call}@" Makefile
sed -i "s@EXTRACT@${extraction_tool}@" Makefile
