// Oliver Kullmann, 14.5.2025 (Swansea)
/* Copyright 2025 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*
  Pseudo-random generation of graphs


DESIGN RATIONAL:

1. Using a high-quality pseudo-random engine, the 64-bit Mersenne Twister.

2. Allows arbitrarily long user-seeds (which can be given, or timestamps,
   or truly random values). Not just the usual 32-bit or maximally 64-bit
   seeds.

3. Seed-management makes automatically sure that every change of essential
   parameters results in a different random sequence (guaranteeing diversity).
   With every other generator all over the world again and again the same
   underlying random sequences are used.

4. Well-defined generation, fully reproducible on any machine and compiler,
   for now and the future.

5. 64-bit generation possibilities (fully w.r.t. the number of edges).

6. Supports binomial and uniform random graphs.

7. Supports different output-formats.


TODOS:

1. Connect to LSRG.cpp and BRG.cpp.

OLD:

-2. Random graph generator GRG

UPDATE: Started with RandomGraphs.hpp.

   - Arguments:
         type  offset  V  P/E
    - type: undirected/directed, without/with loops;
    - offset (unsigned integer, default 0)
    - V number of vertices
    - E is the number of (different) edges, P (as quotient) is the
      probability of an edge.
   - For E choose_kn is used for the total number of edges, using
     an encoding.
   - For P one runs through all potential edges.
   - Output with comments first, then the adjacency-lists (not duplicated
     for undirected). Alphabetically sorted (by using an appropriate
     encoding this can be done without storage).
   - Seed-management shall be synchronised with BRG; so the parameters
     become automatically part of the seed.
   - In principle, the output for V, E can be generated by BRG:
       BRG "E*V,2,1/1"
     if the comments are removed and the trailing zeros (these should be
     options for BRG).
     However creation is more inefficient, since repetition is controlled
     by storing and comparing.
   - We need to be able to turn off the comments etc. (that should be added
     also to BRG).
   - For our applications we are especially interested in connected graphs.
    - We could just consider general random graphs, and split them into
      components, handling each component (and adding up the effort).
    - Seems good enough here; perhaps the generator should then create
      already the components?
    - BCCbySAT should handle components (see below), however it would be
      handy if the generator would already create the components (in a
      directory) as an option.

---

*/



#include <iostream>

#include <ProgramOptions/Environment.hpp>

#include "RandomGraphs.hpp"

namespace {

  const Environment::ProgramInfo proginfo{
        "0.0.4",
        "14.5.2025",
        __FILE__,
        "Oliver Kullmann",
        "https://github.com/OKullmann/oklibrary/blob/master/Satisfiability/Transformers/Generators/Bicliques/GRGG.cpp",
        "GPL v3"};

  using namespace RandomGraphs;

  const std::string error = "ERROR[" + proginfo.prg + "]: ";

  bool show_usage(const int argc, const char* const argv[]) {
    if (not Environment::help_header(std::cout, argc, argv, proginfo))
      return false;
    std::cout <<
    "> " << proginfo.prg
         << " graph-type par1 par2 seeds format-options\n\n"
    " prints a pseudo-random graph to standard output:\n\n"
    " - Arguments \"\" (the empty string) yield the default-values.\n"
    " - Default-values for the options are the first possibilities given.\n\n"
;
    return true;
  }

}

int main(const int argc, const char* const argv[]) {

  if (Environment::version_output(std::cout, proginfo, argc, argv)) return 0;
  if (show_usage(argc, argv)) return 0;

}
