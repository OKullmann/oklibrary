Oliver Kullmann, 23.3.2023 (Swansea)

Priorities:

-6. RunKnownGraphs.cpp

   - Reads the parameters of GrephGen plus the relevant parameters
     of BCCbySAT, plus "SAT/UNSAT", and runs the solving process
     either with the bcc-value or -1, checking whether the result
     is correct, and returning statistics.
   - Can also run T trials, and then computes summary-statistics.

---

-5. Graph2BCcompGraph.cpp

   - As with other similar programs:
    - Provide basic statistics (V, E).
    - Provide turning off output.
    - THese are format-options (as with BCC2SAT):
     +-com
     +-trans

    - We also need a program for computing statistics for graphs.

   - Once available, use the more efficient computation bccomp_graph.

---

-3. We need targets for "full testing", and "light testing".
    - These set macros used in the unit-tests.

---

-2. Random graph generator GRG

UPDATE: Easiest is to just extend GraphGen.

   - Arguments:
         type  offset  V  P/E
    - type: undirected/directed, without/with loops;
    - offset (unsigned integer, default 0)
    - V number of vertices
    - E is the number of (different) edges, P (as quotient) is the
      probability of an edge.
   - For E choose_kn is used for the total number of edges, using
     an encoding.
   - For P one runs through all potential edges.
   - Output with comments first, then the adjacency-lists (not duplicated
     for undirected). Alphabetically sorted (by using an appropriate
     encoding this can be done without storage).
   - Seed-management shall be synchronised with BRG; so the parameters
     become automatically part of the seed.
   - In principle, the output for V, E can be generated by BRG:
       BRG "E*V,2,1/1"
     if the comments are removed and the trailing zeros (these should be
     options for BRG).
     However creation is more inefficient, since repetition is controlled
     by storing and comparing.
   - We need to be able to turn off the comments etc. (that should be added
     also to BRG).
   - For our applications we are especially interested in connected graphs.
    - We could just consider general random graphs, and split them into
      components, handling each component (and adding up the effort).
    - Seems good enough here; perhaps the generator should then create
      already the components?
    - BCCbySAT should handle components (see below), however it would be
      handy if the generator would already create the components (in a
      directory) as an option.

---

-1. One needs to read BicliqueLists
     - Same format as for general graphs, but with separator "|".
     - Since we are handling only graphs, not multigraphs (yet), automatically
       the covering-relation is assumed (multiple edges are ignored).
     - So that for ClauseLists, Graphs, BicliqueLists we have all
       conversions.

---

0. New program CNFstats.cpp

 - DONE Reading strict Dimacs.
 - DONE Reporting the dimacs-parameters.
 - DONE Then the clause-statistics.
 - DONE Then the variable-statistics.
 - DONE Then the basic conflict-graphs statistics V, E.
 - DONE Similar to the clause-statistics, a FreqStats-
   object for the degrees of the vertices of the
   conflict-graph is created and reported.
 - Output under "Variables" needs improvement:
  - the first three numbers need short explanations
  - the next six numbers need a better structuring
  - perhaps "trivial-pure" on one line
  - then "singular-nonsingular"
  - finally "1singular-non1singular".
 - Provide examples and explanations.

---

1. GSM.cpp:

TODOS:

-1. Output statistics
  - A log-file argument.
  - And a stats-file argument.
  - Actually it makes sense to have two stats-file: one for the components
    and one for the solver?
  - Or the solver-output outputs additionally to B also the component-index
    and V, E, n; that is better.

0. Fuzzing


 - Running the three search-directions and making sure the numerical result
   is the same.
    - DONE
      One concatenates them all in the input. With the command-line
      argument being their total number.
    - DONE (just removing them in the fuzzer-script, via the pid-suffix)
      After interruption, the files "SystemCalls_Popen_*" are not removed:
      one needs the option for the minisat-call to remove the files after
      interruption.
    - And these helper-files should be placed here into the directory
      Fuzzing?

 - Needs to be automatised:
   - Started with tests/F1, ... F5.
   - Output not as nice as when running individually.
   - And clean-up not complete.

 - Likely the name should be Fuzzer_GSM.


1. The option, that in case of no-improvement nothing is changed, is needed.
    - This is now the default.
    - It seems we don't need the option "replace in any case" ?

2. Better code-handling of replacement in sliced CNFs.

3. Add the usual comments to the output:
  - The parameter-values, version, etc.
  - With the usual formatting-options.

4. Handling dimacs and dqdimacs:
  - dqdimacs just needs a different to read, besides the possible
    outermost a-block, the dependencies, to fill it into the G-slided CNF.
  - dimacs could also be handled as a Gsliced CNF, just with all
    other-clauses being empty.
  - See QCNF2gCNF.cpp below.

---


2. BCC2SAT.cpp:

BUG:

The current form of "secondary symmetry-breaking" should be wrong:
One can not *forbid* the covering of an edge (when not partitioning),
only *not demanding* it.

The fuzzing needs to include a comparison with the pure ssb-form, that is,
using "-sb,+ssb".
For now this is done in a simple manner.

The problem is that currently apparently "-sb" implies "-ssb" ?
But "+ssb" makes sense on its own.

TODOS:

-3. Make +sbi the default.
    - Then we definitely need the efficient construction of the bccomp-graph.

-2. Ignore isolated vertices
    - To not disturb the reconstruction of solutions, just add unit-clauses
      to set them false for every biclique-box.
    - With the option for cleaned-up output, the clauses mentioning them
      are omitted.

-1. Test for bipartiteness, and in positive case use better representation
    - As an option: +-test.

0. Write application-tests
    - And/or some fuzzer.

1. Running symmetry-breaking even if optimum already reached
    - By default we always run all rounds.
    - But for better speed there should be an option to stop once the
      upper bound has been reached.
    - DONE (used for some other sb)
      UB isnt' used yet, and could be used here.

2. Special output for symmetry-breaking
  - Currently we run symmetry-breaking even if there is no output at all?
    Perhaps in this special case one only shows the symmetry-breaking results,
    nothing else (sb-rounds num_e-seeds + symmetry-breaking-section) ?
  - But perhaps this is better handled by a sb-results-only mode, that is,
    instead of "+- comments" we have:
     - all-comments
     - only-sb-comments
     - no-comments .

3. DONE
   Option for greedy symmetry-breaking;
   see Bicliques2SAT.hpp below.

4. Write an application which converts a solution to a biclique-cover
   - For the standard encoding, only V, E, B should be needed.

---

3. BCCbySAT.cpp:

TODOS:

-1. Reading the "# bcc=" line
  - When the comments contain this bcc-specification, check whether the
    final result matches this.

0. Systematic treatment of file-output
  - Three possibilities: stats, log, solution.
  - There should always be the option "t", for automatic name;
    this uses the same timestamp; this timestamp is part of the
    comments-output in any case.
  - All streams by default are null.
  - Perhaps we use "cout" for standard output, and then use
    &std::cout.
  - For solution=null, no minisat-solution is used (need to check whether
    we can tell that in the minisat-call).
  - But still all minisat-calls run; if superfluous runs are to be avoided,
    then


1. Renewal of output
  - Additional output in the comments:
     - timestamp
     - statistics on the graph (at least V, E)
     - summary-statistics on solving (at least on conflicts and time;
       count, standard-statistics, sum).
  - Review the addition of line-ends for log and stats.
  - Explain the special case where no unsat-test
    is needed due to the results of symmetry-breaking.
  - There needs to be an (algo)-)option for just computing bcc/bcp, without
    computing a solution:
     - Then solution=null (as above).
     - And if lower-bound and upper-bound coincide, then also
       no solution is needed.
     - This replaces the BC-algo-option.
     - Perhaps NS ("no-solution"), with "-+ns" (default -ns).
     - DONE (removed)
       We also have UB currently?? Seems out-dated.
     - Solution-output then is automatically null (error if not).


2. Currently the lower bound is just ignored (for downwards).
  - One needed perhaps a special return-type "conditionally exact" ?
  - A problem is that the solver-loop uses res.B, and not the bounds-
    object -- that needs update.
  - We need an option whether also for known exact-B one computes
    a solution or not.


3. As an option, split into the connected components.
    - Or should this be an independent program?
      We have CNFBCC and GSM?
      But likely CNFBCC should split into the components as well.
      So we need the option to handle components.

BUGS:

1.
Bicliques> ./GraphGen_debug grid 8 8 | ./BCCbySAT_debug 25,+0 -sb "" "" "" "" "" ""
# "./BCCbySAT_debug" "25,+0" "-sb" "" "" "" "" "" LOG
# ** Parameters **
# B                                     downwards 25 +0
# sb-options                            no-sb with-ssb
# pt-option                             cover
# di-option                             downwards
# so-option                             default-solver
# comments-option                       with-comments
# bicliques-option                      with-bicliques
# solver-timeout(s)                     2147483647
# statistics-output                     null
# log-output                            null
# ** Results **
BCCbySAT_debug: Bicliques2SAT.hpp:618: void Bicliques2SAT::Bounds::update_by_sb(Bicliques2SAT::Bounds::size_t): Assertion `sb + u > u' failed.
Aborted (core dumped)
Bicliques> cat LOG
Symmetry-breaking: index=0, stats= 0 : 18446744073709551615 0 0; 0; r-edges= 0

When requiring "+0", then +sb should be required.

---

4. CNFBCC.cpp:

1. Should be similar to BCCbySAT (above).
    - DONE logging should be handled in the same way.

2. One can not use in general the given n as an upper-bound, when using
   partition-mode.
    - See Bug 1 below.
    - One should check here whether the given CNF actually has at most one
      conflict between clauses, in which case one can use n -- otherwise
      we have only the simple general upper bounds (c-1).

BUGS:

-1. Inappropriate reaction yet when first run (for given B) is unsatisfiable.
  - The asserts at the end trigger.

0.
An instance where upper and lower bound coincide:

OLD:
Bicliques> cat temp/A_131_1623_1 | ./CNF2cg | ./BCCbySAT +0 nopre "" "" "" > OUT
CPU time              : 40.7075 s

With new (piped) form on server:
Bicliques> time cat temp/A_131_1623_1 | ./CNF2cg | ./BCCbySAT +0 nopre "" "" "" > OUT
real    2m42.009s
user    3m58.973s
sys     0m12.527s
> less OUT
|  Parse time:                  81.27 s                                       |
|  Simplification time:          7.95 s                                       |
restarts              : 1
conflicts             : 0              (0 /sec)
decisions             : 1              (0.00 % random) (0 /sec)
propagations          : 1220134        (13674 /sec)
conflict literals     : 0              (-nan % deleted)
Memory used           : 14899.69 MB
CPU time              : 89.2333 s
Why such a long total time??
Bicliques> time cat temp/A_131_1623_1 | ./CNF2cg | ./BCCbySAT +0 nopre "" "" "" > OUT_NEW
real    1m14.948s
user    1m47.713s
sys     0m7.851s
|  Parse time:                  36.70 s                                       |
|  Simplification time:          7.91 s                                       |
CPU time              : 44.6112 s


OLD:
Bicliques> time cat temp/A_131_1623_1 | ./CNFBCC nopre "" "" "" "" ""
real    1m54.284s
user    1m41.837s
sys     0m11.462s

With new form on server:
Bicliques> time cat temp/A_131_1623_1 | ./CNFBCC nopre "" "" "" "" "" > OUT2
real    2m47.329s
user    4m4.146s
sys     0m12.254s
Why so much slower now?
Apparently the hand-shaking takes more time?
Bicliques> time cat temp/A_131_1623_1 | ./CNFBCC nopre "" "" "" "" "" > OUT2_NEW
real    1m14.649s
user    1m47.538s
sys     0m7.527s



Storing on file on server:
Bicliques> time cat temp/A_131_1623_1 | ./CNF2cg | ./BCC2SAT 0 nopre "" "" "" > OUT.cnf
real    1m15.843s
user    1m12.755s
sys     0m3.090s
Bicliques> ls -l OUT.cnf
6123851055  OUT.cnf
Bicliques> time minisat -no-pre OUT.cnf
|  Parse time:                  31.96 s                                       |
|  Simplification time:          7.99 s                                       |
restarts              : 1
conflicts             : 0              (0 /sec)
decisions             : 1              (0.00 % random) (0 /sec)
propagations          : 1220134        (30537 /sec)
conflict literals     : 0              (-nan % deleted)
Memory used           : 14899.69 MB
CPU time              : 39.9554 s
real    0m45.164s
user    0m39.958s
sys     0m5.204s
Without storage:
Bicliques> time cat temp/A_131_1623_1 | ./CNF2cg | ./BCC2SAT 0 nopre "" "" "" | minisat -no-pre /dev/stdin
|  Parse time:                  42.71 s                                       |
|  Simplification time:          7.93 s                                       |
CPU time              : 50.6394 s
real    1m25.711s
user    2m4.683s
sys     0m8.415s

Far faster than BCCbySAT and CNFBCC.
One needs to see whether direct FILE*-output (without first calling
the ostream-output and storing this on string) is much faster.


1.
Bicliques> echo -e "p cnf 2 4\n1 2 0\n1 -2 0\n-1 -2 0\n-1 2 0\n" | ./CNFBCC_debug partition2 "" "" t
CNFBCC_debug: CNFBCC.cpp:126: int main(int, const char* const*): Assertion `res.rt != ResultType::init_unsat_sb and res.rt != ResultType::init_unsat and res.rt != ResultType::unknown' failed.

The start-value is not sufficient here, since one doesn't start with a
precise realisation.

2.
Bicliques> BRG "20*15,3" | ./CNFBCC nopre "" "" "" "" +1
p cnf 0 20
...


---

5. GCGeq.cpp:

TODOS:

1. Output showing the differences
2. Help should show the meaning of the return-codes.

---

6. Bicliques2SAT.hpp:

TODOS:

0. Upwards-search
   - Should work now -- tests needed.

1. UCP for BC2SAT

 This item needs UPDATE -- the main (simple) option is
   +- reduced boxes (or so)
 which in placed boxes only uses the variables needed, and also uses for
 the edge-availabilities only the available ones.
 This by default uses the old encoding, but can be changed to rename
 the variables.
 The unit-clauses are stated nevertheless, to make it easier
 to recover from a solution the biclique-cover.

(a) The class gets bloated, but for a start it seems easiest to develop
    the functionality in this (richer) context.

(b) Given and initial edge-placement via sb of type vei_t and an initial
    consistent bcc-frame F (either empty or obtained by complete previous
    processing), place the edges of sb in F, and perform complete UCP for F.

(c) A bcc-frame F contains for each 0 <= i < B:
  - the assigned vertices L, R;
    perhaps as sorted vectors; both are empty or both are non-empty;
  - the (other) possible vertices PL, PR;
    as long as L,R are empty, also PL, PR are empty, and then with the first
    edge PL, PR are assigned the other neighbours;
    with further edges only the common neighbours remain;
    this data only shrinks (after the initial setting), so perhaps also a
    sorted vector is best;
  - the edges watching this bc, as pairs (i,e), with 0 <= i < E and e in {0,1},
    for the direction (forward/backward).

(d) For each edge-index 0 <= i < E:
     - indication whether assigned to which biclique (with which polarity)
     - if unassigned, then two watched bicliques (with polarity; which
       can cover the edge)
    The two watched bicliques in "ladder- order" (updating advances
    in this order).

2. Implement partition1:
  - This linear form is available under LatinSquares.
  - At this time then the structure of BC2SAT needs to be improved.

3. More efficient symmetry-breaking

  - We need more control over the secondary symmetry-breaking, for example
    just a random order (independent of primary symmetry-breaking), so that
    we can experiment with different schemes.
  - The main scheme for primary symmetry-breaking now uses the
    bccomp-graph and computes in some way a large independent set.
  - One option should compute a maximum independent set.
  - Another option does not explicitly store the bccomp-graph (in case it
    is very large).

  - If we have a maximal sb-assignment, then every non-placed edge has at least
    one occupied biclique to go, so if there is at least one open biclique
    (which we denoted here by B > sb), then no further UCP is possible.
  - So basic UCP (combined with basic sb) just cleans up the occupied
    bicliques (keeping only the relevant vertices and related 2-clauses)
    and for every edge cleans up the list of available bicliques.
    If B > bcp, then no further unit-clauses can be derived.
    To enable recovering of the solution, all relevant unit-clauses are
    placed in the output.

    It seems best to create for all clause-creating functions another version
    which takes an sb-assignment as input.
  - One could then also always run "special UCP, for B = sb, seeing whether
    a decision can be reached here.


4. GCC compiler error CERR
  - When updating to GCC version 12 or later, activate the places with CERR
    (currently disabled due to compiler error)

---

7. DimacsTools.hpp:

TODOS:

-1. Variation of extract_gpart_strictqcnf, which extracts the
    global slice and the remainder into a pair of clause-lists
     - Every initial clause is read into a pair of ClauseSet,
       with the global literals and the remaining literals.
     - Using a pair or a struct? In any case, perhaps with the
       above order.
     - Do we need lexicographical order on these pairs?
       Perhaps, and then it seems the non-global part is more
       important (since fixed), and thus should indeed come first.
     - Perhaps a struct SClause (split-clause), with components
       O, G : Clause.
     - Typedef SClauseList (vector).
     - For the parameters we have the other variables, the global
       variables, and the clauses.
     - Perhaps a struct with components o, g, c, named s_dimacs_pars.
     - The pair then is SDimacsClauseList.
     - The meaning of o, g is simply the maximal index used by the
       respective variables; if first we have all o-variables, then all
       g-variables, one can also infer their numbers.
     - Alternatively one could use to DimacsClauseLists (with the same
       number of clauses). Perhaps this is more appropriate to express the
       nature of "slices" ?
       Then no new data structures are needed: equivality of the o-slice
       by direct comparison, etc.; looks better.
       So an SDimacsClauseList is then a pair of DimacsClauseList, with the
       second component the global slice.
       One could also use a tuple, or a vector?
     - The main operation (for now) is the gcg-equivalence of two
       SDimacsClauseList : the global slices have the same conflict-graph,
       the remaining-slices are equal.
     - This is simply implemented by first checking whether the o+c-parameters
       are equal, in which case then first the equality of the other-slice
       is checked, in which case then a nested loop over all pairs of g-clauses
       checks whether the corresponding pairs either have at least one conflict
       or have no conflict.
     - Similar to the computatio of ConflictGraphs::conflictgraph_bydef
       (using global complements of the global slices and checking for
       non-empty intersections).
     - The corresponding application, GCGeq, reads the two QCNFs and determines
       their equivalence.
     - We require for gcg-equivalence that the c-parameters are equal, and thus
       we can concatenate both inputs to standard input.
     - In case of inequality a precise witness needs to be output; so the
       equivalence-check needs to output an object which contains the
       witnesses.

0. Generalise extract_apart_strict2qcnf to handle arbitrary qcnf
   (extracting "global variables").

1. In the same way, generalise extract_apart_strict2qcnf to dqcnf.

3. DONE (some reports are needed)
   Directing a stream to stdin of minisat
   - DONE This is important for very large files (especially when used in
     parallel).
   - DONE The tool here to use is
     ( https://man7.org/linux/man-pages/man3/popen.3.html )
     #include <stdio.h>
     FILE *popen(const char *command, const char *type);
     int pclose(FILE *stream);
   - DONE The pclose-function returns the exit-status.
   - DONE Better to use std::FILE from cstdio
     https://en.cppreference.com/w/cpp/io/c/FILE
   - DONE (using template-parameters)
     Within C, C++, Posix, there doesn't seem to be a way, given
     a FILE*, to convert this into an ostream.
     Thus the file-output-function need to be duplicated: additionally
     to the C++-function also C-functions, outputting to FILE*.

4. skip_strict_eline : don't store the characters discarded.
   - Similarly in read_string_gline.

---

8. Disassemble.cpp

1. DONE Improve specification:
    - Are pure global variables eliminated?
      Only global literals occurring in trivial (single-clause)
      components are eliminated.
      The global variables in nontrivial components are exactly the ones from
      the original clauses, but renamed (in the order as they occur in the
      a-line).
    - What is the order of the components?
      Lexicographical order (using the given order of clauses).
    - What is the order of literals in the clauses?
      Standard order (not the original one).

2. We need a "global-only" mode:
    - A new option "+-full" is needed.
    - Only the A_-files, without the "A_".
    - Excluding cnf's with 1 variable.
      Perhaps this should be an option?

3. Should we add a file ".stats" ?
    - With statistics on the number of components etc.?
    - Seems useful.
    - For the global-only-mode, is it possible to run simply through all files?
     - A simple command-line loop "for F in *; do echo $F; done" ignores
       .stats.

4. We need, besides Disassemble.cpp, als Reassemble.cpp.

---

9. QCNF2gCNF.cpp:

TODOS:

1. Generalise to DQCNF
    - The set of global variables now is the intersection of the
      dependencies of all existential variables.
    - See GSM above.
    - Perhaps this should be a new program, DQCNF2gCNF.cpp ?

---

10. Generators.hpp

1. Providing a creation-mode, which creates only half of the edges
    - Currently for undirected graphs, every edge is printed twice.

2. Prove that bcp(crown(n)) = n (except for n=1).

3. What is bcp(grid(n,m)) ?

4. We should have the cnf-generation-functions for all provided
   graph-types.

---

11. GraphGen.cpp

1. Provide better documentation on output

2. Can we obtain the basic forms of random graphs from BRG?
   Or should they be provided here?

---

12. The generator for the TACAS-paper
  - At this time check whether the key-handling of BRG is up-to-date
    (LSRG likely contains the most up-to-date version).

---

13. Graphs.hpp

  - Graphs should have names (a string-member).
    The ==-test should ignore them.

---


In general:

 - good support for statistics
 - parallelisation.
