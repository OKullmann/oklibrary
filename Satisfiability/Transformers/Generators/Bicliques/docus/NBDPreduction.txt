1) Just subsumption-elimination (with empty variable-sequence)

Creating 10 "raw" clauses (that is, "u=unsorted") by BRG, translating into NOBOCONF,
and supressing the comments:

Bicliques> BRG "5*3,3;5*3,2" "u" "" | Dimacs2NOBOCONF.awk | awk '/^C/{next}{print}'
n  4
c  10
1:0 2:0 3:0 0
1:0 2:0 3:0 0
1:1 2:1 3:0 0
1:0 2:1 3:1 0
1:1 2:1 3:1 0
1:0 3:1 0
1:0 3:0 0
2:1 3:1 0
2:0 3:1 0
2:1 3:0 0

Since the clauses are
 - not tautological
 - do not contain duplicated literals
 - are sorted
(all this by construction), running NBDPreduction in most basic mode is just
sorting the clauses:

Bicliques> BRG "5*3,3;5*3,2" "u" "" | Dimacs2NOBOCONF.awk | NBDPreduction "" 0 0
Cnc            4 10
Cred-cl        0 0
Cred-aeds      0 0 0 0
n 4
c 10
1:0 3:0 0
1:0 2:0 3:0 0
1:0 2:0 3:0 0
2:1 3:0 0
1:1 2:1 3:0 0
1:0 3:1 0
2:0 3:1 0
2:1 3:1 0
1:0 2:1 3:1 0
1:1 2:1 3:1 0

The comment-lines yield:
 - nc : number of variables and clauses in original input
 - red-cl : number of tautological clauses and duplicated literals removed
 - red-aeds : DP-reduction (in total):
  a - added clauses (resolvents)
  e - eliminated clauses (clauses containing the DP-variable)
  d - duplicated clauses removed
  s - subsumed clauses removed.

The basic mode ("0" in the second argument) means "multi-clause-set", that is,
clause-multiplicities are considered.
Going to clause-set-mode removes the duplications:

Bicliques> BRG "5*3,3;5*3,2" "u" "" | Dimacs2NOBOCONF.awk | NBDPreduction "" 1 0
Cnc            4 10
Cred-ccl       0 1 0
Cred-aeds      0 0 0 0
n 4
c 9
1:0 3:0 0
1:0 2:0 3:0 0
2:1 3:0 0
1:1 2:1 3:0 0
1:0 3:1 0
2:0 3:1 0
2:1 3:1 0
1:0 2:1 3:1 0
1:1 2:1 3:1 0

We see that one duplicated clause was removed.
Adding subsumption-elimination:

Bicliques> BRG "5*3,3;5*3,2" "u" "" | Dimacs2NOBOCONF.awk | NBDPreduction "" 1 1
Cnc            4 10
Cred-ccl       0 1 0
Cred-aeds      0 0 0 4
n 4
c 5
1:0 3:0 0
2:1 3:0 0
1:0 3:1 0
2:0 3:1 0
2:1 3:1 0

Now 4 more clauses were removed.

A special case is using subsumption-elimination for multi-clause-mode:
Since subsumption-elimination contains elimination of duplicates, in order to make
this case relevant, now the idea is that subsumption-elimination only does eliminate
subsumption "introduced by the DP-reduction". This is achieved by making each original
clause unique by a spiking-literal with new variable, run usual clause-set DP-reduction
and subsumption-elimination, and at the end remove the spiking-literals again (without
contraction of clauses).

In this case, since no DP-reduction, this yields the same as "0 ":
Bicliques> BRG "5*3,3;5*3,2" "u" "" | Dimacs2NOBOCONF.awk | NBDPreduction "" 0 1
Cnc            4 10
Cred-cl        0 0
Cred-aeds      0 0 0 0
Cred-us        10
n 4
c 10
1:0 3:0 0
1:0 2:0 3:0 0
1:0 2:0 3:0 0
2:1 3:0 0
1:1 2:1 3:0 0
1:0 3:1 0
2:0 3:1 0
2:1 3:1 0
1:0 2:1 3:1 0
1:1 2:1 3:1 0

Here "red-us" means the number of literal-occurrences deleted by "unspiking".

Thus for the empty variable-sequence we have three useful modes: "0 0", "1 0", "1 1".

-----------------------------------------------------------------------------------

2) Reducing a single variable

a) The multi-clause-set
  k * {(0,0)}
  k * {(0,1)}
  k * {(0,2)}

yields 3k input-clauses and k^3 resolvents:

Bicliques> echo -e "0:0 0\n0:1 0\n0:2 0" > TEST.cnf
Bicliques> echo > TEMP; for (( k=1; k<=10; ++k )); do cat TEST.cnf >> TEMP; cat TEMP | ./NBDPreduction_debug 0 0 0 | head -n 5 | tr -s "\n" " "; echo; done; rm TEMP
Cnc 1 3 Cred-cl 0 0 Cred-aeds 1 3 0 0 n 1 c 1
Cnc 1 6 Cred-cl 0 0 Cred-aeds 8 6 0 0 n 1 c 8
Cnc 1 9 Cred-cl 0 0 Cred-aeds 27 9 0 0 n 1 c 27
Cnc 1 12 Cred-cl 0 0 Cred-aeds 64 12 0 0 n 1 c 64
Cnc 1 15 Cred-cl 0 0 Cred-aeds 125 15 0 0 n 1 c 125
Cnc 1 18 Cred-cl 0 0 Cred-aeds 216 18 0 0 n 1 c 216
Cnc 1 21 Cred-cl 0 0 Cred-aeds 343 21 0 0 n 1 c 343
Cnc 1 24 Cred-cl 0 0 Cred-aeds 512 24 0 0 n 1 c 512
Cnc 1 27 Cred-cl 0 0 Cred-aeds 729 27 0 0 n 1 c 729
Cnc 1 30 Cred-cl 0 0 Cred-aeds 1000 30 0 0 n 1 c 1000

Same with ("only internal") subsumption-elimination:
Bicliques> echo > TEMP; for (( k=1; k<=10; ++k )); do cat TEST.cnf >> TEMP; cat TEMP | ./NBDPreduction_debug 0 0 1 | head -n 6 | tr -s "\n" " "; echo; done; rm TEMP
Cnc 1 3 Cred-cl 0 0 Cred-aeds 1 3 0 0 Cred-us 3 n 1 c 1
Cnc 1 6 Cred-cl 0 0 Cred-aeds 8 6 0 0 Cred-us 24 n 1 c 8
Cnc 1 9 Cred-cl 0 0 Cred-aeds 27 9 0 0 Cred-us 81 n 1 c 27
Cnc 1 12 Cred-cl 0 0 Cred-aeds 64 12 0 0 Cred-us 192 n 1 c 64
Cnc 1 15 Cred-cl 0 0 Cred-aeds 125 15 0 0 Cred-us 375 n 1 c 125
Cnc 1 18 Cred-cl 0 0 Cred-aeds 216 18 0 0 Cred-us 648 n 1 c 216
Cnc 1 21 Cred-cl 0 0 Cred-aeds 343 21 0 0 Cred-us 1029 n 1 c 343
Cnc 1 24 Cred-cl 0 0 Cred-aeds 512 24 0 0 Cred-us 1536 n 1 c 512
Cnc 1 27 Cred-cl 0 0 Cred-aeds 729 27 0 0 Cred-us 2187 n 1 c 729
Cnc 1 30 Cred-cl 0 0 Cred-aeds 1000 30 0 0 Cred-us 3000 n 1 c 1000

Each final resolvent contains 3 spiking-literals (since combining exactly 3 input-clauses).

-----------------------------------------------------------------------------------

3) Checking commutativity modulo subsumption for boolean clause-sets

See Fuzzing_NBDPreduction_1.bash :
docus> time ./Fuzzing_NBDPreduction_1.bash
0:2829 1:5096 2:5206 3:8165 4:867 5:1468 6:4334 7:4277 8:1995 9:15894 10:9002 11:4045 12:4735 13:9269 14:16514 15:2629 16:4537 17:^C
real	350m25.056s user	350m21.814s sys	0m1.093s

docus> program=NBDPreduction time ./Fuzzing_NBDPreduction_1.bash | tee -a OUT
2067.96user 10.43system 34:25.98elapsed 100%CPU (0avgtext+0avgdata 337292maxresident)k
72inputs+1403264outputs (0major+5349276minor)pagefaults 0swaps

Investigating a bit the distribution of c:

docus> awk 'BEGIN{print "i c"} {for (i=1; i<= NF; ++i) {split($i, A, ":"); print A[1], A[2]}}' OUT > OUT.R
docus> R
> E=read.table("OUT.R", header=TRUE)
> summary(E$c)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
    867    2373    3668    5209    6174   32789
> library(summarytools)
> descr(E)
# shows heavy tail
> qqplot(rexp(1000), E$c, main = "QQ-Plot vs Exponential")
# good linearity

-----------------------------------------------------------------------------------

4) Checking commutativity modulo subsumption for boolean multi-clause-sets

First the same instances as above:

docus> clauseset=0 time ./Fuzzing_NBDPreduction_1.bash
0:2829 1:5112 2:5215 3:8190 4:867 5:1468 6:4342 7:4281 8:1995 9:15911 10:9008 11:4048 12:4751 13:9458 14:16557 15:2632 16:4555 17:^CCommand terminated by signal 2
26667.68user 0.70system 7:24:29elapsed 99%CPU (0avgtext+0avgdata 142140maxresident)k
4896inputs+28048outputs (16major+170803minor)pagefaults 0swaps

docus> program=NBDPreduction clauseset=0 time ./Fuzzing_NBDPreduction_1.bash | tee -a OUT2
2106.78user 11.18system 35:05.04elapsed 100%CPU (0avgtext+0avgdata 433348maxresident)k
0inputs+1412800outputs (0major+6077432minor)pagefaults 0swaps

docus> awk 'BEGIN{print "i c"} {for (i=1; i<= NF; ++i) {split($i, A, ":"); print A[1], A[2]}}' OUT2 > OUT2.R

Investigating where most clauses were added (compared to E from 3)):
> E2=read.table("OUT2.R", header=TRUE)
> summary(E2$c - E$c)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
   0.00    1.00    5.00   27.55   20.00 1414.00
      i     c
# maximum difference:
> E[443,]
443 442 27196
> E2[443,]
      i     c
443 442 28610


Similar to above, but higher n-value:
docus> program=NBDPreduction clauseset=0 nval=700 time ./Fuzzing_NBDPreduction_1.bash | tee -a OUT3
interrupted; without error until 238.
