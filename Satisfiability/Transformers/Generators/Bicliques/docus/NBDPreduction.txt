1) Just subsumption-elimination (with empty variable-sequence)

Creating 10 "raw" clauses (that is, "u=unsorted") by BRG, translating into NOBOCONF,
and supressing the comments:

Bicliques> BRG "5*3,3;5*3,2" "u" "" | Dimacs2NOBOCONF.awk | awk '/^C/{next}{print}'
n  4
c  10
1:0 2:0 3:0 0
1:0 2:0 3:0 0
1:1 2:1 3:0 0
1:0 2:1 3:1 0
1:1 2:1 3:1 0
1:0 3:1 0
1:0 3:0 0
2:1 3:1 0
2:0 3:1 0
2:1 3:0 0

Since the clauses are
 - not tautological
 - do not contain duplicated literals
 - are sorted
(all this by construction), running NBDPreduction in most basic mode is just
sorting the clauses:

Bicliques> BRG "5*3,3;5*3,2" "u" "" | Dimacs2NOBOCONF.awk | NBDPreduction "" 0 0
Cnc            4 10
Cred-cl        0 0
Cred-aeds      0 0 0 0
n 4
c 10
1:0 3:0 0
1:0 2:0 3:0 0
1:0 2:0 3:0 0
2:1 3:0 0
1:1 2:1 3:0 0
1:0 3:1 0
2:0 3:1 0
2:1 3:1 0
1:0 2:1 3:1 0
1:1 2:1 3:1 0

The comment-lines yield:
 - nc : number of variables and clauses in original input
 - red-cl : number of tautological clauses and duplicated literals removed
 - red-aeds : DP-reduction (in total):
  a - added clauses (resolvents)
  e - eliminated clauses (clauses containing the DP-variable)
  d - duplicated clauses removed
  s - subsumed clauses removed.

The basic mode ("0" in the second argument) means "multi-clause-set", that is,
clause-multiplicities are considered.
Going to clause-set-mode removes the duplications:

Bicliques> BRG "5*3,3;5*3,2" "u" "" | Dimacs2NOBOCONF.awk | NBDPreduction "" 1 0
Cnc            4 10
Cred-ccl       0 1 0
Cred-aeds      0 0 0 0
n 4
c 9
1:0 3:0 0
1:0 2:0 3:0 0
2:1 3:0 0
1:1 2:1 3:0 0
1:0 3:1 0
2:0 3:1 0
2:1 3:1 0
1:0 2:1 3:1 0
1:1 2:1 3:1 0

We see that one duplicated clause was removed.
Adding subsumption-elimination:

Bicliques> BRG "5*3,3;5*3,2" "u" "" | Dimacs2NOBOCONF.awk | NBDPreduction "" 1 1
Cnc            4 10
Cred-ccl       0 1 0
Cred-aeds      0 0 0 4
n 4
c 5
1:0 3:0 0
2:1 3:0 0
1:0 3:1 0
2:0 3:1 0
2:1 3:1 0

Now 4 more clauses were removed.

A special case is using subsumption-elimination for multi-clause-mode:
Since subsumption-elimination contains elimination of duplicates, in order to make
this case relevant, now the idea is that subsumption-elimination only does eliminate
subsumption "introduced by the DP-reduction". This is achieved by making each original
clause unique by a spiking-literal with new variable, run usual clause-set DP-reduction
and subsumption-elimination, and at the end remove the spiking-literals again (without
contraction of clauses).

In this case, since no DP-reduction, this yields the same as "0 ":
Bicliques> BRG "5*3,3;5*3,2" "u" "" | Dimacs2NOBOCONF.awk | NBDPreduction "" 0 1
Cnc            4 10
Cred-cl        0 0
Cred-aeds      0 0 0 0
Cred-us        10
n 4
c 10
1:0 3:0 0
1:0 2:0 3:0 0
1:0 2:0 3:0 0
2:1 3:0 0
1:1 2:1 3:0 0
1:0 3:1 0
2:0 3:1 0
2:1 3:1 0
1:0 2:1 3:1 0
1:1 2:1 3:1 0

Here "red-us" means the number of literal-occurrences deleted by "unspiking".

Thus for the empty variable-sequence we have three useful modes: "0 0", "1 0", "1 1".

-----------------------------------------------------------------------------------

2) Reducing a single variable

a) The multi-clause-set
  k * {(0,0)}
  k * {(0,1)}
  k * {(0,2)}

yields 3k input-clauses and k^3 resolvents:

Bicliques> echo -e "0:0 0\n0:1 0\n0:2 0" > TEST.cnf
Bicliques> echo > TEMP; for (( k=1; k<=10; ++k )); do cat TEST.cnf >> TEMP; cat TEMP | ./NBDPreduction_debug 0 0 0 | head -n 5 | tr -s "\n" " "; echo; done; rm TEMP
Cnc 1 3 Cred-cl 0 0 Cred-aeds 1 3 0 0 n 1 c 1
Cnc 1 6 Cred-cl 0 0 Cred-aeds 8 6 0 0 n 1 c 8
Cnc 1 9 Cred-cl 0 0 Cred-aeds 27 9 0 0 n 1 c 27
Cnc 1 12 Cred-cl 0 0 Cred-aeds 64 12 0 0 n 1 c 64
Cnc 1 15 Cred-cl 0 0 Cred-aeds 125 15 0 0 n 1 c 125
Cnc 1 18 Cred-cl 0 0 Cred-aeds 216 18 0 0 n 1 c 216
Cnc 1 21 Cred-cl 0 0 Cred-aeds 343 21 0 0 n 1 c 343
Cnc 1 24 Cred-cl 0 0 Cred-aeds 512 24 0 0 n 1 c 512
Cnc 1 27 Cred-cl 0 0 Cred-aeds 729 27 0 0 n 1 c 729
Cnc 1 30 Cred-cl 0 0 Cred-aeds 1000 30 0 0 n 1 c 1000

Same with ("only internal") subsumption-elimination:
Bicliques> echo > TEMP; for (( k=1; k<=10; ++k )); do cat TEST.cnf >> TEMP; cat TEMP | ./NBDPreduction_debug 0 0 1 | head -n 6 | tr -s "\n" " "; echo; done; rm TEMP
Cnc 1 3 Cred-cl 0 0 Cred-aeds 1 3 0 0 Cred-us 3 n 1 c 1
Cnc 1 6 Cred-cl 0 0 Cred-aeds 8 6 0 0 Cred-us 24 n 1 c 8
Cnc 1 9 Cred-cl 0 0 Cred-aeds 27 9 0 0 Cred-us 81 n 1 c 27
Cnc 1 12 Cred-cl 0 0 Cred-aeds 64 12 0 0 Cred-us 192 n 1 c 64
Cnc 1 15 Cred-cl 0 0 Cred-aeds 125 15 0 0 Cred-us 375 n 1 c 125
Cnc 1 18 Cred-cl 0 0 Cred-aeds 216 18 0 0 Cred-us 648 n 1 c 216
Cnc 1 21 Cred-cl 0 0 Cred-aeds 343 21 0 0 Cred-us 1029 n 1 c 343
Cnc 1 24 Cred-cl 0 0 Cred-aeds 512 24 0 0 Cred-us 1536 n 1 c 512
Cnc 1 27 Cred-cl 0 0 Cred-aeds 729 27 0 0 Cred-us 2187 n 1 c 729
Cnc 1 30 Cred-cl 0 0 Cred-aeds 1000 30 0 0 Cred-us 3000 n 1 c 1000

Each final resolvent contains 3 spiking-literals (since combining exactly 3 input-clauses).

-----------------------------------------------------------------------------------

3) Checking commutativity modulo subsumption for boolean clause-sets

See Fuzzing_NBDPreduction_1.bash :
docus> time ./Fuzzing_NBDPreduction_1.bash
UPDATING XXX
0:2829 1:5096 2:5206 3:8165 4:867 5:1468 6:4334 7:4277 8:1995 9:15894 10:9002 11:4045 12:4735 13:9269 14:^C
real	705m22.246s
user	705m16.176s
sys	0m4.791s

docus> program=NBDPreduction time ./Fuzzing_NBDPreduction_1.bash
ocus> program=NBDPreduction time ./Fuzzing_NBDPreduction_1.bash
TO BE UPDATED XXX
0:2829 1:5096 2:5206 3:8165 4:867 5:1468 6:4334 7:4277 8:1995 9:15894 10:9002 11:4045 12:4735 13:9269 14:16514 15:2629 16:4537 17:13582 18:4199 19:2982 20:6163 21:4660 22:2596 23:3116 24:3403 25:1630 26:1493 27:1246 28:6838 29:4631 30:2645 31:1987 32:19824 33:29275 34:3346 35:4267 36:1875 37:6914 38:4069 39:1304 40:7932 41:2413 42:4662 43:10511 44:4598 45:7642 46:2549 47:5292 48:2234 49:2107 50:1814 51:6553 52:2335 53:10024 54:3423 55:3477 56:2697 57:3196 58:1059 59:1661 60:2919 61:5838 62:1238 63:5028 64:5363 65:3039 66:11832 67:4667 68:3876 69:2807 70:2072 71:2335 72:13227 73:6655 74:1928 75:5262 76:1212 77:2288 78:13892 79:2147 80:3565 81:3490 82:1578 83:2993 84:2141 85:1529 86:2148 87:3047 88:1524 89:1786 90:6355 91:3651 92:3455 93:1973 94:2333 95:2764 96:17476 97:4197 98:3663 99:1441 100:9836 101:7054 102:1967 103:5522 104:2758 105:2426 106:3920 107:4271 108:3996 109:3747 110:2388 111:1543 112:2001 113:3427 114:5740 115:4981 116:1923 117:10707 118:2269 119:4160 120:1473 121:6744 122:3480 123:7481 124:2496 125:3878 126:3789 127:7085 128:5973 129:2111 130:4326 131:3689 132:4473 133:17081 134:1845 135:3261 136:2045 137:2080 138:2806 139:3063 140:9989 141:2947 142:7489 143:1785 144:3014 145:3373 146:2725 147:3919 148:8751 149:15651 150:3816 151:2329 152:2352 153:13112 154:6403 155:3082 156:1654 157:5568 158:5780 159:4385 160:6238 161:10179 162:2457 163:1288 164:3369 165:4134 166:4218 167:6936 168:1441 169:8505 170:17012 171:6027 172:3203 173:7358 174:21908 175:11567 176:3334 177:1296 178:2230 179:3145 180:8283 181:6753 182:8647 183:2316 184:7743 185:4802 186:2408 187:7662 188:1478 189:4724 190:1981 191:3939 192:2963 193:8481 194:2302 195:19824 196:14229 197:18384 198:4239 199:2821 200:11690 201:3375 202:5666 203:9401 204:19443 205:2501 206:2749 207:3025 208:3442 209:1715 210:5285 211:3397 212:8644 213:5536 214:2618 215:2645 216:4600 217:9566 218:7660 219:6284 220:4177 221:7115 222:5118 223:4523 224:7292 225:0 Command exited with non-zero status 1
2780.33user 22.49system 47:01.10elapsed 99%CPU (0avgtext+0avgdata 14131028maxresident)k
2226944inputs+322848outputs (266245major+18583175minor)pagefaults 0swaps

This on a 16GB machine.
