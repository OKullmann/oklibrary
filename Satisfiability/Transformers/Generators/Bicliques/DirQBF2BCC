#!/usr/bin/env bash
# Oliver Kullmann, 23.6.2023 (Swansea)
# Copyright 2023 Oliver Kullmann
# This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
# it and/or modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation and included in this library; either version 3 of the
# License, or any later version. */

# Creating the QBF2BCC corpus

# USAGE:

# DirQBF2BCC qdimacs.zip


# TODOS:
# 0. DONE Delete all .-files/directories.
# 1. DONE Should we remove the nested directory in QBF2BCC ?
#    Yes, otherwise we have to handle this unknown name.
# 2. Update the call of disprog to "global-only mode".


set -o errexit
set -o nounset

program="DirQBF2BCC"
errorm="ERROR[${program}]:"
version="0.3.1"

archive="$1"

: ${directory:="QBF2BCC"}
: ${filetype:="*.qdimacs.gz"}
: ${log_general:="LOG"}
: ${log_remove:="LOG_remove"}
: ${log_rename:="LOG_rename"}
: ${disprog:=~/oklibrary/Satisfiability/Transformers/Generators/Bicliques/Disassemble}

date > ${log_general}
echo "${program} ${version}" >> ${log_general}
echo "archive=\"${archive}\"" >> ${log_general}
echo "directory=\"${directory}\"" >> ${log_general}
echo "filetyp=\"${filetype}\"" >> ${log_general}
echo "disassembler=\"${disprog}\"" >> ${log_general}
ls -l ${archive} >> ${log_general}
echo >> ${log_general}

patterna="*.zip"
if ! [[ $1 == $patterna ]]; then
  echo $errorm "Argument \"$1\" not a .zip-file."
  exit 1
fi

if [[ -e $directory ]]; then
  echo $errorm "Directory \"${directory}\" already exists."
  exit 1
fi

echo -n "unzip: " | tee -a ${log_general}
time1="$(date +%s)"
unzip -q -d QBF2BCC ${archive}
time2="$(date +%s)"
echo $[ ${time2} - ${time1} ] "s" | tee -a ${log_general}

echo -n "remove: "
echo "rm ${directory}/__MACOSX" > ${log_remove}
rm -r ${directory}/__MACOSX

cd ${directory}
subdir="$(ls)"
mv ${subdir}/* .
cd ${subdir}
echo "git:" >> ../../${log_general}
git log | head -3 >> ../../${log_general}
echo >> ../../${log_general}
find -path './.*' -delete
cd ..
rmdir ${subdir}
cd ..

echo "removed level \"${subdir}\" and hidden content" >> ${log_remove}
shopt -s globstar dotglob
count_removed=0
for file in ${directory}/**/*; do
  if ! [[ -f ${file} ]]; then continue; fi
  if ! [[ ${file} == ${filetype} ]]; then
    echo "rm ${file}" >> ${log_remove}
    rm ${file}
    ((++count_removed))
  fi
done
time3="$(date +%s)"
echo $[ ${time3} - ${time2} ] "s"
echo "remove:" $[ ${time3} - ${time2} ] "s" >> ${log_general}
echo "#removed: ${count_removed}" | tee -a ${log_general}
echo >> ${log_general}

echo -n "processing \"${filetype}\"" | tee -a ${log_general}
echo
count_qdimacs=0
count_empty=0
count_nd=0
count_rename=0
for file in ${directory}/**/${filetype}; do

  gunzip ${file}
  base="$(dirname ${file})"
  name="$(basename ${file} .gz)"
  fullname="${base}/${name}"
  if ! [ -s $fullname ]; then
    echo "empty: rm ${fullname}" >> ${log_remove}
    rm ${fullname}
    ((++count_empty))
  else
    read -n1 char < $fullname
    patternfirst="cp"
    if ! [[ $patternfirst =~ $char ]]; then
      echo "not DIMACS: rm ${fullname}" >> ${log_remove}
      rm ${fullname}
      ((++count_nd))
    else # only this part of the program is special for bcc-processing
      newname="$(${disprog} ${fullname} ++)"
      rm ${fullname}
      if ! [ ${fullname} = ${newname} ]; then
        echo "${fullname} -> ${newname}" >> ${log_rename}
        ((++count_rename))
      fi
      ((++count_qdimacs))
      printf "\r%d" ${count_qdimacs}
    fi
  fi

done
echo
time4="$(date +%s)"
echo -n "process:"
echo " "$[ ${time4} - ${time3} ] "s" | tee -a ${log_general}
echo "#qdimacs: ${count_qdimacs}" | tee -a ${log_general}
echo "#empty: ${count_empty}" | tee -a ${log_general}
echo "#not-DIMACS: ${count_nd}" | tee -a ${log_general}
echo "#rename: ${count_rename}" | tee -a ${log_general}

echo >> ${log_general}
echo "total:" $[ ${time4} - ${time1} ] "s" | tee -a ${log_general}
