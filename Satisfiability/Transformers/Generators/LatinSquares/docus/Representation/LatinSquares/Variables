// Oliver Kullmann, 24.8.2020 (Swansea)
/* Copyright 2020 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

A) UNREDUCED

For each latin square 0 <= p < k, each field 0 <= i, j < N and each value
0 <= eps < N, there is a (boolean) variable

  enc(i,j,eps,p),

with the meaning: field (i,j) of ls p carries value eps.
This makes N^2 * N = N^3 variables per latin square, for the "full form".
In total that makes

  nls = k * N^3.

(See mols_unred_nls(N,k) in LatinSquares.mac.)


B) REDUCED

In case of "reduced form", the first ls (p=0) is (fully) reduced, the others
are "half-reduced", that is, only the first row (not the first column) is
required to be in standard form:

The following old ls-variables are set:

  first row has value j for column j, for all p:
    enc(0,j,j,p) -> true for all 0 <= p < k and 0 <= j < N

  first column has value i for row i, for p=0:
    enc(i,0,i,0) -> true for all 0 <= j < N.

This yields for the ls-variables:

  first row has no value different from j for column j, for all p
  (due to value-amo):
    enc(0,j,j',p) -> false for all j and j' != j
  all columns j don't have value j for non-first rows i, for all p
  (due to column-amo):
    enc(i,j,j,p)  -> false for all i != 0

  first column has no value different from i for row i, for p=0
  (due to value-amo):
    enc(i,0,i',0) -> false for all i' != i
  all rows i don't have value i for non-first columns j, for p=0
  (due to row-amo):
    enc(i,j,i,0)  -> false for all j != 0.

Finally, due to euler-amo, the diagonal-pairs are forbidden (all euler-squares
have in the first row the diagonal realised), and since for p=0 the first
column is standardised, that means

  first column has not value i for row i, for p != 0:
    enc(i,0,i,p) -> false for all i != 0, p != 0.


So the new ls-variables enc(i,j,eps,p) (the remaining ones) for N >= 3 are:

  p = 0:
    i, j != 0,
    eps != i, j

  p >= 1:
    i != 0,
    eps != j
    eps != i for j=0

In more details, for the ls-variables we have the following basic situations:

First ls (p=0):

  Only the inner square, of size (N-1)*(N-1), for i, j >= 1.

  There are (N-1)^2 = N^2 - 2N + 1 fields:

    The diagonal-fields i=j have N-1 variables
      enc(i,j, eps, 0) (namely all but eps = i);
    there are N-1 such fields.

    The non-diagonal-fields i!=j have N-2 variables
      enc(i,j, eps, 0) (namely all but eps = i, j);
    there are (N-1)^2 - (N-1) = (N-1) * (N-2) such fields.

  In total we thus have
    nbls1 = (N-1)*(N-1) + (N-1)*(N-2)*(N-2)
  variables, which is
    nbls1 = (N-1) ((N-1) + (N-2)^2) = (N-1) (N-1+N^2-4N+4) = (N-1)(N^2-3N+3).

  All rows i >= 1 and all columns j >= 1 have N-1 values eps occurring,
  with value 0 always occurring, and all other values eps != i/j occurring
  N-2 times (in all columns/rows >= 1 except j/i).
  That makes variables per row/column (N-1) + (N-2)(N-2),
  which makes altogether (N-1) ((N-1) + ((N-2)^2) variables
  (as nbls1 above).

All other ls (p >= 1):

  We have a rectangle with (N-1) rows (i >= 1) and N columns (j >= 0).

  There are (N-1)*N = N^2 - N fields:

    The fields i of the first column (j=0) have N-2 variables
      enc(i,j, eps, p) (namely all but eps = 0, i);
    there are N-1 such fields.

    All other fields j!=0 have N-1 variables
      enc(i,j, eps, p) (namely all but eps = j);
    there are N*(N-1) - (N-1) = (N-1)^2 such fields.

  In total thus there are
    nbls2 = (N-1)*(N-2) + (N-1)^3 = (N-1)(N-2 + (N-1)^2)
          = (N-1)*(N^2-N-1)
  variables in such a ls.

  All rows i >= 1 have all N values eps occurring, with every value except i
  occurring N-1 times, and value i occurring N-2 times.
  That makes (N-1)*((N-1)*(N-1) + (N-2)) variables (nbls2 as above).

  All columns j >= 0 have N-1 values occurring, namely all values except j.
  For column j = 0, every of the N-1 values occurs N-2 times.
  For all columns j >= 1, each of the N-1 values occurs N-1 times.
  That makes (N-1)*(N-2) + (N-1)*(N-1)*(N-1) (nbls2 as above).

  In total we get

    nls = nbls1 + (k-1)*nbls2
        = (N-1) ((N-1) + (N-2)^2) + (k-1) (N-1) (N^2-N-1)
        = (N-1) (N-1 + (N-2)^2 + (k-1)(N^2-N-1))
        = (N-1) (kN^2 - (k+2)N - k+4)
        = kN^3 - (2k+2)N^2 + 6N + k-4.

