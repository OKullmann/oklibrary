> ./Mols 10 1 f "" ""
Output to file "MOLS2SAT_BASIC_10_1_f_fP.dimacs".

Finding one satisfiable assignment is very easy for all solvers.


A) Running SplitViaOKsolver:

> SplittingViaOKsolver -D50 MOLS2SAT_BASIC_10_1_f_fP.dimacs SplittingViaOKsolver in version 0.1.15 started.
Created directory
  SplitViaOKsolver_D50MOLS2SAT_BASIC_10_1_f_fPdimacs_2021-01-21-181433.
> cat SplitViaOKsolver_D50MOLS2SAT_BASIC_10_1_f_fPdimacs_2021-01-21-181433/Result
s UNKNOWN
c sat_status                            2
c initial_maximal_clause_length         10
c initial_number_of_variables           1000
c initial_number_of_clauses             13800
c initial_number_of_literal_occurrences 30000
c number_of_initial_unit-eliminations   0
c reddiff_maximal_clause_length         0
c reddiff_number_of_variables           0
c reddiff_number_of_clauses             0
c reddiff_number_of_literal_occurrences 0
c number_of_2-clauses_after_reduction   13500
c running_time(sec)                     2.1
c number_of_nodes                       299
c number_of_single_nodes                0
c number_of_quasi_single_nodes          0
c number_of_2-reductions                0
c number_of_pure_literals               0
c number_of_autarkies                   0
c number_of_missed_single_nodes         0
c max_tree_depth                        23
c proportion_searched                   0.000000e+00
c proportion_single                     0.000000e+00
c total_proportion                      0
c number_of_table_enlargements          0
c number_of_1-autarkies                 0
c number_of_new_2-clauses               0
c maximal_number_of_added_2-clauses     0
c file_name                             MOLS2SAT_BASIC_10_1_f_fP.dimacs
c splitting_directory                   SplitViaOKsolver_D50MOLS2SAT_BASIC_10_1_f_fPdimacs_2021-01-21-181433/Instances
c splitting_cases                       150
> MProcessSplitViaOKsolver SplitViaOKsolver_D50MOLS2SAT_BASIC_10_1_f_fPdimacs_2021-01-21-181433/
MProcessSplitViaOKsolver in version 0.1.2 started.
Using solver-call "minisat-2.2.0 ".
Created new processing-directory "MProcess_SplitViaOKsolver_D50MOLS2SAT_BASIC_10_1_f_fPdimacs_2021-01-21-181433_2021-01-21-181641"
> make -j 40
echo -e "\nBegin run, PID=60921" >> Log
echo "Parallel: j=40" >> Log
    ELAPSED
      00:01
ExtractMinisat header-only >> SubinstanceStatistics
unsat:0, 0s; sat:150, 1.64401s; unknown:0, 0s

D=60:
c running_time(sec)                     7.8
c number_of_nodes                       1139
c number_of_single_nodes                0
c number_of_quasi_single_nodes          0
c number_of_2-reductions                0
c number_of_pure_literals               0
c number_of_autarkies                   0
c number_of_missed_single_nodes         0
c max_tree_depth                        23
c proportion_searched                   0.000000e+00
c proportion_single                     0.000000e+00
c total_proportion                      0
c number_of_table_enlargements          0
c number_of_1-autarkies                 0
c number_of_new_2-clauses               0
c maximal_number_of_added_2-clauses     0
c file_name                             MOLS2SAT_BASIC_10_1_f_fP.dimacs
c splitting_directory                   SplitViaOKsolver_D60MOLS2SAT_BASIC_10_1_f_fPdimacs_2021-01-21-181819/Instances
c splitting_cases                       570
> make -j40
echo -e "\nBegin run, PID=67131" >> Log
echo "Parallel: j=40" >> Log
    ELAPSED
      00:02
ExtractMinisat header-only >> SubinstanceStatistics
unsat:0, 0s; sat:570, 5.91328s; unknown:0, 0s

D=70:
> make -j40
echo -e "\nBegin run, PID=86770" >> Log
echo "Parallel: j=40" >> Log
    ELAPSED
      00:04
ExtractMinisat header-only >> SubinstanceStatistics
unsat:0, 0s; sat:1470, 15.3315s; unknown:0, 0s

D=80:
> make -j40
echo -e "\nBegin run, PID=32395" >> Log
echo "Parallel: j=40" >> Log
    ELAPSED
      00:07
ExtractMinisat header-only >> SubinstanceStatistics
unsat:0, 0s; sat:2310, 23.9558s; unknown:0, 0s

D=90:
> make -j40
echo -e "\nBegin run, PID=53821" >> Log
echo "Parallel: j=40" >> Log
    ELAPSED
      00:39
ExtractMinisat header-only >> SubinstanceStatistics
unsat:0, 0s; sat:13860, 136.263s; unknown:0, 0s

D=100:
> make -j40
echo -e "\nBegin run, PID=72119" >> Log
echo "Parallel: j=40" >> Log
    ELAPSED
      01:03
ExtractMinisat header-only >> SubinstanceStatistics
unsat:0, 0s; sat:22680, 218.349s; unknown:0, 0s

Up to this level, only very easy satisfiable instances are created.


B) Finding hardest instantiations

B1) tawSolver:

# > ./MaxNLSRG 10 0.44 10000
# New MAX: 54609 10
# c  e-seeds                              0 6 1 0 1 1 1 1000 440 0 0 1611340469753583556 0
# > ./MaxNLSRG 10 0.45 10000
# New MAX: 9460 10
# c  e-seeds                              0 6 1 0 1 1 1 1000 450 0 0 1611340483483808734 0
# > ./MaxNLSRG 10 0.45 1000000
# New MAX: 5241649 20
# c  e-seeds                                0 6 1 0 1 1 1 1000 450 0 0 1611800345265824487 0
# > ./MaxNLSRG 10 0.46 10000
# New MAX: 1999703 20
# c  e-seeds                              0 6 1 0 1 1 1 1000 460 0 0 1611339332129932190 1
# > ./MaxNLSRG 10 0.46 1000000
# New MAX: 6848475 20
# c  e-seeds                              0 6 1 0 1 1 1 1000 460 0 0 1611458790964897079 0
# > ./MaxNLSRG 10 0.47 10000
# New MAX: 39867 10
# c  e-seeds                              0 6 1 0 1 1 1 1000 470 0 0 1611339065016309499 0
# > ./MaxNLSRG 10 0.47 1000000
# New MAX: 2405586 10
# c  e-seeds                              0 6 1 0 1 1 1 1000 470 0 0 1611589777738319950 0
# > ./MaxNLSRG 10 0.48 10000
# New MAX: 130944 10
# c  e-seeds                              0 6 1 0 1 1 1 1000 480 0 0 1611338036576894773 0
# > ./MaxNLSRG 10 0.49 10000
# New MAX: 107269 20
# c  e-seeds                              0 6 1 0 1 1 1 1000 490 0 0 161133755631# 4921204 0
# > ./MaxNLSRG 10 0.5 10000
# New MAX: 57235 20
# c  e-seeds                              0 6 1 0 1 1 1 1000 500 0 0 1611334347460096632 0
# > ./MaxNLSRG 10 0.51 10000
# New MAX: 18280 10
# c  e-seeds                              0 6 1 0 1 1 1 1000 510 0 0 1611336644181158503 2
# > ./MaxNLSRG 10 0.52 10000
# New MAX: 11857 20
# c  e-seeds                              0 6 1 0 1 1 1 1000 520 0 0 1611337618427629727 0
# > ./MaxNLSRG 10 0.53 10000
# New MAX: 17198 10
# c  e-seeds                              0 6 1 0 1 1 1 1000 530 0 0 1611337419477060661 1
# > ./MaxNLSRG 10 0.54 10000
# New MAX: 22727 20
# c  e-seeds                              0 6 1 0 1 1 1 1000 540 0 0 1611337531125471991 2
# > ./MaxNLSRG 10 0.55 10000
# New MAX: 7359 20
# c  e-seeds                              0 6 1 0 1 1 1 1000 550 0 0 1611340341623574428 0
# > ./MaxNLSRG 10 0.56 10000
# New MAX: 4051 20
# c  e-seeds                              0 6 1 0 1 1 1 1000 560 0 0 1611340803014562822 14

For lower density the spread seems much higher: average is lower, but max is higher (this should come from rare, but hard unsatisfiable problems for low densities). Looks basically similar to random k-SAT.


Running with other solvers:
> ./NLSRGrep 10 0.44 1611340469753583556 0 > Hard0.cnf
> ./NLSRGrep 10 0.45 1611800345265824487 0 > Hard1.cnf
> ./NLSRGrep 10 0.46 1611458790964897079 0 > Hard2.cnf

are trivial for minisat-2.2.0 and OKsolver2002.

Interestingly, ttawSolver has a signicantly smaller node-count than tawSolver
on Hard0, Hard2, while the node-count on Hard1 is significantly higher!


B2) OKsolver:

# > command2MNLSRG=OKsolver2002 ./MaxNLSRG 10 0.45 1000000
XXX
