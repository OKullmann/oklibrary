Oleg Zaikin, 24.12.2020 (Swansea)
Copyright 2020 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version.

Documentation for LSRG.cpp

Example usage for creating two latin squares of order 10, with a
seed-sequence "0" (using the debug-version):

Random> ./LSRG_debug 10 2 0
 ...
c version                               "0.4.0"
 ...
c ** Parameters **
c command-line                          "./LSRG_debug" "10" "2" "0"
c N                                     10
c m                                     2
c output                                "-cout"
c num_e-seeds                           1
c  e-seeds                              0
c RESULT: 1017 iterations
c 17 of them additional iterations
c 107 of them produced proper Latin squares
2 9 8 7 5 6 0 3 4 1
3 0 6 4 8 5 1 9 2 7
4 6 1 9 3 2 8 5 7 0
9 1 4 8 2 0 7 6 3 5
8 2 0 1 6 3 4 7 5 9
5 7 2 3 0 8 6 1 9 4
6 4 3 5 7 1 9 2 0 8
1 5 7 0 4 9 2 8 6 3
7 8 5 2 9 4 3 0 1 6
0 3 9 6 1 7 5 4 8 2

c RESULT: 1037 iterations
c 37 of them additional iterations
c 99 of them produced proper Latin squares
0 9 7 3 4 8 5 6 1 2
1 2 9 6 3 5 0 8 7 4
5 4 3 1 0 2 9 7 8 6
6 8 4 0 1 3 7 5 2 9
4 7 1 2 8 9 6 0 5 3
9 0 8 4 6 7 2 1 3 5
2 5 0 9 7 4 8 3 6 1
7 3 6 5 2 1 4 9 0 8
8 1 2 7 5 6 3 4 9 0
3 6 5 8 9 0 1 2 4 7



Details:

The program implements the Jacobson-Matthews algorithm for generating random Latin
squares. This algorithm was published in:
Mark T. Jacobson, Peter Matthews. Generating uniformly distributed random latin
squares // Journal of Combinatorial Designs. 1996.

The main program's inputs are N (order) and m (the required number of random Latin
squares). m times a random Latin square of order N is generated as follows:

At the beginning a Latin square of order N is constructed. It can be done via
various approaches, by now it is done by constructing a multiplication table for a
cyclic group.

Order N is considered, and {0,1,...,N-1} are the possible values of a Latin
square's cells. The row and column-sum of a Latin square is thus
  S = 1 + ... + N-1 = N * (N-1) / 2.

The condition on cells is relaxed, allowing an improper Latin square as follows:
1) Possible entries are from V:={0,...,N-1} union {(a,b,c)}, where
     (a,b,c) in V^3, c notin {a,b}.
2) The special entry occurs at most once.
3) If a row or column does not contain a special entry, then the (ordinary) values
   are exactly those from V (all occurring, none twice).
4) If a row or column contains (a,b,c), then there are two entries c,
   and the N-3 values of the remaining cells are exactly those from V - {a,b,c}.
   (Thus when interpreting "(a,b,c)" as contributing "a+b-c" to a sum, then every
    row- and every column-sum equals S.)

N^3 moves are performed, each of which consists of identifying a 2 * 2 subtable
and modifying its cells.

In the case of proper Latin square the move is:
1) Randomly choose row i and column j.
2) Randomly choose b from V such that b != c where c is the current entry of (i,j).
3) In row i find index j2 of entry b, replace b by c.
4) In column j find index i2 of entry b, replace b by c.
5) Assign entry b to cell (i,j).
6) If in both row i2 and column j2 all entries are distinct, assign entry b to cell
   (i2,j2), otherwise assign to it the special entry (a,b,c) where a is the current
   entry of cell (i2,j2).

In the case of improper Latin square assume that the special entry (a,b,c) is
assigned to cell (i,j), then the move is:
1) Randomly choose v,z from {a,b} such that v!=z.
2) Assign entry v to cell (i,j).
3) Assign to y such an entry from V that occurring twice in row i.
4) In row i randomly choose one of two duplicate entries and replace it by z,
   assign the index of chosen entry to j2.
5) In column j randomly choose one of two duplicate entries and replace it by z,
   assign the index of chosen entry to i2.
6) If in both row i2 and column j2 all entries are distinct, assign entry y to cell
   (i2,j2), otherwise assign to it the special entry (x,y,z) where x is the current
   entry of cell (i2,j2).

If after N^3 moves a proper Latin square is obtained, it becomes the final random
Latin square of order N. Otherwise, additional moves are done until a proper Latin
square is obtained.

Remark. After a move, a proper Latin square can become improper and vice
versa.


XXX Documentation of usage, and documentation of special values
XXX this is actually the real documentation -- the above is additional information
