Oleg Zaikin, 24.12.2020 (Swansea)
Copyright 2020, 2021 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version.

Documentation for LSRG.cpp

I Examples

In the following we show only relevant parts of the output.

Basic help can be obtained by

Random> ./LSRG -h

while information on the program is obtained by

Random> ./LSRG -v

The executable "Random/LSRG" is optimised, while "Random/LSRG_debug"
is the debug-version.


Example usage for creating a latin squares of order 10, with a
seed-sequence "0" (using the debug-version), output to standard output:

Random> ./LSRG_debug 10 "" 0
 ...
c version                               "0.7.0"
 ...
c command-line                          "./LSRG" "10" "" "0"
c N                                     10
c std-option                            no-std
c gen-option                            ma+jm
c output                                "cout"
c num_e-seeds                           13+1=14
c  e-seeds                              1609092523835210350 1 0 1609092786237186306 0 3 0 0 4 10 0 0 0 0

0 6 2 5 1 9 7 8 3 4
8 4 9 7 3 6 5 1 2 0
5 2 4 3 6 8 1 0 9 7
4 7 8 6 9 2 0 3 5 1
6 9 3 1 2 5 4 7 0 8
2 1 5 8 0 7 3 9 4 6
9 3 1 0 7 4 8 5 6 2
7 5 6 9 8 0 2 4 1 3
3 0 7 2 4 1 9 6 8 5
1 8 0 4 5 3 6 2 7 9

Explanations on parameters of the run:
 - standard output "cout"
 - "e-seed" refers to "extended seeds", which are unsigned 64-bit numbers.

Using the default arguments:
> ./LSRG_debug
 ...
c ** Parameters **
c command-line                          "./LSRG_debug"
c N                                     10
c std-option                            no-std
c gen-option                            ma+jm
c output                                "cout"
c num_e-seeds                           13+0=13
c  e-seeds                              1609092523835210350 1 0 1609092786237186306 0 3 0 0 4 10 0 0 0

3 5 8 0 6 9 4 1 2 7
9 6 7 5 4 1 0 8 3 2
0 1 6 3 2 8 7 4 9 5
1 4 0 8 7 2 6 3 5 9
8 7 4 9 3 6 5 2 1 0
7 2 1 6 0 5 3 9 4 8
2 3 9 4 8 7 1 5 0 6
5 9 2 7 1 4 8 0 6 3
4 8 3 2 5 0 9 6 7 1
6 0 5 1 9 3 2 7 8 4


The following example will create the same latin square of order 10 as in
the first example, but output will be written to file FILE:

> ./LSRG_debug 10 "" 0 FILE
Output to file "FILE".

Suppressing that output-message:
> ./LSRG_debug 10 "" 0 -FILE


II Algorithm

The program implements the Jacobson-Matthews algorithm for generating random
Latin squares. This algorithm was published in:

  Mark T. Jacobson, Peter Matthews
  Generating Uniformly Distributed Random Latin Squares
  Journal of Combinatorial Designs, 4(6), 1996, 405-437.

The main program's inputs are N (order) and m (the required number of random Latin
squares). m times a random Latin square of order N is generated as follows:

At the beginning a Latin square of order N is constructed. It can be done via
various approaches, by now it is done by constructing a multiplication table for a
cyclic group.

The condition on cells is relaxed, allowing an improper Latin square as
follows:

1) Possible entries are from V:={0,...,N-1} union {(a,b,c)}, where
     (a,b,c) in V^3, c notin {a,b}.
2) The special entry occurs at most once.
3) If a row or column does not contain a special entry, then the (ordinary)
   values are exactly those from V (all occurring, none twice).
4) If a row or column contains (a,b,c), then there are two entries c,
   and the N-3 values of the remaining cells are exactly those from
   V - {a,b,c}.
   (Thus when interpreting "(a,b,c)" as contributing "a+b-c" to a sum,
    then all row- and all column-sums are equal.)

N^3 moves are performed, each of which consists of identifying a 2 * 2 subtable
and modifying its cells.

In the case of proper Latin square the move is:
1) Randomly choose row i0 and column j0.
2) Randomly choose b from V such that b != c where c is the current entry of
   (i0,j0).
3) In row i0 find index j of entry b, replace b by c.
4) In column j0 find index i of entry b, replace b by c.
5) Assign entry b to cell (i0,j0).
6) If in both row i and column j all entries are distinct, assign entry b
   to cell (i,j), otherwise assign to it the special entry (a,b,c) where a
   is the current entry of cell (i,j).

In the case of improper Latin square assume that the special entry (a,b,c) is
assigned to cell (i,j), then the move is:
1) Randomly choose v,z from {a,b} such that v!=z.
2) Assign entry v to cell (i,j).
3) Assign to y the entry from V that occurs twice in row i.
4) In row i randomly choose one of two duplicate entries and replace it by z,
   assign the index of chosen entry to j2.
5) In column j randomly choose one of two duplicate entries and replace it by
   z, assign the index of chosen entry to i2.
6) If in both row i2 and column j2 all entries are distinct, assign entry y to
   cell (i2,j2), otherwise assign to it the special entry (x,y,z) where x is
   the current entry of cell (i2,j2).

If after N^3 moves a proper Latin square is obtained, it becomes the final
random Latin square of order N. Otherwise, additional moves are done until
such a square is obtained.

Remark: After a move, a proper Latin square can become either proper or
improper and vice versa.


III Implementation details

XXX the following does not speak about the actual implementation -- but that's exactly what is needed!

The following data structures are used:
1) One-dimensional array [a,b,c,d,e] of type std::uint32_t, where a,b,c form a
   triple (a,b,c) of the special entry, and the current square's cell (d,e)
   contains this special entry.
2) Two-dimensional array N * N of type std::uint32_t. If the current square's
   cell (i,j) contains an ordinary entry from V, then array's element [i,j]
   stores the same value. Otherwise, if (i,j) contains the special entry,
   then [i,j] stores b from the corresponding triple (a,b,c).

First the N * N array is filled by values of an initial Latin square, then the
arrays' values are modified in accordance to the moves descibed above.
