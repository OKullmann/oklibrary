Oleg Zaikin, 24.12.2020 (Swansea)
Copyright 2020 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version.

Documentation for LSRG.cpp

I Examples

In the following we show only relevant parts of the output.

Basic help can be obtained by

Random> ./LSRG -h

while information on the program is obtained by

Random> ./LSRG -v

The executable "Random/LSRG" is optimised, while "Random/LSRG_debug"
is the debug-version.


Example usage for creating one latin squares of order 10, with a
seed-sequence "0" (using the debug-version), output to cout:

Random> ./LSRG_debug 10 1 0
 ...
c version                               "0.4.11"
 ...
c ** Parameters **
c command-line                          "./LSRG_debug" "10" "1" "0"
c N                                     10
c m                                     1
c output                                "cout"
c num_e-seeds                           1
c  e-seeds                              0
c RESULT:
c 1016 total moves
c 1000 main moves
c 16 additional moves
c 79 proper Latin squares
c 937 improper Latin squares
c final proper random Latin square:
2 4 3 5 7 6 8 0 9 1
5 0 2 8 9 1 4 3 6 7
4 9 7 3 8 0 2 1 5 6
9 6 8 1 2 4 5 7 0 3
0 8 1 9 4 5 3 6 7 2
7 1 5 6 0 8 9 2 3 4
1 3 6 0 5 9 7 4 2 8
3 2 0 4 1 7 6 9 8 5
8 7 4 2 6 3 0 5 1 9
6 5 9 7 3 2 1 8 4 0

The parameters of the run are:
 - standard output "cout"
 - "e-seed" refers to "extended seeds", which are unsigned 64-bit numbers
 - "x total moves": x moves were performed.
 - "x additional moves": x additional moves were performed after the main
   moves to obtain a closest proper Latin square.
 - "x proper Latin squares": x moves produced proper Latin squares.
 - "x improper Latin squares": x moves produced improper Latin squares.
 - "final proper random Latin square:" is followed by the generated
   random Latin square, one row per line.

Example usage for creating two latin squares of order 10, with a
seed-sequence "0,1" (using the debug-version), output to cout:

Random> ./LSRG_debug 10 2 0,1
 ...
c version                               "0.4.11"
 ...
c ** Parameters **
c command-line                          "./LSRG" "10" "2" "0,1"
c N                                     10
c m                                     2
c output                                "cout"
c num_e-seeds                           2
c  e-seeds                              0 1
c RESULT:
c 1009 total moves
c 1000 main moves
c 9 additional moves
c 101 proper Latin squares
c 908 improper Latin squares
c final proper random Latin square:
7 4 9 3 0 6 8 1 5 2
1 8 0 2 5 4 7 3 6 9
3 1 4 6 9 2 5 7 0 8
9 2 3 5 8 1 6 0 7 4
8 0 5 1 3 7 2 9 4 6
5 3 8 0 2 9 4 6 1 7
2 6 1 7 4 5 9 8 3 0
0 9 6 4 7 8 3 5 2 1
6 7 2 8 1 3 0 4 9 5
4 5 7 9 6 0 1 2 8 3

c RESULT:
c 1000 total moves
c 1000 main moves
c 0 additional moves
c 98 proper Latin squares
c 902 improper Latin squares
c final proper random Latin square:
2 7 9 0 3 5 6 8 4 1
6 9 7 2 1 4 3 5 0 8
8 2 5 4 6 3 1 0 7 9
9 5 4 8 0 1 7 3 6 2
4 6 0 1 7 9 8 2 5 3
5 4 3 9 2 7 0 1 8 6
0 1 8 3 5 6 9 4 2 7
3 0 1 6 8 2 5 7 9 4
1 8 6 7 4 0 2 9 3 5
7 3 2 5 9 8 4 6 1 0


The following example will create the same two latin squares of order 10 as in the
previous example, but output will be written to file out:

Random> ./LSRG_debug 10 2 0,1 out
Output to file "out".


The following example will create the same two latin squares of order 10, output
will be written to file out, and no output message will be written to cout:

Random> ./LSRG_debug 10 2 0,1 -out


II Algorithm

The program implements the Jacobson-Matthews algorithm for generating random Latin
squares. This algorithm was published in:
Mark T. Jacobson, Peter Matthews. Generating uniformly distributed random latin
squares // Journal of Combinatorial Designs, 4:405â€“437, 1996.

The main program's inputs are N (order) and m (the required number of random Latin
squares). m times a random Latin square of order N is generated as follows:

At the beginning a Latin square of order N is constructed. It can be done via
various approaches, by now it is done by constructing a multiplication table for a
cyclic group.

Order N is considered, and {0,1,...,N-1} are the possible values of a Latin
square's cells. The row and column-sum of a Latin square is thus
  S = 1 + ... + N-1 = N * (N-1) / 2.

The condition on cells is relaxed, allowing an improper Latin square as follows:
1) Possible entries are from V:={0,...,N-1} union {(a,b,c)}, where
     (a,b,c) in V^3, c notin {a,b}.

XXX if "a,b,c" are the new symbols, then SpecialCell needs update

2) The special entry occurs at most once.
3) If a row or column does not contain a special entry, then the (ordinary) values
   are exactly those from V (all occurring, none twice).
4) If a row or column contains (a,b,c), then there are two entries c,
   and the N-3 values of the remaining cells are exactly those from V - {a,b,c}.
   (Thus when interpreting "(a,b,c)" as contributing "a+b-c" to a sum, then every
    row- and every column-sum equals S.)

N^3 moves are performed, each of which consists of identifying a 2 * 2 subtable
and modifying its cells.

In the case of proper Latin square the move is:
1) Randomly choose row i and column j.
2) Randomly choose b from V such that b != c where c is the current entry of (i,j).
3) In row i find index j2 of entry b, replace b by c.
4) In column j find index i2 of entry b, replace b by c.
5) Assign entry b to cell (i,j).
6) If in both row i2 and column j2 all entries are distinct, assign entry b to cell
   (i2,j2), otherwise assign to it the special entry (a,b,c) where a is the current
   entry of cell (i2,j2).

In the case of improper Latin square assume that the special entry (a,b,c) is
assigned to cell (i,j), then the move is:
1) Randomly choose v,z from {a,b} such that v!=z.
2) Assign entry v to cell (i,j).
3) Assign to y the entry from V that occurs twice in row i.
4) In row i randomly choose one of two duplicate entries and replace it by z,
   assign the index of chosen entry to j2.
5) In column j randomly choose one of two duplicate entries and replace it by z,
   assign the index of chosen entry to i2.
6) If in both row i2 and column j2 all entries are distinct, assign entry y to cell
   (i2,j2), otherwise assign to it the special entry (x,y,z) where x is the current
   entry of cell (i2,j2).

If after N^3 moves a proper Latin square is obtained, it becomes the final random
Latin square of order N. Otherwise, additional moves are done until such a square
is obtained.

Remark. After a move, a proper Latin square can become either proper or improper
and vice versa.


III Implementation details

XXX the following does not speak about the actual implementation -- but that's exactly what is needed!

The following data structures are used:
1) One-dimensional array [a,b,c,d,e] of type std::uint32_t, where a,b,c form a
   triple (a,b,c) of the special entry, and the current square's cell (d,e)
   contains this special entry.
2) Two-dimensional array N * N of type std::uint32_t. If the current square's cell
   (i,j) contains an ordinary entry from V, then array's element [i,j] stores the
   same value. Otherwise, if (i,j) contains the special entry, then [i,j] stores b
   from the corresponding triple (a,b,c).

First the N * N array is filled by values of an initial Latin square, then the
arrays' values are modified in accordance to the moves descibed above.
