Oliver Kullmann, 26.5.2025 (Swansea)
Copyright 2025 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version.

Documentation of the file-format NOBOCONF (see NBCNFConversion.cpp
for a simple program).


I The general format

  NOBOCONF stands for "non-boolean conjunctive normal forms".

It is line-based (and so the end-of-line markers are the most fundamental
elements of the syntax, breaking the text/file into lines).

Each line uses exactly one of the following four options:

 - comment-lines
 - clause-lines
 - c-lines
 - n-lines.

Each line-type can occur any number of times (including zero), and there is
no restriction on the order.

The clause-lines make the non-boolean CNF, the comment-lines
are just ignored, the c-lines are just for checking clause-counts, and
the n-lines are for checking the variable-indices used (and they also
have a semantic meaning, introducing "formal variables", whic might not
occur in the clauses).

This format makes it easy to write nb-cnfs, and the files can just be
appended, which appends the corresponding clause-lists (no modiciation
of parameter-lines is needed).

So if if you have valid files F1, ..., Fm (m >= 0), then the concatenation
is also a valid file (with the sum-many clauses), with the only addition
that to shield n-information (variable-indices) and c-information (number
of clauses) from the previous files, in general to the beginning of F2, ..., Fm
the two lines "n\nc\n" have to be added.

The domain-sizes are always taken as the minimum needed to accomodate all
literals from the file.

Each clause-line finishes with a "0" (like in Dimacs-CNF-format), and
after a space-symbol one can the write arbitrary text on the line, which
is just a comment, and is ignored.

"Space-symbol": ordinary spaces, and tab-symbols, but not end-of-line symbols.

So we can create say 3 empty clauses, with some comments (for the examples see
sub-directory Nbcnf):

Nbcnf> cat EmptyClauses.nbcnf
C Comment-line can be verywhere.
CAlso the space directly of the C can be used,
C  though it is recommended to use this to mark special comments.
0 here we have the first empty clause
  0   another one
0
C that was also one.

C Empty lines (which might contain space-symbols) are not a problem.

Nbcnf> cat EmptyClauses.nbcnf | NBCNFConversion
Clevel		0
Cflags		1111
n 0
c 3
0
0
0

The output of NCCNFConversion (assumed to be on your PATH) is also
a valid NBCNF, representing exactly the input, but normalising the
n- and c-lines (to have exactly one of them), and removing all comments,
except for some program-generated comments with information about
the nb-cnf.

A clause-line contains (before the final "0") spacesymbol-separated
literals, where a literal is a pair
  var:val
where both variable and value of unsigned integers from the range
  0 .. 2^64 - 2
(including the bounds).

Since variables and values are 0-based, a number of variables n and
a domain-size are strict bounds on the values.

Nbcnf> cat 3Clauses.nbcnf
1:5 0:2 13:3 0
2:2 0:3 4:0 0
1:7 0

Nbcnf> cat 3Clauses.nbcnf | NBCNFConversion
Clevel		0
Cflags		0110
n 14
c 3
1:5 0:2 13:3 0
2:2 0:3 4:0 0
1:7 0

c-lines can be of two forms, either just the initial "c" (and then nothing,
or possibly space-symbols), or the initial "c" with at least one space-symbol
thereafter, and then an unsigned number 0 <= numcl <= 2^64-1:

A c-line with numcl means that after this line exactly numcl many clauses
are to follow, either until the end of file, if no further c-line is present,
or exactly to the next c-line, which either can set up a new block, or can
just finish the counting (by the c-line without numcl; until a new counting
is opened).

Nbcnf> cat cLines.nbcnf
c 2 Two clauses to follow:
1:2 2:4 0
0:1 3:0 0
c
C Now (after the above closing) we can have an arbitrary number of clauses to follow:
C ... clauses here ... say we have just one
1:1 0
C Now we start counting again, just a single clause:
c 1
0
c 1 and another one
4:4 0
c
C The previous final "closing-line" is not needed, however
C with its help one can just append an arbitrary NOBOCONF-file at
C the end.

Nbcnf> cat cLines.nbcnf | NBCNFConversion
Clevel		0
Cflags		1110
n 5
c 5
1:2 2:4 0
0:1 3:0 0
1:1 0
0
4:4 0


Fianlly with the n-lines we can check on the variables occurring: again
an n-line can have two forms, either a pure "n"-line, or with a number
"numvar", where numvar is then a (strict) upper bound on variables to follow,
until another n-line updates this (or cancels it with a pure n-line).

Nbcnf> cat nLines
n 2 only variables 0, 1 allowed
0:6 0
1:7 0
n
C now unrestricted indices:
4:3 0
n 1 now only variable 0 allowed
0:9 0
n 5 now variables 0,.., 4 allowed
2:2 3:3 0
n 10 introducing formal variables up to 9
n
C the above clears the n-restriction, so that an arbitrary NOCONF-file can be appended.

Nbcnf> cat nLines | NBCNFConversion
Clevel		0
Cflags		1110
n 10
c 5
0:6 0
1:7 0
4:3 0
0:9 0
2:2 3:3 0


n- and c-lines are completely independent of each other.
