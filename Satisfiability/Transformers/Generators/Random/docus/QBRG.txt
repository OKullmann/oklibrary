Oliver Kullmann, 13.7.2019 (Lisbon)
Copyright 2019 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version.

Documentation for QBRG.cpp

See BRG.txt for basic information.


I Examples

In the following we show only relevant parts of the output.

Random QCNF with 5 universal and 5 existential variables,
and 5 clauses of length 3, uniformly chosen from the 10
variables:

Random> ./QBRG_debug "a5 5" "5*2,3"
c ** Parameters **
c command-line                          "./QBRG_debug" "a5 5" "5*1-2,3"
c output                                "-cout"
c options                               "filtered,renamed"
c num_quantifier_blocks                 2
c  quantifier_blocks                    1:a1-5 2:e6-10
c num_clause_blocks                     1
c  clause-blocks                        5 * {1-10,3,1/2}
c num_e-seeds                           18+0=18
c  e-seeds                              1 0 1 0 3 10 2 5 0 5 1 5 1 1 2 3 1 2
a 1 2 3 4 0
e 5 6 7 8 9 0
p cnf 9 5
2 4 -5 0
3 -5 7 0
4 -5 -8 0
-1 -6 -8 0
1 6 9 0

"filtered,sorted" has the same meaning as with BRG, plus rejecting all
clauses with universal variables not in the dependency of some existential
variable of the clause (this only happens with this exact default-combination
of the options).

The first parameter specifies the quantifier-blocks, the second specifies
the clause-blocks and their parts, as with BRG. However the variable-intervals
on the command-line refer to the block, and are translated into the actual
variable-intervals in the above output of parameters under "quantifier-blocks".
We note that they refer to the original input, before renaming.

An example for the Chen-Interian model, with four quantifier-blocks, selecting
1,2,3,4 variables from each:

Random> ./QBRG_debug "a5 e5 a5 5" "5*1,2|2-2,3|3-3,4|4-4,5"
c ** Parameters **
c command-line                          "./QBRG_debug" "a5 e5 a5 5" "5*1,2|2-2,3|3-3,4|4-4,5"
c output                                "-cout"
c options                               "filtered,renamed"
c num_quantifier_blocks                 4
c  quantifier_blocks                    1:a1-5 2:e6-10 3:a11-15 4:e16-20
c num_clause_blocks                     1
c  clause-blocks                        5 * {1-5,2,1/2} | {6-10,3,1/2} | {11-15,4,1/2} | {16-20,5,1/2}
c num_e-seeds                           37+0=37
c  e-seeds                              1 0 1 0 5 20 2 5 0 5 1 5 0 5 1 5 4 1 1 2 1 2 2 2 3 1 2 3 3 4 1 2 4 4 5 1 2
a 1 2 3 4 5 0
e 6 7 8 9 10 0
a 11 12 13 14 15 0
e 16 17 18 19 20 0
p cnf 20 5
-4 5 7 9 -10 11 -13 14 -15 16 17 -18 -19 -20 0
-1 -4 7 -8 9 -11 -13 14 -15 16 17 18 -19 -20 0
-1 2 -7 -8 -9 11 -12 14 -15 16 17 -18 19 -20 0
1 -3 6 -8 -10 11 -13 14 15 16 17 -18 19 20 0
-2 3 -7 9 10 -12 13 -14 15 16 17 18 19 20 0

The innermost quantifier-block is always existential, and thus the "e" is
not given here.

For

Random> ./QBRG_debug "a5 e5 a5 5" "5*1,2|2-2,3|3-3,4"

the program runs into an infinite loop (by design), since every clause
contains universal variables not covered by existential variables.
In order to obtain a result here, at least one of the two options
(with the same possibilities as for BRG) has to be lowered. For example,
not filtering, but just sorting:

Random> ./QBRG_debug "a5 e5 a5 5" "5*1,2|2-2,3|3-3,4" "s,r"
c ** Parameters **
c command-line                          "./QBRG_debug" "a5 e5 a5 5" "5*1,2|2-2,3|3-3,4" "s,r"
c output                                "-cout"
c options                               "sorted,renamed"
c num_quantifier_blocks                 4
c  quantifier_blocks                    1:a1-5 2:e6-10 3:a11-15 4:e16-20
c num_clause_blocks                     1
c  clause-blocks                        5 * {1-5,2,1/2} | {6-10,3,1/2} | {11-15,4,1/2}
c num_e-seeds                           32+0=32
c  e-seeds                              1 1 1 0 5 20 2 5 0 5 1 5 0 5 1 5 3 1 1 2 1 2 2 2 3 1 2 3 3 4 1 2
a 1 2 3 4 5 0
e 6 7 8 9 10 0
a 11 12 13 14 15 0
p cnf 15 5
-1 -2 -6 8 10 11 12 -13 14 0
3 4 6 7 -9 -11 -12 13 14 0
-1 2 6 8 10 -11 -12 -14 -15 0
-4 5 -6 -8 9 11 -12 13 15 0
3 -5 6 7 -10 11 -13 -14 15 0

An example for a second clause-block, which now uses exactly one positive
literal per clause:

Random> ./QBRG_debug "a5 e5 a5 5" "5*1,2|2-2,3|3-3,4; 2*2,3,1" "u,r"
c ** Parameters **
c command-line                          "./QBRG_debug" "a5 e5 a5 5" "5*1,2|2-2,3|3-3,4; 2*2,3,1" "u,r"
c output                                "-cout"
c options                               "unsorted,renamed"
c num_quantifier_blocks                 4
c  quantifier_blocks                    1:a1-5 2:e6-10 3:a11-15 4:e16-20
c num_clause_blocks                     2
c  clause-blocks                        5 * {1-5,2,1/2} | {6-10,3,1/2} | {11-15,4,1/2} ; 2 * {1-10,3,1}
c num_e-seeds                           39+0=39
c  e-seeds                              1 2 2 0 5 20 2 5 0 5 1 5 0 5 1 5 3 1 1 2 1 2 2 2 3 1 2 3 3 4 1 2 2 1 1 2 3 2 1
a 1 2 3 4 0
e 5 6 7 8 9 0
a 10 11 12 13 14 0
p cnf 14 7
-1 3 -5 6 -7 -11 12 13 14 0
-3 4 6 -8 9 -10 -11 12 -13 0
-1 -3 -5 8 -9 10 11 -12 -14 0
-1 -3 -6 7 8 10 11 -12 -13 0
1 2 -6 -7 9 10 11 13 14 0
-4 6 -7 0
-4 8 -9 0

Adjacent quantifier-blocks don't need to be alternating; for the a/e-lines
specifiying the quantifier-type of variables, such repeated blocks will
be merged, e.g.

andom> ./QBRG_debug "a5 a2 e5 a5 5" "5*1,1|2-2,1,1/4|3-3,1|4-4,2|5-5,1; 2*3,3,1" "o,u"
c ** Parameters **
c command-line                          "./QBRG_debug" "a5 a2 e5 a5 5" "5*1,1|2-2,1,1/4|3-3,1|4-4,2|5-5,1; 2*3,3,1" "o,u"
c output                                "-cout"
c options                               "unsorted,original"
c num_quantifier_blocks                 5
c  quantifier_blocks                    1:a1-5 2:a6-7 3:e8-12 4:a13-17 5:e18-22
c num_clause_blocks                     2
c  clause-blocks                        5 * {1-5,1,1/2} | {6-7,1,1/4} | {8-12,1,1/2} | {13-17,2,1/2} | {18-22,1,1/2} ; 2 * {1-12,3,1}
c num_e-seeds                           51+0=51
c  e-seeds                              1 8 2 0 6 22 2 5 0 2 0 5 1 5 0 5 1 5 5 1 1 1 1 2 2 2 1 1 4 3 3 1 1 2 4 4 2 1 2 5 5 1 1 2 2 1 1 3 3 2 1
p cnf 22 7
a 1 2 3 4 5 6 7 0
e 8 9 10 11 12 0
a 13 14 15 16 17 0
e 18 19 20 21 22 0
1 7 -12 13 14 -20 0
-4 -6 -11 -15 -16 20 0
1 -6 9 -16 -17 -19 0
4 7 10 -14 -16 -19 0
-2 6 9 14 16 20 0
-1 5 -7 0
5 -6 -9 0

---

II General definition of the five arguments

QBRG [quantifier] [clauses] [options] [seeds] [output]

For [output] see BRG.txt.

a) [quantifier]

Default is only one block (thus existential), with one variable.
