Oliver Kullmann, 26.6.2019 (Swansea)
Copyright 2019 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version.

Documentation for BRG.cpp


I Examples

In the following we show only relevant parts of the output.

Basic help can be obtained by

Random> ./BRG -h

while information on the program is obtained by

Random> ./BRG -v

The executable "Random/BRG" is optimised, while "Random/BRG_debug"
is the debug-version.


Random CNF with 10 variables, 5 clauses, and clause-length 3:

Random> ./BRG 5*10,3
c ** Parameters **
c command-line                          "./BRG" "5*10,3"
c output                                "-cout"
c options                               "filtered,renamed"
c num_clause_blocks                     1
c  clause-blocks                        5 * {1-10,3,1/2}
c num_e-seeds                           11+0=11
c  e-seeds                              0 0 1 0 5 1 1 10 3 1 2
p cnf 9 5
3 4 -6 0
-2 -5 6 0
-2 -6 7 0
-1 -5 -8 0
-5 -8 9 0

The parameters of the run are:
 - standard output "-cout"
 - "filtered" means the output is sorted, repeated clauses are rejected,
   and created until the required number of (different) clauses is reached
 - "renamed" means that gaps due to non-appearing variables are removed
 - the single clause-block here is
     five clauses over variables 1-10, with clause-length 3, probability
     of a positive sign 1/2
 - there are 11 system-seeds, encoding the parameters, and 0 user-provided
   seed (so the output will always be the same -- try it out)
 - "e-seed" refers to "extended seeds", which are unsigned 64-bit numbers,
   while the underlying seeds of the 64-bit Mersenne Twister use 32-bit
   numbers.

The number of variables must be at least 1, but other parameters can be 0:

Random> ./BRG_debug 1*1,0
c ** Parameters **
c command-line                          "./BRG_debug" "1*1,0"
c output                                "-cout"
c options                               "filtered,renamed"
c num_clause_blocks                     1
c  clause-blocks                        1 * {1-1,0,1/2}
c num_e-seeds                           11+0=11
c  e-seeds                              0 0 1 0 1 1 1 1 0 1 2
p cnf 0 1
0

Due to renaming, the true number of variables, 0, is given in the p-cnf-line.
What if we want two empty clauses?:

Random> ./BRG_debug 2*1,0

runs into an infinite loop (by design).
We have to weaken filtered to "sorted" (which sorts and removes duplicates):

Random> ./BRG_debug 2*1,0 s
c ** Parameters **
c command-line                          "./BRG_debug" "2*1,0" "s"
c output                                "-cout"
c options                               "sorted,renamed"
c num_clause_blocks                     1
c  clause-blocks                        2 * {1-1,0,1/2}
c num_e-seeds                           11+0=11
c  e-seeds                              0 1 1 0 2 1 1 1 0 1 2
p cnf 0 1
0

The second argument now contains the letter "s" for sorted.
If we don't want sorting (and removal of duplication), but just
the clauses as created, then we used "unsorted" instead:

Random> ./BRG_debug 2*1,0 u
c ** Parameters **
c command-line                          "./BRG_debug" "2*1,0" "u"
c output                                "-cout"
c options                               "unsorted,renamed"
c num_clause_blocks                     1
c  clause-blocks                        2 * {1-1,0,1/2}
c num_e-seeds                           11+0=11
c  e-seeds                              0 2 1 0 2 1 1 1 0 1 2
p cnf 0 2
0
0

If we want to use the max variable-value as specified in in the p-cnf line,
and the variables as they have been created, then we use "original" (for
this combination of the options, the created CNF is not held in memory):

Random> ./BRG_debug 2*77,0 u,o
c ** Parameters **
c command-line                          "./BRG_debug" "2*77,0" "u,o"
c output                                "-cout"
c options                               "unsorted,original"
c num_clause_blocks                     1
c  clause-blocks                        2 * {1-77,0,1/2}
c num_e-seeds                           11+0=11
c  e-seeds                              0 8 1 0 2 1 1 77 0 1 2
p cnf 77 2
0
0


A clause can have "parts", which in the command-line are separated by "|"
(and so the first argument must be quoted, which likely should always be done):

Random> ./BRG_debug "5*4,2|5-8,2" u,o
c ** Parameters **
c command-line                          "./BRG_debug" "5*4,2|5-8,2" "u,o"
c output                                "-cout"
c options                               "unsorted,original"
c num_clause_blocks                     1
c  clause-blocks                        5 * {1-4,2,1/2} | {5-8,2,1/2}
c num_e-seeds                           16+0=16
c  e-seeds                              0 8 1 0 5 2 1 4 2 1 2 5 8 2 1 2
p cnf 8 5
-1 -2 5 -6 0
-1 4 -6 7 0
-1 -2 5 8 0
1 -3 -5 -7 0
3 4 5 -6 0

Here we take 2 literals over the variables 1,2,3,4, and 2 literals over the
variables 5,6,7,8.

A "clause-block" specifies the number of clauses and the clause-parts;
there can me as many clause-blocks as you like, separated by ";".
We can also have spaces in the clauses-specification:

Random> ./BRG_debug "5*4,2|5-8,2 ; 3 * 3-6,2" u,o
c ** Parameters **
c command-line                          "./BRG_debug" "5*4,2|5-8,2 ; 3 * 3-6,2" "u,o"
c output                                "-cout"
c options                               "unsorted,original"
c num_clause_blocks                     2
c  clause-blocks                        5 * {1-4,2,1/2} | {5-8,2,1/2} ; 3 * {3-6,2,1/2}
c num_e-seeds                           23+0=23
c  e-seeds                              0 8 2 0 5 2 1 4 2 1 2 5 8 2 1 2 3 1 3 6 2 1 2
p cnf 8 8
2 -4 7 8 0
-1 4 5 -6 0
-1 -2 -5 8 0
1 -3 5 6 0
-2 -4 -6 -8 0
3 -4 0
-4 -6 0
-3 -4 0

The probabilities of a clause-part can be given, as an optional third parameter
for a clause-part, as fraction "nominator/denominator" (no floating-point
values allowed, to ensure exact reproducibility):

Random> ./BRG_debug "5*4,2,1/4|5-8,2 ; 3 * 3-6,2" u,o
c ** Parameters **
c command-line                          "./BRG_debug" "5*4,2,1/4|5-8,2 ; 3 * 3-6,2" "u,o"
c output                                "-cout"
c options                               "unsorted,original"
c num_clause_blocks                     2
c  clause-blocks                        5 * {1-4,2,1/4} | {5-8,2,1/2} ; 3 * {3-6,2,1/2}
c num_e-seeds                           23+0=23
c  e-seeds                              0 8 2 0 5 2 1 4 2 1 4 5 8 2 1 2 3 1 3 6 2 1 2
p cnf 8 8
-2 -3 -5 8 0
-1 -3 -6 -8 0
-2 4 -5 -8 0
-3 -4 -7 8 0
-2 -3 5 7 0
-5 -6 0
-3 6 0
-3 4 0

When giving a non-negative integer as third argument in a clause-part, then
this means the number of positive literals in the clause-part (uniformly
randomly chosen), for example:

Random> ./BRG "5*4,2,1/4|5-8,2,0 ; 3 * 3-6,2,1" u,o
c ** Parameters **
c command-line                          "./BRG_debug" "5*4,2,1/4|5-8,2,0 ; 3 * 3-6,2,1" "u,o"
c output                                "-cout"
c options                               "unsorted,original"
c num_clause_blocks                     2
c  clause-blocks                        5 * {1-4,2,1/4} | {5-8,2,0} ; 3 * {3-6,2,1}
c num_e-seeds                           23+0=23
c  e-seeds                              0 8 2 0 5 2 1 4 2 1 4 5 8 2 0 0 3 1 3 6 2 2 1
p cnf 8 8
-2 4 -6 -8 0
3 -4 -5 -8 0
-2 4 -5 -7 0
-2 3 -7 -8 0
-1 -4 -5 -8 0
-3 5 0
-3 6 0
-3 4 0

You can provide additional seeds yourself, as unsigned 64-bit integers,
in the third argument, as many as you like (comma-separated):

Random> ./BRG_debug "5*4,2,1/4|5-8,2,0 ; 3 * 3-6,2,1" u,o 0
c ** Parameters **
c command-line                          "./BRG_debug" "5*4,2,1/4|5-8,2,0 ; 3 * 3-6,2,1" "u,o" "0"
c output                                "-cout"
c options                               "unsorted,original"
c num_clause_blocks                     2
c  clause-blocks                        5 * {1-4,2,1/4} | {5-8,2,0} ; 3 * {3-6,2,1}
c num_e-seeds                           23+1=24
c  e-seeds                              0 8 2 0 5 2 1 4 2 1 4 5 8 2 0 0 3 1 3 6 2 2 1 0
p cnf 8 8
-1 4 -5 -8 0
-1 -3 -6 -7 0
-1 2 -5 -6 0
-2 3 -7 -8 0
-3 -4 -5 -7 0
5 -6 0
-3 4 0
3 -4 0

Random> ./BRG_debug "5*4,2,1/4|5-8,2,0 ; 3 * 3-6,2,1" u,o 1
c ** Parameters **
c command-line                          "./BRG_debug" "5*4,2,1/4|5-8,2,0 ; 3 * 3-6,2,1" "u,o" "1"
c output                                "-cout"
c options                               "unsorted,original"
c num_clause_blocks                     2
c  clause-blocks                        5 * {1-4,2,1/4} | {5-8,2,0} ; 3 * {3-6,2,1}
c num_e-seeds                           23+1=24
c  e-seeds                              0 8 2 0 5 2 1 4 2 1 4 5 8 2 0 0 3 1 3 6 2 2 1 1
p cnf 8 8
-1 -2 -5 -7 0
1 2 -5 -6 0
-1 -2 -5 -6 0
-1 -4 -5 -7 0
2 3 -7 -8 0
-4 6 0
-3 4 0
3 -4 0

Random> ./BRG_debug "5*4,2,1/4|5-8,2,0 ; 3 * 3-6,2,1" u,o 11,22,33
c ** Parameters **
c command-line                          "./BRG_debug" "5*4,2,1/4|5-8,2,0 ; 3 * 3-6,2,1" "u,o" "11,22,33"
c output                                "-cout"
c options                               "unsorted,original"
c num_clause_blocks                     2
c  clause-blocks                        5 * {1-4,2,1/4} | {5-8,2,0} ; 3 * {3-6,2,1}
c num_e-seeds                           23+3=26
c  e-seeds                              0 8 2 0 5 2 1 4 2 1 4 5 8 2 0 0 3 1 3 6 2 2 1 11 22 33
p cnf 8 8
2 -3 -7 -8 0
-2 -3 -6 -7 0
-2 -3 -5 -6 0
-3 -4 -6 -8 0
-1 -2 -5 -7 0
5 -6 0
4 -5 0
3 -6 0

If you want to use true randomness, then you can use "t" in the seed-sequence
for the timestamp (on most machines in nanoseconds -- see the
version-output), or "r" for true randomness (if you machines provides this;
see also the version-output).

I think "t" is most useful, since you get from it the creation-time, and
the seeding-process (as provided by C++11, in a well-defined way) practically
guarantees that every change in the seed yields an independent serious of
random numbers.

You can use as many "t"'s and "r"'s as you wish, for example:

Random> ./BRG_debug "5*4,2,1/4|5-8,2,0 ; 3 * 3-6,2,1" u,o 1,t
c ** Parameters **
c command-line                          "./BRG_debug" "5*4,2,1/4|5-8,2,0 ; 3 * 3-6,2,1" "u,o" "1,t"
c output                                "-cout"
c options                               "unsorted,original"
c num_clause_blocks                     2
c  clause-blocks                        5 * {1-4,2,1/4} | {5-8,2,0} ; 3 * {3-6,2,1}
c num_e-seeds                           23+2=25
c  e-seeds                              0 8 2 0 5 2 1 4 2 1 4 5 8 2 0 0 3 1 3 6 2 2 1 1 1561576555380813997
p cnf 8 8
-3 -4 -7 -8 0
-2 3 -5 -7 0
-1 -4 -6 -7 0
-3 4 -5 -8 0
-1 -2 -6 -8 0
-3 6 0
-5 6 0
-5 6 0

If you want to reproduce the above, then use

Random> ./BRG "5*4,2,1/4|5-8,2,0 ; 3 * 3-6,2,1" u,o 1,1561576555380813997
c ** Parameters **
c command-line                          "./BRG_debug" "5*4,2,1/4|5-8,2,0 ; 3 * 3-6,2,1" "u,o" "1,1561576555380813997"
c output                                "-cout"
c options                               "unsorted,original"
c num_clause_blocks                     2
c  clause-blocks                        5 * {1-4,2,1/4} | {5-8,2,0} ; 3 * {3-6,2,1}
c num_e-seeds                           23+2=25
c  e-seeds                              0 8 2 0 5 2 1 4 2 1 4 5 8 2 0 0 3 1 3 6 2 2 1 1 1561576555380813997
p cnf 8 8
-3 -4 -7 -8 0
-2 3 -5 -7 0
-1 -4 -6 -7 0
-3 4 -5 -8 0
-1 -2 -6 -8 0
-3 6 0
-5 6 0
-5 6 0

Finally we come to the fourth argument, the output-specification.
If not given, or specified as "-cout", then it is standard-output.
If using the empty string, then a file is used, with a default-filename:

Random> ./BRG 5*10,3 "" "" ""
Output to file "BlRaGe_10_5_24.dimacs".
Random> cat BlRaGe_10_5_24.dimacs
c ** Parameters **
c command-line                          "./BRG" "5*10,3" "" "" ""
c output                                "BlRaGe_10_5_24.dimacs"
c options                               "filtered,renamed"
c num_clause_blocks                     1
c  clause-blocks                        5 * {1-10,3,1/2}
c num_e-seeds                           11+0=11
c  e-seeds                              0 0 1 0 5 1 1 10 3 1 2
p cnf 9 5
3 4 -6 0
-2 -5 6 0
-2 -6 7 0
-1 -5 -8 0
-5 -8 9 0

The default filename is of the form "BlRaGe_n_c_sum.dimacs",
with n, c the formal Dimacs-parameters, and sum the sum of seeds.
If you want to use your own filename, then specify it as fourth argument.

The above example also shows that for the first three arguments (clauses,
options, seeds) via "" we get the default-values.
We note that the first three arguments are (completely) encoded by the
seed-sequence, so any change in here will generate a completely different
underlying sequence of random numbers, but the fourth argument is not
encoded in the seeds (so the above is the same as the first example
given).

---

II General definition of the four arguments

BRG [clauses] [options] [seeds] [output]

a) [clauses]

Default is no clause-block (zero clauses, zero variables).

clauses       : sequence of clause-blocks, separated by ";"
clause-blocks : sequence of clause-parts, separated by "|"
clause-part   : c * n1-n2,k,p

 - c = number of clauses
 - n1 <= n2 specifies the clause-interval; default n1=1
 - k = number of literals in clause-parts
 - p is either a fraction (necessarily using "/", with nominator
   and denominator unsigned 64-bit integers, and nominator <= denominator),
   or a natural number 0, ..., k, the number of positive literals.
   Default value is p = 1/2.

Spaces can be used freely.

A clause-block contains no repetition or clash, but different
clause-blocks are not checked for repetitions and clashing literals.
The output of a clause is always sorted, in the order

 -1, 1, -2, 2, -3, 3, ...


(b) [options]

Two types of options, "sorting" (considering repetition of clauses) and
"renaming" (considering the variable-numbering), with values ordered by
increasing strength:

 Sorting:
  - "u" - unsorted (as produced)
  - "s" - sorting the result, and removing duplicated clauses; "sorting"
    means anti-lexicographical (lexicographical but starting with the
    last literal in the clause, in the order as specified above)
  - "f" - filtered, that is, directly rejecting a duplicated clause, and
    drawing a new one, until a new clause is created (clauses are
    automatically sorted).

The default is "f".

 "Renaming":
  - "o" - original (unchanged)
  - "m" - leaving the variables unchanged, but using the actually occurring
     maximum-index in the Dimacs parameter-line
  - "r" - renaming the variables, removing gaps in the numbering.

The default is "r".

The second argument is a comma-separated list of these six letters, where
a later value belonging to the same type of option overrides an earlier value.
Spaces can be used freely.


(c) [seeds]

A (possibly empty) sequence of
 - "r" - a 64-bit "true random number" (for non-zero entropy)
 - "t" - the 64-bit timestamp (usually in nano-seconds)
 - a 64-bit unsigned number

Spaces can occur here only as leading characters of an unsigned number.


(d) [output]

If not given, then the same as "-cout" (output to standard output).
If the empty string, then the default filename (see above).
Otherwise used as filename.


---

III General remarks on the design

(a) The automatically provided seed-sequence, which encodes (invertibly)
the first two command-line parameters, and which is extended by the
seeds given in the third command-line parameter, makes sure that any
difference in the parameter-values yields a different underlying
sequence of random values. So that accidentally using the same seeds
is highly unlikely.

The seed-values used are 64-bit values, which are broken into two 32-bit
values as used for the seeding of the Mersenne-Twister.

The seed-sequence starts with four values:
 - the main type
 - the sub-type 0-8
 - the number of clause-blocks
 - the thread-index.

One clause-block it encoded using 2 + number-parts * 5 many seed-values:
 - the number of clauses
 - the number of parts
 - each part encoded by the 2 values for the variables-interval, the
   k-value, and the 2 values for the fraction; if the number 0 <= p <= k
   of positive literals is taken, then this is encoded as the pair
   (0,k), except the case k=1, which is encoded as (2,1) (to avoid mix-up
   with the fractions nominator / denominator, which are always relatively
   prime with nominator <= denominator and denominator >= 1).

The user-provided seed-sequence can be arbitrarily long, to make organisation
of completely reproducible random-experiments easier.


(b) The generator used is the 64-bit Mersenne Twister MT19937-64,
as provided by C++11 (together with the seeding process).

This guarantees good (pseudo-)randomness, while still being fast.


(c) Complete reproducibility

The Mersenne-Twister and the (improved) seeding is fully specified in
the C++ standard. Various distributions are also offered, but they are
implementation-dependent, and so complete high-quality implementation
of uniform random-number generation has been implemented in the OKlibrary,
making the random CNF generator fully specified.

No shortcuts are taken, but to guarantee uniform distribution, if needed
draws are rejected and repeated (for the "filtered"-option, and for uniform
distributions which do not divide 2^64).
