# Oliver Kullmann, 13.4.2019 (Swansea)

Times:

            1/8       1/3      1/8-18    1/3-18   1/3-13  1/8-p   1/3-p

Best        same      same     same      same     same    same    same

Current     2.50      2.78     2.13      7.48     2.77    2.43    2.76
            0.3.1     0.3.1    0.3.1     0.3.1    0.3.1   0.3.2   0.3.2


A)

Random$ ./RunTime ./TimingBernoulli
** Information on the program:

author:             "Oliver Kullmann"
 url:               "https://github.com/OKullmann/oklibrary/blob/master/Satisfiability/Transformers/Generators/Random/TimingBernoulli.cpp"
 license:           "GPL v3"
program name:       TimingBernoulli
 version:           0.3.0
 last change:       13.4.2019
 git-id:            ebb209d9c1daa008322b86a6625671756fbf783d
machine name:       csverify
 bogomips:          7183.87
compiler version:   g++ 8.2.0
 date:              Apr_13_2019 20:05:59
 options:           "--std=c++17 -pedantic -Ofast -DNDEBUG -march=native -fwhole-program -static -fno-finite-math-only"

** Current date, time, and ticks since the Unix epoch (1.1.1970):
  13.04.2019 20:13:50_+0100 1555182830706504915
  The number of ticks per nanosecond is 1.
Output program:
s 1000000000 1/8 ()
124997746 0.124997746 0.82935909643158182823
1e+09 0.125
MIN + MAX user times:
2.50 2.53
MIN + MAX wallclock times:
2.50 2.53
MIN + MAX system times:
0.00 0.00

Bernoulli2 achieves 2.34, roughly 10% faster.


Random$ ./RunTime ./TimingBernoulli s 1e9 1/3
1 2.81 2.81 MIN MAX
2 2.81 2.81
3 2.79 MIN 2.79 MIN
4 2.78 MIN 2.78 MIN
5 2.78 2.78
6 2.79 2.79
7 2.79 2.79
8 2.82 MAX 2.82 MAX
9 2.82 2.82
10 2.83 MAX 2.83 MAX
11 2.82 2.82
12 2.78 2.78
13 2.78 2.78
14 2.81 2.81
15 2.79 2.79
16 2.82 2.82
17 2.83 2.83
18 2.79 2.79
19 2.83 2.83
20 2.79 2.79
** Information on the program:

author:             "Oliver Kullmann"
 url:               "https://github.com/OKullmann/oklibrary/blob/master/Satisfiability/Transformers/Generators/Random/TimingBernoulli.cpp"
 license:           "GPL v3"
program name:       TimingBernoulli
 version:           0.3.1
 last change:       14.4.2019
 git-id:            829f4284fa1d98c7b50c3496b6bcf02fd069f199
machine name:       csverify
 bogomips:          7183.87
compiler version:   g++ 8.2.0
 date:              Apr_14_2019 15:11:58
 options:           "--std=c++17 -pedantic -Ofast -DNDEBUG -march=native -fwhole-program -static -fno-finite-math-only"

** Current date, time, and ticks since the Unix epoch (1.1.1970):
  14.04.2019 15:15:01_+0100 1555251301161062811
  The number of ticks per nanosecond is 1.
Output program:
s 1000000000 1/3 ()
333333601 0.33333360100000000001 0.98567425313230576579
1e+09 0.33333333333333333334
MIN + MAX user times:
2.78 2.83
MIN + MAX wallclock times:
2.78 2.83
MIN + MAX system times:
0.00 0.00


B)

With profiling:

Old version, with -p = 18 (that is, only running 1/8):

Random$ ./RunTime ./TimingBernoulli_-p
** Information on the program:

author:             "Oliver Kullmann"
 url:               "https://github.com/OKullmann/oklibrary/blob/master/Satisfiability/Transformers/Generators/Random/TimingBernoulli.cpp"
 license:           "GPL v3"
program name:       TimingBernoulli
 version:           0.3.0
 last change:       13.4.2019
 git-id:            ebb209d9c1daa008322b86a6625671756fbf783d
machine name:       csverify
 bogomips:          7183.87
compiler version:   g++ 8.2.0
 date:              Apr_13_2019 20:20:16
 options:           "--std=c++17 -pedantic -Ofast -DNDEBUG -march=native -fwhole-program -static -fno-finite-math-only -fprofile-use"

** Current date, time, and ticks since the Unix epoch (1.1.1970):
  13.04.2019 20:21:10_+0100 1555183270787265805
  The number of ticks per nanosecond is 1.
Output program:
s 1000000000 1/8 ()
124997746 0.124997746 0.82935909643158182823
1e+09 0.125
MIN + MAX user times:
2.13 2.20
MIN + MAX wallclock times:
2.13 2.20
MIN + MAX system times:
0.00 0.00

This is indeed faster than Bernoulli2 (as with csltok).


Now profiling on 1/3:

Random$ ./RunTime ./TimingBernoulli_-p s 1e9 1/3
** Information on the program:

author:             "Oliver Kullmann"
 url:               "https://github.com/OKullmann/oklibrary/blob/master/Satisfiability/Transformers/Generators/Random/TimingBernoulli.cpp"
 license:           "GPL v3"
program name:       TimingBernoulli
 version:           0.3.1
 last change:       14.4.2019
 git-id:            829f4284fa1d98c7b50c3496b6bcf02fd069f199
machine name:       csverify
 bogomips:          7183.87
compiler version:   g++ 8.2.0
 date:              Apr_14_2019 15:15:45
 options:           "--std=c++17 -pedantic -Ofast -DNDEBUG -march=native -fwhole-program -static -fno-finite-math-only -fprofile-use"

** Current date, time, and ticks since the Unix epoch (1.1.1970):
  14.04.2019 15:18:26_+0100 1555251506739194845
  The number of ticks per nanosecond is 1.
Output program:
s 1000000000 1/3 ()
333333601 0.33333360100000000001 0.98567425313230576579
1e+09 0.33333333333333333334
MIN + MAX user times:
7.48 7.69
MIN + MAX wallclock times:
7.48 7.69
MIN + MAX system times:
0.00 0.00

An enormous slowdown.


Random$ make profrunargs="s 1e9 1/3" profsuff="_13" p-TimingBernoulli
Random$ ./RunTime ./TimingBernoulli_13 s 1e9 1/3
** Information on the program:

author:             "Oliver Kullmann"
 url:               "https://github.com/OKullmann/oklibrary/blob/master/Satisfiability/Transformers/Generators/Random/TimingBernoulli.cpp"
 license:           "GPL v3"
program name:       TimingBernoulli
 version:           0.3.1
 last change:       14.4.2019
 git-id:            829f4284fa1d98c7b50c3496b6bcf02fd069f199
machine name:       csverify
 bogomips:          7183.87
compiler version:   g++ 8.2.0
 date:              Apr_14_2019 15:22:04
 options:           "--std=c++17 -pedantic -Ofast -DNDEBUG -march=native -fwhole-program -static -fno-finite-math-only -fprofile-use"

** Current date, time, and ticks since the Unix epoch (1.1.1970):
  14.04.2019 15:23:22_+0100 1555251802635942383
  The number of ticks per nanosecond is 1.
Output program:
s 1000000000 1/3 ()
333333601 0.33333360100000000001 0.98567425313230576579
1e+09 0.33333333333333333334
MIN + MAX user times:
2.77 2.83
MIN + MAX wallclock times:
2.77 2.83
MIN + MAX system times:
0.00 0.00

Same speed as without profiling.


New profiling -p, with both 1/8 and 1/3:

Random$ ./RunTime ./TimingBernoulli_-p
** Information on the program:

author:             "Oliver Kullmann"
 url:               "https://github.com/OKullmann/oklibrary/blob/master/Satisfiability/Transformers/Generators/Random/TimingBernoulli.cpp"
 license:           "GPL v3"
program name:       TimingBernoulli
 version:           0.3.2
 last change:       14.4.2019
 git-id:            3502611a9cd3e113e21cfe6a3fc8952784ee3c6b
machine name:       csverify
 bogomips:          7183.87
compiler version:   g++ 8.2.0
 date:              Apr_14_2019 18:17:00
 options:           "--std=c++17 -pedantic -Ofast -DNDEBUG -march=native -fwhole-program -static -fno-finite-math-only -fprofile-use"

** Current date, time, and ticks since the Unix epoch (1.1.1970):
  14.04.2019 18:18:06_+0100 1555262286260805980
  The number of ticks per nanosecond is 1.
Output program:
s 1000000000 1/8 ()
124997746 0.124997746 0.82935909643158182823
1e+09 0.125
MIN + MAX user times:
2.43 2.54
MIN + MAX wallclock times:
2.43 2.54
MIN + MAX system times:
0.00 0.00


Random$ ./RunTime ./TimingBernoulli_-p s 1e9 1/3
** Information on the program:

author:             "Oliver Kullmann"
 url:               "https://github.com/OKullmann/oklibrary/blob/master/Satisfiability/Transformers/Generators/Random/TimingBernoulli.cpp"
 license:           "GPL v3"
program name:       TimingBernoulli
 version:           0.3.2
 last change:       14.4.2019
 git-id:            3502611a9cd3e113e21cfe6a3fc8952784ee3c6b
machine name:       csverify
 bogomips:          7183.87
compiler version:   g++ 8.2.0
 date:              Apr_14_2019 18:17:00
 options:           "--std=c++17 -pedantic -Ofast -DNDEBUG -march=native -fwhole-program -static -fno-finite-math-only -fprofile-use"

** Current date, time, and ticks since the Unix epoch (1.1.1970):
  14.04.2019 18:20:45_+0100 1555262445538598276
  The number of ticks per nanosecond is 1.
Output program:
s 1000000000 1/3 ()
333333601 0.33333360100000000001 0.98567425313230576579
1e+09 0.33333333333333333334
MIN + MAX user times:
2.76 2.86
MIN + MAX wallclock times:
2.76 2.86
MIN + MAX system times:
0.00 0.00
