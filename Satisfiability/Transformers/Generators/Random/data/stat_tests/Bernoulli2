# Oliver Kullmann, 17.4.2019 (Swansea)

Testing class Bernoulli2

Four experiments on csverify:

.1

Random$ /usr/bin/time --output=Out31_e --append ./TimingBernoulli2 2e13 3 1 > Out31_e &
TimingBernoulli2 0.2.0 16.3.2019 954cfb6d774b9f562424d99234bbd1df6e75bc52
csverify 7183.87
g++ 8.2.0 Mar_16_2019 21:27:17
--std=c++17 -pedantic -Ofast -DNDEBUG -march=native -fwhole-program -static -fno-finite-math-only
20000000000000 3 1
()
2499999915548 0.1249999957774
2e+13 0.125
49385.85user 0.00system 13:43:05elapsed 99%CPU (0avgtext+0avgdata 1516maxresident)k
0inputs+8outputs (0major+53minor)pagefaults 0swaps

Roughly 405e6 generations per sec (lower than reported in TimingBernoulli2).

> confprop(99.9, 0.1249999957774, 2e13)
[1] 0.1249998 0.1250002
> confprop(1e-7, 0.1249999957774, 2e13)
[1] 0.125 0.125


gmonobit(m,n,p):=erfc(abs(m-n*p)/(sqrt(n)*sqrt(2)*sqrt(p)*sqrt(1-p)))

float(gmonobit(2499999915548, 2e13, 1/8));
(%o22) .9544655573781293

> prop.test(2499999915548, 2e13, 1/8)
x-squared = 0.0033, df = 1, p-value = 0.9545


.2

Random$ /usr/bin/time --output=Out31_0 --append ./TimingBernoulli2 2e13 3 1 0 > Out31_0 &
TimingBernoulli2 0.2.0 16.3.2019 954cfb6d774b9f562424d99234bbd1df6e75bc52
csverify 7183.87
g++ 8.2.0 Mar_16_2019 21:27:17
--std=c++17 -pedantic -Ofast -DNDEBUG -march=native -fwhole-program -static -fno-finite-math-only
20000000000000 3 1 0
(0,0)
2500000106276 0.12500000531380000001
2e+13 0.125
49273.68user 0.00system 13:41:13elapsed 99%CPU (0avgtext+0avgdata 1520maxresident)k
0inputs+8outputs (0major+54minor)pagefaults 0swaps

Roughly 406e6 generations per sec.

> confprop(99.9, 0.12500000531380000001, 2e13)
[1] 0.1249998 0.1250002
> confprop(1e-7, 0.12500000531380000001, 2e13)
[1] 0.125 0.125

float(gmonobit(2500000106276, 2e13, 1/8));
.9427167524217229

> prop.test(2500000106276, 2e13, 1/8)
X-squared = 0.0052, df = 1, p-value = 0.9427


.3

Random$ /usr/bin/time --output=Out101023_e --append ./TimingBernoulli2 2e13 10 1023 > Out101023_e &
TimingBernoulli2 0.2.0 16.3.2019 954cfb6d774b9f562424d99234bbd1df6e75bc52
csverify 7183.87
g++ 8.2.0 Mar_16_2019 21:27:17
--std=c++17 -pedantic -Ofast -DNDEBUG -march=native -fwhole-program -static -fno-finite-math-only
20000000000000 10 1023
()
19980468567160 0.99902342835799999999
2e+13 0.9990234375
49282.38user 0.00system 13:41:22elapsed 99%CPU (0avgtext+0avgdata 1516maxresident)k
0inputs+8outputs (0major+55minor)pagefaults 0swaps

Roughly 406e6 generations per sec.

> confprop(99.9, 0.99902342835799999999, 2e13)
[1] 0.9990234 0.9990235

We need confprop with higher precision.

float(gmonobit(19980468567160, 2e13, 1023/1024));
.19055608982711367

> prop.test(19980468567160, 2e13, 1023/1024)
X-squared = 1.7133, df = 1, p-value = 0.1906


.4

Random$ /usr/bin/time --output=Out101023_0 --append ./TimingBernoulli2 2e13 10 1023 0 > Out101023_0 &
TimingBernoulli2 0.2.0 16.3.2019 954cfb6d774b9f562424d99234bbd1df6e75bc52
csverify 7183.87
g++ 8.2.0 Mar_16_2019 21:27:17
--std=c++17 -pedantic -Ofast -DNDEBUG -march=native -fwhole-program -static -fno-finite-math-only
20000000000000 10 1023 0
(0,0)
19980469097847 0.99902345489234999998
2e+13 0.9990234375
49421.36user 0.00system 13:43:41elapsed 99%CPU (0avgtext+0avgdata 1516maxresident)k
0inputs+8outputs (0major+53minor)pagefaults 0swaps

Roughly 405e6 generations per sec.

> confprop(99.9, 0.99902345489234999998, 2e13)
[1] 0.9990234 0.9990235

float(gmonobit(19980469097847, 2e13, 1023/1024));
.012766880769691985

> prop.test(19980469097847, 2e13, 1023/1024)
X-squared = 6.2011, df = 1, p-value = 0.01277


This is a very low p-value, close to what in the NIST-test would be rejected.
So a larger test is needed:
Random$ ./TimingBernoulli2 -v
program name:       TimingBernoulli2
 version:           0.3.0
 last change:       21.3.2019
 git-id:            efd3a73bdaecf88852ec2e5cbda2dfc5c225d460
machine name:       csverify
 bogomips:          7183.87
compiler version:   g++ 8.2.0
 date:              Mar_21_2019 21:35:46
 options:           --std=c++17 -pedantic -Ofast -DNDEBUG -march=native -fwhole-program -static   -fno-finite-math-only
Random$ file="Out5e14_0"; /usr/bin/time --output=${file} --append ./TimingBernoulli2 5e14 10 1023 0  > ${file} &
500000000000000 10 1023 0
(0,0)
499511719465264 0.99902343893052799999 0.30578677642757254621
5e+14 0.9990234375
1199790.61user 0.00system 333:16:31elapsed 99%CPU (0avgtext+0avgdata 1516maxresident)k
0inputs+8outputs (0major+53minor)pagefaults 0swaps

Roughly 417e6 generations per sec.

bfloat(gmonobit(499511719465264, 5e14, 1023/1024));
0.305786776427572 631650154007611
                 ^
                 from this digit on is the p-value from the program not correct


Running a fuller approach, considering the distribution of p-values:

> make p-TimingBernoulli2
> mkdir ExpB2_10000; mv TimingBernoulli2_-p ExpB2_10000; cd ExpB2_10000
> ./TimingBernoulli2_-p rh 3e9 > data
> for (( seed=0; seed<10000; ++seed )); do ./TimingBernoulli2_-p "rd" 3e9 3 1 ${seed} >> data; done

On csverify:
ExpB2_10000> head -16 data
13.04.2019 16:44:41_+0100 1555170281115221788
# Producing program: https://github.com/OKullmann/oklibrary/blob/master/Satisfiability/Transformers/Generators/Random/TimingBernoulli2.cpp
# program name:       TimingBernoulli2
#  version:           0.4.0
#  last change:       13.4.2019
#  git-id:            c9fe4df28ba39688bdd837b4248dab5021a15244
# machine name:       csverify
#  bogomips:          7183.87
# compiler version:   g++ 8.2.0
#  compilation date:  Apr_13_2019 16:43:49
#  used options:      --std=c++17 -pedantic -Ofast -DNDEBUG -march=native -fwhole-program -static -fno-finite-math-only -fprofile-use
# Expected values for N=3e+09:
#  number true:             3.75e+08
#   sigma:                  18114.2
 N x e p seeds count freq pfreq
3000000000 1 3 0.125 "(0,0)" 375005385 0.12500179500000000001 0.7662525640283725041

> E=read.table("data", header=TRUE)
> length(E$N)
[1] 10000
> summary(E)
     count                freq           pfreq
 Min.   :374925754   Min.   :0.125   Min.   :0.0000415
 1st Qu.:374987954   1st Qu.:0.125   1st Qu.:0.2513134
 Median :375000257   Median :0.125   Median :0.4945724
 Mean   :375000297   Mean   :0.125   Mean   :0.4972492
 3rd Qu.:375012628   3rd Qu.:0.125   3rd Qu.:0.7455727
 Max.   :375073857   Max.   :0.125   Max.   :0.9999560
> ks.test(E$pfreq, "punif", exact=TRUE)
D = 0.0077, p-value = 0.5881
  ties should not be present for the Kolmogorov-Smirnov test
> length(E$pfreq) - length(unique(E$pfreq))
[1] 1361
> x = E$count - 3.75e8
> plot(x)
> hist(x)
> ks.test(x, "pnorm", 0, 18114.2, exact=TRUE)
D = 0.009, p-value = 0.3892
  ties should not be present for the Kolmogorov-Smirnov test
> min(x)
[1] -74246
> max(x)
[1] 73857


> make p-TimingBernoulli2
> mkdir ExpB2_101023_10000; mv TimingBernoulli2_-p ExpB2_101023_10000; cd ExpB2_101023_10000
> ./TimingBernoulli2_-p rh 3e9 10 1023 > data
> for (( seed=0; seed<10000; ++seed )); do ./TimingBernoulli2_-p "rd" 3e9 10 1023 ${seed} >> data; done

On csverify:
ExpB2_101023_10000> head -16 data
# Timestamp: 13.04.2019 16:54:57_+0100 1555170897771064825
# Producing program: https://github.com/OKullmann/oklibrary/blob/master/Satisfiability/Transformers/Generators/Random/TimingBernoulli2.cpp
# program name:       TimingBernoulli2
#  version:           0.4.0
#  last change:       13.4.2019
#  git-id:            c9fe4df28ba39688bdd837b4248dab5021a15244
# machine name:       csverify
#  bogomips:          7183.87
# compiler version:   g++ 8.2.0
#  compilation date:  Apr_13_2019 16:52:43
#  used options:      --std=c++17 -pedantic -Ofast -DNDEBUG -march=native -fwhole-program -static -fno-finite-math-only -fprofile-use
# Expected values for N=3e+09:
#  number true:             2.99707e+09
#   sigma:                  1710.8
 N x e p seeds count freq pfreq
3000000000 1023 10 0.999023 "(0,0)" 2997067046 0.99902234866666666667 0.056217733061379219901

> E=read.table("data", header=TRUE)
> length(E$N)
[1] 10000
> summary(E)
     count                freq           pfreq
 Min.   :2.997e+09   Min.   :0.999   Min.   :0.0001901
 1st Qu.:2.997e+09   1st Qu.:0.999   1st Qu.:0.2464714
 Median :2.997e+09   Median :0.999   Median :0.5001542
 Mean   :2.997e+09   Mean   :0.999   Mean   :0.5002813
 3rd Qu.:2.997e+09   3rd Qu.:0.999   3rd Qu.:0.7543826
 Max.   :2.997e+09   Max.   :0.999   Max.   :0.9997668
> ks.test(E$pfreq, "punif", exact=TRUE)
D = 0.0076, p-value = 0.6082
  ties should not be present for the Kolmogorov-Smirnov test
> length(E$pfreq) - length(unique(E$pfreq))
[1] 6659
> length(E$count) - length(unique(E$count))
[1] 4855
> x = E$count - 3e9*1023/1024
> plot(x)
> hist(x)
> ks.test(x, "pnorm", 0, 1710.8, exact=TRUE)
D = 0.0075, p-value = 0.6174
  ties should not be present for the Kolmogorov-Smirnov test
> min(x)
[1] -6231.5
> max(x)
[1] 6384.5
