# Oliver Kullmann, 17.4.2019 (Swansea)

Testing class Bernoulli


A) p = 1/3

> make p-TimingBernoulli
> mkdir ExpB_10000; mv TimingBernoulli_-p ExpB_10000; cd ExpB_10000
> ./TimingBernoulli_-p rh 3e9 1/3 > data
> for (( seed=0; seed<10000; ++seed )); do ./TimingBernoulli_-p "rd" 3e9 1/3 ${seed} >> data; done

On csverify:
kullmann-0:ExpB_10000> head -17 data
# Timestamp: 14.04.2019 18:55:36_+0100 1555264536955396176
# Producing program: https://github.com/OKullmann/oklibrary/blob/master/Satisfiability/Transformers/Generators/Random/TimingBernoulli.cpp
# program name:       TimingBernoulli
#  version:           0.3.2
#  last change:       14.4.2019
#  git-id:            3502611a9cd3e113e21cfe6a3fc8952784ee3c6b
# machine name:       csverify
#  bogomips:          7183.87
# compiler version:   g++ 8.2.0
#  compilation date:  Apr_14_2019 18:54:58
#  used options:      --std=c++17 -pedantic -Ofast -DNDEBUG -march=native -fwhole-program -static -fno-finite-math-only -fprofile-use
# Expected value for N ~ 3e+09 and p = 1/3 ~ 0.333333:
#  number true ~            1e+09
#  standard deviation ~     25819.9
# The probability of a discarded generator-call is 1 / 2^64 = 5.42101086242752217e-20.
 N p seeds count freq pfreq
3000000000 0.333333 "(0,0)" 1000023961 0.33334132033333333333 0.35340469611101146222

> E=read.table("data", header=TRUE)
> length(E$N)
[1] 10000
> summary(E$pfreq)
     Min.   1st Qu.    Median      Mean   3rd Qu.      Max.
0.0001333 0.2499000 0.5020000 0.5008000 0.7539000 0.9999000
> ks.test(E$pfreq, "punif", exact=TRUE)
D = 0.0054, p-value = 0.9277
  ties should not be present for the Kolmogorov-Smirnov test
> length(E$pfreq) - length(unique(E$pfreq))
[1] 990
> length(E$count) - length(unique(E$count))
[1] 530
> x = E$count - 1e9
> plot(x)
> hist(x)
> ks.test(x, "pnorm", 0, 25819.9, exact=TRUE)
D = 0.005, p-value = 0.963
  ties should not be present for the Kolmogorov-Smirnov test
> min(x)
[1] -90491
> max(x)
[1] 98641


Now with runs-tests:

a)
> DIR="ExpB_1555449862979782756"; mkdir ${DIR}; cd ${DIR}; cp ../TimingBernoulli .; ./TimingBernoulli 1,rh 3e9 1/3 > data
> for (( seed=0; seed<10000; ++seed )); do ./TimingBernoulli "1,rd" 3e9 1/3 1555449862979782756 ${seed} >> data; done
for (( seed=5801; seed<10000; ++seed )); do ./TimingBernoulli "1,rd" 3e9 1/3 1555449862979782756 ${seed} >> data; done

ExpB_1555449862979782756> head -19 data
# Timestamp: 16.04.2019 22:27:41_+0100 1555450061300824276
# Producing program: https://github.com/OKullmann/oklibrary/blob/master/Satisfiability/Transformers/Generators/Random/TimingBernoulli.cpp
# program name:       TimingBernoulli
#  version:           0.4.1
#  last change:       16.4.2019
#  git-id:            e1877c4bd581783b5e156a036582d28eeac91caa
# machine name:       csverify
#  bogomips:          7183.87
# compiler version:   g++ 8.2.0
#  compilation date:  Apr_16_2019 22:27:27
#  used options:      --std=c++17 -pedantic -Ofast -DNDEBUG -march=native -fwhole-program -static -fno-finite-math-only
# Expected values for N ~ 3e+09 and p = 1/3 ~ 0.333333:
# number true             1000000000
#   standard deviation    25819.888974716112568
# runs                    1333333333.8888888889
#   standard deviation    29814.239694199982676
# The probability of a discarded generator-call is 1 / 2^64 = 5.42101086242752217e-20.
 N p seeds count freq pfreq runs pruns
3000000000 0.33333333333333333334 "(3302426724,362156392,0,0)" 999996133 0.33333204433333333332 0.88094744698372547185 1333328351 0.93571074741371191587

> E=read.table("data", header=TRUE)
> ks.test(E$count, "pnorm", 1000000000, 25819.888974716112568, exact=TRUE)
D = 0.0056, p-value = 0.9133
  ties should not be present for the Kolmogorov-Smirnov test
> ks.test(E$pfreq, "punif", exact=TRUE)
D = 0.0072, p-value = 0.6745
  ties should not be present for the Kolmogorov-Smirnov test
> ks.test(E$runs, "pnorm", 1333333333.8888888889, 29814.239694199982676, exact=TRUE)
D = 0.0078, p-value = 0.5741
  ties should not be present for the Kolmogorov-Smirnov test
> E[E$pruns ==-Inf,]
        N         p                        seeds     count     freq
284 3e+09 0.3333333 (3302426724,362156392,283,0) 999894057 0.333298
           pfreq       runs pruns
284 4.075545e-05 1333250989  -Inf
> y=E$pruns[-c(284)]
> summary(y)
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max.
0.002374 0.344700 0.577100 0.561600 0.791300 0.999800
> ks.test(y, "punif")
D = 0.096, p-value < 2.2e-16
> erfc = function(x) { 2 * (1 - pnorm(x * sqrt(2))) }
> palt = function(r) { erfc(1/sqrt(2) * abs(r - 1333333333.8888888889) / 29814.239694199982676) }
  ties should not be present for the Kolmogorov-Smirnov test
> summary(palt(E$runs))
     Min.   1st Qu.    Median      Mean   3rd Qu.      Max.
0.0001463 0.2467000 0.4872000 0.4949000 0.7471000 0.9999000
> ks.test(palt(E$runs), "punif", exact=TRUE)
D = 0.0129, p-value = 0.06934
  ties should not be present for the Kolmogorov-Smirnov test


Rather low p-value 0.06934 for the corrected pruns-KS-test.

Repeated:
> TS="1555707533414144262"; PQ="1/3"; DIR="ExpB_${TS}"; mkdir ${DIR}; cd ${DIR}; mv ../TimingBernoulli_-p .; ./TimingBernoulli_-p 1,rh 3e9 ${PQ} > data
> for (( seed=0; seed<10000; ++seed )); do ./TimingBernoulli_-p "1,rd" 3e9 ${PQ} ${TS} ${seed} >> data; done

ExpB_1555707533414144262> head -19 data
# Timestamp: 19.04.2019 22:02:31_+0100 1555707751522531269
# Producing program: https://github.com/OKullmann/oklibrary/blob/master/Satisfiability/Transformers/Generators/Random/TimingBernoulli.cpp
# program name:       TimingBernoulli
#  version:           0.4.3
#  last change:       19.4.2019
#  git-id:            47fb811f3e6eefcacd71cf5b6ca77d836618cb98
# machine name:       csverify
#  bogomips:          7183.32
# compiler version:   g++ 8.2.0
#  compilation date:  Apr_19_2019 21:58:32
#  used options:      --std=c++17 -pedantic -Ofast -DNDEBUG -march=native -fwhole-program -static -fno-finite-math-only -fprofile-use
# Expected values for N ~ 3e+09 and p = 1/3 ~ 0.333333:
# number true             1000000000
#   standard deviation    25819.888974716112568
# runs                    1333333333.8888888889
#   standard deviation    29814.239694199982676
# The probability of a discarded generator-call is 1 / 2^64 = 5.42101086242752217e-20.
 N p seeds count freq pfreq runs pruns prunsa pruns12
3000000000 0.33333333333333333334 "(1468832006,362216386,0,0)" 999977536 0.33332584533333333332 0.38428566071642292367 1333311648 0.82194507018871165428 0.46700127111875480338 NA

> E=read.table("data", header=TRUE)
> summary(E)
     count                freq            pfreq                runs
 Min.   :9.999e+08   Min.   :0.3333   Min.   :0.0001816   Min.   :1.333e+09
 1st Qu.:1.000e+09   1st Qu.:0.3333   1st Qu.:0.2408537   1st Qu.:1.333e+09
 Median :1.000e+09   Median :0.3333   Median :0.4836352   Median :1.333e+09
 Mean   :1.000e+09   Mean   :0.3333   Mean   :0.4917520   Mean   :1.333e+09
 3rd Qu.:1.000e+09   3rd Qu.:0.3333   3rd Qu.:0.7451507   3rd Qu.:1.333e+09
 Max.   :1.000e+09   Max.   :0.3334   Max.   :0.9999691   Max.   :1.333e+09
     pruns              prunsa
 Min.   :0.001729   Min.   :0.0005944
 1st Qu.:0.350350   1st Qu.:0.2482313
 Median :0.579873   Median :0.4957229
 Mean   :0.562085   Mean   :0.4962624
 3rd Qu.:0.791984   3rd Qu.:0.7427261
 Max.   :0.999934   Max.   :0.9999970
> ks.test(E$count, "pnorm", 1000000000, 25819.888974716112568, exact=TRUE)
D = 0.0102, p-value = 0.2431
> ks.test(E$pfreq, "punif", exact=TRUE)
D = 0.0182, p-value = 0.002607
> ks.test(E$runs, "pnorm", 1333333333.8888888889, 29814.239694199982676, exact=TRUE)
D = 0.009, p-value = 0.3973
> ks.test(E$prunsa, "punif", exact=TRUE)
D = 0.009, p-value = 0.3968
> plot(E$pruns, E$prunsa)


Now low p-value 0.002607 for pfreq; needs to be repeated.

> TS="1555939963819449760"; PQ="1/3"; DIR="ExpB_${TS}"; mkdir ${DIR}; cd ${DIR}; mv ../TimingBernoulli_-p .; ./TimingBernoulli_-p 1,rh 3e9 ${PQ} > data
> for (( seed=0; seed<10000; ++seed )); do ./TimingBernoulli_-p "1,rd" 3e9 ${PQ} ${TS} ${seed} >> data; done

> E=read.table("data", header=TRUE)
> ks.test(E$pfreq, "punif", exact=TRUE)
D = 0.0155, p-value = 0.01646
> ks.test(E$pruns, "punif", exact=TRUE)
D = 0.0088, p-value = 0.4174

Again rather low p-value for pfreq: 0.01646.
Now with more repetitions of sets:

> TS="1556220431328719543"; PQ="1/3"; DIR="ExpB_${TS}"; mkdir ${DIR}; cd ${DIR}; mv ../TimingBernoulli_-p .; ./TimingBernoulli_-p 1,rh 3e9 ${PQ} > data
> for (( seed=0; seed<100000; ++seed )); do ./TimingBernoulli_-p "1,rd" 3e9 ${PQ} ${TS} ${seed} >> data; done

Aborted with last seed 39160.

> E=read.table("data", header=TRUE)
> summary(E)
      rej        count                freq            pfreq
 Min.   :0   Min.   :9.999e+08   Min.   :0.3333   Min.   :0.0000468
 1st Qu.:0   1st Qu.:1.000e+09   1st Qu.:0.3333   1st Qu.:0.2475828
 Median :0   Median :1.000e+09   Median :0.3333   Median :0.4943373
 Mean   :0   Mean   :1.000e+09   Mean   :0.3333   Mean   :0.4967164
 3rd Qu.:0   3rd Qu.:1.000e+09   3rd Qu.:0.3333   3rd Qu.:0.7469247
 Max.   :0   Max.   :1.000e+09   Max.   :0.3334   Max.   :1.0000000

      runs               pruns          pruns12
 Min.   :1.333e+09   Min.   :0.000002   Mode:logical
 1st Qu.:1.333e+09   1st Qu.:0.244504   NA's:39161
 Median :1.333e+09   Median :0.495965
 Mean   :1.333e+09   Mean   :0.497923
 3rd Qu.:1.333e+09   3rd Qu.:0.751809
 Max.   :1.333e+09   Max.   :0.999997

> length(E$pruns)
[1] 39161
> binom.test(1,39161,0.000002,alternative="greater")
number of successes = 1, number of trials = 39161, p-value = 0.07533
> ks.test(E$pfreq,"punif",exact=TRUE)
D = 0.0074, p-value = 0.02884
> ks.test(E$pruns,"punif",exact=TRUE)
D = 0.0071, p-value = 0.0392

Again low p-values?!? pfreq: 0.02884, pruns: 0.0392.

Now running the above analysis T=10000 times, via MetaBernoulli:

> TS="1557693337150596383"; DIR="ExpMB_${TS}"; mkdir ${DIR}; cd ${DIR}; mv ../MetaBernoulli .
> time ./MetaBernoulli 1e6 10000 10000 > data

Apparently access to file was interrupted -- and the program doesn't notice
that; analysis of the incomplete run:

> E=read.table("data", header=TRUE)
> summary(E)
                              seeds          ksfreq              lfreq
 (429222963,362678770,0,0,0,0)   :   1   Min.   :0.0000485   Min.   :3.000
 (429222963,362678770,1,0,0,0)   :   1   1st Qu.:0.2260963   1st Qu.:3.000
 (429222963,362678770,10,0,0,0)  :   1   Median :0.4587611   Median :4.000
 (429222963,362678770,100,0,0,0) :   1   Mean   :0.4698182   Mean   :3.746
 (429222963,362678770,1000,0,0,0):   1   3rd Qu.:0.7007160   3rd Qu.:4.000
 (429222963,362678770,1001,0,0,0):   1   Max.   :0.9975465   Max.   :7.000
 (Other)                         :4134
     cfreq            pfreq               ksruns              lruns
 Min.   : 1.000   Min.   :0.0000831   Min.   :0.0001628   Min.   :3.000
 1st Qu.: 1.000   1st Qu.:0.2642411   1st Qu.:0.2042396   1st Qu.:3.000
 Median : 2.000   Median :0.6321390   Median :0.4391002   Median :4.000
 Mean   : 4.105   Mean   :0.5005284   Mean   :0.4498064   Mean   :3.745
 3rd Qu.: 7.000   3rd Qu.:0.6321390   3rd Qu.:0.6818492   3rd Qu.:4.000
 Max.   :20.000   Max.   :0.9999548   Max.   :0.9992703   Max.   :8.000

     cruns            pruns
 Min.   : 1.000   Min.   :0.0000497
 1st Qu.: 1.000   1st Qu.:0.2642411
 Median : 2.000   Median :0.6321390
 Mean   : 4.144   Mean   :0.4989719
 3rd Qu.: 7.000   3rd Qu.:0.6321390
 Max.   :20.000   Max.   :0.9995026

> ks.test(E$ksfreq, "punif", exact=TRUE)
D = 0.0518, p-value = 4.326e-10
> ks.test(E$ksruns, "punif", exact=TRUE)
D = 0.0752, p-value = 4.741e-14


Very clearly the ks-p-values are not uniformly distributed?!?
To check, now for p=1/2:
> TS="1557873525429195677"; DIR="ExpMB_${TS}"; mkdir ${DIR}; cd ${DIR}; mv ../MetaBernoulli .
> time ./MetaBernoulli 1e6 10000 1000 1/2 > data
XXX


b)
> TS="1555450325946629014"; DIR="ExpB_${TS}"; mkdir ${DIR}; cd ${DIR}; cp ../TimingBernoulli .; ./TimingBernoulli 1,rh 3e9 8/19 > data
> for (( seed=0; seed<10000; ++seed )); do ./TimingBernoulli "1,rd" 3e9 8/19 ${TS} ${seed} >> data; done
> for (( seed=5452; seed<10000; ++seed )); do ./TimingBernoulli "1,rd" 3e9 8/19 1555450325946629014 ${seed} >> data; done

ExpB_1555450325946629014> head -19 data
# Timestamp: 16.04.2019 22:34:01_+0100 1555450441885528629
# Producing program: https://github.com/OKullmann/oklibrary/blob/master/Satisfiability/Transformers/Generators/Random/TimingBernoulli.cpp
# program name:       TimingBernoulli
#  version:           0.4.1
#  last change:       16.4.2019
#  git-id:            e1877c4bd581783b5e156a036582d28eeac91caa
# machine name:       csverify
#  bogomips:          7183.87
# compiler version:   g++ 8.2.0
#  compilation date:  Apr_16_2019 22:27:27
#  used options:      --std=c++17 -pedantic -Ofast -DNDEBUG -march=native -fwhole-program -static -fno-finite-math-only
# Expected values for N ~ 3e+09 and p = 8/19 ~ 0.421053:
# number true             1263157894.7368421053
#   standard deviation    27042.594902452903201
# runs                    1462603878.6288088643
#   standard deviation    28035.649656777447255
# The probability of a discarded generator-call is 17 / 2^64 = 9.2157184661267876891e-19.
 N p seeds count freq pfreq runs pruns
3000000000 0.42105263157894736841 "(2412805014,362156500,0,0)" 1263190965 0.42106365500000000001 0.22136923068911314107 1462585288 0.30039544492123270423

> E=read.table("data", header=TRUE)
> E=read.table("data", header=TRUE)
> ks.test(E$count, "pnorm", 1263157894.7368421053, 27042.594902452903201,exact=TRUE)
D = 0.0054, p-value = 0.9312
> ks.test(E$pfreq, "punif", exact=TRUE)
D = 0.0056, p-value = 0.9112
> ks.test(E$runs, "pnorm", 1462603878.6288088643, 28035.649656777447255, exact=TRUE)
D = 0.0072, p-value = 0.6791
> E[E$pruns==-Inf,]
         N         p                         seeds      count      freq
5775 3e+09 0.4210526 (2412805014,362156500,5774,0) 1263048742 0.4210162
            pfreq       runs pruns
5775 5.429469e-05 1462582221  -Inf
> y=E$pruns[-c(5775)]
> summary(y)
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max.
0.000193 0.275100 0.517200 0.514300 0.755400 1.000000
> ks.test(E$pruns, "punif")
D = 0.0296, p-value = 5.136e-08
> erfc = function(x) { 2 * (1 - pnorm(x * sqrt(2))) }
> palt = function(r) { erfc(1/sqrt(2) * abs(r - 1462603878.6288088643) / 28035.649656777447255) }
> ks.test(palt(E$runs), "punif", exact=TRUE)
D = 0.0081, p-value = 0.5268
> summary(palt(E$runs))
     Min.   1st Qu.    Median      Mean   3rd Qu.      Max.
0.0003131 0.2532000 0.5000000 0.4991000 0.7482000 1.0000000

Seems alright.


c)
> TS="1555450620850022194"; PQ="456/2003"; DIR="ExpB_${TS}"; mkdir ${DIR}; cd ${DIR}; cp ../TimingBernoulli .; ./TimingBernoulli 1,rh 3e9 ${PQ} > data
> for (( seed=0; seed<10000; ++seed )); do ./TimingBernoulli "1,rd" 3e9 ${PQ} ${TS} ${seed} >> data; done
> for (( seed=6811; seed<10000; ++seed )); do ./TimingBernoulli "1,rd" 3e9 456/2003 1555450620850022194 ${seed} >> data; done

ExpB_1555450620850022194> head -19 data
# Timestamp: 16.04.2019 22:39:15_+0100 1555450755107319853
# Producing program: https://github.com/OKullmann/oklibrary/blob/master/Satisfiability/Transformers/Generators/Random/TimingBernoulli.cpp
# program name:       TimingBernoulli
#  version:           0.4.1
#  last change:       16.4.2019
#  git-id:            e1877c4bd581783b5e156a036582d28eeac91caa
# machine name:       csverify
#  bogomips:          7183.87
# compiler version:   g++ 8.2.0
#  compilation date:  Apr_16_2019 22:27:27
#  used options:      --std=c++17 -pedantic -Ofast -DNDEBUG -march=native -fwhole-program -static -fno-finite-math-only
# Expected values for N ~ 3e+09 and p = 456/2003 ~ 0.227659:
# number true             682975536.69495756365
#   standard deviation    22967.157902543560512
# runs                    1054980684.8890780155
#   standard deviation    31574.944559314179946
# The probability of a discarded generator-call is 659 / 2^64 = 3.5724461583397371101e-17.
 N p seeds count freq pfreq runs pruns
3000000000 0.22765851223165252122 "(963454770,362156569,0,0)" 683009169 0.22766972299999999999 0.14309421182926758782 1055019851 0.93616202735847907465

> E=read.table("data", header=TRUE)
> ks.test(E$count, "pnorm", 682975536.69495756365, 22967.157902543560512, exact=TRUE)
D = 0.0074, p-value = 0.6389
  ties should not be present for the Kolmogorov-Smirnov test
> ks.test(E$pfreq, "punif", exact=TRUE)
D = 0.0062, p-value = 0.8294
  ties should not be present for the Kolmogorov-Smirnov test

> ks.test(E$runs, "pnorm", 1054980684.8890780155, 31574.944559314179946, exact=TRUE)
D = 0.0065, p-value = 0.7852
  ties should not be present for the Kolmogorov-Smirnov test

> E[4701,]
         N         p                        seeds     count    freq
4701 3e+09 0.2276585 (963454770,362156569,4700,0) 683070031 0.22769
            pfreq       runs pruns
4701 3.883175e-05 1055106724  -Inf
> y = E$pruns[-c(4701)]
> summary(y)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
0.01475 0.48780 0.68740 0.65430 0.84770 0.99990
> ks.test(y, "punif")
D = 0.2407, p-value < 2.2e-16

Looks as if the current function runstest (for general p0) is not applicable
due to using the *measured* frequency (not the given one).

Simulating the new runstest_alt-function:

erfc = function(x) { 2 * (1 - pnorm(x * sqrt(2))) }
palt = function(r) { erfc(1/sqrt(2) * abs(r - 1054980684.8890780155) / 31574.944559314179946) }
> summary(palt(E$runs))
     Min.   1st Qu.    Median      Mean   3rd Qu.      Max.
0.0000282 0.2524000 0.5013000 0.5013000 0.7533000 0.9999000
> ks.test(palt(E$runs), "punif")
D = 0.0059, p-value = 0.8795
  ties should not be present for the Kolmogorov-Smirnov test

That looks more appropriate.


d)
> TS="1555714153923208544"; PQ="1/2"; DIR="ExpB_${TS}"; mkdir ${DIR}; cd ${DIR}; mv ../TimingBernoulli_-p .; ./TimingBernoulli_-p 1,rh 3e9 ${PQ} > data
> for (( seed=0; seed<10000; ++seed )); do ./TimingBernoulli_-p "1,rd" 3e9 ${PQ} ${TS} ${seed} >> data; done

ExpB_1555714153923208544> head -19 data
# Timestamp: 19.04.2019 23:50:11_+0100 1555714211271939555
# Producing program: https://github.com/OKullmann/oklibrary/blob/master/Satisfiability/Transformers/Generators/Random/TimingBernoulli.cpp
# program name:       TimingBernoulli
#  version:           0.4.3
#  last change:       19.4.2019
#  git-id:            bfac8d12361a6dfd75eb5cd703d5c7fcc02b9fc8
# machine name:       csverify
#  bogomips:          7183.32
# compiler version:   g++ 8.2.0
#  compilation date:  Apr_19_2019 23:48:33
#  used options:      --std=c++17 -pedantic -Ofast -DNDEBUG -march=native -fwhole-program -static -fno-finite-math-only -fprofile-use
# Expected values for N ~ 3e+09 and p = 1/2 ~ 0.5:
# number true             1500000000
#   standard deviation    27386.127875258305673
# runs                    1500000000.5
#   standard deviation    27386.127870693951026
# The probability of a discarded generator-call is 0 / 2^64 = 0.
 N p seeds count freq pfreq runs pruns prunsa pruns12
3000000000 0.5 "(3433293152,362217927,0,0)" 1499976630 0.49999220999999999999 0.39346427302507554243 1499995186 0.86046097802173950281 0.86045053259060705624 0.8604753219692238658

> E=read.table("data", header=TRUE)
> ks.test(E$pfreq, "punif", exact=TRUE)
D = 0.0094, p-value = 0.338
> E[E$pruns12==-Inf,]
         N   p                         seeds      count      freq        pfreq
7310 3e+09 0.5 (3433293152,362217927,7309,0) 1500113653 0.5000379 3.324451e-05
           runs pruns    prunsa pruns12
7310 1500005164  -Inf 0.8504499    -Inf
> x=E$pruns[-c(7310)]
> y=E$prunsa[-c(7310)]
> z=E$pruns12[-c(7310)]
> summary(x)
     Min.   1st Qu.    Median      Mean   3rd Qu.      Max.
0.0000531 0.2440000 0.4950000 0.4989000 0.7508000 1.0000000
> summary(y)
     Min.   1st Qu.    Median      Mean   3rd Qu.      Max.
0.0000531 0.2440000 0.4950000 0.4989000 0.7508000 1.0000000
> summary(z)
     Min.   1st Qu.    Median      Mean   3rd Qu.      Max.
0.0000531 0.2440000 0.4950000 0.4989000 0.7508000 1.0000000
> ks.test(x, "punif", exact=TRUE)
D = 0.0092, p-value = 0.3585
> ks.test(y, "punif", exact=TRUE)
D = 0.0092, p-value = 0.3586
> ks.test(z, "punif", exact=TRUE)
D = 0.0092, p-value = 0.3574
> plot(x,(x-z)/x)
> plot(y,(y-z)/y)

So here apparently negligible differences between the three versions.
Between x (now deprecated) and z (the NIST-version) there is a strong
relation, as the plot shows, between y and z and weak relation (randomised,
but apparently of the same nature). In both cases the relative errors goes
to zero with x resp. y approaching 1, and is greatest at zero.

Two things are strange in the NIST-test:

1. The abortion-rule (creating -Inf) -- there is nothing special here.
2. Using the measured frequency of heads (true) instead of the assumed
probability p=1/2 --- for this p it doesn't seem to matter (at least not
for the large sample-sizes we always consider), but the larger p deviates
from 1/2, the larger apparently the error (as in the old form, yielding
x (now deprecated)).
