#!/bin/bash

# TODOS:
# 1. Parallelise
#   - Seems easiest to be done at makefile-level, and splitting this
#     script into smaller scripts.
#   - What to do with the loops? First just leave them as they are, and
#     handling only the 8 units.

set -o errexit
set -o nounset

program="RunTests"
version="0.1.7"

error="ERROR[${program}]: "

# Unit 1

S="./program_debug"
echo "Testcase: $S"
result="$($S)"
expected=$'c solutions                             2\nc nodes                                 1\nc height                                0\nc max_unodes                            0\nc max_snodes                            1\nc HortonStrahler                        0\nc q=leaves/sols                         0.5'
if [[ "$result" != "$expected" ]]; then
  echo -e "${error}program_debug without arguments:\n${result}\n${expected}"
  exit 1
fi

# Unit 2

echo "Testcase: $S 2"
result="$($S 2)"
expected=$'c solutions                             16\nc nodes                                 1\nc height                                0\nc max_unodes                            0\nc max_snodes                            1\nc HortonStrahler                        0\nc q=leaves/sols                         0.0625'
if [[ "$result" != "$expected" ]]; then
  echo -e "${error}program_debug with argument 1:\n${result}\n${expected}"
  exit 1
fi

# program1="valgrind -q --exit-on-first-error=yes ./SimTaw_debug"
program1="./SimTaw NA"
program2="valgrind -q ./SimTaw_debug NA"
program3="./SimTaw NA p"
program4="valgrind -q ./SimTaw_debug NA p"
declare -a programs=("${program1}" "${program2}" "${program3}" "${program4}")

declare -a outcomes=(0 "1 1" "0 3" "0 5" "2 7" "10 19" "4 51" "40 155" "92 453")

maxN=8

# Unit 3

for S in "${programs[@]}"; do
  echo $S
  for (( N=1; N<=maxN; ++N )); do
    solvercall="${S/ NA/ $N}"
    echo "Testcase: ${solvercall}" > /dev/null
    result="$(${solvercall} ${N})"
    expected="${outcomes[$N]}"
    if [[ "$result" != "$expected" ]]; then
      echo -e "${error}\"${S} ${N}\" yields \"${result}\", but should yield ${expected}."
      exit $N
    fi
  done

done

# Unit 4

program1="./ExpQueens"
program2="valgrind -q ./ExpQueens_debug"
declare -a programs=("${program1}" "${program2}")

declare -a outcomes0=(0 1 0 0 2 10 4 40 92)
declare -a outcomes1=(0 1 3 5 7 19 51 155 453)
declare -a outcomes2=(0 0 1 2 3 5 8 11 17)
declare -a outcomes3=(0 0 3 5 1 0 5 3 9)
declare -a outcomes4=(0 1 0 0 3 19 1 3 3)
declare -a outcomes5=(0 0 1 1 1 2 3 4 4)
declare -a outcomes6=(0 1 inf inf 2 1 6.5 1.95 2.46739)

for S in "${programs[@]}"; do
  echo $S
  for (( N=1; N<=maxN; ++N )); do
    solvercall="${S/ $N}"
    echo "Testcase: ${solvercall}" > /dev/null
    result="$(${solvercall} ${N})"
    expected=$'c solutions                             '${outcomes0[$N]}$'\nc nodes                                 '${outcomes1[$N]}$'\nc height                                '${outcomes2[$N]}$'\nc max_unodes                            '${outcomes3[$N]}$'\nc max_snodes                            '${outcomes4[$N]}$'\nc HortonStrahler                        '${outcomes5[$N]}$'\nc q=leaves/sols                         '${outcomes6[$N]}
    if [[ "$result" != "$expected" ]]; then
      echo -e "${error}\"${S} ${N}\" yields \"${result}\", but should yield ${expected}."
      exit $N
    fi
  done

done

#Unit 5

declare -a outcomes0=(0 1 0 0 2 10 4 40 92)
declare -a outcomes1=(0 1 3 9 23 87 343 1543 7911)
declare -a outcomes2=(0 0 1 4 9 14 25 34 49)
declare -a outcomes3=(0 0 3 9 7 43 43 211 875)
declare -a outcomes4=(0 1 0 0 1 3 1 3 3)
declare -a outcomes5=(0 0 1 1 2 2 3 4 5)
declare -a outcomes6=(0 1 inf inf 6 4.4 43 19.3 43)

for S in "${programs[@]}"; do
  echo $S "a"
  for (( N=1; N<=maxN; ++N )); do
    solvercall="${S/ $N}"
    echo "Testcase: ${solvercall}" > /dev/null
    result="$(${solvercall} ${N} a)"
    expected=$'c solutions                             '${outcomes0[$N]}$'\nc nodes                                 '${outcomes1[$N]}$'\nc height                                '${outcomes2[$N]}$'\nc max_unodes                            '${outcomes3[$N]}$'\nc max_snodes                            '${outcomes4[$N]}$'\nc HortonStrahler                        '${outcomes5[$N]}$'\nc q=leaves/sols                         '${outcomes6[$N]}
    if [[ "$result" != "$expected" ]]; then
      echo -e "${error}\"${S} ${N} a\" yields \"${result}\", but should yield ${expected}."
      exit $N
    fi
  done

done

# Unit 6

declare -a outcomes0=(0 1 0 0 2 10 4 40 92)
declare -a outcomes1=(0 1 3 5 11 27 75 209 783)
declare -a outcomes2=(0 0 1 2 4 6 9 12 17)
declare -a outcomes3=(0 0 3 5 3 1 13 5 31)
declare -a outcomes4=(0 1 0 0 1 3 1 3 9)
declare -a outcomes5=(0 0 1 1 2 2 3 4 5)
declare -a outcomes6=(0 1 inf inf 3 1.4 9.5 2.625 4.26087)

for S in "${programs[@]}"; do
  echo $S "f"
  for (( N=1; N<=maxN; ++N )); do
    solvercall="${S/ $N}"
    echo "Testcase: ${solvercall}" > /dev/null
    result="$(${solvercall} ${N} f)"
    expected=$'c solutions                             '${outcomes0[$N]}$'\nc nodes                                 '${outcomes1[$N]}$'\nc height                                '${outcomes2[$N]}$'\nc max_unodes                            '${outcomes3[$N]}$'\nc max_snodes                            '${outcomes4[$N]}$'\nc HortonStrahler                        '${outcomes5[$N]}$'\nc q=leaves/sols                         '${outcomes6[$N]}
    if [[ "$result" != "$expected" ]]; then
      echo -e "${error}\"${S} ${N} f\" yields \"${result}\", but should yield ${expected}."
      exit $N
    fi
  done

done

# Unit 7

#declare -a outcomes0=(0 1 0 0 2 10 4 40 92)
#declare -a outcomes1=(0 1 3 7 17 43 129 361 1455)
#declare -a outcomes2=(0 0 1 3 6 13 18 25 37)
#declare -a outcomes3=(0 0 3 7 3 3 19 17 77)
#declare -a outcomes4=(0 1 0 0 1 3 1 3 3)
#declare -a outcomes5=(0 0 1 1 2 2 3 4 4)
#declare -a outcomes6=(0 1 inf inf 4.5 2.2 16.25 4.525 7.91304)
#
#for S in "${programs[@]}"; do
#  echo $S "r"
#  for (( N=1; N<=maxN; ++N )); do
#    solvercall="${S/ $N}"
#    echo "Testcase: ${solvercall}" > /dev/null
#    result="$(${solvercall} ${N} r)"
#    expected=$'c solutions                             '${outcomes0[$N]}$'\nc nodes                                 '${outcomes1[$N]}$'\nc height                                '${outcomes2[$N]}$'\nc max_unodes                            '${outcomes3[$N]}$'\nc max_snodes                            '${outcomes4[$N]}$'\nc HortonStrahler                        '${outcomes5[$N]}$'\nc q=leaves/sols                         '${outcomes6[$N]}
#    if [[ "$result" != "$expected" ]]; then
#      echo -e "${error}\"${S} ${N} r\" yields \"${result}\", but should yield ${expected}."
#      exit $N
#    fi
#  done
#
#done

# Unit 8

declare -a outcomes0=(0 1 0 0 2 10 4 40 92)
declare -a outcomes1=(0 1 3 5 13 37 119 435 1801)
declare -a outcomes2=(0 0 1 2 5 10 17 26 37)
declare -a outcomes3=(0 0 3 5 3 9 35 59 235)
declare -a outcomes4=(0 1 0 0 1 3 1 1 3)
declare -a outcomes5=(0 0 1 1 2 2 3 4 4)
declare -a outcomes6=(0 1 inf inf 3.5 1.9 15 5.45 9.79348)

for S in "${programs[@]}"; do
  echo $S "s"
  for (( N=1; N<=maxN; ++N )); do
    solvercall="${S/ $N}"
    echo "Testcase: ${solvercall}" > /dev/null
    result="$(${solvercall} ${N} s)"
    expected=$'c solutions                             '${outcomes0[$N]}$'\nc nodes                                 '${outcomes1[$N]}$'\nc height                                '${outcomes2[$N]}$'\nc max_unodes                            '${outcomes3[$N]}$'\nc max_snodes                            '${outcomes4[$N]}$'\nc HortonStrahler                        '${outcomes5[$N]}$'\nc q=leaves/sols                         '${outcomes6[$N]}
    if [[ "$result" != "$expected" ]]; then
      echo -e "${error}\"${S} ${N} s\" yields \"${result}\", but should yield ${expected}."
      exit $N
    fi
  done

done
