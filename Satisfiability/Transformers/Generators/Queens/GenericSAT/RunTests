#!/bin/bash
set -o errexit
set -o nounset

program="RunTests"
version="0.1.4"

error="ERROR[${program}]: "

maxN=8

S="./program_debug"
echo "Testcase: $S"
result="$($S)"
expected=$'c solutions  2\nc nodes      1\nc height     0'
if [[ "$result" != "$expected" ]]; then
  echo -e "${error}program_debug without arguments:\n${result}\n${expected}"
  exit 1
fi
echo "Testcase: $S 2"
result="$($S 2)"
expected=$'c solutions  16\nc nodes      1\nc height     0'
if [[ "$result" != "$expected" ]]; then
  echo -e "${error}program_debug with argument 1:\n${result}\n${expected}"
  exit 1
fi

# program1="valgrind -q --exit-on-first-error=yes ./SimTaw_debug"
program1="./SimTaw"
program2="valgrind -q ./SimTaw_debug"
declare -a programs=("${program1}" "${program2}")

declare -a outcomes=(0 "1 1" "0 3" "0 5" "2 7" "10 19" "4 51" "40 155" "92 453")

for S in "${programs[@]}"; do
  for (( N=1; N<=maxN; ++N )); do
    echo "Testcase: ${S} ${N}"
    result="$(${S} ${N})"
    expected="${outcomes[$N]}"
    if [[ "$result" != "$expected" ]]; then
      echo -e "${error}\"${S} ${N}\" yields \"${result}\", but should yield ${expected}."
      exit $N
    fi
  done

done
