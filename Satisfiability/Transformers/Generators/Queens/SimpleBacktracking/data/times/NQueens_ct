# Oliver Kullmann, 24.4.2020 (Swansea)

OLD:

Timing 17/3/2019

csltok (gcc 8.3.0):
NicolosiCounting> time ./qcount_ct
14772512 355451208
real    0m16.799s
user    0m16.670s
sys     0m0.081s

With new optimisation-options
  -Ofast -DNDEBUG -march=native -fwhole-program -static
compared to old ones
  -Ofast -DNDEBUG -ffinite-math-only -funroll-loops -fwhole-program -fno-math-errno -funsafe-loop-optimizations
we get
NicolosiCounting> time ./qcount_ct
14772512 355451208
real    0m16.911s
user    0m16.868s
sys     0m0.002s

There seems to be a slowdown.

Playing with options:
 - "-static" might yield some slowdown
 - "-funroll-loops" might yield some slowdown
 - "-funsafe-loop-optimizations" might yield some speedup

Unclear whether -static has an effect on qcount; so let's leave it out here.

cs-wsok:
NicolosiCounting> time ./qcount_ct
14772512 355451208
real    0m12.677s
user    0m12.668s
sys     0m0.002s

With new options:
csoliver@cs-wsok:~/OKplatform/OKsystem/OKlib/Satisfiability/Transformers/Generators/Queens/NicolosiCounting> time ./qcount_ct
14772512 355451208
real    0m12.320s
user    0m12.312s
sys     0m0.000s

Possibly small improvement.

Without -static:
NicolosiCounting> time ./qcount_ct
14772512 355451208
real    0m12.584s
user    0m12.574s
sys     0m0.001s

This might have relevance.

NicolosiCounting> rm qcount_ct; make CXXFLAGS="-static" qcount_ct
g++ -DNN=16 --std=c++17 -pedantic -fmax-errors=5 -Wall -Wextra -Ofast -DNDEBUG -march=native -fwhole-program -funsafe-loop-optimizations  -static NQueens_ct.cpp -o qcount_ct
csoliver@cs-wsok:~/OKplatform/OKsystem/OKlib/Satisfiability/Transformers/Generators/Queens/NicolosiCounting> time ./qcount_ct14772512 355451208
real    0m12.326s
user    0m12.317s
sys     0m0.000s

So on this platform, -static might have some positive effect.


csverify:
NicolosiCounting$ time ./qcount_ct
14772512 355451208
real    0m10.153s
user    0m10.149s
sys     0m0.004s

With new options:
NicolosiCounting$ time ./qcount_ct
14772512 355451208
real    0m9.209s
user    0m9.205s
sys     0m0.004s

This should be an improvement.

Seems unchanged by +- static and +- unsafe-loop-optimizations.


NEW:

