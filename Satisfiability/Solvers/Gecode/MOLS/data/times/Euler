# Oleg Zaikin, 21.5.2021 (Irkutsk)

A)

Initial version (with minor editorial modifications) by Noah Rubin and Curtis Bright.

amd1:

MOLS$ RunTime ./2mols 6
program name:       2mols
 version:           0.1.2
 last change:       21.5.2021
 git-id:            8dc2ef335892dac1dc100606951e6fd44c01a1d1
machine name:       amd1
 bogomips:          7585.95
compiler version:   g++ 10.3.0
 date:              May_21_2021 13:41:20
 options:           "--std=c++20 -pedantic -Ofast -DNDEBUG -march=native -fwhole-program -fno-math-errno -fno-trapping-math -fno-rounding-math -fno-signaling-nans -fno-unsafe-math-optimizations -fno-finite-math-only -fno-associative-math -fno-reciprocal-math -fsigned-zeros -lgecodesearch -lgecodeint -lgecodekernel -lgecodesupport"
 NDEBUG:            defined
 OPTIMIZE:          on
Output program:
No solutions found
MIN + MAX user times:
0.14 0.16
MIN + MAX wallclock times:
0.15 0.16
MIN + MAX system times:
0.00 0.00

MOLS$ RunTime ./2mols 7
program name:       2mols
 version:           0.1.2
 last change:       21.5.2021
 git-id:            8dc2ef335892dac1dc100606951e6fd44c01a1d1
machine name:       amd1
 bogomips:          7585.95
compiler version:   g++ 10.3.0
 date:              May_21_2021 13:41:20
 options:           "--std=c++20 -pedantic -Ofast -DNDEBUG -march=native -fwhole-program -fno-math-errno -fno-trapping-math -fno-rounding-math -fno-signaling-nans -fno-unsafe-math-optimizations -fno-finite-math-only -fno-associative-math -fno-reciprocal-math -fsigned-zeros -lgecodesearch -lgecodeint -lgecodekernel -lgecodesupport"
 NDEBUG:            defined
 OPTIMIZE:          on
Output program:
0 1 2 3 4 5 6
1 0 3 6 5 4 2
2 3 5 0 6 1 4
3 4 1 5 2 6 0
4 2 6 1 0 3 5
5 6 0 4 1 2 3
6 5 4 2 3 0 1

0 1 2 3 4 5 6
2 3 1 5 0 6 4
3 5 4 6 2 0 1
4 0 6 1 5 3 2
5 6 0 4 1 2 3
6 4 5 2 3 1 0
1 2 3 0 6 4 5
MIN + MAX user times:
8.17 8.57
MIN + MAX wallclock times:
8.18 8.58
MIN + MAX system times:
0.00 0.00


B)

Version with fixed branching - now a variable with minimal domain size is really chosen.

amd1:

MOLS$ RunTime ./2mols 6
program name:       2mols
 version:           0.2.0
 last change:       21.5.2021
 git-id:            ad0ee4002413f5cf4db69e5f9e7a9fc8a56b5d91
machine name:       amd1
 bogomips:          7585.95
compiler version:   g++ 10.3.0
 date:              May_21_2021 16:22:05
 options:           "--std=c++20 -pedantic -Ofast -DNDEBUG -march=native -fwhole-program -fno-math-errno -fno-trapping-math -fno-rounding-math -fno-signaling-nans -fno-unsafe-math-optimizations -fno-finite-math-only -fno-associative-math -fno-reciprocal-math -fsigned-zeros -lgecodesearch -lgecodeint -lgecodekernel -lgecodesupport"
 NDEBUG:            defined
 OPTIMIZE:          on
Output program:
No solutions found
MIN + MAX user times:
0.62 0.64
MIN + MAX wallclock times:
0.62 0.64
MIN + MAX system times:
0.00 0.00

MOLS$ RunTime ./2mols 7
program name:       2mols
 version:           0.2.0
 last change:       21.5.2021
 git-id:            ad0ee4002413f5cf4db69e5f9e7a9fc8a56b5d91
machine name:       amd1
 bogomips:          7585.95
compiler version:   g++ 10.3.0
 date:              May_21_2021 16:22:05
 options:           "--std=c++20 -pedantic -Ofast -DNDEBUG -march=native -fwhole-program -fno-math-errno -fno-trapping-math -fno-rounding-math -fno-signaling-nans -fno-unsafe-math-optimizations -fno-finite-math-only -fno-associative-math -fno-reciprocal-math -fsigned-zeros -lgecodesearch -lgecodeint -lgecodekernel -lgecodesupport"
 NDEBUG:            defined
 OPTIMIZE:          on
Output program:
0 1 2 3 4 5 6
1 6 0 2 3 4 5
2 0 5 6 1 3 4
3 2 4 5 0 6 1
4 5 1 0 6 2 3
5 3 6 4 2 1 0
6 4 3 1 5 0 2

0 1 2 3 4 5 6
2 3 5 6 0 1 4
1 4 3 0 5 6 2
4 5 0 1 6 2 3
3 0 6 2 1 4 5
6 2 4 5 3 0 1
5 6 1 4 2 3 0
MIN + MAX user times:
0.11 0.12
MIN + MAX wallclock times:
0.11 0.12
MIN + MAX system times:
0.00 0.00


C)

Version with printing statistics and disabled symmetry breaking

okserver:

program name:       Euler
 version:           0.5.1
 last change:       26.7.2021
 git-id:            41ba9550441245415267b4023d2283373c7ba96e
machine name:       cs-kullmann-server.swan.ac.uk
 bogomips:          5400
compiler version:   g++ 10.2.0
 date:              Jul_26_2021 21:39:12
 options:           "--std=c++20 -pedantic -Ofast -DNDEBUG -march=native -fwhole-program -fno-math-errno -fno-trapping-math -fno-rounding-math -fno-signaling-nans -fno-unsafe-math-optimizations -fno-finite-math-only -fno-associative-math -fno-reciprocal-math -fsigned-zeros -lgecodesearch -lgecodeint -lgecodekernel -lgecodesupport"
 NDEBUG:            defined
 OPTIMIZE:          on

N k m1 m2 t    sat nds   lvs   ulvs  sol  inds  ptime  brt brsrc brm brsln prog  vers  opt
4 2 0 0 0.2021 1   55295 27648 20736 6912 27647 0.0002 0   0     0   1     Euler 0.5.1 "mind,eq,all"
4 2 0 0 0.1888 1   51809 27648 20736 6912 24161 0.0002 0   1     0   1     Euler 0.5.1 "mind,v,all"
4 2 0 0 5.4718 1   19751 7707  795   6912 12044 0.0002 1   0     0   1     Euler 0.5.1 "la,eq,mu0,all"
4 2 0 0 4.3104 1   14549 6914  2     6912 7635  0.0002 1   0     1   1     Euler 0.5.1 "la,eq,mu1,all"
4 2 0 0 1.2012 1   12549 6912  0     6912 5637  0.0001 1   1     0   1     Euler 0.5.1 "la,v,mu0,all"
4 2 0 0 2.6081 1   13605 6912  0     6912 6693  0.0000 1   1     1   1     Euler 0.5.1 "la,v,mu1,all"
4 2 0 0 3.9068 1   13701 6912  0     6912 6789  0.0002 1   2     0   1     Euler 0.5.1 "la,eqv,mu0,all"
4 2 0 0 6.5369 1   14757 6912  0     6912 7845  0.0002 1   2     1   1     Euler 0.5.1 "la,eqv,mu1,all"
N k m1 m2 opt              t          sat nds       lvs       ulvs      sol     inds      ptime brt brsrc brm brsln prog vers
5 2 0  0  "mind,eq,all"    1229.9210  1   290307359 145153680 138932880 6220800 145153679 0.0002 0 0 0 1 Euler 0.5.1
5 2 0  0  "mind,v,all"     1230.3216  1   265625486 145153680 138932880 6220800 120471806 0.0001 0 1 0 1 Euler 0.5.1
5 2 0  0  "la,eq,mu0,all"  > 50000 (interrupted)
5 2 0  0  "la,eq,mu1,all"  45115.117  1   57807062  8829310   2608510   6220800 48977752  0.0003 1 0 1 1 Euler 0.5.1
5 2 0  0  "la,v,mu0,all"   4380.6554  1   14238531  6739200   518400    6220800 7499331   0.0002 1 1 0 1 Euler 0.5.1
5 2 0  0  "la,v,mu1,all"   10387.0628 1   23768231  9868800   3648000   6220800 13899431  0.0002 1 1 1 1 Euler 0.5.1
5 2 0  0  "la,eqv,mu0,all" 10739.7923 1   18151371  6739200   518400    6220800 11412171  0.0001 1 2 0 1 Euler 0.5.1
5 2 0  0  "la,eqv,mu1,all" 45140.2733 1   60608531  8494800   2274000   6220800 52113731  0.0002 1 2 1 1 Euler 0.5.1

Comments:
1. The problem is to enumerate all MOLS for given order N.
2. The number of solution is the same for all strategies.
3. mind,v (mind stands for 'choosing for branching a variable with minimal domain size', v stands for
with 'value-branches') results is smaller number of nodes compared with mind,eq (with equality-branches),
the time is similar.
4. mind is faster than lookahead, but lookahead results in much smaller number of nodes: about 4x for N=4
and 4x-14x for N=5.
5. The best lookahead strategy (in sense of runtime and the number of nodes) is la,v,mu0 for both for N=4
and N=5, the worst is la,eq,mu0 (at least for the number of nodes; on N=4 runtime on la,eqv,mu1 is a bit
higher).


D)

Version with option for propagation level

okserver:

program name:       Euler
 version:           0.6.2
 last change:       10.8.2021
 git-id:            789380e6ea619c4b886a2763f4e48060c247d84e
machine name:       cs-kullmann-server.swan.ac.uk
 bogomips:          5400
compiler version:   g++ 10.2.0
 date:              Aug_10_2021 13:43:00
 options:           "--std=c++20 -pedantic -Ofast -DNDEBUG -march=native -fwhole-program -fno-math-errno -fno-trapping-math -fno-rounding-math -fno-signaling-nans -fno-unsafe-math-optimizations -fno-finite-math-only -fno-associative-math -fno-reciprocal-math -fsigned-zeros -lgecodesearch -lgecodeint -lgecodekernel -lgecodesupport"
 NDEBUG:            defined
 OPTIMIZE:          on


MOLS> ./Euler 4 2 mind,eq,all -sol def
N k m1 m2 brt brsrc brm brsol prp t sat nds inds lvs ulvs sol chcs taus sbps chct taut sbpt prpt ptime prog vers
4 2 0 0 mind eq "" all def 0.3683 1 55295 27647 27648 20736 6912 27647 0 0 0.0304 0.0000 0.0000 0.0000 0.0000 Euler 0.6.2
MOLS> ./Euler 4 2 mind,eq,all -sol val
N k m1 m2 brt brsrc brm brsol prp t sat nds inds lvs ulvs sol chcs taus sbps chct taut sbpt prpt ptime prog vers
4 2 0 0 mind eq "" all val 0.3626 1 55295 27647 27648 20736 6912 27647 0 0 0.0299 0.0000 0.0000 0.0000 0.0000 Euler 0.6.2
MOLS> ./Euler 4 2 mind,eq,all -sol bnd
N k m1 m2 brt brsrc brm brsol prp t sat nds inds lvs ulvs sol chcs taus sbps chct taut sbpt prpt ptime prog vers
4 2 0 0 mind eq "" all bnd 0.7079 1 55295 27647 27648 20736 6912 27647 0 0 0.0327 0.0000 0.0000 0.0000 0.0002 Euler 0.6.2
MOLS> ./Euler 4 2 mind,eq,all -sol dom
N k m1 m2 brt brsrc brm brsol prp t sat nds inds lvs ulvs sol chcs taus sbps chct taut sbpt prpt ptime prog vers
4 2 0 0 mind eq "" all dom 0.6833 1 55295 27647 27648 20736 6912 27647 0 0 0.0321 0.0000 0.0000 0.0000 0.0002 Euler 0.6.2

MOLS> ./Euler 4 2 la,eq,all -sol def
N k m1 m2 brt brsrc brm brsol prp t sat nds inds lvs ulvs sol chcs taus sbps chct taut sbpt prpt ptime prog vers
4 2 0 0 la eq mu0 all def 11.6509 1 19751 12044 7707 795 6912 12839 507957 1036398 11.4397 2.4427 3.8041 0.0000 0.0002 Euler 0.6.2
MOLS> ./Euler 4 2 la,eq,all -sol val
N k m1 m2 brt brsrc brm brsol prp t sat nds inds lvs ulvs sol chcs taus sbps chct taut sbpt prpt ptime prog vers
4 2 0 0 la eq mu0 all val 11.4813 1 23183 14901 8282 1370 6912 16271 596752 1219702 11.2890 2.7700 4.3333 0.0000 0.0002 Euler 0.6.2
MOLS> ./Euler 4 2 la,eq,all -sol bnd
N k m1 m2 brt brsrc brm brsol prp t sat nds inds lvs ulvs sol chcs taus sbps chct taut sbpt prpt ptime prog vers
4 2 0 0 la eq mu0 all bnd 10.1919 1 17048 10037 7011 99 6912 10136 402020 820424 9.9850 1.6360 3.0147 0.0000 0.0002 Euler 0.6.2
MOLS> ./Euler 4 2 la,eq,all -sol dom
N k m1 m2 brt brsrc brm brsol prp t sat nds inds lvs ulvs sol chcs taus sbps chct taut sbpt prpt ptime prog vers
4 2 0 0 la eq mu0 all dom 9.6047 1 15310 8398 6912 0 6912 8398 369777 752416 9.4217 1.5913 2.2704 0.0000 0.0002 Euler 0.6.2

Comments:

1. For the minimal-domain-size branchinng strategy on order 4, propagation level do no change the number of nodes.
2. For look-ahead, the propagation level is crucial: the best results (both time-wise and node-wise) are for the
   most powerful level (domain-propagation), while the worst results are for the weakest one (values-propagation).


oz-campus-desktop

program name:       Euler
 version:           0.6.2
 last change:       10.8.2021
 git-id:            bc2dd0ea3733a05f26fc45b2363395abbfe71866
machine name:       cs2-lnx-8cc0131zlv
 bogomips:          6000
compiler version:   g++ 10.3.0
 date:              Aug_10_2021 13:38:00
 options:           "--std=c++20 -pedantic -Ofast -DNDEBUG -march=native -fwhole-program -fno-math-errno -fno-trapping-math -fno-rounding-math -fno-signaling-nans -fno-unsafe-math-optimizations -fno-finite-math-only -fno-associative-math -fno-reciprocal-math -fsigned-zeros -lgecodesearch -lgecodeint -lgecodekernel -lgecodesupport"
 NDEBUG:            defined
 OPTIMIZE:          on

equality branching strategy, default-propagation:
MOLS$ LSRG 6,2 "-co" "1*0,0,36;1*0,0,0" 0 | ./Euler 0 2 la,eq,mu0,all "" def
N k m1 m2 brt brsrc brm brsol prp t sat nds inds lvs ulvs sol chcs taus sbps chct taut sbpt prpt ptime prog vers
6 2 36 0 la eq mu0 all def 1075.1247 0 2482366 2146637 335729 335729 0 2482366 94738901 193771078 1070.6321 286.3867 477.8685 0.0000 0.0000 Euler 0.6.2

equality branching strategy, domain-propagation:
MOLS$ LSRG 6,2 "-co" "1*0,0,36;1*0,0,0" 0 | ./Euler 0 2 la,eq,mu0,all "" dom
N k m1 m2 brt brsrc brm brsol prp t sat nds inds lvs ulvs sol chcs taus sbps chct taut sbpt prpt ptime prog vers
6 2 36 0 la eq mu0 all dom 4.0760 0 2833 2483 350 350 0 2833 151312 307592 4.0590 0.5145 0.7776 0.0000 0.0002 Euler 0.6.2

values branching strategy, default-propagation:
MOLS$ LSRG 6,2 "-co" "1*0,0,36;1*0,0,0" 0 | ./Euler 0 2 la,val,mu0,all "" def
N k m1 m2 brt brsrc brm brsol prp t sat nds inds lvs ulvs sol chcs taus sbps chct taut sbpt prpt ptime prog vers
6 2 36 0 la val mu0 all def 14.4776 0 54517 34357 20160 20160 0 54517 734052 2695332 14.3194 2.6866 5.9643 0.0000 0.0002 Euler 0.6.2

values branching strategy, domain-propagation:
MOLS$ LSRG 6,2 "-co" "1*0,0,36;1*0,0,0" 0 | ./Euler 0 2 la,val,mu0,all "" dom
N k m1 m2 brt brsrc brm brsol prp t sat nds inds lvs ulvs sol chcs taus sbps chct taut sbpt prpt ptime prog vers
6 2 36 0 la val mu0 all dom 6.4721 0 5557 2677 2880 2880 0 5557 94692 403572 6.3823 0.3233 1.0002 0.0000 0.0000 Euler 0.6.2

equality+values branching strategy, default-propagation:
MOLS$ LSRG 6,2 "-co" "1*0,0,36;1*0,0,0" 0 | ./Euler 0 2 la,eqval,mu0,all "" def
N k m1 m2 brt brsrc brm brsol prp t sat nds inds lvs ulvs sol chcs taus sbps chct taut sbpt prpt ptime prog vers
6 2 36 0 la eqval mu0 all def 33.1641 0 106777 98137 8640 8640 0 106777 3281850 5262096 32.9864 10.3164 12.9923 0.0000 0.0002 Euler 0.6.2

equality+values branching strategy, domain-propagation:
MOLS$ LSRG 6,2 "-co" "1*0,0,36;1*0,0,0" 0 | ./Euler 0 2 la,eqval,mu0,all "" dom
N k m1 m2 brt brsrc brm brsol prp t sat nds inds lvs ulvs sol chcs taus sbps chct taut sbpt prpt ptime prog vers
6 2 36 0 la eqval mu0 all dom 16.4842 0 25183 22303 2880 2880 0 25183 758364 1260096 16.3107 2.5724 3.2252 0.0000 0.0005 Euler 0.6.2

Comments:
1. For all look-ahead variants, the domain propagation improved both runtime and the number of nodes.
   For la,eq,mu0,all, the improvement is extremely significant (4 vs 1075 seconds, 2833 vs 2482366 nodes).
