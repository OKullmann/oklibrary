# Oleg Zaikin, 21.5.2021 (Irkutsk)

A)

Initial version (with minor editorial modifications) by Noah Rubin and Curtis Bright.

amd1:

MOLS$ RunTime ./2mols 6
program name:       2mols
 version:           0.1.2
 last change:       21.5.2021
 git-id:            8dc2ef335892dac1dc100606951e6fd44c01a1d1
machine name:       amd1
 bogomips:          7585.95
compiler version:   g++ 10.3.0
 date:              May_21_2021 13:41:20
 options:           "--std=c++20 -pedantic -Ofast -DNDEBUG -march=native -fwhole-program -fno-math-errno -fno-trapping-math -fno-rounding-math -fno-signaling-nans -fno-unsafe-math-optimizations -fno-finite-math-only -fno-associative-math -fno-reciprocal-math -fsigned-zeros -lgecodesearch -lgecodeint -lgecodekernel -lgecodesupport"
 NDEBUG:            defined
 OPTIMIZE:          on
Output program:
No solutions found
MIN + MAX user times:
0.14 0.16
MIN + MAX wallclock times:
0.15 0.16
MIN + MAX system times:
0.00 0.00

MOLS$ RunTime ./2mols 7
program name:       2mols
 version:           0.1.2
 last change:       21.5.2021
 git-id:            8dc2ef335892dac1dc100606951e6fd44c01a1d1
machine name:       amd1
 bogomips:          7585.95
compiler version:   g++ 10.3.0
 date:              May_21_2021 13:41:20
 options:           "--std=c++20 -pedantic -Ofast -DNDEBUG -march=native -fwhole-program -fno-math-errno -fno-trapping-math -fno-rounding-math -fno-signaling-nans -fno-unsafe-math-optimizations -fno-finite-math-only -fno-associative-math -fno-reciprocal-math -fsigned-zeros -lgecodesearch -lgecodeint -lgecodekernel -lgecodesupport"
 NDEBUG:            defined
 OPTIMIZE:          on
Output program:
0 1 2 3 4 5 6
1 0 3 6 5 4 2
2 3 5 0 6 1 4
3 4 1 5 2 6 0
4 2 6 1 0 3 5
5 6 0 4 1 2 3
6 5 4 2 3 0 1

0 1 2 3 4 5 6
2 3 1 5 0 6 4
3 5 4 6 2 0 1
4 0 6 1 5 3 2
5 6 0 4 1 2 3
6 4 5 2 3 1 0
1 2 3 0 6 4 5
MIN + MAX user times:
8.17 8.57
MIN + MAX wallclock times:
8.18 8.58
MIN + MAX system times:
0.00 0.00


B)

Version with fixed branching - now a variable with minimal domain size is really chosen.

amd1:

MOLS$ RunTime ./2mols 6
program name:       2mols
 version:           0.2.0
 last change:       21.5.2021
 git-id:            ad0ee4002413f5cf4db69e5f9e7a9fc8a56b5d91
machine name:       amd1
 bogomips:          7585.95
compiler version:   g++ 10.3.0
 date:              May_21_2021 16:22:05
 options:           "--std=c++20 -pedantic -Ofast -DNDEBUG -march=native -fwhole-program -fno-math-errno -fno-trapping-math -fno-rounding-math -fno-signaling-nans -fno-unsafe-math-optimizations -fno-finite-math-only -fno-associative-math -fno-reciprocal-math -fsigned-zeros -lgecodesearch -lgecodeint -lgecodekernel -lgecodesupport"
 NDEBUG:            defined
 OPTIMIZE:          on
Output program:
No solutions found
MIN + MAX user times:
0.62 0.64
MIN + MAX wallclock times:
0.62 0.64
MIN + MAX system times:
0.00 0.00

MOLS$ RunTime ./2mols 7
program name:       2mols
 version:           0.2.0
 last change:       21.5.2021
 git-id:            ad0ee4002413f5cf4db69e5f9e7a9fc8a56b5d91
machine name:       amd1
 bogomips:          7585.95
compiler version:   g++ 10.3.0
 date:              May_21_2021 16:22:05
 options:           "--std=c++20 -pedantic -Ofast -DNDEBUG -march=native -fwhole-program -fno-math-errno -fno-trapping-math -fno-rounding-math -fno-signaling-nans -fno-unsafe-math-optimizations -fno-finite-math-only -fno-associative-math -fno-reciprocal-math -fsigned-zeros -lgecodesearch -lgecodeint -lgecodekernel -lgecodesupport"
 NDEBUG:            defined
 OPTIMIZE:          on
Output program:
0 1 2 3 4 5 6
1 6 0 2 3 4 5
2 0 5 6 1 3 4
3 2 4 5 0 6 1
4 5 1 0 6 2 3
5 3 6 4 2 1 0
6 4 3 1 5 0 2

0 1 2 3 4 5 6
2 3 5 6 0 1 4
1 4 3 0 5 6 2
4 5 0 1 6 2 3
3 0 6 2 1 4 5
6 2 4 5 3 0 1
5 6 1 4 2 3 0
MIN + MAX user times:
0.11 0.12
MIN + MAX wallclock times:
0.11 0.12
MIN + MAX system times:
0.00 0.00


C)

Version with printing statistics and disabled symmetry breaking

okserver:

program name:       Euler
 version:           0.5.1
 last change:       26.7.2021
 git-id:            41ba9550441245415267b4023d2283373c7ba96e
machine name:       cs-kullmann-server.swan.ac.uk
 bogomips:          5400
compiler version:   g++ 10.2.0
 date:              Jul_26_2021 21:39:12
 options:           "--std=c++20 -pedantic -Ofast -DNDEBUG -march=native -fwhole-program -fno-math-errno -fno-trapping-math -fno-rounding-math -fno-signaling-nans -fno-unsafe-math-optimizations -fno-finite-math-only -fno-associative-math -fno-reciprocal-math -fsigned-zeros -lgecodesearch -lgecodeint -lgecodekernel -lgecodesupport"
 NDEBUG:            defined
 OPTIMIZE:          on

N k m1 m2 t    sat nds   lvs   ulvs  sol  inds  ptime  brt brsrc brm brsln prog  vers  opt
4 2 0 0 0.2021 1   55295 27648 20736 6912 27647 0.0002 0   0     0   1     Euler 0.5.1 "mind,eq,all"
4 2 0 0 0.1888 1   51809 27648 20736 6912 24161 0.0002 0   1     0   1     Euler 0.5.1 "mind,v,all"
4 2 0 0 5.4718 1   19751 7707  795   6912 12044 0.0002 1   0     0   1     Euler 0.5.1 "la,eq,mu0,all"
4 2 0 0 4.3104 1   14549 6914  2     6912 7635  0.0002 1   0     1   1     Euler 0.5.1 "la,eq,mu1,all"
4 2 0 0 1.2012 1   12549 6912  0     6912 5637  0.0001 1   1     0   1     Euler 0.5.1 "la,v,mu0,all"
4 2 0 0 2.6081 1   13605 6912  0     6912 6693  0.0000 1   1     1   1     Euler 0.5.1 "la,v,mu1,all"
4 2 0 0 3.9068 1   13701 6912  0     6912 6789  0.0002 1   2     0   1     Euler 0.5.1 "la,eqv,mu0,all"
4 2 0 0 6.5369 1   14757 6912  0     6912 7845  0.0002 1   2     1   1     Euler 0.5.1 "la,eqv,mu1,all"
N k m1 m2 opt              t          sat nds       lvs       ulvs      sol     inds      ptime brt brsrc brm brsln prog vers
5 2 0  0  "mind,eq,all"    1229.9210  1   290307359 145153680 138932880 6220800 145153679 0.0002 0 0 0 1 Euler 0.5.1
5 2 0  0  "mind,v,all"     1230.3216  1   265625486 145153680 138932880 6220800 120471806 0.0001 0 1 0 1 Euler 0.5.1
5 2 0  0  "la,eq,mu0,all"  > 50000 (interrupted)
5 2 0  0  "la,eq,mu1,all"  45115.117  1   57807062  8829310   2608510   6220800 48977752  0.0003 1 0 1 1 Euler 0.5.1
5 2 0  0  "la,v,mu0,all"   4380.6554  1   14238531  6739200   518400    6220800 7499331   0.0002 1 1 0 1 Euler 0.5.1
5 2 0  0  "la,v,mu1,all"   10387.0628 1   23768231  9868800   3648000   6220800 13899431  0.0002 1 1 1 1 Euler 0.5.1
5 2 0  0  "la,eqv,mu0,all" 10739.7923 1   18151371  6739200   518400    6220800 11412171  0.0001 1 2 0 1 Euler 0.5.1
5 2 0  0  "la,eqv,mu1,all" 45140.2733 1   60608531  8494800   2274000   6220800 52113731  0.0002 1 2 1 1 Euler 0.5.1

Comments:
1. The problem is to enumerate all MOLS for given order N.
2. The number of solution is the same for all strategies.
3. mind,v (mind stands for 'choosing for branching a variable with minimal domain size', v stands for
with 'value-branches') results is smaller number of nodes compared with mind,eq (with equality-branches),
the time is similar.
4. mind is faster than lookahead, but lookahead results in much smaller number of nodes: about 4x for N=4
and 4x-14x for N=5.
5. The best lookahead strategy (in sense of runtime and the number of nodes) is la,v,mu0 for both for N=4
and N=5, the worst is la,eq,mu0 (at least for the number of nodes; on N=4 runtime on la,eqv,mu1 is a bit
higher).


D)

Version with option for propagation level

okserver:

program name:       Euler
 version:           0.6.2
 last change:       10.8.2021
 git-id:            789380e6ea619c4b886a2763f4e48060c247d84e
machine name:       cs-kullmann-server.swan.ac.uk
 bogomips:          5400
compiler version:   g++ 10.2.0
 date:              Aug_10_2021 13:43:00
 options:           "--std=c++20 -pedantic -Ofast -DNDEBUG -march=native -fwhole-program -fno-math-errno -fno-trapping-math -fno-rounding-math -fno-signaling-nans -fno-unsafe-math-optimizations -fno-finite-math-only -fno-associative-math -fno-reciprocal-math -fsigned-zeros -lgecodesearch -lgecodeint -lgecodekernel -lgecodesupport"
 NDEBUG:            defined
 OPTIMIZE:          on


MOLS> ./Euler 4 2 mind,eq,all -sol def
N k m1 m2 brt brsrc brm brsol prp t sat nds inds lvs ulvs sol chcs taus sbps chct taut sbpt prpt ptime prog vers
4 2 0 0 mind eq "" all def 0.3683 1 55295 27647 27648 20736 6912 27647 0 0 0.0304 0.0000 0.0000 0.0000 0.0000 Euler 0.6.2
MOLS> ./Euler 4 2 mind,eq,all -sol val
N k m1 m2 brt brsrc brm brsol prp t sat nds inds lvs ulvs sol chcs taus sbps chct taut sbpt prpt ptime prog vers
4 2 0 0 mind eq "" all val 0.3626 1 55295 27647 27648 20736 6912 27647 0 0 0.0299 0.0000 0.0000 0.0000 0.0000 Euler 0.6.2
MOLS> ./Euler 4 2 mind,eq,all -sol bnd
N k m1 m2 brt brsrc brm brsol prp t sat nds inds lvs ulvs sol chcs taus sbps chct taut sbpt prpt ptime prog vers
4 2 0 0 mind eq "" all bnd 0.7079 1 55295 27647 27648 20736 6912 27647 0 0 0.0327 0.0000 0.0000 0.0000 0.0002 Euler 0.6.2
MOLS> ./Euler 4 2 mind,eq,all -sol dom
N k m1 m2 brt brsrc brm brsol prp t sat nds inds lvs ulvs sol chcs taus sbps chct taut sbpt prpt ptime prog vers
4 2 0 0 mind eq "" all dom 0.6833 1 55295 27647 27648 20736 6912 27647 0 0 0.0321 0.0000 0.0000 0.0000 0.0002 Euler 0.6.2

MOLS> ./Euler 4 2 la,eq,all -sol def
N k m1 m2 brt brsrc brm brsol prp t sat nds inds lvs ulvs sol chcs taus sbps chct taut sbpt prpt ptime prog vers
4 2 0 0 la eq mu0 all def 11.6509 1 19751 12044 7707 795 6912 12839 507957 1036398 11.4397 2.4427 3.8041 0.0000 0.0002 Euler 0.6.2
MOLS> ./Euler 4 2 la,eq,all -sol val
N k m1 m2 brt brsrc brm brsol prp t sat nds inds lvs ulvs sol chcs taus sbps chct taut sbpt prpt ptime prog vers
4 2 0 0 la eq mu0 all val 11.4813 1 23183 14901 8282 1370 6912 16271 596752 1219702 11.2890 2.7700 4.3333 0.0000 0.0002 Euler 0.6.2
MOLS> ./Euler 4 2 la,eq,all -sol bnd
N k m1 m2 brt brsrc brm brsol prp t sat nds inds lvs ulvs sol chcs taus sbps chct taut sbpt prpt ptime prog vers
4 2 0 0 la eq mu0 all bnd 10.1919 1 17048 10037 7011 99 6912 10136 402020 820424 9.9850 1.6360 3.0147 0.0000 0.0002 Euler 0.6.2
MOLS> ./Euler 4 2 la,eq,all -sol dom
N k m1 m2 brt brsrc brm brsol prp t sat nds inds lvs ulvs sol chcs taus sbps chct taut sbpt prpt ptime prog vers
4 2 0 0 la eq mu0 all dom 9.6047 1 15310 8398 6912 0 6912 8398 369777 752416 9.4217 1.5913 2.2704 0.0000 0.0002 Euler 0.6.2

MOLS> ./Euler 5 2 mind,eq,all -sol def
N k m1 m2 brt brsrc brm brsol prp t sat nds inds lvs ulvs sol chcs taus sbps chct taut sbpt prpt ptime prog vers
5 2 0 0 mind eq "" all def 1930.7025 1 290307359 145153679 145153680 138932880 6220800 145153679 0 0 159.8531 0.0000 0.0000 0.0000 0.0002 Euler 0.6.2
MOLS> ./Euler 5 2 mind,eq,all -sol dom
N k m1 m2 brt brsrc brm brsol prp t sat nds inds lvs ulvs sol chcs taus sbps chct taut sbpt prpt ptime prog vers
5 2 0 0 mind eq "" all dom 3493.1540 1 157593599 78796799 78796800 72576000 6220800 78796799 0 0 106.5693 0.0000 0.0000 0.0000 0.0000 Euler 0.6.2

Comments:
1. For the minimal-domain-size branching strategy on order 4, propagation level do not change the number of nodes.
2. For look-ahead, the propagation level is crucial: the best results (both time-wise and node-wise) are on the
   most powerful level (domain-propagation), while the worst results are on the weakest one (values-propagation).
3. For order 5 and the mind branching, the domain propagation imrpoved the number of nodes, but impaired the runtime.
   By now it seems that the domain propagation really makes sense only on look-ahead.

oz-campus-desktop

program name:       Euler
 version:           0.6.2
 last change:       10.8.2021
 git-id:            bc2dd0ea3733a05f26fc45b2363395abbfe71866
machine name:       cs2-lnx-8cc0131zlv
 bogomips:          6000
compiler version:   g++ 10.3.0
 date:              Aug_10_2021 13:38:00
 options:           "--std=c++20 -pedantic -Ofast -DNDEBUG -march=native -fwhole-program -fno-math-errno -fno-trapping-math -fno-rounding-math -fno-signaling-nans -fno-unsafe-math-optimizations -fno-finite-math-only -fno-associative-math -fno-reciprocal-math -fsigned-zeros -lgecodesearch -lgecodeint -lgecodekernel -lgecodesupport"
 NDEBUG:            defined
 OPTIMIZE:          on

equality branching strategy, default-propagation:
MOLS$ LSRG 6,2 "-co" "1*0,0,36;1*0,0,0" 0 | ./Euler 0 2 la,eq,mu0,all "" def
N k m1 m2 brt brsrc brm brsol prp t sat nds inds lvs ulvs sol chcs taus sbps chct taut sbpt prpt ptime prog vers
6 2 36 0 la eq mu0 all def 1075.1247 0 2482366 2146637 335729 335729 0 2482366 94738901 193771078 1070.6321 286.3867 477.8685 0.0000 0.0000 Euler 0.6.2

equality branching strategy, domain-propagation:
MOLS$ LSRG 6,2 "-co" "1*0,0,36;1*0,0,0" 0 | ./Euler 0 2 la,eq,mu0,all "" dom
N k m1 m2 brt brsrc brm brsol prp t sat nds inds lvs ulvs sol chcs taus sbps chct taut sbpt prpt ptime prog vers
6 2 36 0 la eq mu0 all dom 4.0760 0 2833 2483 350 350 0 2833 151312 307592 4.0590 0.5145 0.7776 0.0000 0.0002 Euler 0.6.2

values branching strategy, default-propagation:
MOLS$ LSRG 6,2 "-co" "1*0,0,36;1*0,0,0" 0 | ./Euler 0 2 la,val,mu0,all "" def
N k m1 m2 brt brsrc brm brsol prp t sat nds inds lvs ulvs sol chcs taus sbps chct taut sbpt prpt ptime prog vers
6 2 36 0 la val mu0 all def 14.4776 0 54517 34357 20160 20160 0 54517 734052 2695332 14.3194 2.6866 5.9643 0.0000 0.0002 Euler 0.6.2

values branching strategy, domain-propagation:
MOLS$ LSRG 6,2 "-co" "1*0,0,36;1*0,0,0" 0 | ./Euler 0 2 la,val,mu0,all "" dom
N k m1 m2 brt brsrc brm brsol prp t sat nds inds lvs ulvs sol chcs taus sbps chct taut sbpt prpt ptime prog vers
6 2 36 0 la val mu0 all dom 6.4721 0 5557 2677 2880 2880 0 5557 94692 403572 6.3823 0.3233 1.0002 0.0000 0.0000 Euler 0.6.2

equality+values branching strategy, default-propagation:
MOLS$ LSRG 6,2 "-co" "1*0,0,36;1*0,0,0" 0 | ./Euler 0 2 la,eqval,mu0,all "" def
N k m1 m2 brt brsrc brm brsol prp t sat nds inds lvs ulvs sol chcs taus sbps chct taut sbpt prpt ptime prog vers
6 2 36 0 la eqval mu0 all def 33.1641 0 106777 98137 8640 8640 0 106777 3281850 5262096 32.9864 10.3164 12.9923 0.0000 0.0002 Euler 0.6.2

equality+values branching strategy, domain-propagation:
MOLS$ LSRG 6,2 "-co" "1*0,0,36;1*0,0,0" 0 | ./Euler 0 2 la,eqval,mu0,all "" dom
N k m1 m2 brt brsrc brm brsol prp t sat nds inds lvs ulvs sol chcs taus sbps chct taut sbpt prpt ptime prog vers
6 2 36 0 la eqval mu0 all dom 16.4842 0 25183 22303 2880 2880 0 25183 758364 1260096 16.3107 2.5724 3.2252 0.0000 0.0005 Euler 0.6.2

Comments:
1. For all look-ahead variants, the domain propagation improved both runtime and the number of nodes.
   For la,eq,mu0,all, the improvement is extremely significant (4 vs 1075 seconds, 2833 vs 2482366 nodes).

oz-amd1:

program name:       Euler
 version:           0.7.1
 last change:       7.10.2021
 git-id:            7fbead111a084fbd89fdd60aad73328a8f130bfe
machine name:       amd1
 bogomips:          7585.41
compiler version:   g++ 10.3.0
 date:              Oct_8_2021 14:35:24
 options:           "--std=c++20 -pedantic -Ofast -DNDEBUG -march=native -fwhole-program -fno-math-errno -fno-trapping-math -fno-rounding-math -fno-signaling-nans -fno-unsafe-math-optimizations -fno-finite-math-only -fno-associative-math -fno-reciprocal-math -fsigned-zeros -DGIST=0 -lgecodesearch -lgecodeint -lgecodekernel -lgecodesupport"
 NDEBUG:            defined
 OPTIMIZE:          on

MOLS$ LSRG 6,2 "-co" "1*0,0,36;1*0,0,0" 0 | ./Euler 0 2 la,eq,mu0,all
N k m1 m2 brt brsrc brm brsol prp t sat nds inds lvs ulvs sol chcs taus sbps chct taut sbpt ptime prog vers
6 2 36 0 la eq mu0 all dom 3.3801 0 3183 2833 350 350 0 2833 151312 307592 3.3664 0.5570 0.5695 0.0002 Euler 0.7.1

MOLS$ ./Euler 4 2 la,eq,all,mu0
N k m1 m2 brt brsrc brm brsol prp t sat nds inds lvs ulvs sol chcs taus sbps chct taut sbpt ptime prog vers
4 2 0 0 la eq mu0 all dom 3.7531 1 15310 8398 6912 0 6912 8398 369777 752416 3.6944 1.0711 0.8474 0.0000 Euler 0.7.1


E)

Version with collecting and applying all single-child branchings before calculating ltau for the remaining branchings.

oz-amd1:

MOLS$ LSRG 6,2 "-co" "1*0,0,36;1*0,0,0" 0 | ./Euler 0 2 la,eq,mu0,all
N k m1 m2 brt brsrc brm brsol prp t sat nds inds lvs ulvs sol chcs taus sbps chct taut sbpt ptime prog vers
6 2 36 0 la eq mu0 all dom 6.8100 0 1761 1627 134 134 0 1627 120098 387006 6.7982 0.4005 3.9348 0.0001 Euler 0.7.2

Comments:
1. On this instance, the number of nodes decreased from 3183 to 1761, ltau calls - from 151312 to 120098.


F)

Version with collecting and applying all single-child branchings iteratively before calculating ltau.
Now no redundant nodes are created for these single-child branchings.

oz-amd1:

program name:       Euler
 version:           0.7.3
 last change:       15.10.2021
 git-id:            8165c28eb5ba36680deedb329794ed99374f9aec
machine name:       amd1
 bogomips:          7585.41
compiler version:   g++ 10.3.0
 date:              Oct_15_2021 18:02:08
 options:           "--std=c++20 -pedantic -Ofast -DNDEBUG -march=native -fwhole-program -fno-math-errno -fno-trapping-math -fno-rounding-math -fno-signaling-nans -fno-unsafe-math-optimizations -fno-finite-math-only -fno-associative-math -fno-reciprocal-math -fsigned-zeros -DGIST=0 -lgecodesearch -lgecodeint -lgecodekernel -lgecodesupport"
 NDEBUG:            defined
 OPTIMIZE:          on

MOLS$ LSRG 6,2 "-co" "1*0,0,36;1*0,0,0" 0 | ./Euler 0 2 la,eq,mu0,all
N k m1 m2 brt brsrc brm brsol prp t sat nds inds lvs ulvs sol chcs taus sbps chct taut sbpt ptime prog vers
6 2 36 0 la eq mu0 all dom 3.9845 0 833 699 134 134 0 699 120098 387006 3.9719 0.4392 0.7659 0.0000 Euler 0.7.3

Comments:
1. On this instance, the number of nodes decreased from 1761 to 833, while ltau calls is the same: 120098.


G)

Version with assigning immediately var==value if var!=value failed.

oz-amd1:

program name:       Euler
 version:           0.7.5
 last change:       18.10.2021
 git-id:            87fd68b0b540932a6478445b8a66e693487b0cd7
machine name:       amd1
 bogomips:          7585.41
compiler version:   g++ 10.3.0
 date:              Oct_18_2021 16:47:36
 options:           "--std=c++20 -pedantic -Ofast -DNDEBUG -march=native -fwhole-program -fno-math-errno -fno-trapping-math -fno-rounding-math -fno-signaling-nans -fno-unsafe-math-optimizations -fno-finite-math-only -fno-associative-math -fno-reciprocal-math -fsigned-zeros -DGIST=0 -lgecodesearch -lgecodeint -lgecodekernel -lgecodesupport"
 NDEBUG:            defined
 OPTIMIZE:          on

MOLS$ LSRG 6,2 "-co" "1*0,0,36;1*0,0,0" 0 | ./Euler 0 2 la,eq,mu0,all
N k m1 m2 brt brsrc brm brsol prp t sat nds inds lvs ulvs sol chcs taus sbps chct taut sbpt ptime prog vers
6 2 36 0 la eq mu0 all dom 3.8259 0 699 699 0 0 0 699 120098 354680 3.8132 0.4474 0.7292 0.0002 Euler 0.7.5

Comments:
1. Unsatisfiable leaves do not exist anymore because they are catched and processed on the fly.
2. The number of created subproblems decreased from 387006 to 354680, i.e. by about 8.5 %.


H)

Removed redundant members.

program name:       Euler
 version:           0.7.6
 last change:       18.10.2021
 git-id:            a62f2ce2e04831e71c33b9baa7ff2d575e94aece
machine name:       amd1
 bogomips:          7585.41
compiler version:   g++ 10.3.0
 date:              Oct_18_2021 17:36:28
 options:           "--std=c++20 -pedantic -Ofast -DNDEBUG -march=native -fwhole-program -fno-math-errno -fno-trapping-math -fno-rounding-math -fno-signaling-nans -fno-unsafe-math-optimizations -fno-finite-math-only -fno-associative-math -fno-reciprocal-math -fsigned-zeros -DGIST=0 -lgecodesearch -lgecodeint -lgecodekernel -lgecodesupport"
 NDEBUG:            defined
 OPTIMIZE:          on

oz-amd1:

MOLS$ LSRG 6,2 "-co" "1*0,0,36;1*0,0,0" 0 | ./Euler 0 2 la,eq,mu0,all
N k m1 m2 brt brsrc brm brsol prp t sat nds inds lvs ulvs sol chcs taus sbps chct taut sbpt ptime prog vers
6 2 36 0 la eq mu0 all dom 3.6917 0 699 699 0 0 0 699 120098 354680 3.6799 0.4471 0.6609 0.0002 Euler 0.7.6

MOLS$ ./Euler 4 2 la,eq,mu0,all
N k m1 m2 brt brsrc brm brsol prp t sat nds inds lvs ulvs sol chcs taus sbps chct taut sbpt ptime prog vers
4 2 0 0 la eq mu0 all dom 8.6549 1 14477 7565 6912 0 6912 7565 504883 2054696 8.5749 1.2097 2.2183 0.0001 Euler 0.7.6

Comments:
1. Runtime slighlty improved.


I)

Simulated behaviour of 0.7.1 (with redundant single-child-nodes).

program name:       Euler
 version:           0.7.7
 last change:       20.10.2021
 git-id:            bfc12141641dceb9fdf59e05edfba08908676eb0
machine name:       amd1
 bogomips:          7585.65
compiler version:   g++ 10.3.0
 date:              Oct_20_2021 17:55:39
 options:           "--std=c++20 -pedantic -Ofast -DNDEBUG -march=native -fwhole-program -fno-math-errno -fno-trapping-math -fno-rounding-math -fno-signaling-nans -fno-unsafe-math-optimizations -fno-finite-math-only -fno-associative-math -fno-reciprocal-math -fsigned-zeros -DGIST=0 -lgecodesearch -lgecodeint -lgecodekernel -lgecodesupport"
 NDEBUG:            defined
 OPTIMIZE:          on

oz-amd1:

MOLS$ LSRG 6,2 "-co" "1*0,0,36;1*0,0,0" 0 | ./Euler 0 2 la,eq,mu0,all
N k m1 m2 brt brsrc brm brsol prp t sat nds inds lvs ulvs sol chcs taus sbps chct taut sbpt ptime prog vers
6 2 36 0 la eq mu0 all dom 3.4292 0 1049 699 350 350 0 699 120098 307592 3.4182 0.5287 0.5887 0.0001 Euler 0.7.7

MOLS$ ./Euler 4 2 eq,all
N k m1 m2 brt brsrc brm brsol prp t sat nds inds lvs ulvs sol chcs taus sbps chct taut sbpt ptime prog vers
4 2 0 0 la eq mu0 all dom 3.6576 1 13894 6981 6913 1 6912 6981 213883 836858 3.5885 0.6197 0.9310 0.0001 Euler 0.7.7

Comments:
1. Time on order 4 significanlty improved.
2. On order 6, the number of subproblems is equal to that on 0.7.1.
   On order 4, the number is still slightly bigger.


J)

New option - eager/lazy applying of single-child branchings.
In both versions ltau is called only if not single-child branching is found.

program name:       Euler
 version:           0.8.4
 last change:       27.10.2021
 git-id:            ccf9265533416ff3e06cf0bd92678808c477c25c
machine name:       amd1
 bogomips:          7585.65
compiler version:   g++ 10.3.0
 date:              Oct_27_2021 17:30:49
 options:           "--std=c++20 -pedantic -Ofast -DNDEBUG -march=native -fwhole-program -fno-math-errno -fno-trapping-math -fno-rounding-math -fno-signaling-nans -fno-unsafe-math-optimizations -fno-finite-math-only -fno-associative-math -fno-reciprocal-math -fsigned-zeros -DGIST=0 -lgecodesearch -lgecodeint -lgecodekernel -lgecodesupport"
 NDEBUG:            defined
 OPTIMIZE:          on

oz-amd1:

MOLS$ ./Euler 4 2 eq,all,eager
N k m1 m2 brt brsrc brm brsol bregr prp t sat nds inds inds2 inds3 lvs ulvs sol 1chld chcs taus sbps chct taut sbpt ptime prog vers
4 2 0 0 la eq mu0 all eager dom 3.3662 1 13823 6911 6911 0 6912 0 6912 1487 8398 213883 752416 3.2917 0.6292 0.8515 0.0001 Euler 0.8.4

MOLS$ ./Euler 4 2 eq,all,lazy
N k m1 m2 brt brsrc brm brsol bregr prp t sat nds inds inds2 inds3 lvs ulvs sol 1chld chcs taus sbps chct taut sbpt ptime prog vers
4 2 0 0 la eq mu0 all lazy dom 3.1472 1 13823 6911 6911 0 6912 0 6912 396 7307 213883 700678 3.0766 0.6214 0.7772 0.0001 Euler 0.8.4

MOLS$ LSRG 6,2 "-co" "1*0,0,36;1*0,0,0" 0 | ./Euler 0 2 la,eq,mu0,all,eager
N k m1 m2 brt brsrc brm brsol bregr prp t sat nds inds inds2 inds3 lvs ulvs sol 1chld chcs taus sbps chct taut sbpt ptime prog vers
6 2 36 0 la eq mu0 all eager dom 3.3702 0 699 349 349 0 350 350 0 2484 2833 120098 307592 3.3510 0.4465 0.5856 0.0001 Euler 0.8.4

MOLS$ LSRG 6,2 "-co" "1*0,0,36;1*0,0,0" 0 | ./Euler 0 2 la,eq,mu0,all,lazy
N k m1 m2 brt brsrc brm brsol bregr prp t sat nds inds inds2 inds3 lvs ulvs sol 1chld chcs taus sbps chct taut sbpt ptime prog vers
6 2 36 0 la eq mu0 all lazy dom 4.1527 0 699 349 349 0 350 350 0 357 706 120098 387006 4.1379 0.5053 0.7413 0.0000 Euler 0.8.4

Comments:
1. On order 4, lazy is faster than eager, while on order 6 eager is faster.
2. The number of nodes and ltau calls are equal in both cases.


H)

In equality-based lookahead, var!=val implies var==val, so other values of var
are skipped.

program name:       Euler
 version:           0.8.5
 last change:       27.10.2021
 git-id:            a68923e7e75725bbf3a5011b2dee238866eef754
machine name:       amd1
 bogomips:          7585.65
compiler version:   g++ 10.3.0
 date:              Oct_27_2021 17:56:24
 options:           "--std=c++20 -pedantic -Ofast -DNDEBUG -march=native -fwhole-program -fno-math-errno -fno-trapping-math -fno-rounding-math -fno-signaling-nans -fno-unsafe-math-optimizations -fno-finite-math-only -fno-associative-math -fno-reciprocal-math -fsigned-zeros -DGIST=0 -lgecodesearch -lgecodeint -lgecodekernel -lgecodesupport"
 NDEBUG:            defined
 OPTIMIZE:          on

oz-amd1:

MOLS$ ./Euler 4 2 eq,all,lazy
N k m1 m2 brt brsrc brm brsol bregr prp t sat nds inds inds2 inds3 lvs ulvs sol 1chld chcs taus sbps chct taut sbpt ptime prog vers
4 2 0 0 la eq mu0 all lazy dom 3.1929 1 13823 6911 6911 0 6912 0 6912 396 7307 213883 699408 3.1226 0.6299 0.7970 0.0001 Euler 0.8.5

MOLS$ LSRG 6,2 "-co" "1*0,0,36;1*0,0,0" 0 | ./Euler 0 2 la,eq,mu0,all,lazy
N k m1 m2 brt brsrc brm brsol bregr prp t sat nds inds inds2 inds3 lvs ulvs sol 1chld chcs taus sbps chct taut sbpt ptime prog vers
6 2 36 0 la eq mu0 all lazy dom 3.9890 0 699 349 349 0 350 350 0 357 706 120098 386422 3.9730 0.4479 0.7178 0.0001 Euler 0.8.5

Comments:
1. The number of subproblems (sbps) is slightly better.


I)

Eager/lazy mode for all lookahead variants: eq, val, eqval.

Version 0.9.0.

okserver:

1000 random instances, MOLS of order 7, 18 cells in the first LS are known (as in the
Latin Squares repository).

                time-unsat               time-sat                 nds-unsat                 nds-sat
                avg   min  max    sd     avg   min  max    sd     avg     min max  sd       avg     min max   sd
eqval,mu0,eager 18.82 0.37 231.2  24.81  23.58 0.22 458.63 43.13  917.83  20  7033 879.13   905.97  4   9462  1150.88
eqval,mu0,lazy  19.01 0.46 180.28 21.14  21.53 0.23 263.14 31.75  917.83  20  7033 879.13   905.74  4   9462  1150.95
eqval,mu1,eager 18.92 0.34 129.43 17.84  18.89 0.35 225.86 23.34  1171.49 17  8162 1126.24  1161.05 6   14712 1475.33
eqval,mu1,lazy  25.99 0.56 180.8  24.76  25.71 0.24 325.35 31.58  1171.49 17  8162 1126.24  1160.64 6   14712 1475.32

Comments:
1. On eqval, mu0-eager is the best by average runtime on unsat. All in all, mu0-eager,
   mu0-lazy, and mu1-eager are quite close by this parameter.
2. On average, mu0 is better node-wise than mu1.


J)

Independent reduction before choosing a branching via the tau function.

Version 0.9.5

okserver:

1000 random instances, MOLS of order 7, 18 cells in the first LS are known (as in the
Latin Squares repository).

            time-unsat                time-sat                  nds-unsat                  nds-sat
            avg    min  max    sd     avg    min  max    sd     avg     min max   sd       avg     min max   sd
eq,eager    102.05 0.86 614.09 90.01  79.89  0.28 539.62 84.72  3964.23 31  23449 3506.68  3055.59 7   23197 3367.14
eq,lazy     127.5  1.19 731.56 113.3  100.89 0.38 733.72 110.7  3964.23 31  23449 3506.68  3056.09 7   23199 3367.11
val,eager   13.02  0.23 123.28 13.76  14.6   0.26 192.81 20.88  844.24  19  6146  772.34   806.59  6   6786  939.98
val,lazy    22.99  0.42 198.26 23.83  26.18  0.29 324.73 36.18  879.45  19  6146  804.93   859.39  7   6786  981.51
eqval,eager 17.59  0.32 165.55 20.66  20.8   0.24 350.58 34.4   917.83  20  7033  879.13   906.26  4   9465  1151.03
eaval,lazy  28.53  0.53 356.61 33.78  32.39  0.33 487.06 50.14  976.21  20  7135  970.04   967.71  7   9463  1218.98

Comments:
1. value-branching with eager reduction is the best time-wise and node-wise.
2. The average runtime on eager equality-value-branching slightly improved compared to 0.9.0.
3. For some reason, the number of nodes between eager and lazy variants of value-
   and equality-value-branchings are different. This should be investigated in more detail.


K)

Pruning in reduction.

Version 0.9.7

okserver:

1000 random instances, MOLS of order 7, 18 cells in the first LS are known (as in the
Latin Squares repository).

               time-unsat               time-sat                 nds-unsat                       nds-sat                        lvs-unsat                      lvs-sat
               avg   min  max    sd     avg   min  max    sd     avg      min  max     sd        avg      min max     sd        avg      min  max    sd        avg      min max     sd
la,eq,eager    84.55 0.72 496.56 75.12  66.65 0.24 488.65 73.23  3964.23  31   23449   3506.68   3055.59  7   23197   3367.14   1982.62  16   11725  1753.34   1525.5   2   11595   1683.56
la,eq,lazy     92.4  0.83 546.93 81.95  73.2  0.27 579.63 79.54  3964.23  31   23449   3506.68   3056.09  7   23199   3367.1    1982.62  16   11725  1753.34   1525.75  2   11596   1683.55
la,val,eager   10.61 0.18 108.75 11.59  12.17 0.21 160.16 17.64  844.24   19   6146    772.34    806.59   6   6786    939.98    630.71   15   4570   570.93    587.77   1   4586    675.41
la,val,lazy    15.37 0.26 158.41 16.88  18.47 0.21 255.98 27.35  879.45   19   6146    804.93    859.39   7   6786    981.51    657.2    15   4570   595.48    626.19   2   4586    706.71
la,eqval,eager 14.64 0.26 149.39 17.86  17.78 0.21 315.01 30.62  917.83   20   7033    879.13    906.26   4   9465    1151.03   651.34   15   4931   604.03    611.65   1   5402    737.02
la,eqval,lazy  20.06 0.35 282.27 25.45  23.99 0.24 390.9  39.61  976.21   20   7135    970.04    967.71   7   9463    1218.98   692.02   15   5163   664.39    651.86   1   5400    782.73
mind,val       10.22 0.18 76.09  9.77   10.26 0.01 98.33  12.18  260463.9 4307 1927641 248968.1  261727.2 260 2499048 311218.3  130232.4 2154 963821 124484.1  130859.4 127 1249520 155609.1
mind,eq        9.11  0.15 55.02  8.54   9.06  0.01 89.71  10.23  220606.9 3638 1629973 210907.2  221733   216 2117638 263625.4  130244.5 2155 963915 124496.3  130870.2 127 1249553 155619.3

Comments:
1. The pruning improved the runtime by about 20-40 % in all cases. The number of nodes remains the same just like it
should be.
2. The average number of leaves on the val-branchers is the best one. eq-val is a bit worse, while eq is much worse.


L)

Added mindr - minimal-domain branching (like mind) with reduction (like in la).

Version 0.9.10

okserver:

1000 random instances, MOLS of order 7, 18 cells in the first LS are known (as in the
Latin Squares repository).

          time-unsat               time-sat                 nds-unsat                       nds-sat                        lvs-unsat                       lvs-sat
          avg   min  max    sd     avg   min  max    sd     avg      min  max     sd        avg      min max     sd        avg       min  max    sd        avg      min max     sd
mind,eq   9.11  0.15 55.02  8.54   9.06  0.01 89.71  10.23  220606.9 3638 1629973 210907.2  221733   216 2117638 263625.4  130244.5  2155 963915 124496.3  130870.2 127 1249553 155619.3
mind,val  10.22 0.18 76.09  9.77   10.26 0.01 98.33  12.18  260463.9 4307 1927641 248968.1  261727.2 260 2499048 311218.3  130232.4  2154 963821 124484.1  130859.4 127 1249520 155609.1
mindr,eq  10.06 0.17 76.68  9.57   10.32 0.1  103.18 11.81  909.93   15   7147    874.28    927.23   8   9002    1082.08   455.47    8    3574   437.14    460.86   2   4498    541.08
mindr,val 6.76  0.09 46.09  6.33   6.97  0.07 71.01  7.84   938.78   14   7553    904.36    956.81   9   9334    1116.9    689.89    11   5554   664.04    698.68   2   6852    819.94
la,eq     84.55 0.72 496.56 75.12  66.65 0.24 488.65 73.23  3964.23  31   23449   3506.68   3055.59  7   23197   3367.14   1982.62   16   11725  1753.34   1525.5   2   11595   1683.56
la,val,   10.61 0.18 108.75 11.59  12.17 0.21 160.16 17.64  844.24   19   6146    772.34    806.59   6   6786    939.98    630.71    15   4570   570.93    587.77   1   4586    675.41
la,eqval  14.64 0.26 149.39 17.86  17.78 0.21 315.01 30.62  917.83   20   7033    879.13    906.26   4   9465    1151.03   651.34    15   4931   604.03    611.65   1   5402    737.02


M)

Added a new distance for lookahead that deals with given weights.


Version 0.12.3

a) Order 7
The following weights, found by Euler_BBOpt for testN7 (set 1), were used:
  155.476607057103068026,249.713057453264922758,91.8229453557761098048,3.1393182001367795051,49

okserver:

1000 random instances, MOLS of order 7, 18 cells in the first LS are known (as in the
Latin Squares repository).

          time-unsat           time-sat                nds-unsat              nds-sat                 lvs-unsat              lvs-sat
          avg min  max   sd    avg  min  max    sd     avg    min max  sd     avg    min max  sd      avg    min max  sd     avg    min max  sd
la,val    9.1 0.16 46.69 8.33  9.58 0.15 120.94 11.62  375.81 14  2030 338.9  375.54 5   4695 476.95  273.88 11  1484 246.2  268.87 1   3247 342.74

Comments:
1. On unsatisfiable instances, the average number of leaves 273.88 is clearly
   better than 630.71 obtained on the old la-val version with mu0, mindr-val
   (689.89 leaves) and mindr-eq (455.47 leaves).
2. Time-wise the new version is about 15 % faster then the old one based on mu0.


b) Order 8

The following weights, found by Euler_BBOpt for testN8_1, were used:
  120.05999999999999999778,180.03999999999999999389,0.10000000000000000000,85.40000000000000000139,120.05999999999999999778,124.00000000000000000000

1000 random instances, MOLS of order 8, 64 cells in the first LS are known.
Among them there are 6 satisfiable instances and 994 unsatisfiable ones.

          time-unsat                  time-sat                  nds-unsat                          nds-sat                         lvs-unsat                          lvs-sat
          avg    min    max    sd     avg    min  max    sd     avg      min     max     sd        avg     min   max     sd        avg      min     max     sd        avg      min   max     sd
mind,eq   135.5  84.74  146.81 9.17   64.8   1.44 137.4  46.18  2923509  2667951 3153855 62256.88  1383221 30142 2950242 993503    1461755  1333976 1576928 31128.44  691606.7 15067 1475116 496751.2
mind_val  133.76 82.66  144.61 9.04   64.08  1.42 136.81 46.03  2849499  2596691 3075591 61006.15  1349044 29219 2878116 969109.2  1462115  1334368 1577171 31109.16  691765.8 15070 1475452 496869.2
mindr,eq  277.34 158.74 337.6  21.28  134.3  3.66 261.36 89.67  19667.23 18951   22661   705.29    9200    237   18631   6308.41   9834.11  9476    11331   352.65    4597.5   116   9313    3154.14
mindr,val 234.78 114.45 257.3  17.93  113.33 3.22 227.68 76.89  27563.07 27397   27661   30.13     13003   347   26884   8997.93   18957.66 18952   19008   8.26      8936.17  234   18500   6191.26
la,val    20.56  2.67   209.05 40.66  3.15   0.62 5.31   1.71   1101.8   107     12546   2403.1    116.33  16    190     65.07     812.91   86      9191    1749.63   87.33    11    141     49.66

Comments:
1. la-val (with weights) is much better both time-wise and unsat-leaves-wise compared to all competitors.


N)

Version with four orderings of branchings.


program name:       Euler
 version:           0.13.3
 last change:       11.1.2022
 git-id:            6c970dc10757d4b60982411757c9cd6b6ee24497
machine name:       cs2-lnx-8cc0131zlv
 bogomips:          6000
compiler version:   g++ 11.2.0
 date:              Jan_11_2022 17:14:07
 options:           "--std=c++20 -pedantic -Ofast -DNDEBUG -march=native -fwhole-program -fno-math-errno -fno-trapping-math -fno-rounding-math -fno-signaling-nans -fno-unsafe-math-optimizations -fno-finite-math-only -fno-associative-math -fno-reciprocal-math -fsigned-zeros -DGIST=0 -lgecodesearch -lgecodeint -lgecodekernel -lgecodesupport"
 NDEBUG:            defined
 OPTIMIZE:          on

A) Order 7, Value-branching

The following weights, found by Euler_BBOpt for testN7 (set 1), were used:
  155.476607057103068026,249.713057453264922758,91.8229453557761098048,3.1393182001367795051,49

okserver:

1000 random instances, MOLS of order 7, 18 cells in the first LS are known (as in the
Latin Squares repository).


          time-sat                 nds-sat                 lvs-sat
          avg   min  max    sd     avg    min max  sd      avg    min max  sd
given     9.97  0.15 150.85 12.99  374.69 5   4694 476.95  268.87 1   3247 342.74
revgiven  9.71  0.23 142.07 12.87  364.68 6   4305 458.59  261.31 1   2961 328.72
ascdist   9.85  0.16 81.56  11.78  368.89 5   3302 437.37  264.11 1   2404 315.64
descdist  10.06 0.27 92.82  12.38  384.84 5   4057 468.89  277.04 1   2944 338.38

Leaves-wise reverse given is the best one.
Surprisingly ascdist is better than descdist.
However, the difference is very small.
Perhaps on order 8 the situation will be different.


O)

Version 0.13.3

program name:       Euler
 version:           0.13.3
 last change:       11.1.2022
 git-id:            6c970dc10757d4b60982411757c9cd6b6ee24497
machine name:       cs2-lnx-8cc0131zlv
 bogomips:          6000
compiler version:   g++ 11.2.0
 date:              Jan_11_2022 17:14:07
 options:           "--std=c++20 -pedantic -Ofast -DNDEBUG -march=native -fwhole-program -fno-math-errno -fno-trapping-math -fno-rounding-math -fno-signaling-nans -fno-unsafe-math-optimizations -fno-finite-math-only -fno-associative-math -fno-reciprocal-math -fsigned-zeros -DGIST=0 -lgecodesearch -lgecodeint -lgecodekernel -lgecodesupport"
 NDEBUG:            defined
 OPTIMIZE:          on

okserver

A) Order 6

la-val weights found by BBOpt:
116.25124999999999999417,
0.08010841796875000001,
150,
150

la-val weights found by PyDGGA:
86.25729616872681,
6.451472797210517,
295.6748815408528,
255.0200966781085

la-eq weights found by BBOpt:
264.61937500000000000888,
181.13374999999999999389,
111.07562499999999999778,
180

la-eq weights found by PyDGGA:
175.28277076334498,
92.52275518117129,
87.36298680535492,
104.22268040135963

Timeout 24 hours was used.

mind,val:
N k m1 m2 brt brsrc brsol bregr brpr prp t sat nds inds inds1 inds2 inds3 lvs ulvs sol rdc1 chcs taus sbps chct taut sbpt ptime prog vers
6 2 11 0 mind val one eager prun dom 22612.6615 0 853105243 402032443 0 360189208 34721378 451072800 451072800 0 0 402032443 0 0 65.0561 0.0000 0.0000 0.0005 Euler 0.13.1
6 2 11 1 mind val one eager prun dom 3598.8877 0 142190395 67011595 0 60039208 5786978 75178800 75178800 0 0 67011595 0 0 49.2884 0.0000 0.0000 0.0000 Euler 0.13.1
6 2 11 2 mind val one eager prun dom 599.8083 0 28443643 13407883 0 12015208 1157474 15035760 15035760 0 0 13407883 0 0 11.2773 0.0000 0.0000 0.0005 Euler 0.13.1
6 2 11 3 mind val one eager prun dom 150.2613 0 7124446 3365506 0 3028527 280525 3758940 3758940 0 0 3365506 0 0 2.8942 0.0000 0.0000 0.0005 Euler 0.13.1
6 2 11 4 mind val one eager prun dom 49.7604 0 2374815 1121835 0 1009509 93508 1252980 1252980 0 0 1121835 0 0 0.9917 0.0000 0.0000 0.0005 Euler 0.13.1
6 2 11 5 mind val one eager prun dom 24.9657 0 1187407 560917 0 504754 46754 626490 626490 0 0 560917 0 0 0.4994 0.0000 0.0000 0.0004 Euler 0.13.1

mind,eq:
N k m1 m2 brt brsrc brsol bregr brpr prp t sat nds inds inds1 inds2 inds3 lvs ulvs sol rdc1 chcs taus sbps chct taut sbpt ptime prog vers
6 2 11 0 mind eq one eager prun dom 23317.5589 0 902145599 451072799 0 451072799 0 451072800 451072800 0 0 451072799 0 0 65.2253 0.0000 0.0000 0.0003 Euler 0.13.1
6 2 11 1 mind eq one eager prun dom 3638.7224 0 150357599 75178799 0 75178799 0 75178800 75178800 0 0 75178799 0 0 51.8666 0.0000 0.0000 0.0002 Euler 0.13.1
6 2 11 2 mind eq one eager prun dom 617.0213 0 30071519 15035759 0 15035759 0 15035760 15035760 0 0 15035759 0 0 12.9356 0.0000 0.0000 0.0005 Euler 0.13.1
6 2 11 3 mind eq one eager prun dom 241.5595 0 7517879 3758939 0 3758939 0 3758940 3758940 0 0 3758939 0 0 4.7847 0.0000 0.0000 0.0000 Euler 0.13.1
6 2 11 4 mind eq one eager prun dom 83.2859 0 2505959 1252979 0 1252979 0 1252980 1252980 0 0 1252979 0 0 1.6890 0.0000 0.0000 0.0000 Euler 0.13.1
6 2 11 5 mind eq one eager prun dom 41.9068 0 1252979 626489 0 626489 0 626490 626490 0 0 626489 0 0 0.8382 0.0000 0.0000 0.0000 Euler 0.13.1

mindr,val:
N k m1 m2 brt brsrc brsol bregr brpr prp t sat nds inds inds1 inds2 inds3 lvs ulvs sol rdc1 chcs taus sbps chct taut sbpt ptime prog vers
6 2 11 0 INTERRUPTED DUE TIMEOUT
6 2 11 1 mindr val one eager prun dom 16960.2601 0 6463195 1947355 0 573688 188258 4515840 4515840 0 2358029 6463195 0 507073568 16507.5137 0.0000 137.2432 0.0002 Euler 0.13.1
6 2 11 2 mindr val one eager prun dom 3159.6801 0 1298203 395035 0 122104 37730 903168 903168 0 471629 1298203 0 102890900 3121.7764 0.0000 129.0612 0.0004 Euler 0.13.1
6 2 11 3 mindr val one eager prun dom 752.3733 0 338086 112294 0 55251 589 225792 225792 0 118074 338086 0 23445819 741.7054 0.0000 107.5743 0.0003 Euler 0.13.1
6 2 11 4 mindr val one eager prun dom 318.1084 0 112695 37431 0 18417 196 75264 75264 0 39358 112695 0 7815135 313.6535 0.0000 42.6080 0.0002 Euler 0.13.1
6 2 11 5 mindr val one eager prun dom 159.2500 0 56347 18715 0 9208 98 37632 37632 0 19679 56347 0 3907369 157.0159 0.0000 20.8151 0.0000 Euler 0.13.1

mindr,eq
N k m1 m2 brt brsrc brsol bregr brpr prp t sat nds inds inds1 inds2 inds3 lvs ulvs sol rdc1 chcs taus sbps chct taut sbpt ptime prog vers
6 2 11 0 INTERRUPTED DUE TIMEOUT
6 2 11 1 mindr eq one eager prun dom 20372.0512 0 4582079 2291039 0 2291039 0 2291040 2291040 0 1540365 4582079 0 611865198 20118.9316 0.0000 141.6837 0.0004 Euler 0.13.1
6 2 11 2 mindr eq one eager prun dom 3225.8779 0 916415 458207 0 458207 0 458208 458208 0 308101 916415 0 122787594 3207.0488 0.0000 128.1251 0.0000 Euler 0.13.1
6 2 11 3 mindr eq one eager prun dom 578.5826 0 229103 114551 0 114551 0 114552 114552 0 85687 229103 0 23956505 574.0562 0.0000 81.3348 0.0002 Euler 0.13.1
6 2 11 4 mindr eq one eager prun dom 194.0013 0 76367 38183 0 38183 0 38184 38184 0 28570 76367 0 7985008 192.4862 0.0000 27.0812 0.0002 Euler 0.13.1
6 2 11 5 mindr eq one eager prun dom 96.8595 0 38183 19091 0 19091 0 19092 19092 0 14288 38183 0 3992332 96.1035 0.0000 12.7505 0.0002 Euler 0.13.1

la,val,bbopt
N k m1 m2 brt brsrc brsol bregr brpr prp t sat nds inds inds1 inds2 inds3 lvs ulvs sol rdc1 chcs taus sbps chct taut sbpt ptime prog vers
6 2 11 0 la val one eager prun dom 59836.9476 0 5499877 2220997 0 1483560 425640 3278880 3278880 0 6571319 5499877 131469457 1769600431 59258.8828 512.6185 274.4783 0.0002 Euler 0.13.1
6 2 11 1 la val one eager prun dom 3368.6636 0 610426 270586 0 233040 5840 339840 339840 0 581830 610426 12378860 120634368 3347.5977 83.9206 135.9553 0.0000 Euler 0.13.1
6 2 11 2 la val one eager prun dom 558.2062 0 122085 54117 0 46608 1168 67968 67968 0 116372 122085 2475753 24121130 554.6678 15.1178 96.6251 0.0004 Euler 0.13.1
6 2 11 3 la val one eager prun dom 141.2854 0 30530 13538 0 11670 283 16992 16992 0 29092 30530 619716 6061705 140.4313 3.8756 21.3949 0.0000 Euler 0.13.1
6 2 11 4 la val one eager prun dom 47.0347 0 10171 4507 0 3881 96 5664 5664 0 9686 10171 206067 2030130 46.7478 1.2821 7.0999 0.0004 Euler 0.13.1
6 2 11 5 la val one eager prun dom 23.4893 0 5085 2253 0 1940 48 2832 2832 0 4842 5085 102989 1014664 23.3474 0.6396 3.6517 0.0004 Euler 0.13.1

la,eq,bbopt
N k m1 m2 brt brsrc brsol bregr brpr bro prp t sat nds inds inds1 inds2 inds3 lvs ulvs sol rdc1 chcs taus sbps chct taut sbpt ptime prog vers
6 2 11 0 la eq one eager prun dom 41704.8549 0 4258067 2129033 0 2129033 0 2129034 2129034 0 3960866 4258067 347543907 1294118678 41322.0508 138.7612 268.2166 0.0000 Euler 0.13.1
6 2 11 1 la eq one eager prun dom 6053.0983 0 709679 354839 0 354839 0 354840 354840 0 661085 709679 57912988 215771839 6028.3315 129.2652 163.6715 0.0005 Euler 0.13.1
6 2 11 2 la eq one eager prun given dom 1428.0292 0 141935 70967 0 70967 0 70968 70968 0 132280 141935 11584147 43171317 1422.3651 58.1726 133.7610 0.0003 Euler 0.13.3
6 2 11 3 la eq one eager prun given dom 360.0113 0 35483 17741 0 17741 0 17742 17742 0 33109 35483 2898299 10858535 358.6761 13.8517 70.6856 0.0003 Euler 0.13.3
6 2 11 4 la eq one eager prun given dom 119.5853 0 11827 5913 0 5913 0 5914 5914 0 11044 11827 965803 3619198 119.1388 4.6922 21.1082 0.0000 Euler 0.13.3
6 2 11 5 la eq one eager prun given dom 59.8699 0 5913 2956 0 2956 0 2957 2957 0 5520 5913 482689 1809114 59.6478 2.3696 10.7118 0.0003 Euler 0.13.3

la,val,pydgga
N k m1 m2 brt brsrc brsol bregr brpr bro prp t sat nds inds inds1 inds2 inds3 lvs ulvs sol rdc1 chcs taus sbps chct taut sbpt ptime prog vers
6 2 11 0 la val one eager prun given dom 78467.5171 0 9142357 3197317 0 1591560 486120 5945040 5945040 0 13000305 9142357 234502177 3218092047 76873.7344 316.2114 278.3620 0.0005 Euler 0.13.3
6 2 11 1 la val one eager prun given dom 4905.8187 0 773626 275626 0 150480 28400 498000 498000 0 1140540 773626 13605740 162240230 4877.8833 100.0591 178.5691 0.0004 Euler 0.13.3
6 2 11 2 la val one eager prun given dom 690.2712 0 154725 55125 0 30096 5680 99600 99600 0 228000 154725 2721129 32451214 686.3964 16.9388 128.0061 0.0002 Euler 0.13.3
6 2 11 3 la val one eager prun given dom 108.6719 0 33279 14055 0 10761 1420 19224 19224 0 38082 33279 541467 5126232 107.8000 2.7188 17.0989 0.0002 Euler 0.13.3
6 2 11 4 la val one eager prun given dom 36.3460 0 11091 4683 0 3585 472 6408 6408 0 12694 11091 180267 1718538 36.0543 0.9075 5.8380 0.0004 Euler 0.13.3
6 2 11 5 la val one eager prun given dom 18.1316 0 5545 2341 0 1792 236 3204 3204 0 6347 5545 90089 858858 17.9879 0.4493 2.9665 0.0005 Euler 0.13.3

la,eq,pydgga
N k m1 m2 brt brsrc brsol bregr brpr bro prp t sat nds inds inds1 inds2 inds3 lvs ulvs sol rdc1 chcs taus sbps chct taut sbpt ptime prog vers
6 2 11 0 la eq one eager prun given dom 34599.4629 0 4456799 2228399 0 2228399 0 2228400 2228400 0 4123105 4456799 354707390 1299749486 34256.0859 141.5582 269.6204 0.0005 Euler 0.13.3
6 2 11 1 la eq one eager prun given dom 6024.3817 0 742799 371399 0 371399 0 371400 371400 0 687623 742799 59107588 216533293 5999.9331 129.8552 163.8176 0.0005 Euler 0.13.3
6 2 11 2 la eq one eager prun given dom 827.5977 0 148559 74279 0 74279 0 74280 74280 0 137619 148559 11823035 43331830 824.0942 41.3435 128.0102 0.0005 Euler 0.13.3
6 2 11 3 la eq one eager prun given dom 210.8180 0 37139 18569 0 18569 0 18570 18570 0 34383 37139 2958029 10899368 209.9998 10.4208 38.3639 0.0003 Euler 0.13.3
6 2 11 4 la eq one eager prun given dom 69.6864 0 12379 6189 0 6189 0 6190 6190 0 11467 12379 985713 3632545 69.4102 3.5551 12.1466 0.0005 Euler 0.13.3
6 2 11 5 la eq one eager prun given dom 35.0436 0 6189 3094 0 3094 0 3095 3095 0 5731 6189 492644 1815566 34.9052 1.7794 6.2384 0.0000 Euler 0.13.3

Comments.
1. Both mindr could not solve the hardest benchmark in 24 hour.
2. On the full-symmetry-breaking benchmark (with m2=5), average-leaves-wise in ascending order:
   la,val,bbopt  2832
   la,eq,bbopt   2957
   la,eq,pydgga  3095
   la,val,pydgga 3204
   mindr,eq      19092
   mindr,val     37632
   mind,eq       626490
   mind,val      626490


B) Order 7

1000 random instances, MOLS of order 7, 18 cells in the first LS are known,
then the symmetry breaking is applied.

la,val weights found by BBOpt:
155.476607057103068026,
249.713057453264922758,
91.8229453557761098048,
3.1393182001367795051,
49

la,val weights found by PyDGGA:
253.82671755369242,
234.48046614233334,
164.51980118788464,
162.3268996024532,
240.15378335297032

la,eq weights found by BBOpt:
130.30582379174905353902,
4.35901350154064269214,
100.00000000000000000000,
100.16060687031867470348,
99.87611425047239319119

la,eq weights found by PyDGGA:
113.36897524623168,
25.104389571307273,
7.6168744208513335,
6.543970334699964,
244.15580467219542

              time-unsat                     time-sat                       nds-unsat                              nds-sat                               lvs-unsat                            lvs-sat
              avg   med   min  max    sd     avg   med   min  max    sd     avg      med    min  max     sd        avg      med    min max     sd        avg      med   min  max    sd        avg      med   min max     sd
mind,val      9.37  6.76  0.16 69.13  8.96   9.42  5.91  0.01 90.55  11.21  220606.9 160005 3638 1629973 210907.2  221733   140078 216 2117638 263625.4  130244.5 93871 2155 963915 124496.3  130870.2 82932 127 1249553 155619.3
mind,eq       10.24 7.38  0.17 75.79  9.8    10.29 6.51  0.01 98.49  12.26  260463.9 187735 4307 1927641 248968.1  261727.2 165864 260 2499048 311218.3  130232.4 93868 2154 963821 124484.1  130859.4 82927 127 1249520 155609.1
mindr,val     6.92  5.02  0.09 53.48  6.58   7.18  4.58  0.06 70.76  8.31   938.78   674    14   7553    904.36    956.2    613    8   9334    1116.89   689.89   496   11   5554   664.04    698.68   446   2   6852    819.94
mindr,eq      10.1  7.28  0.17 78.9   9.63   10.41 6.53  0.1  103.25 12.07  909.93   649    15   7147    874.28    926.23   590    7   9001    1082.08   455.47   325   8    3574   437.14    460.86   294   2   4498    541.08
la,val,bbopt  9.36  6.9   0.16 56.03  8.67   9.97  5.85  0.15 150.85 12.99  375.81   276    14   2030    338.9     374.69   222    5   4694    476.95    273.88   200   11   1484   246.2     268.87   160   1   3247    342.74
la,eq,bbopt   32.93 24.8  1.07 188.96 28.61  26.86 17.58 0.24 257.89 31.32  1267.61  987    45   6359    1033.11   971.68   631    6   9788    1098.24   634.3    494   23   3180   516.55    484.21   314   1   4891    549.13
la,val,pydgga 8.56  6.27  0.15 57.66  7.94   9.48  5.71  0.17 187.27 14.44  627.07   462    14   4104    567.98    622.15   389    6   7675    754.64    461.3    339   11   3006   416.32    448.37   280   1   5070    527.36
la,eq,pydgga  19.14 13.88 0.37 122.24 17.47  18.82 11.77 0.36 236.7  22.69  706.8    521    15   5425    654.91    649.78   406    7   9462    827.99    353.9    261   8    2713   327.45    323.1    201   1   4728    413.96

Sorted in ascending order by the average number of leaves on unsat:
la,val,bbopt  273.88
la,eq,pydgga  353.9
mindr,eq:     455.47
la,val,pydgga 461.3
la,eq,bbopt:  634.3
mindr,val:    689.89

Comments.
1. la,val,bbopt is a clear winner leaves-wise.
QUESTION OK: but that is also true for "la,eq,pydgga", which is much
better -- so it seems just a case of bad weights?
ANSWER OZ: Indeed, it seems that bad weights are the real reason.
2. At the same time, la,eq,bbopt is better than mindr,val.
3. la,eq,pydgga is about 2 times better leaves-wise than la,eq,bbopt.
   It is also about 23 % better than mindr,eq.
4. la,val,pydgga is about 1.5 times worse leaves wise than la,val,bbopt.

QUESTION OK: So here we have the only case where there is a substantial
improved by the pydgga-weights, namely for la,eq,pydgga.
ANSWER OZ: The same situation is for order 8, see the recent commits.
Remark: Of course, we always use the *best* weights, wherever they come from.
ANSWER OZ: Yes, sure.

C) Order 8.

la,val weights found by BBOpt:
374.39999999999999999445,
16.45000000000000000069,
0.62000000000000000000,
4.51250000000000000026,
266.79999999999999998890,
93

la,val weights found by PyDGGA:
75.54995031637289,
9.445110717809413,
6.982071616492492,
153.3134767691621,
128.7607733439955,
259.8767969620833

la,eq weights found by BBOpt:
69.54120480622953077293,
0.66375731339837163629,
0.06510283241523300125,
40.59999999999999999861,
150.70000000000000001110,
198.30303435159337353821

la,eq weights found by PyDGGA:
298.36662057286696,
189.61898696734778,
24.200791004751945,
122.1809457690778,
168.37722924347517,
224.55359178593687

i) The 1st Latin square is given, the first row of the 2nd square is "0 1 2 3 4 5 6 *"

1000 benchmakrs, 994 unsat and 6 sat.
Data only for unsat is given.

               time-unsat                         nds-unsat                                  lvs-unsat
               avg    med    min    max    sd     avg      med     min     max     sd        avg      med     min     max     sd
mind,val       135.61 135.67 124.05 144.03 2.74   2848444  2850130 2620063 3036613 59759.38  1461581  1462300 1344061 1557518 30421.1
mind,eq        137.46 137.54 126.42 146.77 2.74   2922444  2923842 2687197 3114321 60876.96  1461222  1461922 1343599 1557161 30438.48
mindr,val      238.37 240.98 178.62 257.61 11.04  27564.93 27569   27395   27661   28.38     18957.55 18952   18952   19008   8.37
mindr,eq       277.2  280.19 195.82 333.88 18.69  19618.82 19406   18951   23655   649.44    9809.91  9703.5  9476    11828   324.72
la,val,bbopt   27.81  6.5    2.97   284.83 59.74  1533.41  246     126     15933   3581.79   1127.46  191     100     11592   2606.39
la,eq,bbopt    48.22  48.01  26.06  81.59  6.73   1027.91  1019    651     1687    137.24    514.46   510     326     844     68.62
la,val,pydgga  11.3   4.71   2.44   143.2  19.96  673.93   198     109     10982   1450.74   489.94   160.5   90      7601    1004.5
la,eq,pydgga   41.77  41.53  26.17  66.89  6.1    880.93   871     543     1323    123.44    440.97   436     272     662     61.72

Comments:
1. Leaves-wise, la is about 20 times better than mindr.
2. Suprisingly, by average number of leaves la-binary-branching is about 2 times better
   than la-value-branching. The same for mindr.
3. At the same time, by the median number of leaves la-value-branching about 3 times
   better than la-binary-branching.
4. The average runtime on la-value-branching is 2 times better than on la-binary-branching.
   By the median runtime, la-value-branching is about 8 times better.
5. Standard deviation and the maximal value of both leaves and runtime on la-value-branching
   is much higher than on la-binary-branching.
6. It seems than on la-value-branching several outliers spolied the average number of leaves.
7. Weights found by PyDGGA for value-branching are about 2 times leaves-wise better
   than that found by BBOpt. The runtime is about 2.5 times better.
8. PyDGGA-weights are also better than BBOpt-weights on binary-branching both leaves-wise
   and runtime-wise, but now the improvement is only about 10 %.

ii) The 1st Latin square is given, the first row of the 2nd square is "0 1 2 3 4 5 * *"

           time-unsat                          nds-unsat                                  lvs-unsat
           avg    med    min    max    sd      avg      med     min     max     sd        avg      med     min     max     sd
mind,val   271.24 271.37 248.76 288.83 5.39    5696889  5700261 5240127 6073227 119518.8  2923162  2924600 2688122 3115036 60842.21
mind,eq    274.91 275.02 253.59 293.23 5.57    5844888  5847685 5374395 6228643 121753.9  2922445  2923843 2687198 3114322 60876.96
mindr,val  476.06 480.85 356.16 514.17 22.03   55130.86 55139   54791   55323   56.77     37915.09 37904   37904   38016   16.74
mindr,eq   552.42 558.82 322.81 661.3  39.82   39238.63 38813   37903   47311   1298.88   19619.82 19407   18952   23656   649.44
la,val     55.86  13.14  6.08   560.76 119.74  3067.81  493     253     31867   7163.59   2254.93  382     200     23184   5212.78
la,eq      96.7   96.2   58.85  163.49 13.44   2057.19  2039    1303    3375    274.03    1029.1   1020    652     1688    137.01

Comments:
1. Same picture as in i)

iii) The 1st Latin square is given, the first row of the 2nd square is "0 1 2 3 4 * * *"

           time-unsat                             nds-unsat                                     lvs-unsat
           avg     med     min    max     sd      avg      med      min      max      sd        avg      med     min     max     sd
mind,val   810.1   813.47  543.54 867.1   29.74   17090667 17100784 15720382 18219682 358556.3  8769485  8773800 8064366 9345108 182526.6
mind,eq    819.54  822.93  564.93 874.27  29      17534664 17543061 16123219 18685951 365260.8  8767333  8771531 8061610 9342976 182630.4
mindr,val  1416.66 1435.98 965.79 1527.03 77.34   165393.6 165418   164374   165970   170.3     113745.3 113712  113712  114048  50.23
mindr,eq   1642.41 1671.61 907.26 1979.89 132.92  117716.9 116441   113711   141951   3896.82   58858.95 58221   56856   70976   1948.41
la,val     167.83  39.49   18.38  1729.5  359.87  9204.43  1480     760      95602    21490.76  6764.79  1146    600     69552   15638.35
la,eq      154.63  151.24  81.47  280.07  27.79   3261.88  3193     1731     6295     594.76    1631.44  1597    866     3148    297.38

Comments:
1. Now la-binary-branching is about 4 times better leaves-wise than la-value-branching.
2. In opposite to i) and ii), la-binary-branching now is also runtime-wise better by about 5 %.
