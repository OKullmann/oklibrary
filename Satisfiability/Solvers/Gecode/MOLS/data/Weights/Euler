# Oleg Zaikin, 21.12.2021 (Swansea)

Choice of benchmarks for optimisation of the weights.
In all examples below Euler works in the mode of finding one solution.
The experiments were run on the okserver, tge version of Euler is 0.9.10.


A)

Order 5.

For N=5, m=8, among 1000 instances generated via LSRG there are about 50 %
unsatisfiable instances. The maximal number of leaves is 4, e.g. on seed 138:
> LSRG 5,2 "-co" "1*0,0,8;1*0,0,0" 1628808251117432880,1628808263227713690,0,138 | python symmetry-breaking-pair.py | Euler 0 0 la,val
N k m1 m2 brt brsrc brm brsol bregr brpr prp t sat nds inds inds2 inds3 lvs ulvs sol 1chld chcs taus sbps chct taut sbpt ptime prog vers
5 2 11 5 la val mu0 one eager prun dom 0.0240 0 5 1 0 0 4 4 0 6 5 56 466 0.0236 0.0006 0.0029 0.0002 Euler 0.9.10

4 leaves is too small for optimisation.

If the first Latin square is completely unfilled, i.e.
> Euler 5 2 la,val
then there is only 1 leaf.


B)

Order 6.

The following instance can be used:

> LSRG 6,2 "-co" "1*0,0,12;1*0,0,0" 1628808251117432880,1628808263227713690,0,0 | python symmetry-breaking-pair.py

6 2

* * 4 3 1 *
5 * * * 2 4
* * * * * *
* * * * * *
3 * * * 0 *
1 * * 5 4 3

0 1 2 3 4 5
* * * * * *
* * * * * *
* * * * * *
* * * * * *
* * * * * *

This is stored as
  data/weights/testN6

> LSRG 6,2 "-co" "1*0,0,12;1*0,0,0" 1628808251117432880,1628808263227713690,0,0 | python symmetry-breaking-pair.py | Euler 0 0 la,val
N k m1 m2 brt brsrc brm brsol bregr brpr prp t sat nds inds inds2 inds3 lvs ulvs sol 1chld chcs taus sbps chct taut sbpt ptime prog vers
6 2 12 6 la val mu0 one eager prun dom 1.9386 0 575 188 81 16 387 387 0 677 575 10919 84121 1.9242 0.0440 0.2643 0.0002 Euler 0.9.10

There are 387 leaves if mu0 is used.


Optmizing weights.

program name:       Euler_BBOpt
 version:           0.1.2
 last change:       24.12.2021
 git-id:            57d8f7524ef18bd5c9dc07f14b370a0f68e8def4
machine name:       oleg-vm
 bogomips:          4788.92
compiler version:   g++ 11.2.0
 date:              Dec_24_2021 23:38:33
 options:           "--std=c++20 -pedantic -Ofast -DNDEBUG -march=native -fwhole-program -fno-math-errno -fno-trapping-math -fno-rounding-math -fno-signaling-nans -fno-unsafe-math-optimizations -fno-finite-math-only -fno-associative-math -fno-reciprocal-math -fsigned-zeros -pthread -lgecodesearch -lgecodeint -lgecodekernel -lgecodesupport"
 NDEBUG:            defined
 OPTIMIZE:          on

> time cat ./data/weights/testN6 | ./Euler_BBOpt 1 1 1 1 ./data/weights/Para0 val dom
(1,100,100,100,6),78

real	0m16,806s
user	0m15,489s
sys	    0m1,011s

So the best set of weights is (1,100,100,100,6) with 78 leaves.

Addition: Now with version 0.2.0:
MOLS> time cat ./data/weights/testN6 | ./Euler_BBOpt 10 2 3 1 data/weights/Para2 val dom
(12.5047,104.99320000000000001,99.999999999999999993,500.05000000000000002),77

real	3m10.894s
user	3m2.009s
sys	0m8.829s

For these small leaf-numbers no meaningful weight-optimisation is possible.


C)

Order 7

For N=7, m=18, among 1000 instances generated via LSRG there are about 50 %
unsatisfiable instances. The maximal number of leaves is 4570 on seed 715.
The runtime 45 seconds is still quite reasonable if optimisation is run on all CPU cores of okserver.

> LSRG 7,2 "-co" "1*0,0,18;1*0,0,0" 1628808251117432880,1628808263227713690,0,715 | python symmetry-breaking-pair.py | Euler 0 0 la,val
N k m1 m2 brt brsrc brm brsol bregr brpr prp t sat nds inds inds2 inds3 lvs ulvs sol 1chld chcs taus sbps chct taut sbpt ptime prog vers
7 2 22 7 la val mu0 one eager prun dom 44.5646 0 6146 1576 254 115 4570 4570 0 8393 6146 129209 1475808 44.3395 0.7791 5.6819 0.0003 Euler 0.9.10

The instance is:

LSRG 7,2 "-co" "1*0,0,18;1*0,0,0" 1628808251117432880,1628808263227713690,0,715 | python symmetry-breaking-pair.py > data/weights/testN7

7 2

* * * * * 1 6
1 5 6 0 2 3 4
4 3 0 5 6 2 1
* * 1 * 4 5 *
* * * * * * *
* * * * * * *
2 * 3 * * * 5

0 1 2 3 4 5 6
* * * * * * *
* * * * * * *
* * * * * * *
* * * * * * *
* * * * * * *
* * * * * * *


a) Value branching

First optimisation:
MOLS> cat ./data/weights/testN7 | ./Euler_BBOpt 4 2 1 1 ./data/weights/ParaN7 val dom
(150.2500,200.0000,100.0000,1.0000,100.5000),1627.0000

Remark: Optimising time seems different from optimising leaf-counts;
this could be due to the pecularities of the look-ahead by Gecode.

MOLS> cat ./data/weights/testN7 | ./Euler_BBOpt 5 2 1 1 ./data/weights/ParaN7_2 val dom
(140.0000,260.0000,86.0000,0.1000,124.0000),1323.0000

MOLS> cat ./data/weights/testN7 | ./Euler_BBOpt 10 2 1 1 ./data/weights/ParaN7_3 val dom
(148.0000,236.0000,86.0000,0.1000,124.0000),1320.0000



Rerunning it, now for longer (memory-leak solved, but no parallelisation yet):
MOLS> cat ./data/weights/testN7 | ./Euler_BBOpt 10 1 4 1 ./data/weights/ParaN7 val dom
(140.3000,197.5125,120.4000,75.6250,100.0000),1803.0000

One sees that manual interaction has its values (given the simplicity of the approach).

Likely the first run should be scanning, with a larger range to begin with,
and say in total a workload 1000 times larger (on the server).

One should also show the total time-out.
So for the initial exploration from scratch one would use

ParaN7_new:
0.001     0.1   2   300     1000
0.001     0.1   2   300     1000
0.001     0.1   2   300     1000
0.001     0.1   2   300     1000
0.001     0.1   2   300     1000

and the call

MOLS> cat ./data/weights/testN7 | time ./Euler_BBOpt 10 2 4 96 ./data/weights/ParaN7_new val dom

on the server.


Current best weights and number of leaves :

   148   236   86   0.1   124

   1320

MOLS> cat ./data/weights/testN7 | ./Euler 0 0 val "" dom 148,236,86,0.1,124
N k m1 m2 brt brsrc brsol bregr brpr prp t sat nds inds inds2 inds3 lvs ulvs sol 1chld chcs taus sbps chct taut sbpt ptime prog vers
7 2 22 7 la val one eager prun dom 20.2170 0 1852 532 100 141 1320 1320 0 3140 1852 51806 1017615 20.1736 0.3558 3.4089 0.0001 Euler 0.11.8


b) Value-branching with min-domain-heuristic

MOLS> cat ./data/weights/testN7 | ./Euler 0 0 mindr,val "" dom 0,0,0,0,0
N k m1 m2 brt brsrc brsol bregr brpr prp t sat nds inds inds2 inds3 lvs ulvs sol 1chld chcs taus sbps chct taut sbpt ptime prog vers
7 2 22 7 mindr val one eager prun dom 18.5942 0 7553 1999 445 0 5554 5554 0 9432 7553 0 993811 18.4338 0.0000 2.9546 0.0000 Euler 0.11.8

MOLS> cat ./data/weights/testN7 | ./Euler 0 0 mind,val "" dom 0,0,0,0,0
N k m1 m2 brt brsrc brsol bregr brpr prp t sat nds inds inds2 inds3 lvs ulvs sol 1chld chcs taus sbps chct taut sbpt ptime prog vers
7 2 22 7 mind val one eager prun dom 24.3341 0 1629973 666058 371324 292058 963915 963915 0 0 666058 0 0 0.4955 0.0000 0.0000 0.0001 Euler 0.11.8





b) Binary-branching:

MOLS> cat ./data/weights/testN7 | ./Euler_BBOpt 2 1 1 1 ./data/weights/ParaN7_eq eq dom
(100.5000,1.0000,100.0000,100.5000,100.0000),2322.0000

MOLS> cat ./data/weights/testN7 | ./Euler_BBOpt 4 1 1 1 ./data/weights/ParaN7_eq eq_2 dom
(120.0000,10.0000,100.0000,100.5000,100.0000),2101.0000

MOLS> cat ./data/weights/testN7 | ./Euler_BBOpt 6 1 1 1 ./data/weights/ParaN7_eq_3 eq dom
(133.3333,1.0000,100.0000,100.5000,100.0000),2045.0000


MOLS> cat ./data/weights/testN7 | ./Euler 0 0 eq "" dom 133,1,100,100.5,100
N k m1 m2 brt brsrc brsol bregr brpr prp t sat nds inds inds2 inds3 lvs ulvs sol 1chld chcs taus sbps chct taut sbpt ptime prog vers
7 2 22 7 la eq one eager prun dom 52.2110 0 4089 2044 2044 0 2045 2045 0 4894 4089 831584 3198572 52.1310 2.5505 10.0887 0.0001 Euler 0.11.8


Optimisation works reasonably smoothly here only for the first parameter, while
the others seem to be very granular (discrete), and jump around.

For comparison:

MOLS> cat ./data/weights/testN7 | ./Euler 0 0 mindr,eq "" dom 0,0,0,0,0
N k m1 m2 brt brsrc brsol bregr brpr prp t sat nds inds inds2 inds3 lvs ulvs sol 1chld chcs taus sbps chct taut sbpt ptime prog vers
7 2 22 7 mindr eq one eager prun dom 27.3225 0 7147 3573 3573 0 3574 3574 0 6650 7147 0 1456622 27.2052 0.0000 4.3127 0.0001 Euler 0.11.8

MOLS> cat ./data/weights/testN7 | ./Euler 0 0 mind,eq "" dom 0,0,0,0,0
N k m1 m2 brt brsrc brsol bregr brpr prp t sat nds inds inds2 inds3 lvs ulvs sol 1chld chcs taus sbps chct taut sbpt ptime prog vers
7 2 22 7 mind eq one eager prun dom 26.6953 0 1927641 963820 963820 0 963821 963821 0 0 963820 0 0 0.6948 0.0000 0.0000 0.0001 Euler 0.11.8
