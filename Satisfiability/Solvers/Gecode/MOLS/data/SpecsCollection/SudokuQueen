# Counts for N >= 2:
# 0, 0, 0, 2, 0, 4, 0, 0, 0,
# 4, >= 2


# gcMols:

# Best seems dom+bin+maxdom+desc; for N=10 asc in fact is somewhat better
# (second runtime under high load):
# MOLS> ./gcMols 10 data/SpecsCollection/SudokuQueen "" count dom bin maxdom asc 1 1
#    N       rt  pl  bt        bv   bo  gcd            satc          t          ppc        flvs        gnds     gd
#   10    count dom bin    maxdom  asc    1               0      2.467      6517122      103032      206063     18
# MOLS> ./gcMols 10 data/SpecsCollection/SudokuQueen "" count dom bin maxdom desc 1 1
#    N       rt  pl  bt        bv   bo  gcd            satc          t          ppc        flvs        gnds     gd
#   10    count dom bin    maxdom desc    1               0      5.560      7172755      118026      236051     17
# But for N=11 desc is quite a bit better:
# MOLS> time ./gcMols 11 data/SpecsCollection/SudokuQueen "" +count dom bin maxdom asc 1 12
#    N       rt  pl  bt        bv   bo  gcd            satc          t          ppc        flvs        gnds     gd
#   11   +count dom bin    maxdom  asc    1               4   1890.888   2447323709    37691626    75383259     40
# real	3m20.157s user	31m30.889s sys	1m38.504s
# MOLS> time ./gcMols 11 data/SpecsCollection/SudokuQueen "" count dom bin maxdom desc 1 12
#    N       rt  pl  bt        bv   bo  gcd            satc          t          ppc        flvs        gnds     gd
#   11    count dom bin    maxdom desc    1               4   1264.173   1686242110    26782437    53564881     40
# real	2m26.775s user	21m4.175s sys	1m10.209s


# For N <= 11 no additional solution compared to SudokuPandiagonal
# exist, but this changes for N=12:
# MOLS> ./gcMols 12 data/SpecsCollection/SudokuQueen "" +enum dom binbr maxdom desc 12
# aborted after 12 h wall-clock-time; two solutions found:

#  0  1  2  3  4  5  6  7  8  9 10 11
#  7  8  5  1  0  9  2 11 10  6  3  4
# 11  9  6 10  7  8  3  4  1  5  2  0
#  4 10 11  2  3  6  5  8  9  0  1  7
#  5  2  8  4 10 11  0  1  7  3  9  6
#  6  3  9  0  1  7  4 10 11  2  8  5
# 10 11  4  8  5  2  9  6  3  7  0  1
#  1  7  0  9  6  3  8  5  2 11  4 10
#  9  6  3  7 11 10  1  0  4  8  5  2
#  3  4 10  6  2  0 11  9  5  1  7  8
#  2  0  1  5  8  4  7  3  6 10 11  9
#  8  5  7 11  9  1 10  2  0  4  6  3

#  0  1  2  3  4  5  6  7  8  9 10 11
# 10  4  6 11  2  8  3  9  0  5  7  1
#  9  5  8  7 10  0 11  1  4  3  6  2
#  7  3 11  1  9  6  5  2 10  0  8  4
#  1  0  5  2  7  3  8  4  9  6 11 10
#  6  9 10  4  8 11  0  3  7  1  2  5
#  4 11  3  6  1  9  2 10  5  8  0  7
#  8  2  7  0  5 10  1  6 11  4  9  3
#  5 10  9  8 11  4  7  0  3  2  1  6
# 11  7  1  5  3  2  9  8  6 10  4  0
#  3  6  4  9  0  1 10 11  2  7  5  8
#  2  8  0 10  6  7  4  5  1  11 3  9

# The left side-diagonal of the main-diagonal contains 11, and so does the
# top-right-corner (similarly, bottom-left is 8/2, which is also contained in
# the right-side-diagonal).
# Nice for N=12 is that it is divisible by the box-size.

# Rerunning without "rred A":
# MOLS> ./gcMols 12 data/SpecsCollection/SudokuQueen "" +enum dom binbr maxdom desc 12
# After 80 min wall-clock aborted; perhaps not better.

# MOLS> ./gcMols 13 data/SpecsCollection/SudokuQueen "" +enum dom binbr maxdom desc 12
# aborted after 50h wall-clock without a solution found (while finding a
# solution for SudokuPandiagonal is rather easy)>
# Running without "rred A":
# MOLS> ./gcMols 13 data/SpecsCollection/SudokuQueen "" sats dom binbr maxdom desc 12
# aborted after 37h wall-clock without a solution found.
# For checking, "dom enumbr mindom" was run for nearly 60h wall-clock without finding a solution (with rred).


# rlaMols:

# MOLS> ./rlaMols 10 data/SpecsCollection/SudokuQueen "" satd dom enu maxdom asc relpr 1 1
#   N       rt  pl  bt        bv   bo    lar  gcd       satc          t        ppc     flvs     gnds    gd     larc      lvs
#  10     satd dom enu    maxdom  asc  relpr    1          0     11.989     103040      814     1743     7      929      814
#      vals      props      elvals      prunes      mprune       probes    rounds      solc         t   qelvals   qprunes
#   473.538     14.898      23.936       6.369     111.298      385.420     1.480     0.000     0.013     0.051     0.013
#   339.000      0.000       0.000       0.000       0.000        5.000     1.000     0.000     0.000     0.000     0.000
#   712.000     86.000     116.000     105.000     702.000     2914.000     7.000     0.000     0.110     0.214     0.109
#    67.824     13.001      18.395      13.089     150.057      484.698     0.959     0.000     0.017     0.038     0.015
# time ./rlaMols 11 data/SpecsCollection/SudokuQueen "" +count dom enu maxdom asc relpr 1 12
# aborted after 5h wallclock-time without finding a solution.
# ./rlaMols 11 data/SpecsCollection/SudokuQueen "" +count dom enu maxdom desc relpr 1 12
# aborted after 4h wallclock-time without finding a solution.
# So the "special magic" of maxdom seems lost here for N=11.


# laMols with dL:

# MOLS> time ./laMols 10 data/SpecsCollection/SudokuQueen "" count "" enu "" "" "" 1 6 ""
#  N       rt  pl lbt  dis   lbo    lar gcd     satc           t        ppc     flvs     gnds    gd     larc      lvs   larbc
# 10    count dom enu   dL   asc  relpr   1        0     627.571    1184419    11934    28814    11    16880    11934    4946
#      vals       props      elvals      prunes      mprune       probes     rounds      solc        tr   qelvals   qprunes
#   485.639      18.437      27.440      15.292     221.199      691.414      1.993     0.000     0.158     0.057     0.020
#   264.000       0.000       0.000       0.000       0.000        3.000      1.000     0.000     0.000     0.000     0.000
#   712.000     110.000     148.000     185.000     702.000     4916.000     10.000     0.000     1.383     0.272     0.318
#    50.828      17.701      24.708      18.953     194.838      616.994      1.261     0.000     0.152     0.050     0.018
#      vals         w      ltau       mind       meand        maxd        sdd        tb
#   513.986     3.413     0.045     20.166      29.396      36.986      6.722     0.117
#   385.000     2.000     0.015      3.000      13.000      13.000      0.000     0.014
#   712.000     9.000     0.066     58.000     115.667     188.000     65.675     0.204
#    43.776     1.085     0.010      6.532      13.420      21.159      8.395     0.030
# real	2m8.036s user	10m27.573s sys	0m2.901s
# The "special magic" of maxdom is not captured.
# time ./laMols 12 data/SpecsCollection/SudokuQueen "" +enum "" enu "" ddesc "" 1 12
# aborted after 3h wallclock-time without a solution found.
# Similar with dasc.


# laMols with wdL:

# Just some "random weights":
# MOLS> time ./laMols 10 data/SpecsCollection/SudokuQueen "" count "" enu wdL "" "" 1 6 "0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2"
#  N       rt  pl lbt  dis   lbo    lar gcd     satc           t        ppc     flvs     gnds    gd     larc      lvs   larbc
# 10    count dom enu  wdL   asc  relpr   1        0      86.585     182624     1827     4232    10     2405     1827     578
#      vals       props      elvals      prunes      mprune       probes    rounds      solc        tr   qelvals   qprunes
#   503.216      19.124      28.814      11.385     197.258      641.987     1.870     0.000     0.106     0.058     0.016
#   347.000       0.000       0.000       0.000       0.000        5.000     1.000     0.000     0.000     0.000     0.000
#   712.000     102.000     144.000     165.000     702.000     4170.000     8.000     0.000     0.961     0.272     0.139
#    53.915      16.721      23.412      16.579     194.783      590.398     1.138     0.000     0.120     0.046     0.016
#      vals         w      ltau       mind      meand       maxd        sdd        tb
#   151.047     4.159     0.182      6.168      9.169     11.787      2.183     0.086
#   108.000     2.000     0.050      1.908      3.800      4.098      0.025     0.030
#   202.000     9.000     0.247     18.308     24.268     36.234     12.095     0.190
#    13.181     1.159     0.046      2.160      4.807      7.239      2.643     0.036
# real	0m25.063s user	1m26.596s sys	0m0.296s
# This looks promising.


# Really interesting cases are N=16, 25.


squares A
rred A
ls A
box A
queendiag A
queenantidiag A
