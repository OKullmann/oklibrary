# Counts for 2 <= N <= 11:
# 1,0,1,0,6,0,6240,0,1225566720,0

# https://oeis.org/A000438
# Remark: https://oeis.org/A003191 seems nonsense

#   hash=15729876580392681007

# The odd N could be nice benchmarks (all unsatisfiable):
#  - with gc-standard the best seems "domain-prop max-dom-var" (N=13 becomes
#    hard)
#  - quite surprising to use "max-dom" ?!
#  - very similar behaviour: min-deg/dom-var.
#  - bounds-prop should here be the same as dom-prop.
#  - default-prop should be value-prop, which performs very badly.


# Example:
# MOLS> ./gcMols 13 data/SpecsCollection/LSredsymmuni "" satd dom "maxdom" "" 1
# domain-prop max-dom-var bin-branch-min 0 5.143 13927948 320301 640601 20
# MOLS> time ./gcMols 13 data/SpecsCollection/LSredsymmuni "" satd dom "maxdom" "" 2
# real	0m2.922s user	0m5.602s sys	0m0.032s
#
# For even N on the other hand the (usual) min-dom is better:
# MOLS> ./gcMols 10 data/SpecsCollection/LSredsymmuni "" count "" "mindom,maxdom" ""
# # N=10
# # k=1 total_num_sq=1
# # num_ps=0
# # rt=count-solutions
# # num_runs=2
# # propagation: domain-prop
# # variable-heuristics: min-dom-var max-dom-var
# # order-heuristics: bin-branch-min
# domain-prop min-dom-var bin-branch-min 1225566720 11189
# domain-prop max-dom-var bin-branch-min 1225566720 14344.3
#
# MOLS> ./gcMols 10 data/SpecsCollection/LSredsymmuni "" count "-" "mindom" ""
# domain-prop min-dom-var bin-branch-min 1225566720 12154.382 85187825548 28909066 2508951571 33
# default-prop min-dom-var bin-branch-min 1225566720 8709.307 77818371098 387411664 3225956767 36
# values-prop min-dom-var bin-branch-min 1225566720 8035.160 64421178809 387411664 3225956767 36
# bounds-prop min-dom-var bin-branch-min 1225566720 13934.341 79104881272 150519633 2752172705 34
#
# So for even n values-prop seems fastest (at least for these N).

squares A
ls A
red A
symm A
uni A
