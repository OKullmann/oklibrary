#!/bin/bash
# Oleg Zaikin, 6.1.2022 (Swansea)
# Copyright 2022 Oliver Kullmann
# This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
# it and/or modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation and included in this library; either version 3 of the
# License, or any later version.

# Generates benchmarks of the Euler square completion problem of order 8.
# One parameter m, the number of given values in the first Latin square,
# is required.
# If m=64, the benchmarks files have the following names:
# bIJCAI22_8_i_j,
# where i, 1 <= i <= 1000, is the benchmark index (and seed for LSRG),
# while j, 0 <= j <= 8 is the number of given cells in the second square.
# If m<64, the benchmarks files have the following names:
# bIJCAI22_8_m_i,
# where i 1 <= i <= 1000 is the benchmark index (and seed for LSRG).
# In this case the symmetry breaking is applied to both Latin squares.

# BUGS:
# 0. DONE (copyright, script_name, version_number, exit are provided)
#    Follow the standard for bash-scripts:
#  - see the older bash-scripts.
# 1. By default the output must go to standard output:
#  - here that could be achieved by using the case that no
#    command-line input is given;
#  - but it's safer to ask for one special input..
# 2. We have two benchmark-sets, for two m's:
#  - That should be a new, first parameter.
#  - The value of this parameter could be just 0 (m=64), and 1 (m=35),
#  - since the generator is there for exactly the benchmarks from the paper.
#  - Though one also might accommodate the benchmarks for the journal-version,
#    and then just using the m-value would make sense.

set -o errexit
set -o nounset

script_name="GenEulerN8"
version_number=0.0.6

if ([ $# -ne 1 ]) then
  echo -e "ERROR[${script_name}]: One parameter is needed,\n" \
    " m : number of given values in the first Latin square."
  exit 1
fi

N=8
m=$1

if ([ $m -gt $((N*N)) ] || [ $m -lt 0 ]) then
  echo -e "ERROR[${script_name}]: m should be >=0 and <= 64\n"
  exit 1
fi

for i in {1..1000};
do
    # If m < N^2, then generate a random first Latin squares and apply the symmetry breaking
    # to it and to the second Latin square:
    if ([ $m -lt $((N*N)) ]) then
        fname=bIJCAI22'_'$N'_m'$m'_'$i
        LSRG 7,2 "-co" "1*0,0,"$m";1*0,0,0" 1628808251117432880,1628808263227713690,0,$i | python symmetry-breaking-pair.py > $fname
    # Otherwise, just generate a random first Latin square and add required givens in the
    # second one:
    else
        for (( j=0; j<$N; j++ ))
        do
            fname=bIJCAI22'_'$N'_'$i'_'$j
            echo "$N 2" > $fname
            echo "" >> $fname
            LSRG $N "-co" "" 1628808251117432880,1628808263227713690,0,$i >> $fname
            echo "" >> $fname
            for ((k=0;k<$j;k++)); do
                echo -n $k >> $fname
                if [ $k -lt $((N-1)) ]
                then
                    echo -n " " >> $fname
                fi
            done
            for ((k=$j;k<$N;k++)); do
                echo -n "*" >> $fname
                if [ $k -lt $((N-1)) ]
                then
                    echo -n " " >> $fname
                fi
            done
            echo "" >> $fname
            for k in {1..7};
            do
                echo "* * * * * * * *" >> $fname
            done
        done
    fi
done

exit 0
