#!/bin/bash
# Oleg Zaikin, 6.1.2022 (Swansea)
# Copyright 2022 Oliver Kullmann
# This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
# it and/or modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation and included in this library; either version 3 of the
# License, or any later version.

# Generates benchmarks of the Euler square completion problem of order 8.
# The benchmarks files have the following names:
# bIJCAI22_8_i_j : 1 <= i <= 1000, 0 <= j <= 8,
# where i is the benchmark index (and seed for LSRG), while j is the
# number of given cells (from the symmetry breaking) in the second square.

# BUGS:
# 0. DONE (copyright, script_name, version_number, exit are provided)
#    Follow the standard for bash-scripts:
#  - see the older bash-scripts.
# 1. By default the output must go to standard output:
#  - here that could be achieved by using the case that no
#    command-line input is given;
#  - but it's safer to ask for one special input..
# 2. We have two benchmark-sets, for two m's:
#  - That should be a new, first parameter.
#  - The value of this parameter could be just 0 (m=64), and 1 (m=35),
#  - since the generator is there for exactly the benchmarks from the paper.
#  - Though one also might accommodate the benchmarks for the journal-version,
#    and then just using the m-value would make sense.

set -o errexit
set -o nounset

script_name="GenEulerN8"
version_number=0.0.4

if ([ $# -ne 1 ]) then
  echo -e "ERROR[${script_name}]: One parameter is needed,\n" \
    " m : number of given values in the first Latin square."
  exit 1
fi

N=8
m=$1

if ([ $m -gt $((N*N)) ] || [ $m -lt 0 ]) then
  echo -e "ERROR[${script_name}]: m should be >=0 and <= 64\n"
  exit 1
fi

for i in {1..1000};
do
    for (( j=0; j<$N; j++ ))
    do
        fname=bIJCAI22'_'$N'_'$i'_'$j
        echo "$N 2" > $fname
        echo "" >> $fname
        LSRG $N "-co" "" 1628808251117432880,1628808263227713690,0,$i >> $fname
        echo "" >> $fname
        for ((k=0;k<$j;k++)); do
            echo -n $k >> $fname
            if [ $k -lt $((N-1)) ]
            then
                echo -n " " >> $fname
            fi
        done
        for ((k=$j;k<$N;k++)); do
            echo -n "*" >> $fname
            if [ $k -lt $((N-1)) ]
            then
                echo -n " " >> $fname
            fi
        done
        echo "" >> $fname
        for k in {1..7};
        do
            echo "* * * * * * * *" >> $fname
        done
    done
done

exit 0
