Oleg Zaikin, 21.4.2021 (Irkutsk)
Copyright 2021, 2022 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version.

This is a partial documentation for the Gecode C++ library (version 6.2.0).
It covers main pecularities, which are crucial for adding lookahead to Gecode.

The partial documentation is based on the following sources:
1. Gecode documentation
https://www.gecode.org/documentation.html
2. Gecode Google Group
https://groups.google.com/d/forum/gecode
3. Gecode users' mailing list
https://www.gecode.org/users-archive/
4. Gecode reference documentation
https://www.gecode.org/doc-latest/reference/


First, two main Gecode classes, Space and Brancher, are described.
Then it is explained how objects of the class Space correspond to nodes during
the search performed by a search engine.

I. Space

Space is one of the main Gecode classes. Among its data members there are
variables, to which constraints can be added. Variables and constraints are
treated in a standard way as it is done in Constraint Programming.

Hereinafter, Space is a Gecode class, while space is an object of Space.

Main Space member functions are status() and clone().

a) status()
Propagates a space until fixpoint (when no more propagations are possible).
There are three possible return values:
1) SS_FAILED if the space is failed (i.e. current assignments conflict with
the constraints);
2) SS_SOLVED if a solution is found;
3) SS_BRANCH otherwise.
In case of SS_BRANCH the space is ready for calling a Brancher on it to form
a branching.

b) clone()
Creates a copy of a given space. The given space must be stable (i.e. status()
must be called for it beforehand). Moreover, clone() is called only if status()
returns SS_BRANCH. First, all constraints are copied, then the copy() function
is called. copy() is a virtual function that must be implemented in a class
inherited from the class Space (e.g. SendMoreMoney). The copy() function must
copy all variables.

II. Brancher

This class implements branchings for spaces.

Main member functions are:

- choice()
Forms a branching in the form of a set of branches.

- commit()
Commits a particular branch formed by choice(), e.g., by assigning values
of some variables.

After the set of branches if formed in choice(), for each branch the clone
of the current space is created. The commit() function performs actions
on the cloned space. The commit() function is followed by status()
to reach a fixpoint for the space.

III. Backtracking tree

During the search, a backtracking tree can be handled, where nodes correspond
to spaces.

When a propagation for a current space is called, there are three possible
states of propagation fixpoint, which directly correspond to return values
of the Space status() function (see above):
1) failure (the space becomes an unsat leaf);
2) solution (a sat leaf, a solution of the problem is found);
3) otherwise (an inner node, further branching is needed).

IV. Search engine

First, an initial space is given to engine to initialise it. The engine calls
propagation via status(), and as a result the root node of the backtracking
tree is created. If status() does not detect a leaf (see Section III), the
current space become an inner node, and the engine calls the Brancher to
perform branching. For each branch a new space (node) is created by cloning,
commit() and status() are called on it and so on.

So for an inner node, the following function calls are performed to
create its child nodes:
status() -> choice() -> clone() -> commit() -> status().
Here the first two calls are performed only once, while the remaning three
ones are performed for every child node.

The default search engine is depth-first search, but branch-and-bound
is alos available.


---------------------------------

Installation of version 6.3.0:

Download from

  https://github.com/Gecode/gecode/tree/release/6.3.0

> md5sum gecode-release-6.3.0.zip
19283ceb9c34978b7f614e5ea55f6bea  gecode-release-6.3.0.zip

gecode-release-6.3.0> ./configure
gecode-release-6.3.0> make
gecode-release-6.3.0> sudo make install

Again, after a fix:

  https://github.com/Gecode/gecode/tree/cpp-conformance-fixes

> md5sum gecode-cpp-conformance-fixes.zip
385258caa902518367eecbb1d12973ff  gecode-cpp-conformance-fixes.zip

gecode-cpp-conformance-fixes> ./configure
gecode-cpp-conformance-fixes> make -j6
gecode-cpp-conformance-fixes> sudo make install

Now problems with loading dynamic libraries at runtime, e.g.:

MOLS> ./Euler
./Euler: error while loading shared libraries: libgecodesearch.so.51: cannot open shared object file: No such file or directory

In /usr/local/lib we have

lrwxrwxrwx 1 kullmann kullmann        23 Jan 18 07:11 libgecodesearch.so.51 -> libgecodesearch.so.51.0
-rwxr-xr-x 1 root     root       3328320 Jan 18 07:12 libgecodesearch.so.51.0

Needed to execute:

MOLS> sudo /sbin/ldconfig -v

Now everything seems to work.
