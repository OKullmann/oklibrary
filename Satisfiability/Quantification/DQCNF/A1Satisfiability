#!/usr/bin/env bash
# Oliver Kullmann, 9.4.2020 (Swansea)
# Copyright 2020 Oliver Kullmann
# This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
# it and/or modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation and included in this library; either version 3 of the
# License, or any later version. */

# USAGE:

# A1Reduction
# reads a (D)QCNF-file from standard input and creates a directory with files:
# - result (one of SAT, UNSAT, UNKNOWN plus solver-stats)

# Output to standard-ouput: SAT | UNSAT | UNKNOWN, and the time of the run

# Main variables for customisation, and their default-values:
# - input = /dev/stdin
# - call_translator = AutarkiesL1
# - satwrapper = SATWrap_minisat
# - directory = ${program}_${filename}_${satwrappername}_${timestamp}

# TODOS:


# #########################

set -o errexit
set -o nounset

program="A1Satisfiability"
version="0.1.0"

: ${input:="/dev/stdin"}
filename="$(basename ${input})"

: ${call_translator:="AutarkiesL1"}

: ${satwrapper:="SATWrap_minisat"}
satwrappername="$(basename ${satwrapper})"

timestamp="$(date +%s%N)"

: ${directory:="${program}_${filename}_${satwrappername}_${timestamp}"}
mkdir ${directory}

file="${directory}/translated.dimacs"
${call_translator} ${input} ${file} -nil vs 0

numclauses=$(tail -1 ${file} | awk '{print $(NF-1)}')
sed -i '$ d' ${file}

tempfile="${directory}/temp"
cat ${file} | awk '{if ($1 == "p") print "p cnf " $3 " " $4 -1+'${numclauses}'; else print $0}' > ${tempfile}
for (( i=1; i<=numclauses; ++i )); do
  echo "$i 0" >> ${tempfile}
done

mv ${tempfile} ${file}

solverdirectory="${directory}/SAT"
inputfile="${file}" outputdirectory="${solverdirectory}" outputfile="/dev/null" ${satwrapper}
if [ -s ${solverdirectory}/err ]; then
  echo "[${program}]: ERROR with solver in directory:" >> /dev/stderr
  realpath ${directory} >> /dev/stderr
  echo "Solver output on stderr:\n" >> /dev/stderr
  cat ${solverdirectory}/err >> /dev/stderr
  exit 1
fi

result="${directory}/result"

status=$(cat ${solverdirectory}/status)
if (( status == 0 )); then
  resultval=" UNKNOWN"
elif (( status == 10 )); then
  resultval="SAT"
elif (( status == 20 )); then
  resultval="UNSAT"
else
  echo "[${program}]: ERROR with solver in directory:" >> /dev/stderr
  realpath ${directory} >> /dev/stderr
  echo "return-code=${status}" >> /dev/stderr
  exit 1
fi

echo ${resultval} > ${result}
cat ${solverdirectory}/stats >> ${result}

rm -r ${solverdirectory}
rm ${file}

echo "${resultval} $(tail -1 ${result} | cut -d " " -f 3)"
