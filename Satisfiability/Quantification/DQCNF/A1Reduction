#!/usr/bin/env bash
# Oliver Kullmann, 2.4.2020 (Swansea)
# Copyright 2020 Oliver Kullmann
# This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
# it and/or modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation and included in this library; either version 3 of the
# License, or any later version. */

# USAGE:

# A1Reduction file SATWrapper

# #########################

set -o errexit
set -o nounset

program="A1Reduction"
version="0.2.6"

if (( $# != 1 )); then
  echo "Exactly one parameter needed: file" >> /dev/stderr
  exit 1
fi

: ${call_translator:="./AutarkiesL1"}
: ${call_applypass:="ApplyPass-O3-DNDEBUG"}
: ${call_ucp:="UnitClausePropagation-O3-DNDEBUG"}
: ${call_readparams:="ExtendedDimacsStatistics-O3-DNDEBUG"}
: ${call_manipparams:="ManipParam-O3-DNDEBUG"}

: ${satwrapper:="./SATWrap_minisat"}
satwrappername="$(basename ${satwrapper})"

origfile="$1"
filename="$(basename ${origfile})"

timestamp="$(date +%s%N)"

: ${directory:="${program}_${filename}_${satwrappername}_${timestamp}"}
echo ${directory}
mkdir ${directory}

file="${directory}/translated.dimacs"
${call_translator} ${origfile} ${file} -nil vs 0

clauseselectors="${directory}/cs_selectors"
tail -1 ${file} > ${clauseselectors}
numclauses=$(cat ${clauseselectors} | awk '{print $(NF-1)}')
sed -i '1s/^/ /' ${clauseselectors}

resultclauses="${directory}/result_clauses"
touch ${resultclauses}
resultnumber="${directory}/result_number"

solverdirectory="${directory}/SAT"
inputfile="${file}" outputdirectory="${solverdirectory}" outputfile="/dev/null" ${satwrapper}

if [ -s ${solverdirectory}/err ]; then
  echo "[${program}]: ERROR with solver" >> /dev/stderr
  exit 1
fi

positiveassignments="${directory}/positives"
clauseassignments="${directory}/clauses"

newtranslation="${directory}/new_translation"
finalnew="${directory}/final_new"

result="${directory}/result"

cleanup() {
  rm ${clauseselectors}
  rm -f ${positiveassignments} ${clauseassignments} ${newtranslation} ${finalnew}
  rm -r ${solverdirectory}
  cat ${resultclauses} | wc -w > ${resultnumber}
  resultnum=$(cat ${resultnumber})
  if (( resultnum == 0 )); then
    echo "LEAN" > ${result}
    cat ${result}
  elif (( resultnum == numclauses )); then
    echo "SAT" > ${result}
    cat ${result}
  else
    echo "MIXED" > ${result}
    cat ${resultnumber}
  fi
}

extract() {
  cat $1 | ${call_readparams} sd ip | tail -1 | tr -s " " | cut -d" " -f 5,6
}

while [ -s ${solverdirectory}/pass ]; do

  cat ${solverdirectory}/pass | awk '{for (i=1; i<=NF-1; ++i) if ($i >= 1) printf "%d ", $i}' > ${positiveassignments}
  cat ${positiveassignments} | awk '{for (i=1; i<=NF; ++i) if ($i <='${numclauses}') printf "%d ", $i}' > ${clauseassignments}
  cat ${clauseassignments} >> ${resultclauses}
  echo >> ${resultclauses}

  sed -i '1s/^/v /' ${positiveassignments}
  echo -n " 0" >> ${positiveassignments}
  cat ${file} | ${call_applypass} ${positiveassignments} ${newtranslation}
  rm ${file}
  cat ${newtranslation} | ${call_ucp} > ${finalnew}

  for i in $(cat ${clauseassignments}); do
    sed -i "s/ ${i} / /" ${clauseselectors}
  done
  cat ${clauseselectors} >> ${finalnew}

  parameters="$(extract ${finalnew})"
  ${call_manipparams} ${finalnew} ${parameters}

  rm -r ${solverdirectory}
  inputfile="${finalnew}" outputdirectory="${solverdirectory}" outputfile="/dev/null" ${satwrapper}
  if [ -s ${solverdirectory}/err ]; then
    echo "[${program}]: ERROR with solver" >> /dev/stderr
    exit 1
  fi
  file="${finalnew}"
done


cleanup
exit 0
