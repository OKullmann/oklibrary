#!/usr/bin/env bash
# Oliver Kullmann, 2.4.2020 (Swansea)
# Copyright 2020 Oliver Kullmann
# This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
# it and/or modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation and included in this library; either version 3 of the
# License, or any later version. */

# USAGE:

# A1Reduction
# reads a (D)QCNF-file from standard input and creates a directory with files:
# - result (one of SAT, LEAN, MIXED, except of solver-abortion, where then
#    it is one of ALEAN, AMIXED, if already some solver-results were obtained,
#    otherwise the file doesn't exist)
# - result_clauses (the clause-indices of the autarkies found, one per line)
# - result_number (the total number of satisfied clauses)
# - result_stats (for each line of result_clauses, plus the final unsat-call,
#   the data from the SAT-solver).

# Output to standard-ouput:
#  - content of result and result_number, plus
#  - the number of lines in result_clauses (i.e., number of autarkies)
#  - and the sum of runtimes for satisfiable/unsatisfiable instances.

# Main variables for customisation, and their default-values:
# - input = /dev/stdin
# - call_translator = AutarkiesL1
# - satwrapper = SATWrap_minisat
# - directory = ${program}_${filename}_${satwrappername}_${timestamp}

# TODOS:

# 1. Report statistics on the formula.

# 2. One also needs statistics on the autarkies found: how many of the boolean
#    functions assigned to existential variables are constant (and how many
#    existential variables were assigned)?

# 3. Compare with A1Satisfiability

# #########################

set -o errexit
set -o nounset

program="A1Reduction"
version="0.4.2"

: ${input:="/dev/stdin"}
filename="$(basename ${input})"
if [[ ${input} != "/dev/stdin" ]]; then
  absinput="$(realpath ${input})"
else
  absinput="${input}"
fi

: ${call_translator:="AutarkiesL1"}
: ${call_applypass:="ApplyPass-O3-DNDEBUG"}
: ${call_ucp:="UnitClausePropagation-O3-DNDEBUG"}

: ${satwrapper:="SATWrap_minisat"}
satwrappername="$(basename ${satwrapper})"

timestamp="$(date +%s%N)"

: ${directory:="${program}_$$_${filename}_${satwrappername}_${timestamp}"}
mkdir ${directory}
cd ${directory}

file="trans.dimacs"
${call_translator} ${absinput} ${file} -nil vs 0

# Concluded with "0" (a Dimacs-clause):
clauseselectors="cs_selectors"
tail -1 ${file} > ${clauseselectors}
numclauses=$(cat ${clauseselectors} | awk '{print $(NF-1)}')

# A text-file, per line the clause-indices as deleted by the
# corresponding autarky:
resultclauses="result_clauses"
touch ${resultclauses}
resultnumber="result_number"
resultstats="result_stats"

solverdirectory="SAT"
inputfile="${file}" outputdirectory="${solverdirectory}" outputfile="/dev/null" ${satwrapper}
if [ -s ${solverdirectory}/err ]; then
  echo "[${program}]: ERROR with solver" >> /dev/stderr
  exit 1
fi
cat ${solverdirectory}/stats >> ${resultstats}

# A Dimacs-assignment:
positiveassignments="positives"
# Just the clause-indices:
clauseassignments="clauses"

newtranslation="new_translation"

result="result"


cleanup() {
  rm ${clauseselectors}
  rm -f ${positiveassignments} ${clauseassignments} ${newtranslation}
  status=$(cat ${solverdirectory}/status)
  rm -r ${solverdirectory}
  cat ${resultclauses} | wc -w > ${resultnumber}
  resultnum=$(cat ${resultnumber})
  if (( status == 0 )); then
    if (( resultnum == 0 )); then
      echo " ALEAN" > ${result}
    elif (( resultnum > 0 )); then
      echo " AMIXED" > ${result}
    else
      echo "ASSERTION ERROR ${program}: UNKNOWN-case!" >> /dev/stderr
      exit 1
    fi
  elif (( status == 10 )); then
    if (( resultnum == numclauses )); then
      echo "ASSERTION ERROR ${program}: SAT-case!" >> /dev/stderr
      exit 1
    fi
  elif (( status == 20 )); then
    if (( resultnum == numclauses )); then
      echo "SAT" > ${result}
    elif (( resultnum == 0 )); then
      echo "LEAN" > ${result}
    else
      echo "MIXED" > ${result}
    fi
  else
    echo "[${program}]: ERROR with solver in directory:" >> /dev/stderr
    realpath ${directory} >> /dev/stderr
    echo "return-code=${status}" >> /dev/stderr
    exit 1
  fi
  resulttimes=$(awk 'BEGIN{s0=0;s1=0} {if ($4==0) {s0+=$3} else if ($4==1) {s1+=$3}} END{print s1,s0}' ${resultstats})
  echo "$(cat ${result}) ${resultnum} $(cat ${resultclauses} | wc -l) ${resulttimes}"
}


trap handler SIGINT

handler() {
  cleanup
  exit 0
}


while [ -s ${solverdirectory}/pass ]; do

  echo -n "v " > ${positiveassignments}
  cat ${solverdirectory}/pass | awk '{for (i=1; i<=NF-1; ++i) if ($i >= 1) printf "%d ", $i}' >> ${positiveassignments}
  cat ${positiveassignments} | awk '{for (i=2; i<=NF; ++i) if ($i <='${numclauses}') printf "%d ", $i}' > ${clauseassignments}
  cat ${clauseassignments} >> ${resultclauses}
  echo >> ${resultclauses}

  echo " 0" >> ${positiveassignments}
  cat ${file} | ${call_applypass} ${positiveassignments} | ${call_ucp} | awk '{if ($1 == "p") print "p cnf " $3 " " 1+$4; else print $0}' > ${newtranslation}
  mv ${newtranslation} ${file}

  declare -A current_clauses
  for i in $(cat ${clauseselectors}); do
    current_clauses[$i]=0
  done
  unset current_clauses[0]
  for i in $(cat ${clauseassignments}); do
    unset current_clauses[$i]
  done
  echo -n "${!current_clauses[*]}" > ${clauseselectors}
  echo " 0" >> ${clauseselectors}
  cat ${clauseselectors} >> ${file}

  rm -r ${solverdirectory}
  inputfile="${file}" outputdirectory="${solverdirectory}" outputfile="/dev/null" ${satwrapper}
  if [ -s ${solverdirectory}/err ]; then
    echo "[${program}]: ERROR with solver in directory:" >> /dev/stderr
    realpath ${directory} >> /dev/stderr
    echo "Solver output on stderr:\n" >> /dev/stderr
    cat ${solverdirectory}/err >> /dev/stderr
    exit 1
  fi
  cat ${solverdirectory}/stats | tail -1 >> ${resultstats}

done


cleanup
exit 0
