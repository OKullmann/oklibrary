#!/bin/bash
# Oliver Kullmann, 15.7.2018 (Swansea)
# Copyright 2018, 2019, 2020 Oliver Kullmann
# This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
# it and/or modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation and included in this library; either version 3 of the
# License, or any later version.

# BUGS:
# 1. app_tests/RunTests throws an error:
#    app_tests/RunTests: line 33: 37463 Segmentation fault      (core dumped) ${satsolver1} ${tempfile} -nil -nil
#    ERROR with solver tawSolver on app_tests/bloem_ex2.dqdimacs: return-code 139.

# TODOS:
# 1. Switch to running the tests via a makefile.
# 2. Add the tests about the 2*2-variable-DQCNF which is QCNF-satisfiable, but
#    not DQCNF-satisfiable.

set -o errexit
set -o nounset

program="RunTests"
version="0.2.6"

testdir="app_tests"

tempfile="${program}_$$"

# translator1="valgrind -q --exit-on-first-error=yes ./autL1_debug"
translator1="valgrind -q ./AutarkiesL1_debug"
translator2="./AutarkiesL1"
declare -a translators=("${translator1}" "${translator2}")

countsolver1=${1:-"ctawSolver"}
satsolver1=${2:-"tawSolver"}
satsolver2=${3:-"OKsolver2002"}

for S in "${translators[@]}"; do

set +e
  echo -e "p cnf 1 0\nd 1 0\nx" | $S "-cin" -nil -nil g 2> /dev/null
  returncode=$?
set -e
  if(( returncode != 6 )); then
    echo "ERROR with translator \"${S}\" on bad first read in clause: wrong return-code ${returncode}."
    exit 1
  fi

set +e
  echo -e "p cnf 1 0\nd 1 0\n2" | $S "-cin" -nil -nil g 2> /dev/null
  returncode=$?
set -e
  if(( returncode != 7 )); then
    echo "ERROR with translator \"${S}\" on variable too big in clause: wrong return-code ${returncode}."
    exit 1
  fi
set +e
  echo -e "p cnf 1 0\nd 1 0\n-2" | $S "-cin" -nil -nil g 2> /dev/null
  returncode=$?
set -e
  if(( returncode != 7 )); then
    echo "ERROR with translator \"${S}\" on variable too big in clause: wrong return-code ${returncode}."
    exit 1
  fi

set +e
  echo -e "p cnf 1 0\na 1 0\n1 -1 x0" | $S "-cin" -nil -nil g 2> /dev/null
  returncode=$?
set -e
  if(( returncode != 6 )); then
    echo "ERROR with translator \"${S}\" on bad read in a-tautological clause: wrong return-code ${returncode}."
    exit 1
  fi
set +e
  echo -e "p cnf 1 0\ne 1 0\n1 -1 x0" | $S "-cin" -nil -nil g 2> /dev/null
  returncode=$?
set -e
  if(( returncode != 6 )); then
    echo "ERROR with translator \"${S}\" on bad read in e-tautological clause: wrong return-code ${returncode}."
    exit 1
  fi
set +e
  echo -e "p cnf 1 0\nd 1 0\n1 -1 x0" | $S "-cin" -nil -nil g 2> /dev/null
  returncode=$?
set -e
  if(( returncode != 6 )); then
    echo "ERROR with translator \"${S}\" on bad read in e-tautological clause: wrong return-code ${returncode}."
    exit 1
  fi

set +e
  echo -e "p cnf 0 1\n0" | $S "-cin" -nil -nil g
  returncode=$?
set -e
  if(( returncode != 0 )); then
    echo "ERROR with translator \"${S}\" on legal empty clause: wrong return-code ${returncode}."
    exit 1
  fi
set +e
  echo -e "p cnf 0 1\n0" | $S "-cin" -nil -nil n 2> /dev/null
  returncode=$?
set -e
  if(( returncode != 9 )); then
    echo "ERROR with translator \"${S}\" on illegal empty clause: wrong return-code ${returncode}."
    exit 1
  fi

set +e
  echo -e "p cnf 1 1\na 1 0\n1 0" | $S "-cin" -nil -nil g
  returncode=$?
set -e
  if(( returncode != 0 )); then
    echo "ERROR with translator \"${S}\" on legal pseudoempty clause: wrong return-code ${returncode}."
    exit 1
  fi
set +e
  echo -e "p cnf 1 1\na 1 0\n1 0" | $S "-cin" -nil -nil s 2> /dev/null
  returncode=$?
set -e
  if(( returncode != 24 )); then
    echo "ERROR with translator \"${S}\" on illegal pseudoempty clause: wrong return-code ${returncode}."
    exit 1
  fi

set +e
  echo -e "p cnf 1 0\n1 -1 0" | $S "-cin" -nil -nil g 2> /dev/null
  returncode=$?
set -e
  if(( returncode != 8 )); then
    echo "ERROR with translator \"${S}\" on too many clauses (tautologicals): wrong return-code ${returncode}."
    exit 1
  fi
set +e
  echo -e "p cnf 1 1\n1 -1 0" | $S "-cin" -nil -nil vs
  returncode=$?
set -e
  if(( returncode != 0 )); then
    echo "ERROR with translator \"${S}\" on legal example (tautological clause): wrong return-code ${returncode}."
    exit 1
  fi
set +e
  echo -e "p cnf 1 6\n1 -1 0 1 -1 0 1 -1 0 1 0 1 0 -1 0 -1 0" | $S "-cin" -nil -nil g 2> /dev/null
  returncode=$?
set -e
  if(( returncode != 8 )); then
    echo "ERROR with translator \"${S}\" on too many clauses: wrong return-code ${returncode}."
    exit 1
  fi
set +e
  echo -e "p cnf 1 7\n1 -1 0 1 -1 0 1 -1 0 1 0 1 0 -1 0 -1 0" | $S "-cin" -nil = s
  returncode=$?
set -e
  if(( returncode != 0 )); then
    echo "ERROR with translator \"${S}\" on legal example (tautological and repeated clauses): wrong return-code ${returncode}."
    exit 1
  fi

set +e
  echo -e "p cnf 1 7\n1 1 -1 -1 0 -1 1 1 -1 0 1 1 -1 0 1 1 0 1 1 0 -1 -1 0 -1 0" | $S "-cin" -nil ${tempfile} s 2
  returncode=$?
set -e
  if(( returncode != 0 )); then
    echo "ERROR with translator \"${S}\" on legal example (tautological and repeated clauses): wrong return-code ${returncode}."
    exit 1
  fi
  result=$(cat ${tempfile} | awk '/c number_tautological_clauses/{print $3}')
  if (( result != 3 )); then
    echo -e "Wrong tautological-clauses count ${result} != 3 with translator \"${S}\"."
    exit 1
  fi
  result=$(cat ${tempfile} | awk '/c number_repeated_clauses/{print $3}')
  if (( result != 2 )); then
    echo -e "Wrong repeated-clauses count ${result} != 2 with translator \"${S}\"."
    exit 1
  fi
  result=$(cat ${tempfile} | awk '/c number_repeated_literals/{print $3}')
  if (( result != 3 )); then
    echo -e "Wrong repeated-literals count ${result} != 3 with translator \"${S}\"."
    exit 1
  fi
  result=$(cat ${tempfile} | awk '/c  C\[1\]:/{print $NF}')
  if (( result != 6 )); then
    echo -e "Wrong original-clause-index ${result} != 6 with translator \"${S}\"."
    exit 1
  fi
  result=$(cat ${tempfile} | awk '/c  C\[2\]:/{print $NF}')
  if (( result != 4 )); then
    echo -e "Wrong original-clause-index ${result} != 4 with translator \"${S}\"."
    exit 1
  fi
  rm ${tempfile}


  file="${testdir}/Maxima_2903.dqdimacs"
set +e
  $S ${file} ${tempfile} ${tempfile} vs 1
  returncode=$?
set -e
  if (( returncode != 0 )); then
    echo "ERROR with translator \"${S}\" on ${file}: wrong return-code ${returncode}."
    exit 1
  fi
  result=$(${countsolver1} ${tempfile} | awk '/number_of_solutions/{print $3}')
  if (( result != 2903 )); then
    echo -e "Wrong count ${result} != 2903 with translator \"${S}\" on ${file}."
    exit 2
  fi
  rm ${tempfile}

  file="${testdir}/Maxima_271.dqdimacs"
set +e
  $S ${file} ${tempfile} ${tempfile} vs 1
  returncode=$?
set -e
  if (( returncode != 0 )); then
    echo "ERROR with translator \"${S}\" on ${file}."
    exit 3
  fi
  result=$(${countsolver1} ${tempfile} | awk '/number_of_solutions/{print $3}')
  if (( result != 270 )); then
    echo -e "Wrong count ${result} with translator \"${S}\" on ${file}."
    exit 4
  fi
  rm ${tempfile}

   file="${testdir}/bloem_ex2.dqdimacs"
set +e
  $S ${file} ${tempfile} ${tempfile} g 1
  returncode=$?
set -e
  if (( returncode != 0 )); then
    echo "ERROR with translator \"${S}\" on ${file}: return-code ${returncode}."
    exit 5
  fi
set +e
  ${satsolver1} ${tempfile} -nil -nil
  returncode=$?
set -e
  if (( returncode != 10 )); then
    echo "ERROR with solver ${satsolver1} on ${file}: return-code ${returncode}."
    exit 6
  fi
  rm ${tempfile}
set +e
  $S ${file} ${tempfile} ${tempfile} n 1 2> /dev/null
  returncode=$?
set -e
  if (( returncode != 28 )); then
    echo "ERROR with translator \"${S}\" on ${file}: return-code ${returncode}."
    exit 7
  fi
  rm ${tempfile}

   file="${testdir}/bloem_sh_u.dqdimacs"
set +e
  $S ${file} ${tempfile} ${tempfile} g 1
  returncode=$?
set -e
  if (( returncode != 0 )); then
    echo "ERROR with translator \"${S}\" on ${file}."
    exit 8
  fi
set +e
  ${satsolver2} ${tempfile} > /dev/null
  returncode=$?
set -e
  if (( returncode != 20 )); then
    echo "ERROR with ${satsolver2} on ${file}."
    exit 9
  fi
  rm ${tempfile}

   file="${testdir}/A1E2C1.dqdimacs"
set +e
  $S ${file} ${tempfile} ${tempfile}
  returncode=$?
set -e
  if (( returncode != 0 )); then
    echo "ERROR with translator \"${S}\" on ${file}."
    exit 11
  fi
set +e
  ${satsolver2} ${tempfile} > /dev/null
  returncode=$?
set -e
  if (( returncode != 10 )); then
    echo "ERROR with ${satsolver2} on ${file}."
    exit 12
  fi
  rm ${tempfile}

done
