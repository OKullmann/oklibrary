#!/bin/bash
# Matthew Gwynne, 27.1.2011 (Swansea)
# Copyright 2011 Oliver Kullmann
# This file is part of the OKlibrary. OKlibrary is free software; you can redistribute 
# it and/or modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation and included in this library; either version 3 of the 
# License, or any later version.

#
# Script for generating random 1-bases for the input clause-set.
#
# The input is a full CNF in a Dimacs file. Random 1-bases for the CNF file are
# computed using RUcpGen and RUcpBase. Statistics for these clause-sets are
# output to STDOUT and to file. The script continues computing 1-bases until
# the user exits the script (ctrl+c/SIGINT).
#
# Arguments:
#   full_cnf_filename: Path to Dimacs file containing a full CNF.
#   gen_seed (1 ... 2^(32)-1): The initial seed into RandomShuffleDimacs.
#   bases_per_gen (1 ... 2^(32)-1): The number of 1-bases to generate from
#     each generating set.
# Output:
#   For each 1-base generated the statistics for that clause-set are printed
#   to STDOUT. A reminder of the two seeds used to generate the minimum sized
#   1-base, so far, is also printed. The seeds are those used for the random
#   shuffling of the inputs to RUcpGen and RUcpBase.
#
# The pseudo-code for generating the r_1 generating sets and 1-bases is:
#
#   for gen_seed_i in ${gen_seed} .. inf; do
#     cat PRIMES | RandomShuffleDimacs ${gen_seed_i} | SortByClauseLength | RUcpGen > G
#     for base_seed_i in 1 .. ${bases_per_gen}; do
#       cat G | RandomShuffleDimacs ${base_seed_i} | SortByClauseLengthDescending | RUcpBase > B
#     done
#   done
# 
# The statistics for each generated 1-base are available in
#    
#    ${full_cnf_filename}_rucp_base_DATE/stats_gs${gen_seed_i}_bs_${base_seed_i}
#
# where DATE is the current datetime in the format "%Y-%m-%d-%H%M%S".
#

set -o errexit
set -o nounset

script_name="RandomRUcpBases"
err="ERROR[${script_name}]:"
version="0.3"

if [[ $# -lt 1 || $# -gt 3 ]]; then
  echo -n "${err} Takes precisely one argument, the name of the file full "
  echo -n "Dimacs clause-set (using 16 variables or less) to generate r_1 "
  echo -n "bases for. Optionally one may also specify the initial seeds for "
  echo -n "RandomShuffleDimacs of the input to RUcpGen, to "
  echo "RandomShuffleDimacs of the input to RUcpBase, and also the number of "
  echo  "times to run RUcpBase for each generating set (default 5)."
  exit 1;
fi

full_cnf_filename=$1
timestamp=$(date +"%Y-%m-%d-%H%M%S")
experiment_dirname=${full_cnf_filename}_rucp_base_${timestamp}
if [ ! -f ${experiment_dirname} ]; then
  mkdir ${experiment_dirname}
fi

primes_filename=${experiment_dirname}/${full_cnf_filename}_primes
rand_primes_filename=${experiment_dirname}/${full_cnf_filename}_primes_rand
gen_filename=${experiment_dirname}/${full_cnf_filename}_gen
if [[ $# -gt 1 ]]; then
  gen_seed=$2
else
  gen_seed=1
fi
if [[ $# -gt 2 ]]; then
  bases_per_gen=$3
else
  bases_per_gen=5
fi

sort_program=SortByClauseLength-O3-DNDEBUG
sort_desc_program=SortByClauseLengthDescending-O3-DNDEBUG
shuffle_program=RandomShuffleDimacs-O3-DNDEBUG
statistics_program=ExtendedDimacsFullStatistics-O3-DNDEBUG
primes_program=QuineMcCluskey-n16-O3-DNDEBUG
gen_program=RUcpGen-O3-DNDEBUG
base_program=RUcpBase-O3-DNDEBUG

# Generate prime implicates
echo "${primes_program} ${full_cnf_filename} > ${primes_filename}"
${primes_program} ${full_cnf_filename} > ${primes_filename}

function extract_num_clauses_from_stats { 
  head -n 2 | tail -n 1 | awk '{print $2}' 
}
min_num_cl_sofar=$(cat ${primes_filename} | ${statistics_program} | extract_num_clauses_from_stats)
min_gen_seed=unknown
min_base_seed=unknown

while true; do
  cat ${primes_filename} | ${shuffle_program} ${gen_seed} | 
    ${sort_program} > ${rand_primes_filename}
  ${gen_program} ${rand_primes_filename} > ${gen_filename}
  for base_seed in $(seq 1 ${bases_per_gen}); do
      echo "*** Currently trying gs=${gen_seed},bs=${base_seed}"
      stats_filename=${experiment_dirname}/stats_gs${gen_seed}_bs_${base_seed}
      current_num_cl=$(cat ${gen_filename} | ${shuffle_program} ${base_seed} | 
        ${sort_desc_program} | ${base_program} | ${statistics_program} | 
        tee ${stats_filename} | extract_num_clauses_from_stats)
      cat ${stats_filename}
      if [[ ${current_num_cl} -lt ${min_num_cl_sofar} ]]; then
          min_num_cl_sofar=${current_num_cl}
          min_gen_seed=${gen_seed}
          min_base_seed=${base_seed}
      fi
      echo "------------------------------------------------------------------------------------"
      echo "CURRENT MINIMUM RBASE: *${min_num_cl_sofar}* with gs=${min_gen_seed},bs=${min_base_seed}"
      echo "------------------------------------------------------------------------------------"
  done 
  gen_seed=$(expr ${gen_seed} + 1)
  rm -f ${gen_filename} ${rand_primes_filename}
done
rm -f ${primes_filename}
