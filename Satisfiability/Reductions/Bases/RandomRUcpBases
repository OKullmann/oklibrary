#!/bin/bash
# Matthew Gwynne, 27.1.2011 (Swansea)
# Copyright 2011 Oliver Kullmann
# This file is part of the OKlibrary. OKlibrary is free software; you can redistribute 
# it and/or modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation and included in this library; either version 3 of the 
# License, or any later version.

#
# Generates random 1-bases for the input clause-set F.
#
# 2^32 - gen_seed random generating sets are computed for F. For each
# generating set, bases_per_gen 1-bases are randomly generated, statistics
# computed and the statistics written to separate files in the experiment
# directory. To exit the script without generating all 1-bases, the user must
# send the SIGINT signal (i.e. ctrl+c).
#
# For definitions of the notions of "generating set" and "1-base", see
# Satisfiability/Reductions/Bases/docus/RUcpBase.hpp and 
# Satisfiability/Reductions/Bases/RUcpGen.cpp.
#
# Inputs:
#   input_file: Path to Dimacs file containing a full CNF. A full CNF
#     clause-set is a clause-set where every clause contains the same
#     variables (i.e. "all" variables).
#   gen_seed (1 ... 2^(32)-1, optional): The seed used to initialise
#     the random generator when computing the first random generating set.
#     This seed is incremented by one for each successive generating set.
#   bases_per_gen (1 ... 2^(32)-1, optional): The number of 1-bases to generate
#     from each generating set (default 5). The generation of the i-th random
#     1-base (for 1 <= i <= bases_per_gen) from the generating set is seeded by
#     by i.
# Output:
#   First, an experiment directory
#
#     ${input_file}_rucp_base_DATE
#
#   is created where DATE is the current datetime in the format 
#   "%Y-%m-%d-%H%M%S".
#
#   For the j-th 1-base generated from the i-th generating set, for
#   1 <= j <= bases_per_gen and 1 <= i <= 2^32 - 1, the statistics for that
#   1-base are output to the file
#
#     stats_gs${gen_seed_i}_bs${j}
#
#   in the experiment directory, where gen_seed_i is gen_seed + i.
#

set -o errexit
set -o nounset

script_name="RandomRUcpBases"
err="ERROR[${script_name}]:"
version="0.3.4"

if [[ $# -lt 1 || $# -gt 3 ]]; then
  echo -n "${err} Takes precisely one argument, the path to the input "
  echo -n "Dimacs clause-set (using 16 variables or less) to generate "
  echo -n "1-bases for. Optionally one may also specify the (first) seed "
  echo -n "used to initialise the random number generation. One may also specify "
  echo -n "the number of 1-bases to generate from each generating set "
  echo -n "(default 5)."
  exit 1;
fi

input_file=$1
timestamp=$(date +"%Y-%m-%d-%H%M%S")
experiment_dirname=${input_file}_rucp_base_${timestamp}
if [ ! -f ${experiment_dirname} ]; then
  mkdir ${experiment_dirname}
fi

primes_filename=${experiment_dirname}/${input_file}_primes
rand_primes_filename=${experiment_dirname}/${input_file}_primes_rand
gen_filename=${experiment_dirname}/${input_file}_gen
trap "rm -f ${gen_filename} ${rand_primes_filename} ${primes_filename}" SIGINT EXIT


if [[ $# -gt 1 ]]; then
  gen_seed=$2
else
  gen_seed=1
fi
if [[ $# -gt 2 ]]; then
  bases_per_gen=$3
else
  bases_per_gen=5
fi

sort_program=SortByClauseLength-O3-DNDEBUG
sort_desc_program=SortByClauseLengthDescending-O3-DNDEBUG
shuffle_program=RandomShuffleDimacs-O3-DNDEBUG
statistics_program=ExtendedDimacsFullStatistics-O3-DNDEBUG
primes_program=QuineMcCluskey-n16-O3-DNDEBUG
gen_program=RUcpGen-O3-DNDEBUG
base_program=RUcpBase-O3-DNDEBUG
let max_gen_seed=2**32-1

# Generate prime implicates
echo "${primes_program} ${input_file} > ${primes_filename}"
${primes_program} ${input_file} > ${primes_filename}

function extract_num_clauses_from_stats { 
  head -n 2 | tail -n 1 | awk '{print $2}' 
}
min_num_cl_sofar=$(cat ${primes_filename} | ${statistics_program} | extract_num_clauses_from_stats)
min_gen_seed=unknown
min_base_seed=unknown

while [ ${gen_seed} -lt ${max_gen_seed} ]; do
  cat ${primes_filename} | ${shuffle_program} ${gen_seed} | 
    ${sort_program} > ${rand_primes_filename}
  ${gen_program} ${rand_primes_filename} > ${gen_filename}
  for base_seed in $(seq 1 ${bases_per_gen}); do
      echo "*** Currently trying gs=${gen_seed},bs=${base_seed}"
      stats_filename=${experiment_dirname}/stats_gs${gen_seed}_bs${base_seed}
      current_num_cl=$(cat ${gen_filename} | ${shuffle_program} ${base_seed} | 
        ${sort_desc_program} | ${base_program} | ${statistics_program} | 
        tee ${stats_filename} | extract_num_clauses_from_stats)
      cat ${stats_filename}
      if [[ ${current_num_cl} -lt ${min_num_cl_sofar} ]]; then
          min_num_cl_sofar=${current_num_cl}
          min_gen_seed=${gen_seed}
          min_base_seed=${base_seed}
      fi
      echo "------------------------------------------------------------------------------------"
      echo "CURRENT MINIMUM RBASE: *${min_num_cl_sofar}* with gs=${min_gen_seed},bs=${min_base_seed}"
      echo "------------------------------------------------------------------------------------"
  done 
  gen_seed=$(expr ${gen_seed} + 1)
done
rm -f ${gen_filename} ${rand_primes_filename} ${primes_filename}
