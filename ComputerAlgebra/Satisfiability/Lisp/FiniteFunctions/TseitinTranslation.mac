/* Oliver Kullmann, 24.12.2010 (Swansea) */
/* Copyright 2010, 2011, 2012, 2013 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/FiniteFunctions/TseitinTranslation.mac
  \brief The Tseitin translation for translating DNF to CNF

TODO: file needs renaming to "CanonicalTranslation.mac".

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/FiniteFunctions/TseitinTranslation.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Statistics.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$


/* ****************************
   * Translating DNF into CNF *
   ****************************
*/

/* The natural CNF-representation of DNF-clause-set F via new
   variables, directly exploiting the Tseitin translation.
*/
kill(dts)$ /* "dual Tseitin" */
declare(dts, noun)$
declare(dts, posfun)$
dts_var(v) := nounify(dts)(v)$
dtsext_var(v,d) := nounify(dts)(v,d)$

/* The variables of dualts_fcl(FF) are:
    - the variables FF[1] from FF
    - plus the dts(i) for i from 1 to c = length(FF[2]) = number of clauses in
      FF.
   The clauses of dualts_fcl(FF) are given by the clauses C of FF with index i
   as the canonical translations of (C <-> dts(i)), plus the disjunction
   of all the dts(i).
   Thus we obtain per C one clause of length |C|+1, |C| clauses of length 2,
   and finally one clause of length |FF|.
   The order is that we first get all those mirror-clauses and then all those
   binary clauses (with the natural order on them, given by the order of
   clauses in FF and the order of the literals in C in FF), and finally
   the long clause.
*/
/* TODO: bad order: this should be an extension of the reduced translation,
   and thus "those mirror-clauses" should come last. The plus-form has then
   also to be updated accordingly.
   The implementation perhaps should just use rcantrans_fcl2fcl(FF).
*/
/* TODO: rename to cantrans_fcl2fcl. */
dualts_fcl(FF) := block([c : length(FF[2]), NV, G1, G2],
  NV : create_list(dts_var(i),i,1,c),
  G1 : map(lambda([C,i], adjoin(dts_var(i),comp_sl(C))),
        FF[2], create_list(i,i,1,c)),
  G2 : lappend(map(lambda([C,i], create_list({-dts_var(i),x},x,listify(C))),
        FF[2], create_list(i,i,1,c))),
  [append(FF[1],NV), append(G1,G2,[setify(NV)])])$
dualts_cs(F) := fcl2cs(dualts_fcl(cs2fcl(F)))$

/* Characteristic properties:
   Given a total assignment to the variables in FF, by unit-clause
   propagation all additional variables in dualts_fcl(FF) are determined
   where dts(i) is true iff FF[2][i] is true.
   dualts_fcl(FF) as CNF is equivalent to FF as DNF on the common variables
   (that is, on FF[1]) via the unique extension.
   Thus if m=0 then dualts_fcl(FF) is unsatisfiable, while otherwise
   dualts_fcl(FF) is satisfiable.
   If FF is irredundant, then we have the following property.
   Given any partial assignment phi such that phi cannot be extended to a
   satisfying assignment of FF, phi * F yields the empty clause via
   unit-clause propagation (since dualts_fcl(FF) is "r_1-based"; see
   "Understanding dualts_fcl" in FiniteFunctions/plans/TseitinTranslation.hpp).
   (However, even if all extension of phi make FF true, this cannot be
   seen "directly" with dualts_fcl(FF) (consider for example a tautology FF)).
*/

/* Now the new variables (or literals) are specified in list NV (of length at
   least length(FF[2]), with pairwise different (underlying) variables, not
   used in FF):
*/
cantrans_wv_fcl2fcl(FF, NV) := block(
 [nv:l2ary(NV), c:length(FF[2]), G1, G2],
  G1 : lappend(map(lambda([C,i], create_list({-nv[i],x},x,listify(C))),
        FF[2], create_list(i,i,1,c))),
  G2 : map(lambda([C,i], adjoin(nv[i],comp_sl(C))),
        FF[2], create_list(i,i,1,c)),
  [append(FF[1],map(var_l,NV)), append(G1,[setify(NV)],G2)])$

/* The reduced canonical translation, using only the direction (C <- dts(i))
   from dualts_fcl(FF):
*/
rcantrans_fcl2fcl(FF) := block([c : length(FF[2]), NV, G1],
  NV : create_list(dts_var(i),i,1,c),
  G1 : lappend(map(lambda([C,i], create_list({-dts_var(i),x},x,listify(C))),
        FF[2], create_list(i,i,1,c))),
  [append(FF[1],NV), append(G1,[setify(NV)])])$
rcantrans_cs2cs(F) := fcl2cs(rcantrans_fcl2fcl(cs2fcl(F)))$

rcantrans_wv_fcl2fcl(FF, NV) := block(
 [nv:l2ary(NV), c:length(FF[2]), G1],
  G1 : lappend(map(lambda([C,i], create_list({-nv[i],x},x,listify(C))),
        FF[2], create_list(i,i,1,c))),
  [append(FF[1],map(var_l,NV)), endcons(setify(NV),G1)])$


/* dualtsplus_fcl(FF) has the same variables as dualts_fcl(FF).
   The clauses of dualts_fcl(FF) are those of dualts_fcl(FF), plus
   (x <-> D) for every literal x occurring in FF[2], where D is the
   conjunction of -dts(i) for those i with -x in C_i.
   Thus we obtain additionally one clause of length literal_degree_cs(FF[2],-x)
   for every literal x in FF[2]. Currently these new clauses are placed just
   before the final long clause of dualts_fcl(FF).
*/
/* TODO: bad order: it should extend dualts_fcl(FF); and also the measures are
   needed.
*/
dualtsplus_fcl(FF) := block([c : length(FF[2]), NV, G1, G2, G3],
  NV : create_list(dts_var(i),i,1,c),
  G1 : map(lambda([C,i], adjoin(dts_var(i),comp_sl(C))),
        FF[2], create_list(i,i,1,c)),
  G2 : lappend(map(lambda([C,i], create_list({-dts_var(i),x},x,listify(C))),
        FF[2], create_list(i,i,1,c))),
  G3 : map(
         lambda([l], setify(
             cons(l, map(dts_var,
                 sublist_indices(FF[2], lambda([C], elementp(-l,C))))))),
         listify(literals_v(
             sublist(FF[1], lambda([v], elementp(v,var_cs(FF[2]))))))),
  [append(FF[1],NV), append(G1,G2,G3,[setify(NV)])])$
/* Characteristic properties:
   dualtsplus_fcl has the characteristics properties of dualts_fcl.
   It also has the following property if FF is full.

   Consider all partial assignments phi on dualtsplus_fcl(FF). If
   phi * dualtsplus_fcl(FF) has a forced assignment <v -> b> then
   phi * dualtsplus_fcl(FF)[2] contains {l}. l is v if b = 1 and
   -v otherwise. {l} is the unit-clause enforcing <v -> b>. b is
   a value in {0,1}.
*/


/* The variation which uses value d (for "distinguish") as second parameter
   of dts_var (producing the same formal clause-list otherwise; this is
   needed to have distinct auxiliary variables for different applications
   of dualts_fcl):
*/
dualtsext_fcl(FF,d) := block([c : length(FF[2]), NV, G1, G2],
  NV : create_list(dtsext_var(i,d),i,1,c),
  G1 : map(lambda([C,i], adjoin(dtsext_var(i,d),comp_sl(C))),
        FF[2], create_list(i,i,1,c)),
  G2 : lappend(map(lambda([C,i], create_list({-dtsext_var(i,d),x},x,listify(C))),
        FF[2], create_list(i,i,1,c))),
  [append(FF[1],NV), append(G1,G2,[setify(NV)])])$


/* Measures */

nvar_dualts(FF) := length(FF[1])+length(FF[2])$
/* Numerically, given the number of variables and clauses: */
nvar_dualts_num(n,c) := n+c$
/* For a full clause-set with n variables and c clauses: */
nvar_full_dualts(n,c) := n+c$

ncl_dualts(FF) := nlitocc_fcl(FF) + ncl_fcl(FF) + 1$
/* Numerically, given the number of clauses and literal-occurrences: */
ncl_dualts_num(c,l) := l + c + 1$
/* For a full clause-set with n variables and c clauses: */
ncl_full_dualts(n,c) := (n * c) + c + 1$

ncl_list_dualts(FF) := sort(block(
  [ncl_list_FF : ncl_list_fcl(FF), ncl_h,
   n : nvar_fcl(FF), c : ncl_fcl(FF), nlitocc : nlitocc_fcl(FF),
   ncl_unit, ncl_cm1, other_cl],
  ncl_h : osm2hm(ncl_list_FF),
  ncl_unit : ev_hm_d(ncl_h,1,0), ncl_cm1 : ev_hm_d(ncl_h,c-1,0),
  other_cl : sublist(ncl_list_FF, lambda([P], is(P[1] # 1) and is(P[1] # c-1))),
  other_cl : map(lambda([a], [a[1]+1,a[2]]), other_cl),
  if c = 0 then [[0,1]]
  else if n = 0 then [[1,2]]
  else if c = 2 then append([[2,nlitocc+ncl_unit+1]],other_cl)
  else append([[2,nlitocc+ncl_unit],[c,1+ncl_cm1]],other_cl)))$
/* We count the following clauses:
     - a binary clause for every literal occurrence L in FF, representing that
       dts(i) => L.
     - a (length(C)+1)-ary clause for every clause C in FF, representing that
       C => dts(i).
     - a clause specifying that at least one of the clauses in the input must
       be satisfied for the result to be satisfied, and therefore, one of the
       dts(i) variables must be set to true. This yields a single clause of
       length ncl_fcl(FF).

   Note that unit-clauses in the input will result in more binary clauses
   being counted than there are literal occurrences (as length(C)+1 where
   C is a unit-clause yields a binary clause in the output of dualts_fcl).
*/
/* For a full clause-set with n variables and c clauses: */
ncl_list_full_dualts(n,c) := sort(
  if c = 0 then [[0,1]]
  else if n = 0 then [[1,2]]
  else if n = 1 and c = 2 then [[2,2*c+1]]
  else if n = 1 and c # 2 then [[2,2*c],[c,1]]
  else if n+1 = c then [[2,n*c],[n+1,c+1]]
  else if c = 2 then [[2,n*c+1],[n+1,c]]
  else [[2,n*c],[c,1],[n+1,c]])$




/*!
\endhtmlonly
*/
