/* Matthew Gwynne, 17.1.2011 (Swansea) */
/* Copyright 2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/FiniteFunctions/tests/Basics.mac
  \brief Tests regarding basics for boolean function

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/FiniteFunctions/tests/Basics.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$


kill(f)$

/* *******************
   * Boolean vectors *
   *******************
*/

okltest_lex_bv_l(f) := (
  assert(f(0) = [[]]),
  assert(f(1) = [[0],[1]]),
  assert(f(2) = [[0,0],[0,1],[1,0],[1,1]]),
  true)$

okltest_unrank_lex_bv(f) := (
  for k : 0 thru 5 do
    assert(lex_bv_l(k) = create_list(f(i,k),i,1,2^k)),
  true)$

okltest_rank_lex_bv(f) := (
  for k : 0 thru 5 do
    assert(map(f,lex_bv_l(k)) = create_list(i,i,1,2^k)),
  true)$

okltest_bv2c(f) := (
  assert(f([]) = {}),
  assert(f([0]) = {-1}),
  assert(f([1]) = {1}),
  assert(f([1,0,1,0,0]) = {-5,-4,-2,1,3}),
  assert(f([0,0,0,0,0]) = {-5,-4,-3,-2,-1}),
  true)$

okltest_bv2c_wv(f) := block([a,b,c],
  assert(f([],[]) = {}),
  assert(f([0,1,0],[a,b,c]) = {-a,b,-c}),
  assert(okltest_bv2c(buildq([f], lambda([v],f(v,create_list(i,i,1,length(v)))))) = true),
  true)$


/* *****************
   * Constructions *
   *****************
*/

okltest_bf2bfl(f) := block([bfl],
  bfl : f(zero_bf,1),
  assert(length(bfl) = 1),
  assert(bfl[1]([0]) = [0]),
  assert(bfl[1]([1]) = [0]),
  assert(bfl[1]([1,0,1,0,1]) = [0]),
  bfl : f(one_bf,1),
  assert(length(bfl) = 1),
  assert(bfl[1]([0]) = [1]),
  assert(bfl[1]([1]) = [1]),
  assert(bfl[1]([1,0,1,0,1]) = [1]),
  bfl : f(neg_bf,4),
  assert(length(bfl) = 4),
  assert(bfl[1]([1,0,1,0]) = [0]),
  assert(bfl[2]([1,0,1,0]) = [1]),
  assert(bfl[3]([1,0,1,0]) = [0]),
  assert(bfl[4]([1,0,1,0]) = [1]),
  true)$


/*!
\endhtmlonly
*/
