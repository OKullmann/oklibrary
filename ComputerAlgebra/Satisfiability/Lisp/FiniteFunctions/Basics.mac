/* Matthew Gwynne, 17.1.2011 (Swansea) */
/* Copyright 2011, 2018, 2019 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/FiniteFunctions/Basics.mac
  \brief Basic tools for handling boolean and finite functions

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/FiniteFunctions/Basics.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/NumberTheory/Lisp/Auxiliary.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Constructions.mac")$


/* *******************
   * Boolean vectors *
   *******************
*/

/*
  A "boolean value" is either 0 or 1.
*/

boolval_p(v) := v=0 or v=1$

/* Translating Maxima-truth-values into boolean values: */
tv2boolval(t) := if t then 1 else 0$

/*
  A "boolean vector" ("bv") of length k (k in NN_0) is a list v of length k
  with entries 0, 1.
*/

bv_p(v) := listp(v) and every_s(boolval_p,v)$

/* The set of all boolean vectors of length k: */
all_bv(k) := apply(cartesian_product, create_list({0,1},i,1,k))$

/* The 2^k boolean vectors of length k in lexicographical order: */
lex_bv_l(k) := cartesian_product_l(create_list([0,1],i,1,k))$
/* Unranking for 1 <= i <= 2^k: */
unrank_lex_bv(i,k) := if k=0 then [] else int2polyadic_padd(i-1,2,k)$
/* Ranking of boolean vectors: */
rank_lex_bv(x) := polyadic2int(x,2) + 1$


/* Translating boolean vectors into (standardised) DNF-clauses (using the
   positions as variables):
*/
bv2c(v) := bv2c_wv(v,create_list(i,i,1,length(v)))$
/* More generally, supplying a vector V of boolean variables (of the same
   length as v):
*/
bv2c_wv(v,V) := setify((2*v - 1) * V)$

/* Translating boolean vectors into hyperedges consisting of the indices
   of the position where the vector is true:
*/
bv2he(v) := setify(sublist_indices(v,lambda([x],x=1)))$


/* *********************
   * Boolean functions *
   *********************
*/

/*

  The basic idea is that a "boolean function" is just some function f,
  which can be applied to boolean vectors b, and such that f(b) is
  a boolean vector.

  A "boolean function" ("bf") is a function f with the following properties:

   - implicitly a size-domain S <= NN_0 is given
   - for every n in S there is an m_n in NN_0 such that for all boolean vectors
     x of length n the term f(x) is a boolean vector of length m_n.

  f is an "n x m bf" if n in S and m_n = m.
*/

/* Testing whether f is a n x m boolean function: */
bf_nm_p(f,n,m) :=
 every_s(lambda([x],
           block([y:f(x)], listp(y) and is(length(y)=m) and bv_p(y))),
         all_bv(n))$


/* ********************************
   * Some basic boolean functions *
   ********************************
*/

/* Functions with size-domain NN_0 and m=1: */

zero_bf : lambda([x], [0])$
one_bf : lambda([x], [1])$

and_bf : lambda([x], [lmin(x)])$
or_bf : lambda([x], [lmax(x)])$

xor_bf : lambda([x], [mod(apply("+", x),2)])$

/* Functions with size-domain NN_0 and m=n: */

id_bf : identity$
neg_bf : lambda([x], 1-x)$

/* Integer representations: */

and_ibo(x,y):=?boole(?boole\-and,x,y)$
or_ibo(x,y):=?boole(?boole\-ior,x,y)$
xor_ibo(x,y):=?boole(?boole\-xor,x,y)$
/* These functions are also in the Maxima-package "functs" (however with
   defective definitions), with names "logand, logor, logxor".
   "ibo" for "integer boolean operation".
*/


/* ***************
   * Conversions *
   ***************
*/

/* The "bit-vector presentation" of an n x 1 boolean function f is the boolean
   vector of length 2^n containing all values of f, applied to the
   lexicographical ordering of inputs:
*/
bf2bv(f_, n) := map(lambda([x], first(f_(x))), lex_bv_l(n))$
bv2bf(fv) := buildq([a : il2ary(fv)], lambda([x], [a[rank_lex_bv(x)]]))$

/* Boolean functions as full DNF resp. DNF (the clause-order follows the
   lexicographical order of the boolean vectors):
*/
bf2fulldnf_fcl(f,n) := [create_list(i,i,1,n), map(bv2c, sublist(lex_bv_l(n), lambda([x],is(f(x)=[1]))))]$
bf2fullcnf_fcl(f,n) := [create_list(i,i,1,n), map(bv2c, 1 - sublist(lex_bv_l(n), lambda([x],is(f(x)=[0]))))]$
/* Converting a boolean function as full DNF into into a boolean function: */
fulldnf2bf_cs(F) := buildq([F], lambda([x], tv2boolval(elementp(bv2c(x),F))))$


/* The "DNF hypergraph representation" of an n x 1 boolean function f
   is obtained from its full DNF by taking the variable as vertices and
   converting the clauses into hyperedges by removing the negative literals.
*/
/* Converting a boolean function given as a full DNF into its DNF hypergraph
   representation:
*/
fulldnf2dnfhg_ofcs2ohg(FF) :=
 [ FF[1], map(lambda([C],subset(C,lambda([x],is(x>0)))), FF[2]) ]$
/* Translating a boolean function as set-system into a boolean function: */
dnfhg2bf_ses(S) := buildq([S], lambda([x], tv2boolval(elementp(bv2he(x), S))))$


/* *****************
   * Constructions *
   *****************
*/

/* The component-wise negation of a boolean function: */
negation_bf(f) := buildq([f], lambda([x],1-f(x)))$

/* The composition of boolean functions (first f, then g): */
composition_bf(g,f) := buildq([f,g], lambda([x], g(f(x))))$
square_bf(f) := composition_bf(f,f)$

/* A boolean n x m function f as a boolean (n+m) x 1 function: */
bf2relation_bf(f,n) := buildq([f,n], lambda([x], tv2boolval(is(f(take_l(n,x))=rest(x,n)))))$
bf2relation_fulldnf_cl(f,n) :=
 map(bv2c, map(lambda([x],append(x,f(x))), lex_bv_l(n)))$
bf2relation_fullcnf_fcs(f,n) := block(
 [F : map(comp_sl,bf2relation_fulldnf_cl(f,n))],
  if emptyp(F) then [{},{{}}]
  else block([N : length(first(F))],
    [setn(N), setdifference(full_cs(N), setify(F))]))$

/* The boolean n x 1 function giving the i-th output bit of the boolean n x m
   function f: */
bfnm2n1(f,i) := buildq([f,n,i], lambda([x], [f(x)[i]]))$


/* *****************************
   * Wrapped boolean functions *
   *****************************
*/

/* A "wrapped boolean function" ("wbf") is a pair [V,f], such that V is a
   set of variables, and f maps every total assignment over V (i.e., all
   full clauses over V) to 0 or 1.
*/

/* Testing whether f is a wrapped boolean function: */
wbf_p(f) := listp(f) and length(f)=2 and setp(first(f)) and block(
 [V : first(f)],
  every_s(v_p, V) and every_s(boolval_p, map(second(f),all_tass(V))))$

/* Whether two wbf's are equal (for the given domains): */
equalp_wbf(f,g) := first(f)=first(g) and block([V:first(f)],
  every_s(lambda([phi], is(second(f)(phi)=second(g)(phi))), all_tass(V)))$

essentialvar_wbf(v,f) := elementp(v,first(f)) and block(
 [V:first(f), f2:second(f), V2],
  V2 : disjoin(v,V),
  some_s(lambda([phi], is(f2(adjoin(v,phi)) # f2(adjoin(-v,phi)))),
         all_tass(V2)))$

essentialcore_wbf(f) := block([V : first(f), V2, VD, f2 : second(f)],
  V2 : subset(V, lambda([v], essentialvar_wbf(v,f))),
  VD : setdifference(V,V2),
  [V2, buildq([VD,f2], lambda([phi], f2(union(phi, VD))))])$

freewbf_p(f) := every_s(lambda([v], essentialvar_wbf(v,f)), first(f))$

/* Whether two wbf's are equal as elements of the free boolean algebra: */
equalp_fwbf(f,g) := equalp_wbf(essentialcore_wbf(f), essentialcore_wbf(g))$


/* ****************
   * Special wbfs *
   ****************
*/

zero_wbf : [{}, lambda([phi], 0)]$
one_wbf : [{}, lambda([phi], 1)]$


/* ***************
   * Conversions *
   ***************
*/

/* A literal as wbf: */
lit2wbf(x) := [{var_l(x)}, buildq([x],
  lambda([phi], if phi={x} then 1 else 0))]$

/* A cnf-clause as wbf: */
cnfcl2wbf(C) := [var_c(C), buildq([C], lambda([phi],
                 if emptyp(intersection(phi,C)) then 0 else 1))]$

/* A cnf-clause-set as wbf: */
cnffcs2wbf(FF) := [first(FF), buildq([F:second(FF)], lambda([phi],
  if every_s(lambda([C], not emptyp(intersection(phi,C))), F) then 1 else 0))]$

/* A dnf-clause-set as wbf: */
dnffcs2wbf(FF) := [first(FF), buildq([F:second(FF)], lambda([phi],
  if some_s(lambda([C], subsetp(C,phi)), F) then 1 else 0))]$
/* A full dnf-clause-set as wbf: */
fulldnffcs2wbf(FF) := [first(FF), buildq([F:second(FF)], lambda([phi],
  if elementp(phi, F) then 1 else 0))]$


wbf2fullcnfdnffcs(f) := block([V : first(f), T0:[], T1:[], f2:second(f)],
  for phi in all_tass(V) do
    if f2(phi) = 0 then T0:cons(phi,T0) else T1:cons(phi,T1),
  [[V,comp_cs(setify(T0))], [V,setify(T1)]])$

wbf2mincnfdnfcs(f) := map(all_minequiv_bvsr_fcs, wbf2fullcnfdnffcs(f))$

/* Note that the CNFs FF1, FF2 are logically equivalent iff
   equalp_wbf(essentialcore_wbf(cnffcs2wbf(FF1)), essentialcore_wbf(cnffcs2wbf(FF2))),
   and the CNF FF1 is logically equivalent to the DNF FF2 iff
   equalp_wbf(essentialcore_wbf(cnffcs2wbf(FF1)), essentialcore_wbf(dnffcs2wbf(FF2))).
*/

all_wbf(V) := map(cnffcs2wbf, map(lambda([F], [V,F]), powerset(all_tass(V))))$
/* Recall that |all_wbf(V)| = 2^(2^|V|), and thus incrementing the size of V
   by 1 means (precisely) squaring the setsize.
   So |V|=4 yields 65536, which is still (kind of) feasible, while |V|=5
   yields 2^32, which needed a very big machine -- |V|=6 yields 2^64, which
   definitely is beyond.
*/

/* All A1 wbfs (using at most one essential variable): */
all_1wbf(V) := union(map(lit2wbf,literals_v(V)), {zero_wbf, one_wbf})$


/* ***********************
   * Operations for wbfs *
   ***********************
*/

/* The disjunction of two wbfs: */
or_wbf(f1,f2) := block(
 [V1:first(f1),V2:first(f2), f:second(f1), g:second(f2), L1,L2],
  L1 : literals_v(V1), L2 : literals_v(V2),
  [union(V1,V2), buildq([L1,L2,f,g], lambda([phi],
    block([phi1:intersection(phi,L1), phi2:intersection(phi,L2)],
           min(1, f(phi1) + g(phi2)))))])$
/* The disjunction of set of wbfs: */
or_swbf(S) := block([L:listify(S)],
 [lunion(map(first,L)), buildq([L], lambda([phi],
    if some_s(lambda([wbf],
              is(second(wbf)(intersection(phi,literals_v(first(wbf))))=1)), L)
    then 1 else 0))])$

and_wbf(f1,f2) := block(
 [V1:first(f1),V2:first(f2), f:second(f1), g:second(f2), L1,L2],
  L1 : literals_v(V1), L2 : literals_v(V2),
  [union(V1,V2), buildq([L1,L2,f,g], lambda([phi],
    block([phi1:intersection(phi,L1), phi2:intersection(phi,L2)],
           f(phi1) * g(phi2))))])$

neg_wbf(f) := block([f2 : second(f)],
 [first(f), buildq([f2], lambda([phi], 1-f2(phi)))])$


/*!
\endhtmlonly
*/
