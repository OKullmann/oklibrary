/* Oliver Kullmann, 5.7.2008 (Swansea) */
/* Copyright 2008, 2009, 2010, 2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Generators/RandomClauseSets.mac
  \brief Functions for basic operations with clause-sets

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/RandomClauseSets.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/AdvancedEncryptionStandard.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac")$


/* *********************************
   * The fixed clause-length model *
   *********************************
*/


/* Computing a random repetition-free sublist of a given length k;
   V is a list, repetitions determine the chance of being elected, but the
   result is repetition-free. */
/* Prerequisites: 0 <= k <= length(unique(V)). */
random_k_sublist_l(V,k) := block([res : []],
  thru k do block([x : random_element(V)],
    res : cons(x,res),
    V : delete(x,V)),
  return(reverse(res)))$

/* Using the Maxima pseudo-random generator, compute random clause-lists
   with n variables, clause-length k and c clauses: */
/* Prerequisites: n,k,c >= 0, k <= n. */
random_fcl(n,k,c) := block([V : create_list(i,i,1,n), F : []],
  thru c do block([C : random_k_sublist_l(V,k)],
    for i : 1 thru k do
      if random(2) = 1 then C[i] : -C[i],
    F : cons(setify(C),F)),
  return([V,reverse(F)]))$
random_fcs(n,k,c) := fcl2fcs(random_fcl(n,k,c))$

output_random_fcl(n,k,c,filename) := output_fcl_v(
 "Pseudo-random clause-list created by Maxima::output_random_fcl.",
 random_fcl(n,k,c),filename,[])$
output_random_fcl_stdname(n,k,c) := output_random_fcl(n,k,c,sconcat("Random_",n,"_",k,"_",c,".cnf"))$


/* **********************************
   * The random clause-length model *
   **********************************
*/

/* Creating random clause-sets in the "random clause-length" model,
   where a parameter p governs the probability of inclusion of
   a variable (so with probability 1-p the variable is not included).
*/
/* For p=1 every clause is full, for p=0 every clause is empty,
   and for p=2/3 every clause has the same probability. */
/* The average clause-length is p * n (thus if the average shall be k,
   then set p = k/n). */
/* Prerequisites: n,c >= 0, 0 <= p <= 1. */
random_rcl_fcl(n,p,c) := 
 block([V : create_list(i,i,1,n), F : []],
  thru c do block([C : create_list(i,i,1,n)],
    for i : 1 thru n do
      if random(1.0) >= p then C[i] : 0
      else
        if random(2) = 1 then C[i] : -C[i],
    F : cons(setdifference(setify(C),{0}),F)),
  return([V,reverse(F)]))$
random_rcl_fcs(n,p,c) := fcl2fcs(random_rcl_fcl(n,p,c))$


/* **********************************
   * The OKgenerator (based on AES) *
   **********************************
*/

/* The underlying literal generator for boolean literals: */
OKlitgenerator_l(s,k,n,p,c) := block(
 [x : mod(aes_int(n * 2^96 + p * 2^64 + c, s * 2^64 + k,10), 2*n)],
  if x < n then x+1 else n-1-x)$
/* The possible inputs are those where OKlitgenerator_l_p(s,k,n,p,c)
   is true:
*/
OKlitgenerator_l_p(s,k,n,p,c) :=
 integerp(s) and is(0 <= s and s < 2^64) and
 integerp(k) and is(0 <= k and k < 2^64) and
 integerp(n) and is(1 <= n and n < 2^31) and
 integerp(p) and is(0 <= p and p < 2^31) and
 integerp(c) and is(0 <= c and c < 2^64)$

/* Creating (pseudo-)random boolean formal clause-lists with
 - seed s
 - formula number k
 - number of variables n
 - clause-length list P (strictly ascending)
 - clause-number list C (according to P).
For the precise input-prerequisites see OKgenerator_fcl_p.
*/
OKgenerator_fcl(s,k,n,P,C) := block([m : length(P)],
 if m > 1 then
   return([create_list(i,i,1,n), 
           lappend(map(lambda([p,c], 
                       OKgenerator_fcl(s,k,n,[p],[c])[2]), P, C))]),
 block([F : [], N : setn(n), p : P[1], c : C[1]],
   for i : 1 thru c do block([C : [], V : N],
     for j : 1 thru p do block(
      [x : OKlitgenerator_l(s, k, n-j+1, p, (i-1)*p+j-1)],
       C : cons(signum(x) * listify(V)[abs(x)], C),
       V : disjoin(abs(x), V)
     ),
   F : cons(setify(C),F)
  ),
 return([create_list(i,i,1,n), reverse(F)])))$

/* Testing the inputs: */
OKgenerator_fcl_p(s,k,n,P,C) := 
 integerp(s) and is(0 <= s and s < 2^64) and
 integerp(k) and is(0 <= k and k < 2^64) and
 integerp(n) and is(1 <= n and n < 2^31) and
 listp(P) and listp(C) and block([m : length(P)],
  is(m = length(C)) and is(1 <= m and m < 2^31) and
  strictascending_p(P) and 
  every_s(lambda([p],is(1 <= p and p < 2^31)),P) and
  every_s(lambda([c],is(1 <= c and c < 2^32)),C))$


/* The underlying literal generator: */
OKlitgenerator_nbl(s,k,n,d,p,c) := 0$

OKgenerator_nbfcl(s,k,n,d,P,C) := []$

/* Testing the inputs: */
OKgenerator_nbfcl_p(s,k,n,d,P,C) := false$



/*!
\endhtmlonly
*/
