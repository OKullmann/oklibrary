/* Oliver Kullmann, 17.4.2009 (Swansea) */
/* Copyright 2009, 2012, 2016 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Generators/RamseyTheory/SchurProblems.mac
  \brief %Generators for clause-sets related to Schur problems

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/RamseyTheory/SchurProblems.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Generators/Schur.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Colouring.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/NonBooleanTranslations.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/NonBoolean.mac")$
oklib_include("OKlib/ComputerAlgebra/NumberTheory/Lisp/Auxiliary.mac")$
oklib_include("OKlib/ComputerAlgebra/RamseyTheory/Lisp/Schur/Numbers.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/Combinatorics/Lisp/Enumeration/Permutations.mac")$


/* *****************
   * Schur triples *
   *****************
*/

schur_fcl(n) := tcol2sat_stdohg2stdfcl(schurtriples_ohg(n))$
schur_fcs(n) := tcol2sat_stdhg2stdfcs(schurtriples_hg(n))$
wschur_fcl(n) := tcol2sat_stdohg2stdfcl(wschurtriples_ohg(n))$
wschur_fcs(n) := tcol2sat_stdhg2stdfcs(wschurtriples_hg(n))$


/* The non-boolean formal clause-set expressing the Schur problem with
   r parts and n vertices (note that the subsumption-free hypergraph is used).
   Prerequisites: r, n natural numbers, n, r >= 0.
*/
schur_nbfclud(r,n) := col2sat_stdohg2stdnbfclud(schurtriples_me_ohg(n), create_list(i,i,1,r))$
schur_nbfcsud(r,n) :=
 nbfclud2nbfcsud(schur_nbfclud(r,n))$

/* Statistics: */
nvar_schur_nbfcsud(r,n) := nver_schurtriples_hg(n)$
nval_schur_nbfcsud(r,n) := r$
ncl_list_schur_nbfcsud(r,n) := if r=0 then [] else
 map(lambda([p],[p[1],r*p[2]]), nhyp_list_schurtriples_me_hg(n))$
ncl_schur_nbfcsud(r,n) := r * nhyp_schurtriples_me_hg(n)$


/* The palindromic forms: */
pd_schur_nbfclud(r,n) := col2sat_stdohg2stdnbfclud(schurtriples_pd_ohg(n), create_list(i,i,1,r))$
pd_schur_nbfcsud(r,n) :=
 nbfclud2nbfcsud(pd_schur_nbfclud(r,n))$

/* Statistics: */
nvar_pd_schur_nbfcsud(r,n) := nver_schurtriples_pd_hg(n)$


/* The weak forms: */
wschur_nbfclud(r,n) := col2sat_stdohg2stdnbfclud(wschurtriples_ohg(n), create_list(i,i,1,r))$
wschur_nbfcsud(r,n) :=
 nbfclud2nbfcsud(wschur_nbfclud(r,n))$

/* The palindromic weak forms: */
pd_wschur_nbfclud(r,n) := col2sat_stdohg2stdnbfclud(wschurtriples_pd_ohg(n), create_list(i,i,1,r))$
pd_wschur_nbfcsud(r,n) :=
 nbfclud2nbfcsud(pd_wschur_nbfclud(r,n))$

/* Statistics: */
nvar_pd_wschur_nbfcsud(r,n) := nver_wschurtriples_pd_hg(n)$


/* *****************
   * Group triples *
   *****************
*/

/* The modular form (in ZZ_{n+1}): */
mschur_nbfclud(r,n) := col2sat_stdohg2stdnbfclud(mschurtriples_me_ohg(n), create_list(i,i,1,r))$
mschur_nbfcsud(r,n) := col2sat_stdhg2stdnbfcsud(mschurtriples_me_hg(n), setn(r))$

wmschur_nbfclud(r,n) := col2sat_stdohg2stdnbfclud(wmschurtriples_ohg(n), create_list(i,i,1,r))$
wmschur_nbfcsud(r,n) := col2sat_stdhg2stdnbfcsud(wmschurtriples_hg(n), setn(r))$


/* Using the symmetric groups instead of the cyclic groups: */
symmetrictriples_nbfclud(r,n) := col2sat_stdohg2stdnbfclud(symmetrictriples_me_ohg(n), create_list(i,i,1,r))$
symmetrictriples_nbfcsud(r,n) := col2sat_stdhg2stdnbfcsud(symmetrictriples_me_hg(n), setn(r))$

wsymmetrictriples_nbfclud(r,n) := col2sat_stdohg2stdnbfclud(wsymmetrictriples_ohg(n), create_list(i,i,1,r))$
wsymmetrictriples_nbfcsud(r,n) := col2sat_stdhg2stdnbfcsud(wsymmetrictriples_hg(n), create_list(i,i,1,r))$


/* *********************
   * Symmetry breaking *
   *********************
*/

/* Note:
    - These clause-sets contain unit-clauses (and are thus not
      subsumption-free).
*/

/* Adding symmetry-breaking clauses (regarding the parts (colours)), forcing
   vertex 1 to be in part 1; now we must have n >= 1:
*/
schur_set_first_vertex_nbcl(r) := create_list({[1,i]},i,2,r)$

schur_sb_nbfclud(r,n) := block([S : schur_nbfclud(r,n)],
 [S[1], append(schur_set_first_vertex_nbcl(r), S[2]), S[3]])$
schur_sb_nbfcsud(r,n) := nbfclud2nbfcsud(schur_sb_nbfclud(r,n))$

wschur_sb_nbfclud(r,n) := block([S : wschur_nbfclud(r,n)],
 [S[1], append(schur_set_first_vertex_nbcl(r), S[2]), S[3]])$
wschur_sb_nbfcsud(r,n) := nbfclud2nbfcsud(wschur_sb_nbfclud(r,n))$


/* ****************************
   * Heuristical restrictions *
   ****************************
*/

/* "Full symmetry-breaking"

   The idea is as follows: Consider r parts (colours), we know that
   a valid partition of the first schur(r-1) vertices must use all r
   parts --- the (heuristical) principle is now to place vertex schur(r-1)
   in part r, and to do that for all 1 <= r' <= r.
*/

/* Strengthening schur_set_first_vertex_nbcl(r): */
schur_fullsb_nbcl(r,n) := block(
 [L : sublist(create_list(seconde(schur(i)),i,0,r-1),
              lambda([x], is(x <= n)))],
  listify(singletons(lunion(
    map(cartesian_product,
        map(set, L),
        create_list(disjoin(i,setn(r)),i,1,length(L)))))))$

schur_fullsb_nbfclud(r,n) := block([S : schur_nbfclud(r,n)],
 [S[1], append(schur_fullsb_nbcl(r,n), S[2]), S[3]])$
schur_fullsb_nbfcsud(r,n) := nbfclud2nbfcsud(schur_fullsb_nbfclud(r,n))$

wschur_fullsb_nbcl(r,n) := block(
 [L : sublist(create_list(seconde(wschur(i)),i,0,r-1),
              lambda([x], is(x <= n)))],
  listify(singletons(lunion(
    map(cartesian_product,
        map(set, L),
        create_list(disjoin(i,setn(r)),i,1,length(L)))))))$

wschur_fullsb_nbfclud(r,n) := block([S : wschur_nbfclud(r,n)],
 [S[1], append(wschur_fullsb_nbcl(r,n), S[2]), S[3]])$
wschur_fullsb_nbfcsud(r,n) := nbfclud2nbfcsud(wschur_fullsb_nbfclud(r,n))$

/* Palindromic forms: */
pd_schur_fullsb_nbfclud(r,n) := block([S : pd_schur_nbfclud(r,n)],
 [S[1], append(schur_fullsb_nbcl(r,ceiling(n/2)), S[2]), S[3]])$
pd_schur_fullsb_nbfcsud(r,n) := nbfclud2nbfcsud(pd_schur_fullsb_nbfclud(r,n))$

pd_wschur_fullsb_nbfclud(r,n) := block([S : pd_wschur_nbfclud(r,n)],
 [S[1], append(wschur_fullsb_nbcl(r,ceiling(n/2)), S[2]), S[3]])$
pd_wschur_fullsb_nbfcsud(r,n) := nbfclud2nbfcsud(pd_wschur_fullsb_nbfclud(r,n))$


/* Removing the first k vertices from the last part (colour; we must
   have r >= 1, n >= k): The observation here is that apparently this
   "often" can be done "w.l.o.g.", or at least it yields good restrictions
   worth to study.

*/
schur_remove_first_vertices_nbcl(k,r) := create_list({[i,r]},i,1,k)$

schur_rm_nbfclud(r,n,k) := block([S : schur_nbfclud(r,n)],
 [S[1], append(schur_remove_first_vertices_nbcl(k,r), S[2]), S[3]])$
schur_rm_nbfcsud(r,n,k) := nbfclud2nbfcsud(schur_rm_nbfclud(r,n,k))$

/* Remarks:
    - These clause-sets contain unit-clauses (and are thus not
      subsumption-free).
    - Removing from the last part is compatible with full symmetry-breaking
      (according to schur_fullsb_nbfclud).
*/

/* Palindromic forms (here k <= ceiling(n/2) must hold): */

pd_schur_rm_nbfclud(r,n,k) := block([S : pd_schur_nbfclud(r,n)],
 [S[1], append(schur_remove_first_vertices_nbcl(k,r), S[2]), S[3]])$
pd_schur_rm_nbfcsud(r,n,k) := nbfclud2nbfcsud(pd_schur_rm_nbfclud(r,n,k))$

pd_schur_fullsb_rm_nbfclud(r,n,k) := block([S : pd_schur_rm_nbfclud(r,n,k)],
 [S[1], append(schur_fullsb_nbcl(r,ceiling(n/2)), S[2]), S[3]])$
pd_schur_fullsb_rm_nbfcsud(r,n,k) := nbfclud2nbfcsud(pd_schur_fullsb_rm_nbfclud(r,n,k))$


/* ****************************************
   * Translation into boolean clause-sets *
   ****************************************
*/

/* Strong direct translation: */

schur_aloamo_fcl(r,n) := nbfclud2fcl_aloamo(schur_nbfclud(r,n))$
schur_aloamo_fcs(r,n) := fcl2fcs(schur_aloamo_fcl(r,n))$

pd_schur_aloamo_fcl(r,n) := nbfclud2fcl_aloamo(pd_schur_nbfclud(r,n))$
pd_schur_aloamo_fcs(r,n) := fcl2fcs(pd_schur_aloamo_fcl(r,n))$

wschur_aloamo_fcl(r,n) := nbfclud2fcl_aloamo(wschur_nbfclud(r,n))$
wschur_aloamo_fcs(r,n) := fcl2fcs(wschur_aloamo_fcl(r,n))$

pd_wschur_aloamo_fcl(r,n) := nbfclud2fcl_aloamo(pd_wschur_nbfclud(r,n))$
pd_wschur_aloamo_fcs(r,n) := fcl2fcs(pd_wschur_aloamo_fcl(r,n))$


mschur_aloamo_fcl(r,n) := nbfclud2fcl_aloamo(mschur_nbfclud(r,n))$
mschur_aloamo_fcs(r,n) := nbfcsud2fcs_aloamo(mschur_nbfcsud(r,n))$

wmschur_aloamo_fcl(r,n) := nbfclud2fcl_aloamo(wmschur_nbfclud(r,n))$
wmschur_aloamo_fcs(r,n) := nbfcsud2fcs_aloamo(wmschur_nbfcsud(r,n))$

symmetrictriples_aloamo_fcl(r,n) := nbfclud2fcl_aloamo(symmetrictriples_nbfclud(r,n))$
symmetrictriples_aloamo_fcs(r,n) := nbfcsud2fcs_aloamo(symmetrictriples_nbfcsud(r,n))$

wsymmetrictriples_aloamo_fcl(r,n) := nbfclud2fcl_aloamo(wsymmetrictriples_nbfclud(r,n))$
wsymmetrictriples_aloamo_fcs(r,n) := nbfcsud2fcs_aloamo(wsymmetrictriples_nbfcsud(r,n))$


schur_sb_aloamo_fcl(r,n) := nbfclud2fcl_aloamo(schur_sb_nbfclud(r,n))$
schur_sb_aloamo_fcs(r,n) := fcl2fcs(schur_sb_aloamo_fcl(r,n))$

wschur_sb_aloamo_fcl(r,n) := nbfclud2fcl_aloamo(wschur_sb_nbfclud(r,n))$
wschur_sb_aloamo_fcs(r,n) := fcl2fcs(wschur_sb_aloamo_fcl(r,n))$

schur_fullsb_aloamo_fcl(r,n) := nbfclud2fcl_aloamo(schur_fullsb_nbfclud(r,n))$
schur_fullsb_aloamo_fcs(r,n) := fcl2fcs(schur_fullsb_aloamo_fcl(r,n))$

wschur_fullsb_aloamo_fcl(r,n) := nbfclud2fcl_aloamo(wschur_fullsb_nbfclud(r,n))$
wschur_fullsb_aloamo_fcs(r,n) := fcl2fcs(wschur_fullsb_aloamo_fcl(r,n))$

pd_schur_fullsb_aloamo_fcl(r,n) := nbfclud2fcl_aloamo(pd_schur_fullsb_nbfclud(r,n))$
pd_schur_fullsb_aloamo_fcs(r,n) := fcl2fcs(pd_schur_fullsb_aloamo_fcl(r,n))$

pd_wschur_fullsb_aloamo_fcl(r,n) := nbfclud2fcl_aloamo(pd_wschur_fullsb_nbfclud(r,n))$
pd_wschur_fullsb_aloamo_fcs(r,n) := fcl2fcs(pd_wschur_fullsb_aloamo_fcl(r,n))$


schur_rm_aloamo_fcl(r,n,k) := nbfclud2fcl_aloamo(schur_rm_nbfclud(r,n,k))$
schur_rm_aloamo_fcs(r,n,k) := fcl2fcs(schur_rm_aloamo_fcl(r,n,k))$

pd_schur_rm_aloamo_fcl(r,n,k) := nbfclud2fcl_aloamo(pd_schur_rm_nbfclud(r,n,k))$
pd_schur_rm_aloamo_fcs(r,n,k) := fcl2fcs(pd_schur_rm_aloamo_fcl(r,n,k))$

pd_schur_fullsb_rm_aloamo_fcl(r,n,k) := nbfclud2fcl_aloamo(pd_schur_fullsb_rm_nbfclud(r,n,k))$
pd_schur_fullsb_rm_aloamo_fcs(r,n,k) := fcl2fcs(pd_schur_fullsb_rm_aloamo_fcl(r,n,k))$



/* Statistics: */
nvar_schur_aloamo_fcl(r,n) :=
 nvar_schur_nbfcsud(r,n) * nval_schur_nbfcsud(r,n)$
nvar_schur_aloamo_fcs(r,n) := nvar_schur_aloamo_fcl(r,n)$
ncl_list_schur_aloamo_fcl(r,n) := if n=0 then []
 elseif r=0 then [[0,n]]
 elseif r=1 then cons([1,n], ncl_list_schur_nbfcsud(r,n))
 elseif n=1 then if r=2 then [[2,2]] else [[2,binomial(r,2)],[r,1]]
 elseif n<=3 then if r=2 then [[2,2+2*n]] else [[2,r+n*binomial(r,2)],[r,n]]
 else block([C2,C3],  /* now n >= 4, r >= 2 */
  [C2,C3] : map(second,ncl_list_schur_nbfcsud(r,n)),
  if r=2 then [[2,C2+n+n], [3,C3]]
  elseif r=3 then [[2,C2+3*n],[3,C3+n]]
  else [[2,C2+n*binomial(r,2)],[3,C3],[r,n]])$
ncl_list_schur_aloamo_fcs(r,n) := if n=0 then []
 elseif r=0 then [[0,1]] else ncl_list_schur_aloamo_fcl(r,n)$


/* Weak and strong standard nested translation
   (now r >= 1 must hold):
*/

schur_standnest_fcl(r,n) := nbfclud2fcl_standnest(schur_nbfclud(r,n))$
schur_standnest_fcs(r,n) := fcl2fcs(schur_standnest_fcl(r,n))$

schur_standnest_strong_fcl(r,n) := nbfclud2fcl_standnest_strong(schur_nbfclud(r,n))$
schur_standnest_strong_fcs(r,n) := fcl2fcs(schur_standnest_strong_fcl(r,n))$


/* Logarithmic translation
   (now r >= 1 must hold):
*/

schur_logarithmic_fcl(r,n) := nbfclud2fcl_logarithmic(schur_nbfclud(r,n))$
schur_logarithmic_fcs(r,n) := fcl2fcs(schur_logarithmic_fcl(r,n))$



/* *******************
   * Standardisation *
   *******************
*/

/* Direct translation: */

schur_aloamo_stdfcl(r,n) := (
  [block([s : standardise_schur_aloamo(r,n)],
     s(schur_aloamo_fcl(r,n))),
   block([invs : invstandardise_schur_aloamo(r,n)],
     create_list(invs(i), i,1,n*r))])$
/* We have schur_aloamo_stdfcl(r,n) =
   standardise_fcl(schur_aloamo_fcl(r,n)).
*/

pd_schur_aloamo_stdfcl(r,n) := (
  [block([s : standardise_pd_schur_aloamo(r,n)],
     s(pd_schur_aloamo_fcl(r,n))),
   block([invs : invstandardise_pd_schur_aloamo(r,n)],
     create_list(invs(i), i,1,nvar_pd_schur_nbfcsud(r,n)*r))])$
/* We have pd_schur_aloamo_stdfcl(r,n) =
   standardise_fcl(pd_schur_aloamo_fcl(r,n)).
*/

wschur_aloamo_stdfcl(r,n) := (
  [block([s : standardise_schur_aloamo(r,n)],
     s(wschur_aloamo_fcl(r,n))),
   block([invs : invstandardise_schur_aloamo(r,n)],
     create_list(invs(i), i,1,n*r))])$
/* We have wschur_aloamo_stdfcl(r,n) =
   standardise_fcl(wschur_aloamo_fcl(r,n)).
*/

pd_wschur_aloamo_stdfcl(r,n) := (
  [block([s : standardise_pd_wschur_aloamo(r,n)],
     s(pd_wschur_aloamo_fcl(r,n))),
   block([invs : invstandardise_pd_wschur_aloamo(r,n)],
     create_list(invs(i), i,1,nvar_pd_wschur_nbfcsud(r,n)*r))])$
/* We have pd_wschur_aloamo_stdfcl(r,n) =
   standardise_fcl(pd_wschur_aloamo_fcl(r,n)).
*/


mschur_aloamo_stdfcl(r,n) := (
  [block([s : standardise_schur_aloamo(r,n)],
     s(mschur_aloamo_fcl(r,n))),
   block([invs : invstandardise_schur_aloamo(r,n)],
     create_list(invs(i), i,1,n*r))])$
/* We have mschur_aloamo_stdfcl(r,n) =
   standardise_fcl(mschur_aloamo_fcl(r,n)).
*/

wmschur_aloamo_stdfcl(r,n) := (
  [block([s : standardise_schur_aloamo(r,n)],
     s(wmschur_aloamo_fcl(r,n))),
   block([invs : invstandardise_schur_aloamo(r,n)],
     create_list(invs(i), i,1,n*r))])$
/* We have wmschur_aloamo_stdfcl(r,n) =
   standardise_fcl(wmschur_aloamo_fcl(r,n)).
*/

symmetrictriples_aloamo_stdfcl(r,n) := (
  [block([s : standardise_symmetrictriples_aloamo(r,n)],
     s(symmetrictriples_aloamo_fcl(r,n))),
   block([invs : invstandardise_symmetrictriples_aloamo(r,n)],
     create_list(invs(i), i,1,(n!-1)*r))])$
/* We have symmetrictriples_aloamo_stdfcl(r,n) =
   standardise_fcl(symmetrictriples_aloamo_fcl(r,n)).
*/

wsymmetrictriples_aloamo_stdfcl(r,n) := (
  [block([s : standardise_symmetrictriples_aloamo(r,n)],
     s(wsymmetrictriples_aloamo_fcl(r,n))),
   block([invs : invstandardise_symmetrictriples_aloamo(r,n)],
     create_list(invs(i), i,1,(n!-1)*r))])$
/* We have wsymmetrictriples_aloamo_stdfcl(r,n) =
   standardise_fcl(wsymmetrictriples_aloamo_fcl(r,n)).
*/


schur_sb_aloamo_stdfcl(r,n) := (
  [block([s : standardise_schur_aloamo(r,n)],
     s(schur_sb_aloamo_fcl(r,n))),
   block([invs : invstandardise_schur_aloamo(r,n)],
     create_list(invs(i), i,1,n*r))])$
/* We have schur_sb_aloamo_stdfcl(r,n) =
   standardise_fcl(schur_sb_aloamo_fcl(r,n)).
*/

wschur_sb_aloamo_stdfcl(r,n) := (
  [block([s : standardise_schur_aloamo(r,n)],
     s(wschur_sb_aloamo_fcl(r,n))),
   block([invs : invstandardise_schur_aloamo(r,n)],
     create_list(invs(i), i,1,n*r))])$
/* We have wschur_sb_aloamo_stdfcl(r,n) =
   standardise_fcl(wschur_sb_aloamo_fcl(r,n)).
*/

schur_fullsb_aloamo_stdfcl(r,n) := (
  [block([s : standardise_schur_aloamo(r,n)],
     s(schur_fullsb_aloamo_fcl(r,n))),
   block([invs : invstandardise_schur_aloamo(r,n)],
     create_list(invs(i), i,1,n*r))])$
/* We have schur_fullsb_aloamo_stdfcl(r,n) =
   standardise_fcl(schur_fullsb_aloamo_fcl(r,n)).
*/

wschur_fullsb_aloamo_stdfcl(r,n) := (
  [block([s : standardise_schur_aloamo(r,n)],
     s(wschur_fullsb_aloamo_fcl(r,n))),
   block([invs : invstandardise_schur_aloamo(r,n)],
     create_list(invs(i), i,1,n*r))])$
/* We have wschur_fullsb_aloamo_stdfcl(r,n) =
   standardise_fcl(wschur_fullsb_aloamo_fcl(r,n)).
*/

pd_schur_fullsb_aloamo_stdfcl(r,n) := (
  [block([s : standardise_pd_schur_aloamo(r,n)],
     s(pd_schur_fullsb_aloamo_fcl(r,n))),
   block([invs : invstandardise_pd_schur_aloamo(r,n)],
     create_list(invs(i), i,1,nvar_pd_schur_nbfcsud(r,n)*r))])$
/* We have pd_schur_fullsb_aloamo_stdfcl(r,n) =
   standardise_fcl(pd_schur_fullsb_aloamo_fcl(r,n)).
*/

pd_wschur_fullsb_aloamo_stdfcl(r,n) := (
  [block([s : standardise_pd_wschur_aloamo(r,n)],
     s(pd_wschur_fullsb_aloamo_fcl(r,n))),
   block([invs : invstandardise_pd_wschur_aloamo(r,n)],
     create_list(invs(i), i,1,nvar_pd_wschur_nbfcsud(r,n)*r))])$
/* We have pd_wschur_fullsb_aloamo_stdfcl(r,n) =
   standardise_fcl(pd_wschur_fullsb_aloamo_fcl(r,n)).
*/


schur_rm_aloamo_stdfcl(r,n,k) := (
  [block([s : standardise_schur_aloamo(r,n)],
     s(schur_rm_aloamo_fcl(r,n,k))),
   block([invs : invstandardise_schur_aloamo(r,n)],
     create_list(invs(i), i,1,n*r))])$
/* We have schur_rm_aloamo_stdfcl(r,n,k) =
   standardise_fcl(schur_rm_aloamo_fcl(r,n,k)).
*/

pd_schur_rm_aloamo_stdfcl(r,n,k) := (
  [block([s : standardise_pd_schur_aloamo(r,n)],
     s(pd_schur_rm_aloamo_fcl(r,n,k))),
   block([invs : invstandardise_pd_schur_aloamo(r,n)],
     create_list(invs(i), i,1,nvar_pd_schur_nbfcsud(r,n)*r))])$
/* We have pd_schur_rm_aloamo_stdfcl(r,n,k) =
   standardise_fcl(pd_schur_rm_aloamo_fcl(r,n,k)).
*/

pd_schur_fullsb_rm_aloamo_stdfcl(r,n,k) := (
  [block([s : standardise_pd_schur_aloamo(r,n)],
     s(pd_schur_fullsb_rm_aloamo_fcl(r,n,k))),
   block([invs : invstandardise_pd_schur_aloamo(r,n)],
     create_list(invs(i), i,1,nvar_pd_schur_nbfcsud(r,n)*r))])$
/* We have pd_schur_fullsb_rm_aloamo_stdfcl(r,n,k) =
   standardise_fcl(pd_schur_fullsb_rm_aloamo_fcl(r,n,k)).
*/


/* Translation functions for standardising resp. de-standardising
   terms resp. individual variables:
*/
standardise_schur_aloamo(r,n) :=
  buildq([r], lambda([t], ev(t, nbv(v,i):=(v-1)*r+i, nbv)))$
invstandardise_schur_aloamo(r,n) :=
  buildq([r], lambda([i], block([d : divide(i-1,r)+1],
    nbv_var(d[1], d[2]))))$

standardise_pd_schur_aloamo(r,n) := if mod(n+1,3)#0 then
  buildq([r], lambda([t], ev(t, nbv(v,i):=(v-1)*r+i, nbv)))
 else
  buildq([r,excl:2*(n+1)/3,repl:ceiling(n/2)],
   lambda([t], ev(t, nbv(v,i):= if v=excl then repl*r+i else (v-1)*r+i, nbv)))$
invstandardise_pd_schur_aloamo(r,n) := if mod(n+1,3)#0 then
  buildq([r], lambda([i], block([d : divide(i-1,r)+1], nbv_var(d[1], d[2]))))
 else
  buildq([r,excp:ceiling(n/2)+1,repl:2*(n+1)/3], lambda([i], block([d : divide(i-1,r)+1], nbv_var(if d[1]#excp then d[1] else repl, d[2]))))$

standardise_pd_wschur_aloamo(r,n) := standardise_schur_aloamo(r,ceiling(n/2))$
invstandardise_pd_wschur_aloamo(r,n) := invstandardise_schur_aloamo(r,ceiling(n/2))$

standardise_symmetrictriples_aloamo(r,n) :=
  buildq([r], lambda([t], ev(t, nbv(t,i):=(rank_lex_permutations(t)-2)*r+i, nbv)))$
invstandardise_symmetrictriples_aloamo(r,n) :=
  buildq([r,n], lambda([i], block([d : divide(i-1,r)+1],
    nbv_var(unrank_lex_permutations(d[1]+1,n), d[2]))))$


/* Weak and strong standard nested translation; now r >= 1 must hold: */

schur_standnest_stdfcl(r,n) :=
  [block([s : standardise_schur_standnest(r,n)],
     s(schur_standnest_fcl(r,n))),
   block([invs : invstandardise_schur_standnest(r,n)],
     create_list(invs(i), i,1,n*(r-1)))]$
/* We have schur_standnest_stdfcl(r,n) =
   standardise_fcl(schur_standnest_fcl(r,n)).
*/
schur_standnest_stdfcs(r,n) := block(
 [FF : schur_standnest_stdfcl(r,n)],
  [fcl2fcs(FF[1]), FF[2]])$

schur_standnest_strong_stdfcl(r,n) :=
  [block([s : standardise_schur_standnest(r,n)],
     s(schur_standnest_strong_fcl(r,n))),
   block([invs : invstandardise_schur_standnest(r,n)],
     create_list(invs(i), i,1,n*(r-1)))]$
/* We have schur_standnest_strong_stdfcl(r,n) =
   standardise_fcl(schur_standnest_strong_fcl(r,n)).
*/
schur_standnest_strong_stdfcs(r,n) := block(
 [FF : schur_standnest_strong_stdfcl(r,n)],
  [fcl2fcs(FF[1]), FF[2]])$

/* Translation functions for standardising resp. de-standardising
   terms resp. individual variables:
*/
standardise_schur_standnest(r,n) :=
  buildq([r], lambda([t], ev(t, nbv(v,i):=(v-1)*(r-1)+i, nbv)))$
invstandardise_schur_standnest(r,n) :=
  buildq([r], lambda([i], block([d : divide(i-1,r-1)+1],
    nbv_var(d[1], d[2]))))$


/* Logarithmic translation; now r >= 1 must hold: */

schur_logarithmic_stdfcl(r,n) :=
  [block([s : standardise_schur_logarithmic(r,n)],
     s(schur_logarithmic_fcl(r,n))),
   block([invs : invstandardise_schur_logarithmic(r,n)],
     create_list(invs(i), i,1,n*(r-1)))]$
/* We have schur_logarithmic_stdfcl(r,n) =
   standardise_fcl(schur_logarithmic_fcl(r,n)).
*/
schur_logarithmic_stdfcs(r,n) := block(
 [FF : schur_logarithmic_stdfcl(r,n)],
  [fcl2fcs(FF[1]), FF[2]])$

/* Translation functions for standardising resp. de-standardising
   terms resp. individual variables:
*/
standardise_schur_logarithmic(r,n) :=
  buildq([m:cld(r)], lambda([t], ev(t, nbv(v,i):=(v-1)*m+i, nbv)))$

invstandardise_schur_logarithmic(r,n) :=
  buildq([m:cld(r)], lambda([i], block([d : divide(i-1,m)+1],
    nbv_var(d[1], d[2]))))$


/* **********
   * Output *
   **********
*/

/* Output the direct translation to a file: */
output_schur(r,n,filename) := block(
 [FF : schur_aloamo_stdfcl(r,n)],
  output_fcl_v(
    sconcat("Schur problem with ", r, " parts and ", n, " elements, using the direct (strong) translation.", newline, "c ", "Created by output_schur(", r, ",", n, ",\"", filename, "\").", newline, "c ", created_by_OKlib()),
    FF[1],
    filename,
    FF[2]))$
/* Providing a standard name: "Schur_r_n.cnf": */
output_schur_stdname(r,n) := output_schur(r,n,
  sconcat("Schur_",r,"_",n,".cnf"))$

output_pd_schur(r,n,filename) := block(
 [FF : pd_schur_aloamo_stdfcl(r,n)],
  output_fcl_v(
    sconcat("Palindromic Schur problem with ", r, " parts and ", n, " elements, using the direct (strong) translation.", newline, "c ", "Created by output_pd_schur(", r, ",", n, ",\"", filename, "\").", newline, "c ", created_by_OKlib()),
    FF[1],
    filename,
    FF[2]))$
/* Providing a standard name: "Schur_pd_r_n.cnf": */
output_pd_schur_stdname(r,n) := output_pd_schur(r,n,
  sconcat("Schur_pd_",r,"_",n,".cnf"))$

output_wschur(r,n,filename) := block(
 [FF : wschur_aloamo_stdfcl(r,n)],
  output_fcl_v(
    sconcat("Weak Schur problem with ", r, " parts and ", n, " elements, using the direct (strong) translation.", newline, "c ", "Created by output_wschur(", r, ",", n, ",\"", filename, "\").", newline, "c ", created_by_OKlib()),
    FF[1],
    filename,
    FF[2]))$
/* Providing a standard name: "WSchur_r_n.cnf": */
output_wschur_stdname(r,n) := output_wschur(r,n,
  sconcat("WSchur_",r,"_",n,".cnf"))$

output_pd_wschur(r,n,filename) := block(
 [FF : pd_wschur_aloamo_stdfcl(r,n)],
  output_fcl_v(
    sconcat("Palindromic weak Schur problem with ", r, " parts and ", n, " elements, using the direct (strong) translation.", newline, "c ", "Created by output_pd_wschur(", r, ",", n, ",\"", filename, "\").", newline, "c ", created_by_OKlib()),
    FF[1],
    filename,
    FF[2]))$
/* Providing a standard name: "WSchur_pd_r_n.cnf": */
output_pd_wschur_stdname(r,n) := output_pd_wschur(r,n,
  sconcat("WSchur_pd_",r,"_",n,".cnf"))$


output_mschur(r,n,filename) := block(
 [FF : mschur_aloamo_stdfcl(r,n)],
  output_fcl_v(
    sconcat("Modular Schur problem with ", r, " parts and ", n, " elements, using the direct (strong) translation.", newline, "c ", "Created by output_mschur(", r, ",", n, ",\"", filename, "\").", newline, "c ", created_by_OKlib()),
    FF[1],
    filename,
    FF[2]))$
/* Providing a standard name: "MSchur_r_n.cnf": */
output_mschur_stdname(r,n) := output_mschur(r,n,
  sconcat("MSchur_",r,"_",n,".cnf"))$

output_wmschur(r,n,filename) := block(
 [FF : wmschur_aloamo_stdfcl(r,n)],
  output_fcl_v(
    sconcat("Weak modular Schur problem with ", r, " parts and ", n, " elements, using the direct (strong) translation.", newline, "c ", "Created by output_wmschur(", r, ",", n, ",\"", filename, "\").", newline, "c ", created_by_OKlib()),
    FF[1],
    filename,
    FF[2]))$
/* Providing a standard name: "WMSchur_r_n.cnf": */
output_wmschur_stdname(r,n) := output_wmschur(r,n,
  sconcat("WMSchur_",r,"_",n,".cnf"))$

output_symmetrictriples(r,n,filename) := block(
 [FF : symmetrictriples_aloamo_stdfcl(r,n)],
  output_fcl_v(
    sconcat("Symmetric-group Schur problem with ", r, " parts and ", n, " elements, using the direct (strong) translation.", newline, "c ", "Created by output_symmetrictriples(", r, ",", n, ",\"", filename, "\").", newline, "c ", created_by_OKlib()),
    FF[1],
    filename,
    FF[2]))$
/* Providing a standard name: "SgSchur_r_n.cnf": */
output_symmetrictriples_stdname(r,n) := output_symmetrictriples(r,n,
  sconcat("SgSchur_",r,"_",n,".cnf"))$

output_wsymmetrictriples(r,n,filename) := block(
 [FF : wsymmetrictriples_aloamo_stdfcl(r,n)],
  output_fcl_v(
    sconcat("Weak symmetic-group Schur problem with ", r, " parts and ", n, " elements, using the direct (strong) translation.", newline, "c ", "Created by output_wsymmetrictriples(", r, ",", n, ",\"", filename, "\").", newline, "c ", created_by_OKlib()),
    FF[1],
    filename,
    FF[2]))$
/* Providing a standard name: "WSgSchur_r_n.cnf": */
output_wsymmetrictriples_stdname(r,n) := output_wsymmetrictriples(r,n,
  sconcat("WSgSchur_",r,"_",n,".cnf"))$


output_schur_sb(r,n,filename) := block(
 [FF : schur_sb_aloamo_stdfcl(r,n)],
  output_fcl_v(
    sconcat("Schur problem with ", r, " parts and ", n, " elements, using the direct (strong) translation.", newline, "c Symmetry breaking by putting element 1 into part 1.", newline, "c ", "Created by output_schur_sb(", r, ",", n, ",\"", filename, "\").", newline, "c ", created_by_OKlib()),
    FF[1],
    filename,
    FF[2]))$
/* Providing a standard name: "Schur_sb_r_n.cnf": */
output_schur_sb_stdname(r,n) := output_schur_sb(r,n,
  sconcat("Schur_sb_",r,"_",n,".cnf"))$

output_wschur_sb(r,n,filename) := block(
 [FF : wschur_sb_aloamo_stdfcl(r,n)],
  output_fcl_v(
    sconcat("Weak Schur problem with ", r, " parts and ", n, " elements, using the direct (strong) translation.", newline, "c Symmetry breaking by putting element 1 into part 1.", newline, "c ", "Created by output_wschur_sb(", r, ",", n, ",\"", filename, "\").", newline, "c ", created_by_OKlib()),
    FF[1],
    filename,
    FF[2]))$
/* Providing a standard name: "WSchur_sb_r_n.cnf": */
output_wschur_sb_stdname(r,n) := output_wschur_sb(r,n,
  sconcat("WSchur_sb_",r,"_",n,".cnf"))$

output_schur_fullsb(r,n,filename) := block(
 [FF : schur_fullsb_aloamo_stdfcl(r,n)],
  output_fcl_v(
    sconcat("Schur problem with ", r, " parts and ", n, " elements, using the direct (strong) translation.", newline, "c Symmetry breaking by putting the following elements into parts 1, 2, ...: ", sublist(create_list(schur(i),i,0,r-1), lambda([x], is(x<=n))), ".", newline, "c ", "Created by output_schur_fullsb(", r, ",", n, ",\"", filename, "\").", newline, "c ", created_by_OKlib()),
    FF[1],
    filename,
    FF[2]))$
/* Providing a standard name: "Schur_fullsb_r_n.cnf": */
output_schur_fullsb_stdname(r,n) := output_schur_fullsb(r,n,
  sconcat("Schur_fullsb_",r,"_",n,".cnf"))$

output_wschur_fullsb(r,n,filename) := block(
 [FF : wschur_fullsb_aloamo_stdfcl(r,n)],
  output_fcl_v(
    sconcat("Weak Schur problem with ", r, " parts and ", n, " elements, using the direct (strong) translation.", newline, "c Symmetry breaking by putting the following elements into parts 1, 2, ...: ", sublist(create_list(wschur(i),i,0,r-1), lambda([x], is(x<=n))), ".", newline, "c ", "Created by output_wschur_fullsb(", r, ",", n, ",\"", filename, "\").", newline, "c ", created_by_OKlib()),
    FF[1],
    filename,
    FF[2]))$
/* Providing a standard name: "WSchur_fullsb_r_n.cnf": */
output_wschur_fullsb_stdname(r,n) := output_wschur_fullsb(r,n,
  sconcat("WSchur_fullsb_",r,"_",n,".cnf"))$

output_pd_schur_fullsb(r,n,filename) := block(
 [FF : pd_schur_fullsb_aloamo_stdfcl(r,n)],
  output_fcl_v(
    sconcat("Palindromic Schur problem with ", r, " parts and ", n, " elements, using the direct (strong) translation.", newline, "c Symmetry breaking by putting the following elements into parts 1, 2, ...: ", sublist(create_list(schur(i),i,0,r-1), lambda([x], is(x<=ceiling(n/2)))), ".", newline, "c ", "Created by output_pd_schur_fullsb(", r, ",", n, ",\"", filename, "\").", newline, "c ", created_by_OKlib()),
    FF[1],
    filename,
    FF[2]))$
/* Providing a standard name: "Schur_pd_fullsb_r_n.cnf": */
output_pd_schur_fullsb_stdname(r,n) := output_pd_schur_fullsb(r,n,
  sconcat("Schur_pd_fullsb_",r,"_",n,".cnf"))$

output_pd_wschur_fullsb(r,n,filename) := block(
 [FF : pd_wschur_fullsb_aloamo_stdfcl(r,n)],
  output_fcl_v(
    sconcat("Palindromic weak Schur problem with ", r, " parts and ", n, " elements, using the direct (strong) translation.", newline, "c Symmetry breaking by putting the following elements into parts 1, 2, ...: ", sublist(create_list(wschur(i),i,0,r-1), lambda([x], is(x<=ceiling(n/2)))), ".", newline, "c ", "Created by output_pd_wschur_fullsb(", r, ",", n, ",\"", filename, "\").", newline, "c ", created_by_OKlib()),
    FF[1],
    filename,
    FF[2]))$
/* Providing a standard name: "WSchur_pd_fullsb_r_n.cnf": */
output_pd_wschur_fullsb_stdname(r,n) := output_pd_wschur_fullsb(r,n,
  sconcat("WSchur_pd_fullsb_",r,"_",n,".cnf"))$


output_schur_rm(r,n,k,filename) := block(
 [FF : schur_rm_aloamo_stdfcl(r,n,k)],
  output_fcl_v(
    sconcat("Schur problem with ", r, " parts and ", n, " elements, using the direct (strong) translation.", newline, "c Forbidding the first ", k, " elements in part ",r,".", newline, "c ", "Created by output_schur_rm(", r, ",", n, ",", k, ",\"", filename, "\").", newline, "c ", created_by_OKlib()),
    FF[1],
    filename,
    FF[2]))$
/* Providing a standard name: "Schur_rm_r_n-k.cnf": */
output_schur_rm_stdname(r,n,k) := output_schur_rm(r,n,k,
  sconcat("Schur_rm_",r,"_",n,"-",k,".cnf"))$

output_pd_schur_rm(r,n,k,filename) := block(
 [FF : pd_schur_rm_aloamo_stdfcl(r,n,k)],
  output_fcl_v(
    sconcat("Palindromic Schur problem with ", r, " parts and ", n, " elements, using the direct (strong) translation.", newline, "c Forbidding the first ", k, " elements in part ",r,".", newline, "c ", "Created by output_pd_schur_rm(", r, ",", n, ",", k, ",\"", filename, "\").", newline, "c ", created_by_OKlib()),
    FF[1],
    filename,
    FF[2]))$
/* Providing a standard name: "Schur_pd_rm_r_n-k.cnf": */
output_pd_schur_rm_stdname(r,n,k) := output_pd_schur_rm(r,n,k,
  sconcat("Schur_pd_rm_",r,"_",n,"-",k,".cnf"))$

output_pd_schur_fullsb_rm(r,n,k,filename) := block(
 [FF : pd_schur_fullsb_rm_aloamo_stdfcl(r,n,k)],
  output_fcl_v(
    sconcat("Palindromic Schur problem with ", r, " parts and ", n, " elements, using the direct (strong) translation.", newline, "c Forbidding the first ", k, " elements in part ", r,".", newline, "c Symmetry breaking by putting the following elements into parts 1, 2, ...: ", sublist(create_list(wschur(i),i,0,r-1), lambda([x], is(x<=ceiling(n/2)))), ".", newline, "c ", "Created by output_pd_fullsb_rm_schur(", r, ",", n, ",", k, ",\"", filename, "\").", newline, "c ", created_by_OKlib()),
    FF[1],
    filename,
    FF[2]))$
/* Providing a standard name: "Schur_rm_r_n-k.cnf": */
output_pd_schur_fullsb_rm_stdname(r,n,k) := output_pd_schur_fullsb_rm(r,n,k,
  sconcat("Schur_pd_fullsb_rm_",r,"_",n,"-",k,".cnf"))$


/* Output the standard nested translation to a file: */
output_schur_standnest(r,n,filename) := block(
 [FF : schur_standnest_stdfcl(r,n)],
  output_fcl_v(
    sconcat("Schur problem with ", r, " parts and ", n, " elements, using the weak standard nested translation.", newline, "c ", "Created by output_schur_standnest(", r, ",", n, ",\"", filename, "\").", newline, "c ", created_by_OKlib()),
    FF[1],
    filename,
    FF[2]))$
/* Providing a standard name: "Schur_N_r_n.cnf": */
output_schur_standnest_stdname(r,n) := output_schur_standnest(r,n,
  sconcat("Schur_N_",r,"_",n,".cnf"))$

output_schur_standnest_strong(r,n,filename) := block(
 [FF : schur_standnest_strong_stdfcl(r,n)],
  output_fcl_v(
    sconcat("Schur problem with ", r, " parts and ", n, " elements, using the strong standard nested translation.", newline, "c ", "Created by output_schur_standnest(", r, ",", n, ",\"", filename, "\").", newline, "c ", created_by_OKlib()),
    FF[1],
    filename,
    FF[2]))$
/* Providing a standard name: "Schur_SN_r_n.cnf": */
output_schur_standnest_strong_stdname(r,n) := output_schur_standnest_strong(r,n,
  sconcat("Schur_SN_",r,"_",n,".cnf"))$


/* Output the logarithmic translation to a file: */
output_schur_logarithmic(r,n,filename) := block(
 [FF : schur_logarithmic_stdfcl(r,n)],
  output_fcl_v(
    sconcat("Schur problem with ", r, " parts and ", n, " elements, using the logarithmic translation.", newline, "c ", "Created by output_schur_logarithmic(", r, ",", n, ",\"", filename, "\").", newline, "c ", created_by_OKlib()),
    FF[1],
    filename,
    FF[2]))$
/* Providing a standard name: "Schur_L_r_n.cnf": */
output_schur_logarithmic_stdname(r,n) := output_schur_logarithmic(r,n,
  sconcat("Schur_L_",r,"_",n,".cnf"))$


/* ***********************
   * Pythagorean Triples *
   ***********************
*/

/* The boolean problems are created by: */
pythtriples_fcl(n) := tcol2sat_stdohg2stdfcl(pythtriples_ohg(n))$
/* TODO: this garbles the order! */
pythtriples_fcs(n) := tcol2sat_stdhg2stdfcs(pythtriples_hg(n))$

/* The nonboolean forms: */
pythtriples_nbfclud(r,n) := col2sat_stdohg2stdnbfclud(pythtriples_ohg(n), create_list(i,i,1,r))$
pythtriples_nbfcsud(r,n) := nbfclud2nbfcsud(pythtriples_nbfclud(r,n))$

/* TODO: nonboolean problems! */
/* TODO Pythagorean tuples! */

pythquad_fcl(n) := tcol2sat_stdohg2stdfcl(pythquad_ohg(n))$
pythquad_fcs(n) := tcol2sat_stdohg2stdfcl(pythquad_hg(n))$

pythquad_nbfclud(r,n) := col2sat_stdohg2stdnbfclud(pythquad_ohg(n), create_list(i,i,1,r))$
pythquad_nbfcsud(r,n) := nbfclud2nbfcsud(pythquad_nbfclud(r,n))$

/* Strong direct translation: */

pythtriples_aloamo_fcl(r,n) := nbfclud2fcl_aloamo(pythtriples_nbfclud(r,n))$
pythtriples_aloamo_fcs(r,n) := fcl2fcs(pythtriples_aloamo_fcl(r,n))$

pythquad_aloamo_fcl(r,n) := nbfclud2fcl_aloamo(pythquad_nbfclud(r,n))$
pythquad_aloamo_fcs(r,n) := fcl2fcs(pythquad_aloamo_fcl(r,n))$

pythtriples_aloamo_stdfcl(r,n) := (
  [block([s : standardise_schur_aloamo(r,n)],
     s(pythtriples_aloamo_fcl(r,n))),
   block([invs : invstandardise_schur_aloamo(r,n)],
     create_list(invs(i), i,1,n*r))])$

pythquad_aloamo_stdfcl(r,n) := (
  [block([s : standardise_schur_aloamo(r,n)],
     s(pythquad_aloamo_fcl(r,n))),
   block([invs : invstandardise_schur_aloamo(r,n)],
     create_list(invs(i), i,1,n*r))])$

/* Output the direct translation to a file: */
output_pythtriples(r,n,filename) := block(
 [FF : pythtriples_aloamo_stdfcl(r,n)],
  output_fcl_v(
    sconcat("Pythagorean triples problem with ", r, " parts and ", n, " elements, using the direct (strong) translation.", newline, "c ", "Created by output_pythtriples(", r, ",", n, ",\"", filename, "\").", newline, "c ", created_by_OKlib()),
    FF[1],
    filename,
    FF[2]))$
/* Providing a standard name: "PythTriples_r_n.cnf": */
output_pythtriples_stdname(r,n) := output_pythtriples(r,n,
  sconcat("PythTriples_",r,"_",n,".cnf"))$

output_pythquad(r,n,filename) := block(
 [FF : pythquad_aloamo_stdfcl(r,n)],
  output_fcl_v(
    sconcat("Pythagorean quadruples problem with ", r, " parts and ", n, " elements, using the direct (strong) translation.", newline, "c ", "Created by output_pythquad(", r, ",", n, ",\"", filename, "\").", newline, "c ", created_by_OKlib()),
    FF[1],
    filename,
    FF[2]))$
/* Providing a standard name: "PythQuad_r_n.cnf": */
output_pythquad_stdname(r,n) := output_pythquad(r,n,
  sconcat("PythQuad_",r,"_",n,".cnf"))$

/*!
\endhtmlonly
*/
