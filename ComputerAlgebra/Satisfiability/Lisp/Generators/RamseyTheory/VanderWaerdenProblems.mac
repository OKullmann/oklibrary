/* Oliver Kullmann, 20.9.2008 (Swansea) */
/* Copyright 2008, 2009, 2010, 2011, 2012, 2016 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Generators/RamseyTheory/VanderWaerdenProblems.mac
  \brief %Generators for clause-sets related to van der Waerden problems

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/RamseyTheory/VanderWaerdenProblems.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Generators/Generators.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Colouring.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Constructions.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/NonBooleanTranslations.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/NonBoolean.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$


/* **************************************************
   * Arithmetic progressions in the natural numbers *
   **************************************************
*/

/* Boolean formal clause-sets, whose solutions are the partitionings of 
   {1,...,n} into two parts such that none of them contains an arithmetic 
   progression of size k.
   (We are using "trivially generalised partitionings" here, where the
    parts can be empty.)
   For the list-form the order of clauses is as given by arithprog_ohg, where
   the positive clauses are associated to the first block of the partition
   (the first "colour").
*/
/* Prerequisites: k, n natural numbers >= 0. */
vanderwaerden2_fcl(k,n) := tcol2sat_stdohg2stdfcl(arithprog_ohg(k,n))$
vanderwaerden2_fcs(k,n) := fcl2fcs(vanderwaerden2_fcl(k,n))$
/* The general non-diagonal form (the above case has k=k1=k2). */
/* Prerequisites: k1, k2, n natural numbers >= 0. */
vanderwaerden2nd_fcl(k1,k2,n) := block(
 [G1 : arithprog_ohg(k1,n), G2 : arithprog_ohg(k2,n)],
  [G1[1], append(G1[2], comp_cl(G2[2]))])$
vanderwaerden2nd_fcs(k1,k2,n) := fcl2fcs(vanderwaerden2nd_fcl(k1,k2,n))$

/* The palindromic versions: */
pd_vanderwaerden2nd_fcl(k1,k2,n) := block(
 [G1 : palindromise_vdw_ohg(arithprog_ohg(k1,n)),
  G2 : palindromise_vdw_ohg(arithprog_ohg(k2,n))],
  [G1[1], append(G1[2], comp_cl(G2[2]))])$
pd_vanderwaerden2nd_fcs(k1,k2,n) := block(
 [G1 : palindromise_vdw_hg(arithprog_hg(k1,n)),
  G2 : palindromise_vdw_hg(arithprog_hg(k2,n))],
  [G1[1], union(G1[2], comp_cs(G2[2]))])$
/*
 pd_vanderwaerden2nd_fcs(k1,k2,n) = fcl2fcs(pd_vanderwaerden2nd_fcl(k1,k2,n).
*/

/* Now the general form, where L is a vdW-parameter-tuple.
   Prerequisite: vanderwaerden_p(L) is true, n natural number >= 0
   (see ComputerAlgebra/RamseyTheory/Lisp/VanderWaerden/Numbers.mac).
*/
/* TODO: needs update, and order needs specification! */
vanderwaerden_nbfclud(L,n) :=
 if emptyp(L) then [create_list(i,i,1,n),[],[]] else
  gcol2sat_stdohg2stdnbfclud(
   map(lambda([k], arithprog_ohg(k,n)), L),
   create_list(i,i,1,length(L)))$
vanderwaerden_nbfcsud(L,n) := nbfclud2nbfcsud(vanderwaerden_nbfclud(L,n))$


/* ****************************************
   * Translation into boolean clause-sets *
   ****************************************
*/

/* Translating the general forms into boolean clause-sets via the
   (strong) standard translation: */
/* TODO: also the weak form (just "alo") is needed. */
vanderwaerden_aloamo_fcl(L,n) :=
  nbfclud2fcl_aloamo(vanderwaerden_nbfclud(L,n))$
vanderwaerden_aloamo_fcs(L,n) := fcl2fcs(vanderwaerden_aloamo_fcl(L,n))$

/* Standardising these boolean clause-sets: */
vanderwaerden_aloamo_stdfcl(L,n) := block([m : length(L)],
  [block([s : standardise_vanderwaerden_aloamo(L,n)],
     s(vanderwaerden_aloamo_fcl(L,n))),
   block([invs : invstandardise_vanderwaerden_aloamo(L,n)],
     create_list(invs(i), i,1,n*m))])$
/* We have vanderwaerden_aloamo_stdfcl(L,n) =
   standardise_fcl(vanderwaerden_aloamo_fcl(L,n)).
*/
vanderwaerden_aloamo_stdfcs(L,n) := block(
 [FF : vanderwaerden_aloamo_stdfcl(L,n)],
  [fcl2fcs(FF[1]), FF[2]])$

/* Computing translation functions for standardising resp. de-standardising
   terms resp. individual variables:
*/
standardise_vanderwaerden_aloamo(L,n) := block([m : length(L)],
  buildq([m], lambda([t], ev(t, nbv(v,i):=(v-1)*m+i, nbv))))$
invstandardise_vanderwaerden_aloamo(L,n) := block([m : length(L)],
  buildq([m], lambda([i], block([d : divide(i-1,m)+1],
    nbv_var(d[1], d[2])))))$


/* Translating the general forms into boolean clause-sets via the
   (weak and strong) standard nested translation:
*/
vanderwaerden_standnest_fcl(L,n) :=
nbfclud2fcl_standnest(vanderwaerden_nbfclud(L,n))$
vanderwaerden_standnest_fcs(L,n) := fcl2fcs(vanderwaerden_standnest_fcl(L,n))$

vanderwaerden_standnest_strong_fcl(L,n) :=
nbfclud2fcl_standnest_strong(vanderwaerden_nbfclud(L,n))$
vanderwaerden_standnest_strong_fcs(L,n) := fcl2fcs(vanderwaerden_standnest_strong_fcl(L,n))$


/* Standardising these boolean clause-sets: */
vanderwaerden_standnest_stdfcl(L,n) := block([m : length(L)],
  [block([s : standardise_vanderwaerden_standnest(L,n)],
     s(vanderwaerden_standnest_fcl(L,n))),
   block([invs : invstandardise_vanderwaerden_standnest(L,n)],
     create_list(invs(i), i,1,n*(m-1)))])$
/* We have vanderwaerden_standnest_stdfcl(L,n) =
   standardise_fcl(vanderwaerden_standnest_fcl(L,n)).
*/
vanderwaerden_standnest_stdfcs(L,n) := block(
 [FF : vanderwaerden_standnest_stdfcl(L,n)],
  [fcl2fcs(FF[1]), FF[2]])$

vanderwaerden_standnest_strong_stdfcl(L,n) := block([m : length(L)],
  [block([s : standardise_vanderwaerden_standnest(L,n)],
     s(vanderwaerden_standnest_strong_fcl(L,n))),
   block([invs : invstandardise_vanderwaerden_standnest(L,n)],
     create_list(invs(i), i,1,n*(m-1)))])$
/* We have vanderwaerden_standnest_strong_stdfcl(L,n) =
   standardise_fcl(vanderwaerden_standnest_strong_fcl(L,n)).
*/
vanderwaerden_standnest_strong_stdfcs(L,n) := block(
 [FF : vanderwaerden_standnest_strong_stdfcl(L,n)],
  [fcl2fcs(FF[1]), FF[2]])$


/* Computing translation functions for standardising resp. de-standardising
   terms resp. individual variables:
*/
standardise_vanderwaerden_standnest(L,n) := block([m : length(L)],
  buildq([m], lambda([t], ev(t, nbv(v,i):=(v-1)*(m-1)+i, nbv))))$
invstandardise_vanderwaerden_standnest(L,n) := block([m : length(L)],
  buildq([m], lambda([i], block([d : divide(i-1,m-1)+1],
    nbv_var(d[1], d[2])))))$


/* ************************
   * Statistics functions *
   ************************
*/

nvar_vanderwaerden2(k,n) := n$
nvar_vanderwaerden2nd(k1,k2,n) := n$
nvar_vanderwaerden(L,n) := n$
nvar_vanderwaerden_aloamo(L,n) := length(L)*n$
/* nvar_vanderwaerden_aloamo is also valid for the standardised forms. */

ncl_vanderwaerden2_cs(k,n) := if k=0 then nhyp_arithprog_hg(0,n) 
 else 2 * nhyp_arithprog_hg(k,n)$
ncl_vanderwaerden2nd_cs(k1,k2,n) := 
 if k1=0 and k2=0 then nhyp_arithprog_hg(0,n)
 else nhyp_arithprog_hg(k1,n) + nhyp_arithprog_hg(k2,n)$
ncl_vanderwaerden_cl(L,n) := sum_l(create_list(nhyp_arithprog_hg(k,n),k,L))$
ncl_vanderwaerden_cs(L,n) := sum_l(create_list(nhyp_arithprog_hg(k,n),k,L))$
ncl_vanderwaerden_aloamo_cl(L,n) :=
  ncl_vanderwaerden_cl(L,n) + n + n*binomial(length(L),2)$
ncl_vanderwaerden_aloamo_cs(L,n) := block([l:length(L)],
  if l=0 then if n=0 then 0 else 1 else
  ncl_vanderwaerden_cl(L,n) + n + n*binomial(l,2))$
/* These two functions are also valid for the standardised forms. */


/* ********************
   * Output functions *
   ********************
*/

output_vanderwaerden2(k,n,filename) := 
  output_fcl_v(
    sconcat("Van der Waerden problem: 2 parts, arithmetic progressions of size ", k, ", and ", n, " elements.", newline, "C Using the direct (strong) translation.", newline, "c Created by output_vanderwaerden2(", k, ",", n, ",\"", filename, "\").", newline, "c ", created_by_OKlib()), 
    vanderwaerden2_fcl(k,n),
    filename, [])$
/* Providing a standard name: "VanDerWaerden_2-k-k_n.cnf": */
output_vanderwaerden2_stdname(k,n) := output_vanderwaerden2(k,n,
  sconcat("VanDerWaerden_2-",k,"-",k,"_",n,".cnf"))$

output_vanderwaerden2nd(k1,k2,n,filename) := 
  output_fcl_v(
    sconcat("Van der Waerden problem: 2 parts, arithmetic progressions of size ", k1, " and ", k2, ", and ", n, " elements.", newline, "C Using the direct (strong) translation.", newline, "c Created by output_vanderwaerden2nd(", k1, ",", k2, ",", n, ",\"", filename, "\").", newline, "c ", created_by_OKlib()), 
    vanderwaerden2nd_fcl(k1,k2,n),
    filename, [])$
/* Providing a standard name: "VanDerWaerden_2-k1-k2_n.cnf": */
output_vanderwaerden2nd_stdname(k1,k2,n) := output_vanderwaerden2nd(k1,k2,n,
  sconcat("VanDerWaerden_2-",k1,"-",k2,"_",n,".cnf"))$

output_pd_vanderwaerden2nd(k1,k2,n,filename) := 
  output_fcl_v(
    sconcat("Palindromic van der Waerden problem: 2 parts, arithmetic progressions of size ", k1, " and ", k2, ", and ", n, " elements, yielding ", ceiling(n/2), " variables.", newline, "C Using the direct (strong) translation.", newline, "c Created by output_pd_vanderwaerden2nd(", k1, ",", k2, ",", n, ",\"", filename, "\").", newline, "c ", created_by_OKlib()), 
    pd_vanderwaerden2nd_fcl(k1,k2,n),
    filename, [])$
/* Providing a standard name: "VanDerWaerden_pd_2-k1-k2_n.cnf": */
output_pd_vanderwaerden2nd_stdname(k1,k2,n) := output_pd_vanderwaerden2nd(k1,k2,n,
  sconcat("VanDerWaerden_pd_2-",k1,"-",k2,"_",n,".cnf"))$


/* Standardising the variables according to lexicographical order 
   nbv(1,1),...,nbv(1,m),nbv(2,1), ..., nbv(n,m):
*/
output_vanderwaerden(L,n,filename) := block(
 [FF : vanderwaerden_aloamo_stdfcl(L,n)],
  output_fcl_v(
    sconcat("Van der Waerden problem: ", length(L), " parts with arithmetic progressions of sizes ", L, ", and ", n, " elements.", newline, "C Using the direct (strong) translation.", newline, "c Created by output_vanderwaerden(", L, ",", n, ",\"", filename, "\").", newline, "c ", created_by_OKlib()), 
    FF[1],
    filename,
    FF[2]))$
output_vanderwaerden_stdname(L,n) := output_vanderwaerden(L,n,
  sconcat("VanDerWaerden_",length(L),apply(sconcat,map(sconcat,create_list("-",i,1,length(L)),L)),"_",n,".cnf"))$

output_vanderwaerden_standnest(L,n,filename) := block(
 [FF : vanderwaerden_standnest_stdfcl(L,n)],
  output_fcl_v(
    sconcat("Van der Waerden problem: ", length(L), " parts with arithmetic progressions of sizes ", L, ", and ", n, " elements.
c Using the weak standard nested translation.", newline, "c Created by output_vanderwaerden_standnest(", L, ",", n, ",\"", filename, "\").", newline, "c ", created_by_OKlib()), 
    FF[1],
    filename,
    FF[2]))$
output_vanderwaerden_standnest_stdname(L,n) := output_vanderwaerden_standnest(L,n,
  sconcat("VanDerWaerden_N_",length(L),apply(sconcat,map(sconcat,create_list("-",i,1,length(L)),L)),"_",n,".cnf"))$

output_vanderwaerden_standnest_strong(L,n,filename) := block(
 [FF : vanderwaerden_standnest_strong_stdfcl(L,n)],
  output_fcl_v(
    sconcat("Van der Waerden problem: ", length(L), " parts with arithmetic progressions of sizes ", L, ", and ", n, " elements.
c Using the strong standard nested translation.", newline, "c Created by output_vanderwaerden_standnest_strong(", L, ",", n, ",\"", filename, "\").", newline, "c ", created_by_OKlib()), 
    FF[1],
    filename,
    FF[2]))$
output_vanderwaerden_standnest_strong_stdname(L,n) := output_vanderwaerden_standnest_strong(L,n,
  sconcat("VanDerWaerden_SN_",length(L),apply(sconcat,map(sconcat,create_list("-",i,1,length(L)),L)),"_",n,".cnf"))$



/*!
\endhtmlonly
*/
