/* Matthew Gwynne, 26.8.2011 (Swansea) */
/* Copyright 2011, 2012 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Generators/tests/Pigeonhole.mac
  \brief Tests for pigeonhole-generators

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/tests/Pigeonhole.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/Pigeonhole.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Hypergraphs.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Statistics.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$

kill(f)$


/* ***********************
   * Pigeonhole formulas *
   ***********************
*/

/* Measures */

okltest_nvar_php(f) := block(
 for m : 0 thru 6 do
  for n : 0 thru 6 do
   assert(f(m,n) = nvar_fcs(weak_php_fcs(m,n))),
 true)$

okltest_ncl_list_weak_php(f) := block(
 for m : 0 thru 6 do
  for n : 0 thru 6 do
   assert(f(m,n) = ncl_list_fcs(weak_php_fcs(m,n))),
 true
)$

okltest_ncl_weak_php(f) := block(
 for m : 0 thru 6 do
  for n : 0 thru 6 do
   assert(f(m,n) = ncl_fcs(weak_php_fcs(m,n))),
 true
)$

okltest_deficiency_weak_php(f) := block(
 for m : 0 thru 6 do
  for n : 0 thru 6 do
   assert(f(m,n) = deficiency_fcs(weak_php_fcs(m,n))),
 true
)$

/* Extended Resolution */

okltest_var_php2ephp_sm(f) := block(
  assert(f(0) = {}),
  true)$

okltest_var_ephp2php_sm(f) := block(
  assert(f(0) = {}),
  true)$

okltest_php_induction_step_cl(f) := block(
  for i in [0] do
      assert(f(i) = []),
  assert(f(1) =
    [{php_ext(1,1,1),-php_ext(2,1,1)},{php_ext(1,1,1),-php_ext(2,1,2),
     -php_ext(2,3,1)},{-php_ext(1,1,1),php_ext(2,1,1),php_ext(2,1,2)},
     {-php_ext(1,1,1),php_ext(2,1,1),php_ext(2,3,1)},{php_ext(1,2,1),
     -php_ext(2,2,1)},{php_ext(1,2,1),-php_ext(2,2,2),-php_ext(2,3,1)},
     {-php_ext(1,2,1),php_ext(2,2,1),php_ext(2,2,2)},{-php_ext(1,2,1),
     php_ext(2,2,1),php_ext(2,3,1)}]),
  true)$

okltest_php_induction_cl(f) := block(
  for i in [0,1] do
    assert(f(i) = []),
  assert(f(2) =
    [{php_ext(1,1,1),-php(1,1)},{php_ext(1,1,1),-php(1,2),-php(3,1)},
     {-php_ext(1,1,1),php(1,1),php(1,2)},{-php_ext(1,1,1),php(1,1),php(3,1)},
     {php_ext(1,2,1),-php(2,1)},{php_ext(1,2,1),-php(2,2),-php(3,1)},
     {-php_ext(1,2,1),php(2,1),php(2,2)},{-php_ext(1,2,1),php(2,1),php(3,1)}]),
  true)$

okltest_weak_php_unsat_ext_uni_fcs(f) := block(
  assert(
    okltest_weak_php_unsat_ext_fcs(
      buildq([f], lambda([m],
          cs2fcs(
            substitute_cl(f(m)[2], sm2hm(var_ephp2php_sm(m)))))))),
  true)$

okltest_weak_php_unsat_ext_fcs(f) := block(
  for i in [0,1] do
    assert(f(i) = weak_php_fcs(i+1,i)),
  assert(f(2) =
    [{php(1,1),php(1,2),php(2,1),php_ext(1,1,1),php(2,2),php_ext(1,2,1),
      php(3,1),php(3,2)},
     {{-php(1,1),-php(2,1)},{-php(1,1),php_ext(1,1,1)},{-php(1,1),-php(3,1)},
      {php(1,1),php(1,2)},{php(1,1),php(1,2),-php_ext(1,1,1)},
      {php(1,1),-php_ext(1,1,1),php(3,1)},{-php(1,2),php_ext(1,1,1),-php(3,1)},
      {-php(1,2),-php(2,2)},{-php(1,2),-php(3,2)},{-php(2,1),php_ext(1,2,1)},
      {-php(2,1),-php(3,1)},{php(2,1),php(2,2)},{php(2,1),php(2,2),
       -php_ext(1,2,1)}, {php(2,1),-php_ext(1,2,1),php(3,1)},{-php(2,2),
       php_ext(1,2,1),-php(3,1)},{-php(2,2),-php(3,2)},{php(3,1),php(3,2)}}]),
  true)$

okltest_weak_php_unsat_ext_stdfcs(f) := block(
  for i in [0,1] do
    assert(f(i) = standardise_fcs(weak_php_fcs(i+1,i))[1]),
  assert(f(2)=
    [{1,2,3,4,5,6,7,8},
       {{-8,-6},{-8,-4},{-7,-6,2},{-7,-5},{-7,-4,1},{-7,-3},{-6,-4},
        {-5,-3},{-5,2},{-3,1},{-2,5,6},{-2,5,7},{-1,3,4},{-1,3,7},
        {3,4},{5,6},{7,8}}]),
  true)$

okltest_nvar_weak_php_unsat_ext(f) := block(
  assert(f(1) = 2),
  for i : 2 thru 4 do
    assert(f(i) = length(weak_php_unsat_ext_fcs(i)[1])),
  if oklib_level = 0 then return(true),
  for i : 5 thru 7 do
    assert(f(i) = length(weak_php_unsat_ext_fcs(i)[1])),
  true)$

okltest_ncl_weak_php_unsat_ext(f) := block(
  assert(f(1) = 3),
  for i : 2 thru 4 do
    assert(f(i) = length(weak_php_unsat_ext_fcs(i)[2])),
  if oklib_level = 0 then return(true),
  for i : 5 thru 7 do
    assert(f(i) = length(weak_php_unsat_ext_fcs(i)[2])),
  true)$


/*!
\endhtmlonly
*/
