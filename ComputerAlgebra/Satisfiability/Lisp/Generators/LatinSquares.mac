/* Matthew Henderson, 1.10.2008 (Berea) */
/* Copyright 2008, 2009, 2020 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Generators/LatinSquares.mac
  \brief Generation of Latin square completion problems.

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/LatinSquares.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$


/* *****************************************
   * Latin square problems as SAT problems *
   *****************************************
*/

/* Variables are "ls(i,j,k)", meaning that field (i,j) carries number k: */
kill(ls)$
declare(ls, noun)$
declare(ls, posfun)$
ls_var(i,j,k) := nounify(ls)(i,j,k)$

/* The set of variables for latin square formulas of dimension p: */
var_ls(p) := block([N : p],
 setify(create_list(ls_var(i,j,k), i,1,N, j,1,N, k,1,N)))$

/* In the following p denotes the dimension. */

/* Different numbers in each row: */
ls_different_rows(p) := block([N : p],
 setify(create_list({- ls_var(i,j1,k), - ls_var(i,j2,k)}, i,1,N, k,1,N, j1,1,N-1, j2,j1+1,N)))$

/* Different numbers in each column: */
ls_different_columns(p) := block([N : p],
 setify(create_list({- ls_var(i1,j,k), - ls_var(i2,j,k)}, j,1,N, k,1,N, i1,1,N-1, i2,i1+1,N)))$


/* Given box coordinates 1 <= i,j <= p, the list of coordinates of fields: */
ls_positions_box(i,j,p) := block(
 [row_offset : p * (i-1), column_offset : p * (j-1)],
 create_list([row_offset + r, column_offset + c], r,1,p, c,1,p))$

/* Every field carries a number: */
ls_all_fields(p) := block([N : p],
 setify(create_list(setify(create_list(ls_var(i,j,k), k,1,N)), i,1,N, j,1,N)))$

/* The latin square problem (weak form) as formal clause-set: */
weak_ls(p) := [var_ls(p), 
 union(ls_different_rows(p), ls_different_columns(p), ls_all_fields(p))]$

output_weak_ls(p,filename) := block([FF : standardise_fcs(weak_ls(p))],
  output_fcs_v(
    sconcat("The Latin square problem (weak form) with dimension ", p, "."), 
    FF[1],
    filename,
    FF[2]))$

/* Every row contains all numbers: */
ls_all_rows(p) := block([N : p],
 setify(create_list(setify(create_list(ls_var(i,j,k),j,1,N)), i,1,N, k,1,N)))$

/* Every column contains all numbers: */
ls_all_columns(p) := block([N : p],
 setify(create_list(setify(create_list(ls_var(i,j,k),i,1,N)), j,1,N, k,1,N)))$

/* Every field carries a different number: */
ls_different_fields(p) := block([N : p],
  setify(create_list({-ls_var(i,j,k1), -ls_var(i,j,k2)}, i,1,N, j,1,N, k1,1,N-1, k2,k1+1,N)))$

/* The latin square problem (dual weak form) as formal clause-set: */
dual_weak_ls(p) := [var_ls(p), 
 union(ls_all_rows(p), ls_all_columns(p), ls_different_fields(p))]$

output_dual_weak_ls(p,filename) := block([FF : standardise_fcs(dual_weak_ls(p))],
  output_fcs_v(
    sconcat("The Latin square problem (dual weak form) with dimension ", p, "."), 
    FF[1],
    filename,
    FF[2]))$


/* The strong Latin square problem as formal clause-set: */
strong_ls(p) := [var_ls(p), 
 union(weak_ls(p)[2], dual_weak_ls(p)[2])]$

output_strong_ls(p,filename) := block([FF : standardise_fcs(strong_ls(p))],
  output_fcs_v(
    sconcat("The Latin square problem (strong form) with dimension ", p, "."), 
    FF[1],
    filename,
    FF[2]))$
/* This is the same as the full (unreduced) representation of a single
   latin square in LatinSquares/Mols.cpp.
*/


/* ****************************
   * Orthogonality conditions *
   ****************************
*/

/* Now a partially filled out latin square A is given, and
   a latin square B is sought, which is orthogonal to B.
   Matrix A is given as a square Maxima matrix of dimension p,
   with entries from {1,...,p}, and additionaly 0 for empty
   squares. For the values k in {1,...,p} the set C(k) for
   coordinates (i,j) with A[i,j] = k are computed, and then
   the orthogonality conditions are just that all C(k) must
   be "multicoloured" (all values for the fields of C(k) must be different).
*/
/* Given A, compute the negative orthogonality conditions as boolean
   clause-set:
*/
orthogonality_cond_ls(A) := block([p : matrix_size(A)[1], a],
  a : l2ary(create_list([],i,1,p)),
  for i : 1 thru p do
    for j : 1 thru p do block([v : A[i,j]],
      if not(v = 0) then
        a[v] : cons([i,j], a[v])),
  return(setify(
    create_list({-ls_var(P[1][1],P[1][2],k2),-ls_var(P[2][1],P[2][2],k2)},
         k,1,p, P,listify(map(listify,powerset(setify(a[k]),2))), k2,1,p))))$
/* The positive orthogonality conditions as formal boolean
   clause-set:
*/
orthogonality_dualcond_ls(A) := block([p : matrix_size(A)[1], a],
  a : l2ary(create_list([],i,1,p)),
  for i : 1 thru p do
    for j : 1 thru p do block([v : A[i,j]],
      if not(v = 0) then
        a[v] : cons([i,j], a[v])),
  return(setify(
    create_list(setify(create_list(ls_var(x[1],x[2],k), x,a[t])),
        t,1,p, k,1,p))))$

orthogonality_strongcond_ls(A) := 
  union(orthogonality_cond_ls(A), orthogonality_dualcond_ls(A))$

row_symmetrybreaking_ls(p) := setify(create_list({ls_var(i,1,i)},i,1,p))$

exluding_solution_ls(A) := block([p : matrix_size(A)[1]],
  setify(create_list(-ls_var(i,j,A[i,j]), i,1,p, j,1,p)))$


/*!
\endhtmlonly
*/

