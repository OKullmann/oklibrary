/* Matthew Gwynne, 23.9.2011 (Swansea) */
/* Copyright 2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Resolution/tests/Proofs.mac
  \brief Tests related to resolution proofs

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Resolution/tests/Proofs.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Trees/Lisp/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/Pigeonhole.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Backtracking/DLL_solvers.mac")$

kill(f)$

/* ************************************
   * Checking the defining properties *
   ************************************
*/

okltest_resl_p(f) := block(
  assert(f(1) = false),
  assert(f([]) = true),
  assert(f([1]) = false),
  assert(f([{1},1]) = false),
  assert(f([{}]) = true),
  assert(f([{1}]) = true),
  assert(f([{1},{2},{-3}]) = true),
  assert(f([{-1},{1},[{},[1,2]]]) = true),
  assert(f([{-1},{-2},{1,2},[{1},[2,3]],[{},[1,4]]]) = true),
  assert(f([{-1},{1},[{},[1,3]]]) = false),
  assert(f([{-1},{1},[{},["s",3]]]) = false),
  assert(f([{-1},{1},[{},[-1,2]]]) = false),
  assert(f([{-1},{1},{1,2},{1,4},[{},[1,2]]]) = true),
  assert(f([{-1},{1},{1,2},{1,4},[{},[1,2]],{3}]) = true),
  assert(f([{-1},{1},{1,2},{1,4},[{},[1,2]],[{},[1,2]]]) = true),
  assert(f([{-1},{1},{1,2},{1,4},[{},[1,2]],[{},[3,4]]]) = false),
  true)$

okltest_resl_ref_p(f) := block(
  assert(f(1) = false),
  assert(f([]) = false),
  assert(f([1]) = false),
  assert(f([{1},1]) = false),
  assert(f([{}]) = true),
  assert(f([{1}]) = false),
  assert(f([{1},{2},{-3}]) = false),
  assert(f([{-1},{1},[{},[1,2]]]) = true),
  assert(f([{-1},{-2},{1,2},[{1},[2,3]],[{},[1,4]]]) = true),
  assert(f([{-1},{1},[{},[1,3]]]) = false),
  assert(f([{-1},{1},[{},["s",3]]]) = false),
  assert(f([{-1},{1},[{},[-1,2]]]) = false),
  assert(f([{-1},{1},{1,2},{1,4},[{},[1,2]]]) = true),
  assert(f([{-1},{1},{1,2},{1,4},[{},[1,2]],{3}]) = true),
  assert(f([{-1},{1},{1,2},{1,4},[{},[1,2]],[{},[1,2]]]) = true),
  assert(f([{-1},{1},{1,2},{1,4},[{},[1,2]],[{},[3,4]]]) = false),
  true)$

okltest_reslrt_p(f) := block(
  assert(f([{}]) = true),
  assert(f([{1}]) = true),
  assert(f([{-1}]) = true),
  assert(f([{2}]) = true),
  assert(f([[1]]) = false),
  assert(f([{},[{1}],[{-1}]]) = true),
  assert(f([{},[{1}],[{1}]]) = false),
  assert(f([{},[{}],[{}]]) = false),
  assert(f([{},[{1}],[{-1}],[{1}]]) = false),
  assert(f([{1},[{1,2}],[{-2}]]) = true),
  assert(f([{1},[{1,2},[{1,2,3}],[{1,2,-3}]],[{-2},[{1,-2}],[{-1,-2}]]]) = true),
  assert(f([{},[{1,2},[{1,2,3}],[{1,2,-3}]],[{-2},[{1,-2}],[{-1,-2}]]]) = false),
  assert(f([{1},[{1,2},[{1,2,3}],[{1,2,-3}]],[{-2}]]) = true),
  assert(f([{1},[{1,2},[{1,2,3}],[{1,2,-3}],[{1,2}]],[{-2}]]) = false),
  if oklib_test_level = 0 then return(true),
  for m : 1 thru 3 do
    assert(f(splitting2resolution_tree(
          dll_simplest_st(
            weak_php_fcs(m+1,m),
            dll_heuristics_first_formal),weak_php_fcs(m+1,m)[2])) = true),
  true)$


/* ************************************
   * Extraction                       *
   ************************************
*/


okltest_axioms_resl2cl(f) := block(
  assert(f([]) = []),
  assert(f([{}]) = [{}]),
  assert(f([{1}]) = [{1}]),
  assert(f([{1},{2},{-3}]) = [{1},{2},{-3}]),
  assert(f([{-1},{1},[{},[1,2]]]) = [{-1},{1}]),
  assert(f([{-1},{-2},{1,2},[{1},[2,3]],[{},[1,4]]]) = [{-1},{-2},{1,2}]),
  assert(f([{-1},{1},{1,2},{1,4},[{},[1,2]]]) = [{-1},{1},{1,2},{1,4}]),
  assert(
    f([{-1},{1},{1,2},{1,4},[{},[1,2]],{3}]) = [{-1},{1},{1,2},{1,4},{3}]),
  assert(
    f([{-1},{1},{1,2},{1,4},[{},[1,2]],[{},[1,2]]]) = [{-1},{1},{1,2},{1,4}]),
  true)$

okltest_resolvents_resl2cl(f) := block(
  assert(f([]) = []),
  assert(f([{}]) = []),
  assert(f([{1}]) = []),
  assert(f([{1},{2},{-3}]) = []),
  assert(f([{-1},{1},[{},[1,2]]]) = [{}]),
  assert(f([{-1},{-2},{1,2},[{1},[2,3]],[{},[1,4]]]) = [{1},{}]),
  assert(f([{-1},{1},{1,2},{1,4},[{},[1,2]]]) = [{}]),
  assert(f([{-1},{1},{1,2},{1,4},[{},[1,2]],{3}]) = [{}]),
  assert(f([{-1},{1},{1,2},{1,4},[{},[1,2]],{3}]) = [{}]),
  assert(f([{-1},{1},{1,2},{1,4},[{},[1,2]],[{},[1,2]]]) = [{},{}]),
  true)$

/*!
\endhtmlonly
*/
