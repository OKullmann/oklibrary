/* Oliver Kullmann, 27.3.2008 (Swansea) */
/* Copyright 2008, 2010, 2011, 2012 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Resolution/tests/Basics.mac
  \brief Tests for basic resolution functionality

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Resolution/tests/Basics.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$

kill(f)$


/* ***************************
   * Single resolution steps *
   ***************************
*/

okltest_resolvable(f) := (
  assert(f({},{}) = false),
  assert(f({1},{}) = false),
  assert(f({},{1}) = false),
  assert(f({1},{-1}) = true),
  assert(f({1,-2,3},{1,2,4}) = true),
  assert(f({1,2},{2,3,4}) = false),
  true)$

okltest_resolution_literal(f) := (
  assert(f({1},{-1}) = 1),
  assert(f({1,2,-3},{2,3,-4}) = -3),
  true)$

okltest_resolvable_p(f) := (
  assert(f({},{}) = []),
  assert(f({1},{}) = []),
  assert(f({},{1}) = []),
  assert(f({1},{-1}) = [1]),
  assert(f({1,-2,3},{1,2,4}) = [-2]),
  assert(f({1,2},{2,3,4}) = []),
  true)$

okltest_two_subsumption_resolvent_p(f) := (
  assert(f({},{}) = []),
  assert(f({1},{-1}) = [{}]),
  assert(f({1},{-1,2}) = []),
  assert(f({1},{2}) = []),
  assert(f({1,2},{-1,2}) = [{2}]),
  assert(f({1,2},{-1,-2}) = []),
  true)$


/* *************************
   * Adding all resolvents *
   *************************
*/

okltest_resolvable_cs(f) := (
  assert(f({}) = {}),
  assert(f({{}}) = {}),
  assert(f({{1}}) = {}),
  assert(f({{1},{-1}}) = {{{1},{-1}}}),
  assert(f({{1},{-1},{}}) = {{{1},{-1}}}),
  assert(f({{1,2},{-1,2},{-1,-2}}) = {{{1,2},{-1,2}},{{-1,2},{-1,-2}}}),
  for n : 0 thru 4 do block([F : full_fcs(n)[2]],
    assert(length(f(F)) = 2^n * n / 2)),
  true)$

okltest_two_subsumption_resolvable_cs(f) := (
  assert(f({}) = {}),
  assert(f({{}}) = {}),
  assert(f({{1}}) = {}),
  assert(f({{1},{-1}}) = {{{1},{-1}}}),
  assert(f({{1},{-1},{}}) = {{{1},{-1}}}),
  assert(f({{1,2},{-1,2},{-1,-2}}) = {{{1,2},{-1,2}},{{-1,2},{-1,-2}}}),
  assert(f({{1,2},{-1,2},{-1,-2},{1}}) = {{{1,2},{-1,2}},{{-1,2},{-1,-2}}}),
  for n : 0 thru 4 do block([F : full_fcs(n)[2]],
    assert(length(f(F)) = 2^n * n / 2)),
  true)$

okltest_two_subsumption_resolvents_rem_cs(f) := (
  assert(f({}) = [{},{}]),
  assert(f({{}}) = [{},{{}}]),
  assert(f({{1}}) = [{},{{1}}]),
  assert(f({{1},{-1}}) = [{{}},{}]),
  assert(f({{1,2},{1,-2}}) = [{{1}},{}]),
  assert(f({{1,2},{-1,-2}}) = [{},{{1,2},{-1,-2}}]),
  true)$


/* *****************
   * DP resolution *
   *****************
*/

okltest_dp_operator(f) := (
  assert(f({},1) = {}),
  assert(f({{}},1) = {{}}),
  assert(f({{1}},1) = {}),
  assert(f({{1}},2) = {{1}}),
  assert(f({{1},{-1}},1) = {{}}),
  assert(f({{1},{-1}},2) = {{1},{-1}}),
  block([n : 4, F],
    F : full_fcs(n)[2],
    for v : n thru 1 step -1 do (
      F : f(F,v),
      assert(F = full_fcs(v-1)[2]))),
  true)$

okltest_dp_operator_fcs(f) := (
  assert(f([{},{}],1) = [{},{}]),
  assert(f([{},{{}}],1) = [{},{{}}]),
  assert(f([{1},{}],1) = [{},{}]),
  assert(f([{1},{{}}],1) = [{},{{}}]),
  assert(f([{2},{}],1) = [{2},{}]),
  assert(f([{2},{{}}],1) = [{2},{{}}]),
  assert(okltest_dp_operator(buildq([f], lambda([F,v], fcs2cs(f(cs2fcs(F),v))))) = true),
  true)$

okltest_distribution_min_dp(f) := block(
  assert(f([{},{}]) = [[0,1]]),
  assert(f([{},{{}}]) = [[1,1]]),
  assert(f([{1},{}]) = [[0,1]]),
  assert(f([{1},{{}}]) = [[2,1]]),
  assert(f([{1},{{1}}]) = [[1,1]]),
  assert(f([{1},{{1},{-1}}]) = [[3,1]]),
  assert(f([{1},{{},{1},{-1}}]) = [[4,1]]),
  assert(f([{1,2},{{1,2},{-1,2},{-1,-2}}]) = [[4,2]]),
  assert(f([{1,2},{{1},{1,2},{-1,2},{-1,-2}}]) = [[7,2]]),
  for n : 0 thru if oklib_test_level=0 then 3 else 4 do 
   block([FF : full_fcs(n)],
    assert(f(FF) = [[2^(n+1)-1,n!]])),
  true)$


/* *******************
   * Blocked clauses *
   *******************
*/


okltest_blocking_literal_p(f) := block(
  assert(f({{1}},{1},1)),
  assert(not(f({},{},1))),
  assert(not(f({{}},{},1))),
  assert(not(f({{1},{-1}},{1},1))),
  assert(f({{1,2},{1,-2,-3},{-1,3}},{1,-2,-3},1)),
  assert(f({{1,2},{1,-2,-3},{-1,3}},{1,-2,-3},-3)),
  assert(not(f({{1,2},{1,-2,-3},{-1,3}},{1,-2,-3},3))),
  true)$

okltest_blocked_cs_p(f) := block(
  assert(f({{1}},{1})),
  assert(not(f({},{}))),
  assert(not(f({{}},{}))),
  assert(not(f({{1},{-1}},{1}))),
  assert(f({{1,2},{1,-2,-3},{-1,3}},{1,-2,-3})),
  assert(f({{1,2},{1,-2,-3},{-1,3}},{1,-2,-3})),
  for i : 1 thru 3 do block([F : full_cs(i)],
    for C in F do assert(not(f(F,C)))),
  for i : 1 thru 3 do block([F : setify(even_parity_cl(i))],
    for C in F do assert(f(F,C))),
  true)$

okltest_elim_blocked_cs(f) := block(
  assert(f({{1}}) = {}),
  assert(f({}) = {}),
  assert(f({{1},{-1}}) = {{1},{-1}}),
  assert(f({{1,2},{1,-2,-3},{-1,3}}) = {}),
  for i : 1 thru 3 do block([F : full_cs(i)],
    assert(f(F) = F)),
  for i : 1 thru 3 do block([F : setify(even_parity_cl(i))],
    assert(f(F) = {})),
  true)$

okltest_blocked_extension_cs_p(f) := block(
  assert(f({},{})),
  assert(f({{1}},{{1}})),
  assert(f({{1}},{})),
  assert(not(f({{-1}},{{1}}))),
  for i : 1 thru 3 do block([F : full_cs(i)],
    assert(f(F,F))),
  for i : 1 thru 3 do block([F : setify(even_parity_cl(i))],
    assert(f(F,{})),
    assert(not(f(F,setify(odd_parity_cl(i)))))),
  true)$

/*!
\endhtmlonly
*/
