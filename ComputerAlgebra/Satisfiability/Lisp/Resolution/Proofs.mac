/* Oliver Kullmann, 23.9.2011 (Swansea) */
/* Copyright 2011, 2012 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Resolution/Proofs.mac
  \brief Components for handling resolution proofs

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Resolution/Proofs.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Trees/Lisp/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Resolution/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/Pigeonhole.mac")$



/* ******************
   * Basic concepts *
   ******************
*/

/*

  A "resolution proof as a list" ("resl") is a list, where each entry is
  either a clause (an "axiom") or a pair consisting of a clause
  (the "resolvent") and a pair of (smaller) indices (the indices of the
  "parent clauses").

  A "resolution tree" ("reslrt") is a labelled rooted tree (lrt) T where T is
  a binary tree such that each inner node is the resolvent of its two children.
  The notion of an lrt is defined in ComputerAlgebra/Trees/Lisp/Basics.mac.

*/


/* ************************************
   * Checking the defining properties *
   ************************************
*/

/* Is list L a resolution proof as a list: */
resl_p(L) := listp(L) and block([is_resl : true, L_i],
  for i : 1 thru length(L) while is_resl do (
    L_i : L[i],
    is_resl : c_p(L_i) or
      (listp(L_i) and is(length(L_i) = 2) and
        c_p(L_i[1]) and listp(L_i[2]) and block([ind_l : L_i[2]],
          is(length(ind_l) = 2) and integerp(ind_l[1]) and integerp(ind_l[2])
          and is(0 < ind_l[1]) and is(ind_l[1] < i) and is(0 < ind_l[2]) and
          is(ind_l[2] < i) and
          if c_p(L[ind_l[1]]) and c_p(L[ind_l[2]]) then
            (resolvable(L[ind_l[1]],L[ind_l[2]]) and
             is(resolvent(L[ind_l[1]],L[ind_l[2]]) = L_i[1]))
          else if c_p(L[ind_l[1]]) and not(c_p(L[ind_l[2]])) then
            (resolvable(L[ind_l[1]],L[ind_l[2]][1]) and
             is(resolvent(L[ind_l[1]],L[ind_l[2]][1]) = L_i[1]))
          else if not(c_p(L[ind_l[1]])) and c_p(L[ind_l[2]]) then
            (resolvable(L[ind_l[1]][1],L[ind_l[2]]) and
             is(resolvent(L[ind_l[1]][1],L[ind_l[2]]) = L_i[1]))
          else
            (resolvable(L[ind_l[1]][1],L[ind_l[2]][1]) and
             is(resolvent(L[ind_l[1]][1],L[ind_l[2]][1]) = L_i[1])) ))),
    return(is_resl))$

/* Is list L a resolution refutation as a list: */
resl_ref_p(L) :=
  resl_p(L) and (member({},L) or member({}, resolvents_resl2cl(L)))$

/* Is T a "resolution tree": */
reslrt_p(T) := listp(T) and
  if length(T) = 1 then c_p(T[1]) /* Leaves must be clauses */
  else is(length(T) = 3) and c_p(T[1]) and
       reslrt_p(T[2]) and reslrt_p(T[3]) and
       resolvable(T[2][1],T[3][1]) and is(resolvent(T[2][1],T[3][1]) = T[1])$


/* ************************************
   * Extraction                       *
   ************************************
*/

/* Axioms of a resolution list as a clause-list: */
axioms_resl2cl(L) := sublist(L,c_p)$

/* Resolvents of a resolution list as a clause-list: */
resolvents_resl2cl(L) := map(lambda([a],a[1]), sublist(L,listp))$


/* ************************************
   * Generators                       *
   ************************************
*/


/* A polynomial-size resolution proof for weak_php_unsat_ext_fcs(n): */
php_ext_uni_resl(n) := block([axioms, resolvents_cl : [], c2i_h : sm2hm({}), p2q_h : sm2hm({})],
  axioms : weak_php_unsat_ext_uni_fcs(n),
  /* Create all the resolutions storing explicitly the clauses, not indices;
     we map clauses to indices later. */
  /* Small clauses for each level */
  resolvents_cl : append(resolvents_cl, reverse(
    create_list(
      [[{-php_ext_var(l,i,j),php_ext_var(l+1,i,j),-php_ext_var(l+1,k,j)},
         [{-php_ext_var(l,i,j),php_ext_var(l+1,i,j),php_ext_var(l+1,l+1,j)},
           {-php_ext_var(l+1,l+1,j), -php_ext_var(l+1,k,j)}]],
       [{-php_ext_var(l,i,j),-php_ext_var(l+1,k,j)},
         [{-php_ext_var(l,i,j),php_ext_var(l+1,i,j),-php_ext_var(l+1,k,j)},
           {-php_ext_var(l+1,i,j), -php_ext_var(l+1,k,j)}]],
       [{-php_ext_var(l,k,j),php_ext_var(l+1,k,j),-php_ext_var(l+1,i,j)},
         [{-php_ext_var(l,k,j),php_ext_var(l+1,k,j),php_ext_var(l+1,l+1,j)},
           {-php_ext_var(l+1,l+1,j), -php_ext_var(l+1,i,j)}]],
       [{-php_ext_var(l,k,j),-php_ext_var(l+1,i,j)},
         [{-php_ext_var(l,k,j),php_ext_var(l+1,k,j),-php_ext_var(l+1,i,j)},
           {-php_ext_var(l+1,i,j), -php_ext_var(l+1,k,j)}]],
       [{-php_ext_var(l,k,j),-php_ext_var(l,i,j),php_ext_var(l+1,k,l)},
         [{-php_ext_var(l,k,j),php_ext_var(l+1,k,j),php_ext_var(l+1,k,l)},
           {-php_ext_var(l,i,j),-php_ext_var(l+1,k,j)}]],
       [{-php_ext_var(l,k,j),-php_ext_var(l,i,j),php_ext_var(l+1,i,l)},
         [{-php_ext_var(l,i,j),php_ext_var(l+1,i,j),php_ext_var(l+1,i,l)},
           {-php_ext_var(l,k,j),-php_ext_var(l+1,i,j)}]],
       [{-php_ext_var(l,k,j),-php_ext_var(l,i,j),-php_ext_var(l+1,k,l)},
         [{-php_ext_var(l,k,j),-php_ext_var(l,i,j),php_ext_var(l+1,i,l)},
           {-php_ext_var(l+1,k,l),-php_ext_var(l+1,i,l)}]],
       [{-php_ext_var(l,k,j),-php_ext_var(l,i,j)},
         [{-php_ext_var(l,k,j),-php_ext_var(l,i,j),-php_ext_var(l+1,k,l)},
          {-php_ext_var(l,k,j),-php_ext_var(l,i,j),php_ext_var(l+1,k,l)}]]],
       l,1,n, i,1,l, j, 1,l-1, k, 1, i-1))),
  /* Long clauses for each level */
  resolvents_cl : append(resolvents_cl, lappend( reverse(
    create_list(
      append(
        create_list(
          [[ setify(
               append(
                 create_list(php_ext_var(l,i,j_t), j_t, 1, j),
                 create_list(php_ext_var(l+1,i,j_t), j_t, j+1, l))),
             [setify(
               append(
                 create_list(php_ext_var(l,i,j_t), j_t, 1, j-1),
                 create_list(php_ext_var(l+1,i,j_t), j_t, j, l))),
             {php_ext_var(l,i,j),-php_ext_var(l+1,i,j)} ]]],
          i, 1, l, j, 1, l-1),
        create_list(
          [[ setify(
               append(
                 create_list(php_ext_var(l,i,j_t), j_t, 1, j),
                 create_list(php_ext_var(l+1,l+1,j_t), j_t, j+1, l),
                 [-php_ext_var(l+1,i,l)])),
             [setify(
               append(
                 create_list(php_ext_var(l,i,j_t), j_t, 1, j-1),
                 create_list(php_ext_var(l+1,l+1,j_t), j_t, j, l),
                 if j > 1 then [-php_ext_var(l+1,i,l)] else [])),
             {php_ext_var(l,i,j),-php_ext_var(l+1,i,l),-php_ext_var(l+1,l+1,j)} ]]],
          i,1,l,j, 1, l-1),
        create_list(
          [[ setify(
               append(
                 create_list(php_ext_var(l,i,j_t), j_t, 1, l-1),
                 [-php_ext_var(l+1,i,l)])),
             [setify(
               append(
                 create_list(php_ext_var(l,i,j_t), j_t, 1, l-1),
                 [php_ext_var(l+1,l+1,l),-php_ext_var(l+1,i,l)])),
             {-php_ext_var(l+1,i,l),-php_ext_var(l+1,l+1,l)} ]]],
          i,1,l),
        create_list(
          [[ setify(
             create_list(php_ext_var(l,i,j_t), j_t, 1, l-1)),
             [setify(
               append(
                 create_list(php_ext_var(l,i,j_t), j_t, 1, l-1),
                 [-php_ext_var(l+1,i,l)])),
              setify(
               append(
                 create_list(php_ext_var(l,i,j_t), j_t, 1, l-1),
                 [php_ext_var(l+1,i,l)])) ]]],
          i,1,l)),
    l,2,n)))),
  /* Finally derive the empty clause: */
  if n > 0 then
    resolvents_cl : append(resolvents_cl,
      [[[ {-php_ext_var(2,2,1)},
       [{-php_ext_var(2,1,1), -php_ext_var(2,2,1)},
       {php_ext_var(2,1,1)}]],
       [{},
         [{php_ext_var(2,2,1)},
         {-php_ext_var(2,2,1)}]]]]),
  /* Map clauses to indices and php_ext_var(n+1,i,j) to php_var(i,j) */
  resolvents_cl : append(listify(axioms[2]),lappend(resolvents_cl)),
  resolvents_cl : map(
    lambda([R,i],
      if c_p(R) then (set_hm(c2i_h,R,i), R)
      else (set_hm(c2i_h, R[1], i),
            [R[1], map(lambda([C],ev_hm(c2i_h,C)),R[2])])),
    resolvents_cl,
    create_list(i,i,1,length(resolvents_cl))),
  return(resolvents_cl))$




/*!
\endhtmlonly
*/
