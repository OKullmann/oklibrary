/* Matthew Gwynne, 16.7.2009 (Swansea) */
/* Copyright 2009, 2010, 2011, 2012 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/PseudoBoolean/tests/CardinalityConstraints.mac
  \brief Tests for translations of cardinality constraints into CNF

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/PseudoBoolean/tests/CardinalityConstraints.mac");

  \bug DONE All tests regarding UCP (and unary encoding) must be removed.
  <ul>
   <li> MG : All tests? Or just those relating to the unproven
   assertion that any forced assignment follows by UCP (and not just forced
   assignments under partial assignments using only the original
   variables)? </li>
   <li> All tests: UCP has nothing to do with these functions. </li>
  </ul>


  \todo DONE The text below regarding unary encoding needs a complete update.
  <ul>
   <li> Tests are now in line with other tests and any specification
   necessary is done in the main Cardinality.mac file. </li>
  </ul>


  \bug DONE okltest_unary_bb_totaliser_r_fcl_comb is a no-op

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/PseudoBoolean/CardinalityConstraints.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Reductions/UnitClausePropagation.mac")$

kill(f)$


/* ***************************************
   * Simplifying cardinality constraints *
   ***************************************
*/

okltest_crd2scrd(f) := block([a,b],
  assert(f([a,[],b]) =  [a,[],b]),
  assert(f([a,[1,2,-1,-2,1,3,2],b]) = [a, [[1,2],[2,2],[-2,1],[-1,1],[3,1]], b]),
  true)$

okltest_scrd2crd(f) := block([a,b],
  assert(f([a,[],b]) =  [a,[],b]),
  assert(f([a, [[1,2],[2,2],[-2,1],[-1,1],[3,1]], b]) =
    [a,[1,1,2,2,-2,-1,3],b]),
  true)$

okltest_remove_tautologies_scrd(f) := block([a,b],
  assert(f([a,[],b]) = [a,[],b]),
  assert(f([a,[[1,1]],b]) = [a,[[1,1]],b]),
  assert(f([a,[[1,1]],b]) = [a,[[1,1]],b]),
  assert(f([a,[[1,1],[-1,1]],b]) = [a-1,[],b-1]),
  assert(f([a,[[1,2],[-1,1]],b]) = [a-1,[[1,1]],b-1]),
  assert(f([a,[[-1,2],[1,1]],b]) = [a-1,[[-1,1]],b-1]),
  assert(f([a,[[1,3],[2,2],[-1,2],[-2,2],[3,1]],b]) = [a-4,[[1,1],[3,1]],b-4]),
  true)$


/* **********************
   * Direct translation *
   **********************
*/

okltest_direct_crd2cl(f) := (
  assert(f([0,[1,-1],0]) = [{}]),
  assert(f([0,[1,-1],1]) = []),
  assert(f([1,[1,-1],1]) = []),
  assert(f([2,[1,-1],inf]) = [{}]),
  assert(f([2,[1,-1,1],2]) = [{1}]),
  assert(f([2,[1,-1,1],inf]) = [{1}]),
  assert(f([2,[1,-1,1,-1],2]) = []),
  assert(f([2,[1,-1,1,-1,3],2]) = [{-3}]),
  assert(f([0,[1,-1,1,-1,3,3,-3],2]) = [{}]),
  assert(f([3,[1,-1,1,-1,3,3,-3],3]) = [{-3}]),
  /* XXX */
  true)$

okltest_direct_crd2cl_lt(f) := (
  for ub : -1 thru 1 do
    assert(f([],ub) = if ub <= 0 then [{}] else []),
  for c : 1 thru 3 do
    for ub : -1 thru c+3 do
      assert(f([[1,c]], ub) = if ub<=0 then [{}] elseif ub<=c then [{-1}] else []),
  assert(f([[1,1],[2,1]],0) = [{}]),
  assert(f([[1,1],[2,1]],1) = [{-1},{-2}]),
  assert(f([[1,1],[2,1]],2) = [{-1,-2}]),
  assert(f([[1,1],[2,1]],3) = []),
  assert(f([[1,2],[2,1]],1) = [{-1},{-2}]),
  assert(f([[1,2],[2,1]],2) = [{-1}]),
  assert(f([[1,2],[2,1]],3) = [{-1,-2}]),
  assert(f([[1,1],[2,2]],1) = [{-1},{-2}]),
  assert(f([[1,1],[2,2]],2) = [{-2}]),
  assert(f([[1,1],[2,2]],3) = [{-1,-2}]),
  assert(f([[1,2],[2,2]],2) = [{-1},{-2}]),
  assert(f([[1,2],[2,2]],3) = [{-1,-2}]),
  assert(f([[1,2],[2,2]],4) = [{-1,-2}]),
  assert(f([[1,2],[2,2]],5) = []),
  /* XXX */
  true)$

okltest_direct_crd2cl_ge(f) := (
  assert(f([],0) = []),
  assert(f([],1) = [{}]),
  assert(f([[1,1]],0) = []),
  assert(f([[1,1]],1) = [{1}]),
  assert(f([[1,1]],2) = [{}]),
  assert(f([[1,3]],0) = []),
  assert(f([[1,3]],1) = [{1}]),
  assert(f([[1,3]],2) = [{1}]),
  assert(f([[1,3]],3) = [{1}]),
  assert(f([[1,3]],4) = [{}]),
  assert(f([[1,1],[-2,2]], 1) = [{1,-2}]),
  assert(f([[1,1],[-2,2]], 2) = [{-2}]),
  assert(f([[1,1],[-2,2]], 3) = [{1},{-2}]),
  assert(f([[1,1],[-2,2]], 4) = [{}]),
  /* XXX */
  true)$


/* ************************
   * Using unary encoding *
   ************************
*/

okltest_unary_bb_totaliser_fcl(f) := block([F],
  assert(f([],[]) = [[],[]]),
  assert(f([2],[1]) = [[2,1],[{-2,1},{-1,2}]]),
  assert(f([3,4],[1,2]) =
    [[3,4,1,2],[{-4,-3,2},{-2,4},{-3,1},{-2,3},{-4,1},{-1,3,4}]]),
  assert(f([4,5,6],[1,2,3]) =
    [[4,5,6,1,2,3,vru(2,3,1),vru(2,3,2)],
     [{-6,-5,vru(2,3,2)},{6,-vru(2,3,2)},{-5,vru(2,3,1)},{5,-vru(2,3,2)},
      {-6,vru(2,3,1)},{5,6,-vru(2,3,1)},{-4,3,-vru(2,3,2)},{-3,vru(2,3,2)},
      {-4,2,-vru(2,3,1)},{-2,vru(2,3,1)},{-4,1},{-3,4},{2,-vru(2,3,2)},
      {-2,4,vru(2,3,2)},{1,-vru(2,3,1)},{-1,4,vru(2,3,1)}]]),
  /* XXX */
  true)$

okltest_unary_bb_totaliser_r_fcl(f) := block(
  okltest_unary_bb_totaliser_fcl_comb(
    buildq([f],lambda([E,S], f(E,S,1,length(E))))),
  
  true)$

okltest_unary_bb_comparator_fcl(f) := block(
  for m : 0 thru 5 do
    for n : 0 thru 5 do (
      assert(f([],0,0) = [[],[]]),
      assert(f([],0,inf) = [[],[]]),
      assert(f([],inf,0) = [[],[{}]])),
  assert(f([1],0,1) = [[1],[]]),
  assert(f([1],inf,1) = [[1],[{}]]),
  assert(f([1],0,inf) = [[1],[]]),
  assert(f([1],1,1) = [[1],[{1}]]),
  assert(f([1,2,3],1,2) = [[1,2,3],[{1},{-3}]]),
  assert(f([1,2,3,4,5],2,4) = [[1,2,3,4,5],[{1},{2},{-5}]]),
  assert(f([1,2,3,4,5],2,inf) = [[1,2,3,4,5],[{1},{2}]]),
  true)$

okltest_unary_bb_crd2fcl(f) := block([F],
  for m : 0 thru 5 do
    for n : 0 thru 5 do (
      assert(f([0,[],0]) = [[],[]]),
      assert(f([inf,[],0]) = [[],[{}]]),
      assert(f([0,[],inf]) = [[],[]])),
  assert(f([0,[1],1]) = [[1,vru(1,1,1)],[{-1,vru(1,1,1)},{1,-vru(1,1,1)}]]),
  assert(f([inf,[1],1]) =
    [[1,vru(1,1,1)],[{-1,vru(1,1,1)},{1,-vru(1,1,1)},{}]]),
  assert(f([0,[1],inf]) = [[1,vru(1,1,1)],[{-1,vru(1,1,1)},{1,-vru(1,1,1)}]]),
  assert(f([1,[1],1]) =
    [[1,vru(1,1,1)],[{-1,vru(1,1,1)},{1,-vru(1,1,1)},{vru(1,1,1)}]]),
  assert(f([1,[-1,1],2]) = f([0,[],1])),
  assert(f([1,[-1,1,2],2]) = f([0,[2],1])),
  true)$


/* *****************************
   * Using sequential counters *
   *****************************
*/

okltest_amo_sc_fcl(f) := block(
  assert(f([0,[1,2],1]) = [[1,2,scv(1)],[{-1,scv(1)},{-2,-scv(1)}]]),
  assert(f([0,[1,2,3],1]) =
     [[1,2,3,scv(1),scv(2)],
        [{-1,scv(1)},{-2,scv(2)},{-scv(1),scv(2)},{-2,-scv(1)},{-3,-scv(2)}]]),
  for i : 2 thru 10 do
    assert(length(f([0,create_list(j,j,1,i),1])[2]) = 3 * i - 4),
  true
)$

/*!
\endhtmlonly
*/
