/* Matthew Gwynne, 16.7.2009 (Swansea) */
/* Copyright 2009, 2010, 2018 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/PseudoBoolean/tests/CardinalityConstraints.mac
  \brief Tests for translations of cardinality constraints into CNF

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/PseudoBoolean/tests/CardinalityConstraints.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/PseudoBoolean/CardinalityConstraints.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Reductions/UnitClausePropagation.mac")$

kill(f)$


/* ***************************************
   * Simplifying cardinality constraints *
   ***************************************
*/

okltest_crd2scrd(f) := block([a,b],
  assert(f([a,[],b]) =  [a,[],b]),
  assert(f([a,[1,2,-1,-2,1,3,2],b]) = [a, [[1,2],[2,2],[-2,1],[-1,1],[3,1]], b]),
  true)$

okltest_scrd2crd(f) := block([a,b],
  assert(f([a,[],b]) =  [a,[],b]),
  assert(f([a, [[1,2],[2,2],[-2,1],[-1,1],[3,1]], b]) =
    [a,[1,1,2,2,-2,-1,3],b]),
  true)$

okltest_remove_tautologies_scrd(f) := block([a,b],
  assert(f([a,[],b]) = [a,[],b]),
  assert(f([a,[[1,1]],b]) = [a,[[1,1]],b]),
  assert(f([a,[[1,1]],b]) = [a,[[1,1]],b]),
  assert(f([a,[[1,1],[-1,1]],b]) = [a-1,[],b-1]),
  assert(f([a,[[1,2],[-1,1]],b]) = [a-1,[[1,1]],b-1]),
  assert(f([a,[[-1,2],[1,1]],b]) = [a-1,[[-1,1]],b-1]),
  assert(f([a,[[1,3],[2,2],[-1,2],[-2,2],[3,1]],b]) = [a-4,[[1,1],[3,1]],b-4]),
  true)$


/* **********************
   * Direct translation *
   **********************
*/

okltest_direct_crd2cl(f) := (
  assert(f([0,[1,-1],0]) = [{}]),
  assert(f([0,[1,-1],1]) = []),
  assert(f([1,[1,-1],1]) = []),
  assert(f([2,[1,-1],inf]) = [{}]),
  assert(f([2,[1,-1,1],2]) = [{1}]),
  assert(f([2,[1,-1,1],inf]) = [{1}]),
  assert(f([2,[1,-1,1,-1],2]) = []),
  assert(f([2,[1,-1,1,-1,3],2]) = [{-3}]),
  assert(f([0,[1,-1,1,-1,3,3,-3],2]) = [{}]),
  assert(f([3,[1,-1,1,-1,3,3,-3],3]) = [{-3}]),
  /* XXX */
  true)$

okltest_direct_crd2cl_lt(f) := (
  for ub : -1 thru 1 do
    assert(f([],ub) = if ub <= 0 then [{}] else []),
  for c : 1 thru 3 do
    for ub : -1 thru c+3 do
      assert(f([[1,c]], ub) = if ub<=0 then [{}] elseif ub<=c then [{-1}] else []),
  assert(f([[1,1],[2,1]],0) = [{}]),
  assert(f([[1,1],[2,1]],1) = [{-1},{-2}]),
  assert(f([[1,1],[2,1]],2) = [{-1,-2}]),
  assert(f([[1,1],[2,1]],3) = []),
  assert(f([[1,2],[2,1]],1) = [{-1},{-2}]),
  assert(f([[1,2],[2,1]],2) = [{-1}]),
  assert(f([[1,2],[2,1]],3) = [{-1,-2}]),
  assert(f([[1,1],[2,2]],1) = [{-1},{-2}]),
  assert(f([[1,1],[2,2]],2) = [{-2}]),
  assert(f([[1,1],[2,2]],3) = [{-1,-2}]),
  assert(f([[1,2],[2,2]],2) = [{-1},{-2}]),
  assert(f([[1,2],[2,2]],3) = [{-1,-2}]),
  assert(f([[1,2],[2,2]],4) = [{-1,-2}]),
  assert(f([[1,2],[2,2]],5) = []),
  assert(f([[1,1],[2,1],[3,1],[4,1],[5,1]],2) = [{-2,-1},{-3,-1},{-4,-1},{-5,-1},{-3,-2},{-4,-2},{-5,-2},{-4,-3},{-5,-3},{-5,-4}]),
  /* XXX */
  true)$

okltest_direct_crd2cl_ge(f) := (
  assert(f([],0) = []),
  assert(f([],1) = [{}]),
  assert(f([[1,1]],0) = []),
  assert(f([[1,1]],1) = [{1}]),
  assert(f([[1,1]],2) = [{}]),
  assert(f([[1,3]],0) = []),
  assert(f([[1,3]],1) = [{1}]),
  assert(f([[1,3]],2) = [{1}]),
  assert(f([[1,3]],3) = [{1}]),
  assert(f([[1,3]],4) = [{}]),
  assert(f([[1,1],[-2,2]], 1) = [{1,-2}]),
  assert(f([[1,1],[-2,2]], 2) = [{-2}]),
  assert(f([[1,1],[-2,2]], 3) = [{1},{-2}]),
  assert(f([[1,1],[-2,2]], 4) = [{}]),
  /* XXX */
  true)$


/* ************************
   * Using unary encoding *
   ************************
*/

okltest_unary_bb_totaliser_fcl(f) := block([F],
  assert(f([],[]) = [[],[]]),
  assert(f([2],[1]) = [[2,1],[{-2,1},{-1,2}]]),
  assert(f([3,4],[1,2]) =
    [[3,4,1,2],[{-4,-3,2},{-2,4},{-3,1},{-2,3},{-4,1},{-1,3,4}]]),
  assert(f([4,5,6],[1,2,3]) =
    [[4,5,6,1,2,3,vru(2,3,1),vru(2,3,2)],
     [{-6,-5,vru(2,3,2)},{6,-vru(2,3,2)},{-5,vru(2,3,1)},{5,-vru(2,3,2)},
      {-6,vru(2,3,1)},{5,6,-vru(2,3,1)},{-4,3,-vru(2,3,2)},{-3,vru(2,3,2)},
      {-4,2,-vru(2,3,1)},{-2,vru(2,3,1)},{-4,1},{-3,4},{2,-vru(2,3,2)},
      {-2,4,vru(2,3,2)},{1,-vru(2,3,1)},{-1,4,vru(2,3,1)}]]),
  /* XXX */
  true)$

okltest_unary_bb_totaliser_r_fcl(f) := block(
  okltest_unary_bb_totaliser_fcl_comb(
    buildq([f],lambda([E,S], f(E,S,1,length(E))))),
  /* XXX */
  true)$

okltest_unary_bb_comparator_fcl(f) := block(
  for m : 0 thru 5 do
    for n : 0 thru 5 do (
      assert(f([],0,0) = [[],[]]),
      assert(f([],0,inf) = [[],[]]),
      assert(f([],inf,0) = [[],[{}]])),
  assert(f([1],0,1) = [[1],[]]),
  assert(f([1],inf,1) = [[1],[{}]]),
  assert(f([1],0,inf) = [[1],[]]),
  assert(f([1],1,1) = [[1],[{1}]]),
  assert(f([1,2,3],1,2) = [[1,2,3],[{1},{-3}]]),
  assert(f([1,2,3,4,5],2,4) = [[1,2,3,4,5],[{1},{2},{-5}]]),
  assert(f([1,2,3,4,5],2,inf) = [[1,2,3,4,5],[{1},{2}]]),
  true)$

okltest_unary_bb_crd2fcl(f) := block([F],
  for m : 0 thru 5 do
    for n : 0 thru 5 do (
      assert(f([0,[],0]) = [[],[]]),
      assert(f([inf,[],0]) = [[],[{}]]),
      assert(f([0,[],inf]) = [[],[]])),
  assert(f([0,[1],1]) = [[1,vru(1,1,1)],[{-1,vru(1,1,1)},{1,-vru(1,1,1)}]]),
  assert(f([inf,[1],1]) =
    [[1,vru(1,1,1)],[{-1,vru(1,1,1)},{1,-vru(1,1,1)},{}]]),
  assert(f([0,[1],inf]) = [[1,vru(1,1,1)],[{-1,vru(1,1,1)},{1,-vru(1,1,1)}]]),
  assert(f([1,[1],1]) =
    [[1,vru(1,1,1)],[{-1,vru(1,1,1)},{1,-vru(1,1,1)},{vru(1,1,1)}]]),
  assert(f([1,[-1,1],2]) = f([0,[],1])),
  assert(f([1,[-1,1,2],2]) = f([0,[2],1])),
  true)$


/* ********************
   * AMO translations *
   ********************
*/

okltest_direct_amo2cl(f) := (
  assert(f([]) = []),
  assert(f([1]) = []),
  assert(f([2,1]) = [{-1,-2}]),
  assert(f([-3,2,1]) = [{3,-2},{3,-1},{-2,-1}]),
  for n : 0 thru 10 do block([F : f(create_list(-i,i,1,n))],
    assert(length(F) = n*(n-1)/2),
    assert(setify(F) = powerset(setn(n),2))
  ),
  true)$

okltest_direct_alo2cl(f) := (
  assert(f([]) = [{}]),
  assert(f([1]) = [{1}]),
  assert(f([1,2]) = [{1,2}]),
  assert(f([1,2,3]) = [{1,2,3}]),
  true)$

okltest_direct_eo2cl(f) := (
  assert(f([]) = [{}]),
  assert(f([1]) = [{1}]),
  assert(f([1,2]) = [{-1,-2},{1,2}]),
  assert(f([-3,-2,-1]) = [{3,2},{3,1},{1,2},{-3,-2,-1}]),
  assert(okltest_direct_amo2cl(buildq([f], lambda([L], rest(f(L),-1)))) = true),
  true)$

okltest_represents_amo_p(f) := (
  assert(f([], {}) = true),
  assert(f([], {{}}) = false),
  assert(f([], {{1}}) = true),
  assert(f([], {{1,2}}) = true),
  assert(f([1], {{1}}) = false),
  assert(f([1], {}) = true),
  assert(f([1], {{1,2}}) = true),
  assert(f([1], {{-1,-2}}) = true),

  true)$

okltest_represents_eo_p(f) := (
  assert(f([], {}) = false),
  assert(f([], {{}}) = true),
  assert(f([1], {{1}}) = true),
  assert(f([-1], {{-1}}) = true),
  assert(f([1,2], {{-1,-2},{1,2}}) = true),
  assert(f([1,2], {{-1,-2}}) = false),
  assert(f([1,2], {{-1,-2},{1,2},{3,4}}) = true),
  assert(f([-1,2], {{-1,2},{1,-2},{1,3}}) = true),
  assert(f([1,2], {{-1,-2},{1,2},{-1,2}}) = false),
  true)$

okltest_eo_tass(f) := (
  assert(f([]) = {}),
  assert(f([1]) = {{1}}),
  assert(f([1,-2]) = {{1,2},{-1,-2}}),
  assert(f([-1,-2,3]) = {{-1,2,-3},{1,-2,-3},{1,2,3}}),
  true)$

okltest_amo_tass(f) := (
  assert(f([]) = {{}}),
  assert(f([1]) = {{-1},{1}}),
  assert(f([1,-2]) = {{-1,2},{1,2},{-1,-2}}),
  assert(f([-1,-2,3]) = {{1,2,-3},{-1,2,-3},{1,-2,-3},{1,2,3}}),
  true)$

okltest_uep_amo_apply(f) := (
  assert(f([], {}) = []),
  assert(f([], {{1},{2}}) = []),
  assert(f([], {{1,2}}) = [[{}, 3]]),
  assert(f([1], {{-1,-2}}) = [[{-1},2]]),
  assert(f([1,2], {{}}) = [[{-1,-2},0],[{1,-2},0],[{-1,2},0]]),
  assert(f([1,2],{{-1,-2}}) = []),
  true)$

okltest_uep_amo_p(f) := (
  assert(f([], {}) = true),
  assert(f([], {{1}}) = true),
  assert(f([], {{1,2}}) = false),
  assert(f([1], {}) = true),
  assert(f([1], {{-1,-2}}) = false),
  assert(f([1,2],{{}}) = false),
  assert(f([1,2],{{-1,-2}}) = true),
  true)$

okltest_uep_eo_apply(f) := (
  assert(f([], {}) = []),
  assert(f([], {{1},{2}}) = []),
  assert(f([], {{1,2}}) = []),
  assert(f([1], {{-1,-2}}) = []),
  assert(f([1,2], {{}}) = [[{1,-2},0],[{-1,2},0]]),
  assert(f([1,2],{{-1,-2}}) = []),
  true)$

okltest_uep_eo_p(f) := (
  assert(f([], {{}}) = true),
  assert(f([1], {{1}}) = true),
  assert(f([1,2],{{-1,-2},{1,2}}) = true),
  assert(f([1,2],{{-1,-2},{1,2},{3,4}}) = false),
  true)$

okltest_crec_amo(f) := (
  assert(f(0) = 0),
  assert(f(1) = 0),
  assert(f(2) = 1),
  for n : 3 thru 10 do
    assert(f(n) = 3*n - 6),
  true)$

okltest_crec_amou_2(f) := (
  for n : 1 thru 10 do
    assert(f(n) = 3*n - 3),
  true)$

okltest_nauxrec_amo(f) := (
  for n : 0 thru 10 do
    assert(f(n) = max(0, floor((n-1)/2)-1)),
  true)$

okltest_nauxrec_amou_2(f) := (
  for n : 1 thru 10 do
    assert(f(n) = 2*floor((n+2)/3)-1),
  true)$

okltest_naux_secoamo(f) := (
  for n : 0 thru 10 do
    assert(f(n) = if n <= 4 then 0 else floor((n-1)/2)-1),
  true)$

okltest_seco_amov2cl(f) := (
  assert(f([],[]) = []),
  assert(f([1],[]) = []),
  assert(f([1,2],[]) = [{-1,-2}]),
  assert(f([1,2,3],[]) = [{-1,-2},{-1,-3},{-2,-3}]),
  assert(f([1,2,3,4],[]) = [{-1,-2},{-1,-3},{-2,-3},{-1,-4},{-2,-4},{-3,-4}]),
  assert(f([1,2,3,4,5],[6]) = [{-1,-2},{-1,-3},{-2,-3},{-1,6},{-2,6},{-3,6},{-6,-4},{-6,-5},{-4,-5}]),
  assert(f([1,2,3,4,5,6],[7]) = [{-1,-2},{-1,-3},{-2,-3},{-1,7},{-2,7},{-3,7},{-7,-4},{-7,-5},{-4,-5},{-7,-6},{-4,-6},{-5,-6}]),
  true)$

okltest_seco_amo2cl(f) := (
  for n : 0 thru 10 do block([L : create_list(i,i,1,n), F],
    F : f(L),
    assert(ncl_cl(F) = ncl_seco_amo(L)),
    F : cl2cs(F),
    assert(nvar_cs(F) = nvar_seco_amo(L)),
    assert(ncl_cs(F) = ncl_seco_amo(L)),
    assert(ncl_list_cs(F) = ncl_list_seco_amo(L)),
    assert(represents_amo_p(L,F) = true),
    assert(represents_eo_p(L,F) = false),
    assert(uep_amo_apply(L,F) = if n <= 4 then [] else
      [[comp_sl(setify(L)), naux_secoamo(n)+1]])
  ),
  true)$

okltest_nvar_seco_amo(f) := (
  assert(f([]) = 0),
  assert(f([1]) = 0),
  assert(f([-1,-2]) = 2),
  assert(f([1,-2,3]) = 3),
  assert(f([1,2,-3,4]) = 4),
  assert(f([1,2,3,4,5]) = 6),
  true)$

okltest_ncl_seco_amo(f) := (
  assert(f([]) = 0),
  assert(f([1]) = 0),
  assert(f([-1,-2]) = 1),
  assert(f([1,-2,3]) = 3),
  assert(f([1,2,-3,4]) = 6),
  assert(f([1,2,3,4,5]) = 9),
  true)$

okltest_ncl_list_seco_amo(f) := (
  assert(f([]) = []),
  assert(f([1]) = []),
  assert(f([-1,-2]) = [[2,1]]),
  assert(f([1,-2,3]) = [[2,3]]),
  assert(f([1,2,-3,4]) = [[2,6]]),
  assert(f([1,2,3,4,5]) =[[2,9]]),
  true)$

okltest_seco_eo2cl(f) := (
  for n : 0 thru 10 do block([L : create_list(i,i,1,n), F],
    F : f(L),
    assert(ncl_cl(F) = ncl_seco_eo(L)),
    F : cl2cs(F),
    assert(nvar_cs(F) = nvar_seco_eo(L)),
    assert(ncl_cs(F) = ncl_seco_eo(L)),
    assert(ncl_list_cs(F) = ncl_list_seco_eo(L)),
    assert(represents_eo_p(L,F) = true),
    assert(uep_eo_p(L,F) = true)
  ),
  true)$

okltest_nvar_seco_eo(f) := (
  assert(f([]) = 0),
  assert(f([1]) = 1),
  assert(f([-1,-2]) = 2),
  assert(f([1,-2,3]) = 3),
  assert(f([1,2,-3,4]) = 4),
  assert(f([1,2,3,4,5]) = 6),
  true)$

okltest_ncl_seco_eo(f) := (
  assert(f([]) = 1),
  assert(f([1]) = 1),
  assert(f([-1,-2]) = 2),
  assert(f([1,-2,3]) = 4),
  assert(f([1,2,-3,4]) = 7),
  assert(f([1,2,3,4,5]) = 10),
  true)$

okltest_ncl_list_seco_eo(f) := (
  assert(f([]) = [[0,1]]),
  assert(f([1]) = [[1,1]]),
  assert(f([-1,-2]) = [[2,2]]),
  assert(f([1,-2,3]) = [[2,3],[3,1]]),
  assert(f([1,2,-3,4]) = [[2,6],[4,1]]),
  assert(f([1,2,3,4,5]) =[[2,9],[5,1]]),
  true)$

okltest_seco_amovuep2cl(f) := (
  assert(f([],[]) = []),
  assert(f([1],[]) = []),
  assert(f([1,2],[]) = [{-1,-2}]),
  assert(f([1,2,3],[]) = [{-1,-2},{-1,-3},{-2,-3}]),
  assert(f([1,2,3,4],[]) = [{-1,-2},{-1,-3},{-2,-3},{-1,-4},{-2,-4},{-3,-4}]),
  assert(f([1,2,3,4,5],[6]) = [{-1,-2},{-1,-3},{-2,-3},{-1,6},{-2,6},{-3,6},{1,2,3,-6},{-6,-4},{-6,-5},{-4,-5}]),
  assert(f([1,2,3,4,5,6],[7]) = [{-1,-2},{-1,-3},{-2,-3},{-1,7},{-2,7},{-3,7},{1,2,3,-7},{-7,-4},{-7,-5},{-4,-5},{-7,-6},{-4,-6},{-5,-6}]),
  assert(f([1,2,3,4,5,6,7],[8,9]) = [{-1,-2},{-1,-3},{-2,-3},{-1,8},{-2,8},{-3,8},{1,2,3,-8},{-8,-4},{-8,-5},{-4,-5},{-8,9},{-4,9},{-5,9},{8,4,5,-9}, {-9,-6},{-9,-7},{-6,-7}]),
  true)$

okltest_seco_amouep2cl(f) := (
  for n : 0 thru 10 do block([L : create_list(i,i,1,n), F],
    F : f(L),
    assert(ncl_cl(F) = ncl_seco_amouep(L)),
    F : cl2cs(F),
    assert(nvar_cs(F) = nvar_seco_amouep(L)),
    assert(ncl_cs(F) = ncl_seco_amouep(L)),
    assert(ncl_list_cs(F) = ncl_list_seco_amouep(L)),
    assert(represents_amo_p(L,F) = true),
    assert(represents_eo_p(L,F) = false),
    assert(uep_amo_p(L,F) = true)
  ),
  true)$

okltest_seco_amouep_co(f) := block([L:[],a,b,c,d,e],
  assert(f(L) = 0),
  for n : 1 thru 4 do (
    L : endcons(n,L),
    assert(f(L) = 0)
  ),
  L : endcons(5,L),
  assert(f(L) = 6),
  L : endcons(6,L),
  assert(f(L) = 7),
  L : endcons(7,L),
  assert(f(L) = 9),
  L : endcons(8,L),
  assert(f(L) = 10),
  L : endcons(9,L),
  assert(f(L) = 12),
  L : endcons(10,L),
  assert(f(L) = 13),
  assert(f([1,4,9,-11,13]) = 14),
  assert(f([a,b,c,d,e]) = 1),
  assert(f([a,b,c,d,e,20,-22]) = 24),
  true)$

okltest_nvar_seco_amouep(f) := (
  assert(f([]) = 0),
  assert(f([1]) = 0),
  assert(f([-1,-2]) = 2),
  assert(f([1,-2,3]) = 3),
  assert(f([1,2,-3,4]) = 4),
  assert(f([1,2,3,4,5]) = 6),
  true)$

okltest_ncl_seco_amouep(f) := (
  assert(f([]) = 0),
  assert(f([1]) = 0),
  assert(f([-1,-2]) = 1),
  assert(f([1,-2,3]) = 3),
  assert(f([1,2,-3,4]) = 6),
  assert(f([1,2,3,4,5]) = 10),
  true)$

okltest_ncl_list_seco_amouep(f) := (
  assert(f([]) = []),
  assert(f([1]) = []),
  assert(f([-1,-2]) = [[2,1]]),
  assert(f([1,-2,3]) = [[2,3]]),
  assert(f([1,2,-3,4]) = [[2,6]]),
  assert(f([1,2,3,4,5]) =[[2,9],[4,1]]),
  true)$

okltest_seco_eouep2cl(f) := (
  for n : 0 thru 10 do block([L : create_list(i,i,1,n), F],
    F : f(L),
    assert(ncl_cl(F) = ncl_seco_eouep(L)),
    F : cl2cs(F),
    assert(nvar_cs(F) = nvar_seco_eouep(L)),
    assert(ncl_cs(F) = ncl_seco_eouep(L)),
    assert(ncl_list_cs(F) = ncl_list_seco_eouep(L)),
    assert(represents_eo_p(L,F) = true),
    assert(uep_eo_p(L,F) = true)
  ),
  true)$

okltest_nvar_seco_eouep(f) := (
  assert(f([]) = 0),
  assert(f([1]) = 1),
  assert(f([-1,-2]) = 2),
  assert(f([1,-2,3]) = 3),
  assert(f([1,2,-3,4]) = 4),
  assert(f([1,2,3,4,5]) = 6),
  true)$

okltest_ncl_seco_eouep(f) := (
  assert(f([]) = 1),
  assert(f([1]) = 1),
  assert(f([-1,-2]) = 2),
  assert(f([1,-2,3]) = 4),
  assert(f([1,2,-3,4]) = 7),
  assert(f([1,2,3,4,5]) = 11),
  true)$

okltest_ncl_list_seco_eouep(f) := (
  assert(f([]) = [[0,1]]),
  assert(f([1]) = [[1,1]]),
  assert(f([-1,-2]) = [[2,2]]),
  assert(f([1,-2,3]) = [[2,3],[3,1]]),
  assert(f([1,2,-3,4]) = [[2,6],[4,1]]),
  assert(f([1,2,3,4,5]) = [[2,9],[3,1],[4,1]]),
  assert(f([1,2,3,4,5,6]) = [[2,(3+3)+6],[4,2]]),
  true)$

/*!
\endhtmlonly
*/
