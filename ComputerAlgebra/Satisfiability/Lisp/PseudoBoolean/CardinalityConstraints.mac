/* Matthew Gwynne, 15.7.2009 (Swansea) */
/* Copyright 2009, 2010, 2011, 2012 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/PseudoBoolean/CardinalityConstraints.mac
  \brief Translating cardinality constraints into CNF

  Encoding p <= x_1 + ... + x_k <= q for given boolean literals x_1, ..., x_k
  and natural numbers p, q.


Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/PseudoBoolean/CardinalityConstraints.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$


/*
  A "(boolean) cardinality-constraint" ("crd") is a triple [a,L,b],
  where a, b are natural numbers >= 0 or inf, while L is a list of
  (boolean) literals (allowing repetitions and complementary literals).
  The meaning is "a <= sum(L) <= b", where sum(L) counts the satisfied
  literals.

  A crd is "repetition-free", if no literal in L occurs more than once.
*/

/* ***************************************
   * Simplifying cardinality constraints *
   ***************************************
*/

/*
  A "sorted cardinality constraint" ("scrd") is a triple [lb,C0,ub] similar
  to above, but where C0 now is an ordered set-map, sorted by descending
  values, which assigns to the occurring literals their counts (natural
  numbers >= 1).
*/

/* Translating a cardinality constraint into a sorted cardinality constraint,
   sorting literals with equal counts in the build-in order:
*/
crd2scrd(C) := [C[1], sort(list_distribution(C[2]), lambda([p1,p2], is(second(p1)>second(p2)))), C[3]]$

/* Translating a sorted cardinality constraint into a cardinality constraint:
*/
scrd2crd(C) :=
  [C[1],lappend(map(lambda([a],create_list(a[1],i,1,a[2])),C[2])),C[3]]$

/* Removing tautologies from a sorted cardinality constraint.
   Returned is the equivalent sorted cardinality constraint, where for
   every clashing pair of literals the literal(s) attaining the min-count
   are removed, while the bounds are reduced by the min-count.
*/
remove_tautologies_scrd(C) := block(
[a : C[1], b : C[3], h : osm2hm(C[2]), NC],
 NC : map(
  lambda([P], block([cneg : ev_hm(h,-P[1])],
    if cneg=false then P
    else block([cpos : ev_hm(h,P[1])],
      if cpos=0 then 0
      else (
        set_hm(h,-P[1],0),
        [a,b] : [a,b] - cneg,
        if cpos=cneg then 0
        else [P[1],cpos-cneg]
      )))),
  C[2]),
 [a,delete(0,NC),b])$


/* **********************
   * Direct translation *
   **********************
*/

/* Translating a cardinality constraint into a CNF-clause-list (which has
   first the clauses for the lower bound, and then the clauses for the
   upper bound):
*/
direct_crd2cl(C) := block([R : remove_tautologies_scrd(crd2scrd(C)), a, b, D],
 [a : R[1], D : R[2], b : R[3]],
  append(direct_crd2cl_ge(D, a), direct_crd2cl_lt(D, b+1)))$

/*  Given a sorted cardinality constraint [0,D,ub-1] without tautological
    literal-pairs, compute the equivalent clause-list.
    The order of the clause-list is as follows:
 1. The major sorting is given by the order of D (regarding the literals).
 2. For a given literal x, first the clauses containing -x and then the clauses
    not containing the underlying variable are taken.
*/
direct_crd2cl_lt(D,ub) := if ub <= 0 then [{}]
 elseif emptyp(D) then []
 else block([p : first(D), x, c, with_x, without_x],
  x : first(p),
  c : second(p),
  with_x : direct_crd2cl_lt(rest(D), ub-c),
  without_x : direct_crd2cl_lt(rest(D), ub),
  with_x : remove_elements(without_x,with_x),
  with_x : add_element_l(-x,with_x),
  append(with_x, without_x)
)$

/* Given a sorted cardinality constraint [lb,D,inf] without tautological
   literal-pairs, compute the equivalent clause-list: */
direct_crd2cl_ge(D,lb) := if lb <= 0 then [] else
 block([s : sum_l(map(second,D))],
  if lb > s then [{}]
  else direct_crd2cl_lt(map(lambda([p], [-first(p),second(p)]),D), s-lb+1))$

/* Translating a list of cardinality constraints into a list of
   CNF-clause-lists:
*/
direct_crdl2cl(F) := lappend(map(direct_crd2cl,F))$

/* Translating a formal clause-cardinality-list into a formal clause-list:
*/
direct_fccrdl2fcl(FF) := [FF[1], append(FF[2], direct_crdl2cl(FF[3]))]$


/* ************************
   * Using unary encoding *
   ************************
*/

/*
   A "CNF representation of a cardinality constraint [a,L,b]" is a clause-set
   F with var(L) <= var(F), whose satisfying assignments restricted to var(L)
   are exactly those of the condition [a,L,b], and such that every satisfying
   assignment for [a,L,b] has exactly one extension to a satisfying assignment
   of F.
*/

/* The representation below is from "Efficient CNF Encoding of Boolean
   Cardinality Constraints" by Olivier Bailleux and Yacine Boufkhad, CP 2003,
   LNCS 2833 (Springer), 2003, pages 108-122.
*/

/* 
  Computing a CNF representation of cardinality constraint C according
  to [BB 2003]. The new variables are of the form vru(...), and come
  after the original variables in the list of variables.
  Prerequisites: C is repetition-free.
*/
unary_bb_crd2fcl(C) := block(
  [C_n : scrd2crd(remove_tautologies_scrd(crd2scrd(C))),
   p,E,q,S,FF_T,FF_C],
  p : C_n[1], E : C_n[2], q : C_n[3],
  S : create_list(vru_var(1,length(E),i),i,1,length(E)),
  FF_T : unary_bb_totaliser_fcl(E,S),
  FF_C : unary_bb_comparator_fcl(S,p,q),
  return([FF_T[1],append(FF_T[2],FF_C[2])]))$

/* New variables are "vru(a,b,i)". (variable recursive unary)
   where vru(a,b,i) is the i-th variable in list of variables
   representing the unary representation of the cardinality of
   [E[a],...,E[b]]. */
kill(vru)$
declare(vru, noun)$
declare(vru, posfun)$
vru_var(a,b,i) := nounify(vru)(a,b,i)$

/* For a list E of "input" literals and a list S of "output" variables
   of the same length, compute a clause-list F equivalent to the condition
   that S is a "unary representation" of the count of 1's in E, that is, w.r.t.
   the given order in S, if a total assignment assigns k 1's to E, then
   the first k variables in S are true, and the remaining variables are false.
   S and E must be disjoint and must each contain distinct variables.
   Variables in F are those of E and S together with variables vru(...).
*/
unary_bb_totaliser_fcl(E,S) := unary_bb_totaliser_r_fcl(E,S,1,length(E))$
/* For a list E of "input" literals and a list S of "output" variables
   of the same length, compute a clause-list F equivalent to the condition
   that S is a "unary representation" of the count of 1's in E where E is
   assumed to be the sublist [E'[a],...,E'[b]] for some (possibly) larger
   E' .
   S and E must be disjoint and must each contain distinct variables.
   Variables in F are those of E and S together with variables vru(...).
   The point is that this function is used recursively, and so a and b
   are used to ensure new variables do not clash.
*/
unary_bb_totaliser_r_fcl(E,S, a,b) := 
  if length(E) < 1 then [E,[]]
  else block(
     [subtree_a : [[],[]], subtree_b : [[],[]], m_a,m_b, level,
      cs :[],V_a,V_b,m:length(E)],
    /* work out CNFs for the two children of this node */
    m_a : floor(m / 2), m_b : (m - m_a),
    if m_a > 1 then (
      V_a : map(
        lambda([i],vru_var(a,ceiling((a+b)/2-1),i)),
        create_list(i,i,1,m_a)),
      subtree_a : unary_bb_totaliser_r_fcl(take_elements(m_a,E), V_a,
        a,ceiling((a+b)/2-1)))
    else 
      V_a : take_elements(m_a,E),
    if m_b > 1 then (
      V_b : map(
        lambda([i],vru_var(ceiling((a+b)/2-1)+1,b,i)),
        create_list(i,i,1,m_b)),
      subtree_b : unary_bb_totaliser_r_fcl(rest(E,m_a),V_b,
        ceiling((a+b)/2-1)+1,b))
    else 
      V_b : rest(E,m_a),
    /* generate clauses ensuring correct unary representation for this node */
    for alph : 0 thru m_a do
      for beta : 0 thru m_b do block([sigma : alph+beta],
        if sigma > 0 then
        cs : cons(union(
            if alph > 0 then {-V_a[alph]} else {},
            if beta > 0 then {-V_b[beta]} else {},
            {S[sigma]}), cs),
        if sigma < m then
        cs : cons(union(
            if alph < m_a then {V_a[alph+1]} else {},
            if beta < m_b then {V_b[beta+1]} else {},
            {-S[sigma+1]}),
          cs)
      ),
    return(
      [stable_unique(append(E,S,subtree_a[1],subtree_b[1])),
       append(subtree_a[2], subtree_b[2], cs)])
  )$


/* For a list S of variables and natural numbers p, q, compute a clause-list F 
   whose satisfying assignments are those total assignments where the first
   p variables are set to true, and all variables from the (q+1)-th onwards 
   are set to false. The clause-list returned is thus the list of
   length(S) - (q-p) unit-clauses where the first p variables in S occur as
   the first p (positive) literals in unit-clauses and the last
   (length(S)-q+1) variables occur as negative literals in the later
   unit-clauses.
   Prerequisite: 0 <= p <= q, p and q are integers or inf.
*/
unary_bb_comparator_fcl(S,p,q) :=
  if p > length(S) then [S,[{}]]
  else
    [S,append(
      map(set,take_elements(p,S)),
      map(set,map("-",rest(S,min(q,length(S))))))]$


/* *****************************
   * Using sequential counters *
   *****************************
*/

/* The representation below is LT^{n,k}_SEQ from "Towards an optimal CNF
   encoding of Boolean cardinality constraints" by Carsten Sinz, CP2005,
   LNCS 3709 (Springer), 2005, pages 827-831.
*/

/* TODO: Add explanation of variables. */
kill(scv)$
declare(scv, noun)$
declare(scv, posfun)$
scv_var(i) := nounify(scv)(i)$

/* Taking a cardinality constraint of the form [0,L,k] and returning
   the LT^{length(L),1}_SEQ translation clause-set: */
amo_sc_fcl(C) := block([L : C[2], n],
 n : length(L),
 [append(var_c(L), create_list(scv_var(i), i, 1, n)),
  append(
    create_list({-L[1],scv_var(1)}, i, 1, n-1),
    create_list({-scv_var(i),scv_var(i+1)}, i, 1, n-2),
    create_list({-scv_var(i),-L[i+1]}, i, 1, n-1))])$

/*!
\endhtmlonly
*/
