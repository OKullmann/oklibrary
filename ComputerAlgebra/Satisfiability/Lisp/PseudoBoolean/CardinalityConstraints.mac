/* Matthew Gwynne, 15.7.2009 (Swansea) */
/* Copyright 2009, 2010, 2011, 2018 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/PseudoBoolean/CardinalityConstraints.mac
  \brief Translating cardinality constraints into CNF

  Encoding p <= x_1 + ... + x_k <= q for given boolean literals x_1, ..., x_k
  and natural numbers p, q.


Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/PseudoBoolean/CardinalityConstraints.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Primality/PrimeImplicatesImplicants.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/PartialAssignments.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Backtracking/DLL_solvers.mac")$


/*
  A "(boolean) cardinality-constraint" ("crd") is a triple [a,L,b],
  where a, b are natural numbers >= 0 or inf, while L is a list of
  (boolean) literals (allowing repetitions and complementary literals).
  The meaning is "a <= sum(L) <= b", where sum(L) counts the satisfied
  literals.

  A crd is "repetition-free", if no literal in L occurs more than once.
  A crd is "non-tautological", if there are no clashing literals.
  A crd is "normal" if it is repetition-free and non-tautological; this is
  the same as an ordered clause.

*/

/* ***************************************
   * Simplifying cardinality constraints *
   ***************************************
*/

/*
  A "sorted cardinality constraint" ("scrd") is a triple [lb,C0,ub] similar
  to above, but where C0 now is an ordered set-map, sorted by descending
  values, which assigns to the occurring literals their counts (natural
  numbers >= 1).
*/

/* Translating a cardinality constraint into a sorted cardinality constraint,
   sorting literals with equal counts in the build-in order:
*/
crd2scrd(C) := [C[1], sort(list_distribution(C[2]), lambda([p1,p2], is(second(p1)>second(p2)))), C[3]]$

/* Translating a sorted cardinality constraint into a cardinality constraint:
*/
scrd2crd(C) :=
  [C[1],lappend(map(lambda([a],create_list(a[1],i,1,a[2])),C[2])),C[3]]$

/* Removing tautologies from a sorted cardinality constraint.
   Returned is the equivalent sorted cardinality constraint, where for
   every clashing pair of literals the literal(s) attaining the min-count
   are removed, while the bounds are reduced by the min-count.
*/
remove_tautologies_scrd(C) := block(
[a : C[1], b : C[3], h : osm2hm(C[2]), NC],
 NC : map(
  lambda([P], block([cneg : ev_hm(h,-P[1])],
    if cneg=false then P
    else block([cpos : ev_hm(h,P[1])],
      if cpos=0 then 0
      else (
        set_hm(h,-P[1],0),
        [a,b] : [a,b] - cneg,
        if cpos=cneg then 0
        else [P[1],cpos-cneg]
      )))),
  C[2]),
 [a,delete(0,NC),b])$


/* **********************************************
   * Direct translation (without new variables) *
   **********************************************
*/

/* Translating a cardinality constraint into the equivalent CNF-clause-list
   (which has first the clauses for the lower bound, and then the clauses for
   the upper bound):
*/
direct_crd2cl(C) := block([R : remove_tautologies_scrd(crd2scrd(C)), a, b, D],
 [a : R[1], D : R[2], b : R[3]],
  append(direct_crd2cl_ge(D, a), direct_crd2cl_lt(D, b+1)))$

/*  Given a sorted cardinality constraint [0,D,ub-1] without tautological
    literal-pairs, compute the equivalent clause-list.
    The order of the clause-list is as follows:
 1. The major sorting is given by the order of D (regarding the literals).
 2. For a given literal x, first the clauses containing -x and then the clauses
    not containing the underlying variable are taken.

   For example
   direct_crd2cl_lt([[1,1],[2,1],[3,1],[4,1],[5,1]],2) =
   [{-2,-1},{-3,-1},{-4,-1},{-5,-1},{-3,-2},{-4,-2},{-5,-2},{-4,-3},{-5,-3},{-5,-4}]
*/
direct_crd2cl_lt(D,ub) := if ub <= 0 then [{}]
 elseif emptyp(D) then []
 else block([p : first(D), x, c, with_x, without_x],
  x : first(p),
  c : second(p),
  with_x : direct_crd2cl_lt(rest(D), ub-c),
  without_x : direct_crd2cl_lt(rest(D), ub),
  with_x : remove_elements(without_x,with_x),
  with_x : add_element_l(-x,with_x),
  append(with_x, without_x)
)$

/* Given a sorted cardinality constraint [lb,D,inf] without tautological
   literal-pairs, compute the equivalent clause-list: */
direct_crd2cl_ge(D,lb) := if lb <= 0 then [] else
 block([s : sum_l(map(second,D))],
  if lb > s then [{}]
  else direct_crd2cl_lt(map(lambda([p], [-first(p),second(p)]),D), s-lb+1))$

/* Translating a list of cardinality constraints into a list of
   CNF-clause-lists:
*/
direct_crdl2cl(F) := lappend(map(direct_crd2cl,F))$

/* Translating a formal clause-cardinality-list into a formal clause-list:
*/
direct_fccrdl2fcl(FF) := [FF[1], append(FF[2], direct_crdl2cl(FF[3]))]$


/* ************************
   * Using unary encoding *
   ************************
*/

/*
   A "CNF representation of a cardinality constraint [a,L,b]" is a clause-set
   F with var(L) <= var(F), whose satisfying assignments restricted to var(L)
   are exactly those of the condition [a,L,b], and such that every satisfying
   assignment for [a,L,b] has exactly one extension to a satisfying assignment
   of F.
*/

/* The representation below is from "Efficient CNF Encoding of Boolean
   Cardinality Constraints" by Olivier Bailleux and Yacine Boufkhad, CP 2003,
   LNCS 2833 (Springer), 2003, pages 108-122.
*/

/* 
  Computing a CNF representation of cardinality constraint C according
  to [BB 2003]. The new variables are of the form vru(...), and come
  after the original variables in the list of variables.
  Prerequisites: C is repetition-free.
*/
unary_bb_crd2fcl(C) := block(
  [C_n : scrd2crd(remove_tautologies_scrd(crd2scrd(C))),
   p,E,q,S,FF_T,FF_C],
  p : C_n[1], E : C_n[2], q : C_n[3],
  S : create_list(vru_var(1,length(E),i),i,1,length(E)),
  FF_T : unary_bb_totaliser_fcl(E,S),
  FF_C : unary_bb_comparator_fcl(S,p,q),
  return([FF_T[1],append(FF_T[2],FF_C[2])]))$

/* New variables are "vru(a,b,i)". (variable recursive unary)
   where vru(a,b,i) is the i-th variable in list of variables
   representing the unary representation of the cardinality of
   [E[a],...,E[b]]. */
kill(vru)$
declare(vru, noun)$
declare(vru, posfun)$
vru_var(a,b,i) := nounify(vru)(a,b,i)$

/* For a list E of "input" literals and a list S of "output" variables
   of the same length, compute a clause-list F equivalent to the condition
   that S is a "unary representation" of the count of 1's in E, that is, w.r.t.
   the given order in S, if a total assignment assigns k 1's to E, then
   the first k variables in S are true, and the remaining variables are false.
   S and E must be disjoint and must each contain distinct variables.
   Variables in F are those of E and S together with variables vru(...).
*/
unary_bb_totaliser_fcl(E,S) := unary_bb_totaliser_r_fcl(E,S,1,length(E))$
/* For a list E of "input" literals and a list S of "output" variables
   of the same length, compute a clause-list F equivalent to the condition
   that S is a "unary representation" of the count of 1's in E where E is
   assumed to be the sublist [E'[a],...,E'[b]] for some (possibly) larger
   E' .
   S and E must be disjoint and must each contain distinct variables.
   Variables in F are those of E and S together with variables vru(...).
   The point is that this function is used recursively, and so a and b
   are used to ensure new variables do not clash.
*/
unary_bb_totaliser_r_fcl(E,S, a,b) := 
  if length(E) < 1 then [E,[]]
  else block(
     [subtree_a : [[],[]], subtree_b : [[],[]], m_a,m_b, level,
      cs :[],V_a,V_b,m:length(E)],
    /* work out CNFs for the two children of this node */
    m_a : floor(m / 2), m_b : (m - m_a),
    if m_a > 1 then (
      V_a : map(
        lambda([i],vru_var(a,ceiling((a+b)/2-1),i)),
        create_list(i,i,1,m_a)),
      subtree_a : unary_bb_totaliser_r_fcl(take_elements(m_a,E), V_a,
        a,ceiling((a+b)/2-1)))
    else 
      V_a : take_elements(m_a,E),
    if m_b > 1 then (
      V_b : map(
        lambda([i],vru_var(ceiling((a+b)/2-1)+1,b,i)),
        create_list(i,i,1,m_b)),
      subtree_b : unary_bb_totaliser_r_fcl(rest(E,m_a),V_b,
        ceiling((a+b)/2-1)+1,b))
    else 
      V_b : rest(E,m_a),
    /* generate clauses ensuring correct unary representation for this node */
    for alph : 0 thru m_a do
      for beta : 0 thru m_b do block([sigma : alph+beta],
        if sigma > 0 then
        cs : cons(union(
            if alph > 0 then {-V_a[alph]} else {},
            if beta > 0 then {-V_b[beta]} else {},
            {S[sigma]}), cs),
        if sigma < m then
        cs : cons(union(
            if alph < m_a then {V_a[alph+1]} else {},
            if beta < m_b then {V_b[beta+1]} else {},
            {-S[sigma+1]}),
          cs)
      ),
    return(
      [stable_unique(append(E,S,subtree_a[1],subtree_b[1])),
       append(subtree_a[2], subtree_b[2], cs)])
  )$


/* For a list S of variables and natural numbers p, q, compute a clause-list F 
   whose satisfying assignments are those total assignments where the first
   p variables are set to true, and all variables from the (q+1)-th onwards 
   are set to false. The clause-list returned is thus the list of
   length(S) - (q-p) unit-clauses where the first p variables in S occur as
   the first p (positive) literals in unit-clauses and the last
   (length(S)-q+1) variables occur as negative literals in the later
   unit-clauses.
   Prerequisite: 0 <= p <= q, p and q are integers or inf.
*/
unary_bb_comparator_fcl(S,p,q) :=
  if p > length(S) then [S,[{}]]
  else
    [S,append(
      map(set,take_elements(p,S)),
      map(set,map("-",rest(S,min(q,length(S))))))]$


/* ********************
   * AMO translations *
   ********************
*/

/* Here we consider normal cardinality constraints

  AMO: [0,L,1]
  ALO: [1,L,inf]
  EO : [1,L,1],

  So only L is the input. Different from
    direct_crd2cl(C)
  with C one of the above three choices, now the output is sorted
  antilexicographic, so that it is monotonic in L for amo and alo, while
  for eo the alo-clause is appended at the end.

  Two representations are presented (using n := |L|), where for both the
  amo-forms are uniform 2-CNFs, with the variables of L only occurring in one
  polarity, namely the negation of what appears in l.
  For alo just L as clause is used:

   - The prime-implicates representation
       direct_amo2cl(L), direct_eo2cl(L)
     with tree-hardness zero, no new variables, and with
     binomial(n,2) many clauses.
     Naturally with uep (unique extension property).

   - The "sequential-commander" representation
       seco_amo2cl(L), seco_eo2cl(L)
     (an improvement created here), with propagation-hardness one,
     naux_secoamo(n) < n/2 new variables, and with 3n-6 many clauses.

     In the presentation from [Kucera et al 2017], Section 3.1, this can be
     stated (the principle) via the recursive equations

     Base case:
       seco(x1,x2,x3,x4) = the six clauses of direct_amo2cl([x1,x2,x3,x4])
     Recursion:
       seco(x1,...,xn) = the three clauses of direct_amo2cl([x1,x2,x3])
                        and x1->w, x2->w, x3->w for the commander-variable w
                        and seco(w,x3,...,xn).

     Has uep except when no literal of L is set to true, in which case
     there are precisely naux_secoamo(n)+1 many solutions to seco_amo2cl(L),
     namely setting an initial segment of the commander-variables to false,
     and the remaining to true. So uep does not hold iff n >= 7.
     (If exactly one of L is true, then exactly from the "commander-variable"
     covering this literal on all are true.)
     If uep is needed, then for each new commander-variable w(x,y,z),
     which in the above forms only fulfils
       x v y v z -> w (i.e., the conjunction of x->w, y->w, z->w)
     one has to introduce the reverse implication
       w -> x v y v z (i.e., the 4-clause {-w,x,y,z}).

  Via
    represents_amo_p(L,F)
  it can be tested whether F represents amo(L).
  And via
    uep_amo_apply(L,F)
  the amo-assignments for L are applied to F, and sat-counts for the results
  different from 1 are reported. So an amo-representation F has uep iff
  uep_amo_apply(L,F) = [].

*/

direct_amo2cl(L) := if length(L) <= 1 then [] else
 block([x : last(L), Lr : rest(L,-1)],
  append(direct_amo2cl(Lr), map(lambda([y],{-x,-y}), Lr)))$
direct_alo2cl(L) := [setify(L)]$
direct_eo2cl(L) := append(direct_amo2cl(L), direct_alo2cl(L))$
/* The number of variables is length(L), the number of clauses is
   binomial(length(L),2), so for n=1,2,3,4 we have
   c=0,1,3,6 clauses.
*/


/* Checking whether the clause-set F represents amo(L): */
represents_amo_p(L,F) := block([L : setify(L), V], V:var_c(L),
  is(subset(prime_clauses_cs(F), lambda([C], subsetp(var_c(C), V))) =
     powerset(comp_sl(L), 2)))$
represents_eo_p(L,F) := block([L : setify(L), V], V:var_c(L),
  is(subset(prime_clauses_cs(F), lambda([C], subsetp(var_c(C), V))) =
     adjoin(L,powerset(comp_sl(L), 2))))$

/* The set of eo-assignments for L: */
eo_tass(L) := block([phi : comp_sl(setify(L))],
 setify(create_list(adjoin(-x,disjoin(x,phi)), x,listify(phi))))$
/* The set of amo-assignments for L: */
amo_tass(L) := adjoin(comp_sl(setify(L)), eo_tass(L))$

/* For clause-set F and normal L, return the list of
   pairs [phi,count], where phi is an amo-assignment for L, and
   the solution-count is # 1: */
uep_amo_apply(L,F) := block([F : cs2fcs(F), A : amo_tass(L), res : []],
 for phi in A do block([G : apply_pa_fcs(phi,F), count],
  count : current_satsolver_count(G),
  if count # 1 then res : cons([phi,count], res)
 ),
 reverse(res))$
/* Assuming represents_amo_p(L,F), checking the unique-extension
   property:
*/
uep_amo_p(L,F) := emptyp(uep_amo_apply(L,F))$
/* For clause-set F and normal L, return the list of
   pairs [phi,count], where phi is an eo-assignment for L, and
   the solution-count is # 1: */
uep_eo_apply(L,F) := block([F : cs2fcs(F), A : eo_tass(L), res : []],
 for phi in A do block([G : apply_pa_fcs(phi,F), count],
  count : current_satsolver_count(G),
  if count # 1 then res : cons([phi,count], res)
 ),
 reverse(res))$
/* Assuming represents_eo_p(L,F), checking uep: */
uep_eo_p(L,F) := emptyp(uep_eo_apply(L,F))$


/*
  The following generalises the "commander encoding" together with the
  "sequential encoding", obtaining only n/2 auxiliary variables as by the
  first, and only 3n clauses as by the second. The first is improved by
  noticing that we do not always need commander-variables ("w" in the
  following), while the second is improved (and simplified) by just removing
  repeatedly 3 literals from L, using only 1 auxiliary variable.

  First some general theory, leading finally to the simple form (as such
  apparently not in the literature) seco_amo2cl(L).

  amo_u(L,w), for a normal list L of literals and a variable w not present
  in L, asks for a representation of amo(L) such that for every total
  assignment of L with exactly one true literal the literal w is forced
  (to be true).
  If we split L into L1, L2, then we have
    - amo(L) is represented by
        (amo_u(L1,w) and amo(append(L2,w)))
    - amo_u(L,w) is represented by
        (amo_u(L1,w1) and amo_u(L2,w2) and
           (-w1 or -w2) and (w1 -> w) and (w2 -> w)).

  As usual, the representations use disjoint auxiliary variables.

  For small L the following representations are optimal w.r.t. the number
  of clauses *and* the number of auxiliary variables (zero):
   - L = [x] : amo(L) = {}, amo_u(L,w) = {{x -> w}}.
   - L = [x,y]: amo(L) = {{-x,-y}},
                amo_u(L,w) = {{-x,-y},{x->w},{y->w}}
   - L = [x,y,z]: amo(L) = {{-x,-y},{-x,-z},{-y,-z}}
                  amo_u(L,w) = amo(L) cup {{x->w},{y->w},{z->w}}.
  For length(L)=4, the prime-implicates representation still is optimal in
  both respects (6 clauses, 0 auxiliary variables), while for amo_u(L,w)
  we have two choices:
   1. Zero auxiliaries, 10 clauses: amo(L) + the four implications.
   2. Two auxiliaries, 9 clauses, using the above splitting:

        amo_u([a,b,c,d], w) is represented by
          amo_u([a,b], w1) and amo_u([c,d],w2) and 3 clauses, making
          3+3+3=9 clauses and two auxiliaries w1,w2.

  A *proof* is needed that indeed these are the two minimal choices.

*/

/* Determining the number of clauses and variables, in principle in general: */

/* The number of clauses according to the amo-recursion, only using the special
   case l := 3, for n >= 0:
*/
crec_amo(n) := if n <= 4 then binomial(n,2) else
 block([l : 3, r], r:n-l, crec_amou_2(l) + crec_amo(r+1))$
/* This yields precisely 3n-6 for n >= 3, and this seems independent of the
   splitting strategy (say l : ceiling(n/2) or other choices). */

/* The number of clauses according to the amo_u-recursion, using for
   n=4 the second case, for n >= 1:
*/
crec_amou_2(n) := if n <= 4 then (n-1)*3 else
 block([l : 3, r], r:n-l, crec_amou_2(l) + crec_amou_2(r) + 3)$
/* This yields precisely (n-1)*3, again independently of the splitting
   (the main function crec_amo(n) above actually does not use any splitting
   for crec_amou_2, since only calling crec_amou_2(3)). */

/* The following two functions dependent on the splitting, and with the given
   choice achieve less then n/2 (note that the clause-count is not affected).
*/
/* The number of variables according to the amo-recursion, again only using
   the special case (which is implemented in seco_amo2cl below):
*/
nauxrec_amo(n) := if n <= 4 then 0 else
 block([l : 3, r], r:n-l, nauxrec_amou_2(l) + nauxrec_amo(r+1))$
/* This yields precisely floor((n-1)/2)-1 for n >= 3. */

/* The number of variables for the amo_u-recursion, using for n=4 the
   second case, for n >= 1:
*/
nauxrec_amou_2(n) := if n <= 3 then 1 elseif n=4 then 3 else
 block([l : 3, r], r:n-l, nauxrec_amou_2(l) + nauxrec_amou_2(r) + 1)$
/* This yields precisely 2*floor((n+2)/3)-1 (but not used in nauxrec_amo). */


/* The simplified "sequential+commander" encoding of amo(L):
   The "commander-variables" are
     V=[w_1, ..., w_m]
     for m = naux_secoamo(n), n := length(L).
   The recursion is:
    - Base: for n <= 4 use the prime implicates.
    - Step: for n >= 5 take away the first three elements x1,x2,x3 of
            L, let L' be the rest:
        amo_u([x1,x2,x3], w_1) + seco_amov2cl([w] + L').

      That is, use the three prime implicates for amo({x1,x2,x3}) plus the
      three clauses xi -> w_1, and represent amo in this way recursively for
      w_1 + remaining x.

   So w_1 stands for x1,x2,x3, and w2 for w1,x4,x5, and w3 for w2,x6,x7,
   and w4 for w3,x8,x9, and generally w_i for w_{i-1},x_{2i},x_{2i+1},
   with a remaining "un-commanded" block of 3 variables for odd n, and
   4 variables for even n (the prime-implicate-representation is used).
*/
/* The number of auxiliary variables for n >= 0: */
naux_secoamo(n) := if n <= 2 then 0 else floor((n-1)/2)-1$
/* Using a list V of auxiliary variables with length(V) >= naux_secoamo(n): */
seco_amov2cl(L,V) := block([n : length(L), w, B],
 if n <= 4 then return(direct_amo2cl(L)),
 w : first(V), V : rest(V),
 B : take_l(3, L), L : rest(L,3), L : cons(w,L),
 append(direct_amo2cl(B), create_list({-x,w}, x,B), seco_amov2cl(L,V)))$
/* Providing the list of auxiliary variables, using one plus the maximum
   absolute value of an integer in L as the starting point of the list: */
seco_amo2cl(L) := block([n : naux_secoamo(length(L)), V, v],
 if n<=0 then return(seco_amov2cl(L,[])),
 V : map(abs, sublist(L, integerp)),
 if emptyp(V) then v:0 else v:lmax(V),
 seco_amov2cl(L, create_list(v+i, i,1,n)))$
nvar_seco_amo(L) := block([n : length(L)],
 (if n=1 then 0 else n) + naux_secoamo(n))$
ncl_seco_amo(L) := block([n : length(L)],
 if n <= 2 then binomial(n,2) else 3*n-6)$
ncl_list_seco_amo(L) := if length(L) <= 1 then [] else [[2,ncl_seco_amo(L)]]$

seco_eo2cl(L) := append(seco_amo2cl(L), direct_alo2cl(L))$
nvar_seco_eo(L) := if length(L) = 1 then 1 else nvar_seco_amo(L)$
ncl_seco_eo(L) := ncl_seco_amo(L) + 1$
ncl_list_seco_eo(L) := block([n : length(L)],
 if n <= 1 then [[n,1]]
 elseif n=2 then [[2,ncl_seco_amo(L)+1]]
 else endcons([n,1], ncl_list_seco_amo(L)))$

/*!
\endhtmlonly
*/
