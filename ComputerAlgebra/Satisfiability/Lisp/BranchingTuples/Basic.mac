/* Oliver Kullmann, 29.7.2007 (Swansea) */
/* Copyright 2007, 2008, 2009, 2019, 2020 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/BranchingTuples/Basic.mac
  \brief Maxima-implementations for the tau-function

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/BranchingTuples/Basic.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/Numerical/Lisp/Zeros.mac")$


/*
 A "branching tuple" is a list of positive numbers, which in case of length
 one can also include 0 (also the empty list is possible).
*/

/* ************************
   * Elementary functions *
   ************************
*/

bt_min(t) := lmin(t)$
bt_max(t) := lmax(t)$
bt_width(t) := length(t)$
bt_sum(t) := apply("+", t)$

/* For the concatenation of branching tuples, "append" is to be used. */

/* Composition of branching tuples at position 1: */
bt_composition(a,b) := if emptyp(a) then [] else append(a[1] + b, rest(a))$
/* Composition of branching tuples at position i: */
bt_composition_i(a,b,i) := if emptyp(a) then [] 
  else append(rest(a, -(length(a) - i + 1)), a[i] + b, rest(a,i))$

/*
 A "permutation" in S_n is a list P of length n of all the elements in 
 {1,...,n}; it stands for the bijection i -> P[i].
 See ComputerAlgebra/Algebra/Lisp/Groupoids/Groups/SymmetricGroups.mac.
*/

/* Apply a permutation (or, more generally, an index selection): */
bt_apply_permutation(perm, t) := create_list(t[i], i, perm)$

/* The branching-tuple-hull of a branching tuple t w.r.t. upper-bound
   s on the maximum, together with the set of saturated elements: */
bth(t, s) := if s < bt_max(t) then [{},{}] else 
 block([hull : {t}, new_size : 1, old_size : 0, saturated : {}],
  while new_size > old_size do (
    old_size : new_size,
    for a in hull unless new_size > old_size do (
      hull : union(hull, permutations(a), 
               map(lambda([b],bt_composition(a,b)),
                   subset(hull,lambda([b], is(a[1]+bt_max(b) <= s))))),
      new_size : length(hull))),
  return([hull, block([mt:bt_max(t)], subset(hull, lambda([a],is(bt_min(a)+mt>s))))]))$

/* Compute greedily one saturated tuple in the branching-tuple-hull: */
bth_saturated_greedy(t,s) := block([m : bt_max(t), ts : sort(t)],
  while ts[1] + m <= s do (
    ts : bt_composition(ts,t),
    ts : sort(ts)
  ),
  return(ts))$

/* The integer sequence corresponding to an integer branching tuple t,
   that is, the first n elements.
   Prerequisites: t is not empty, and also t <> [0].
 */
int_seq_bt(t) := block([m : bt_max(t), l : length(t)], 
  return(buildq([m,l,t],
   lambda([n], block([S : create_list(1,i,1,min(n,m))],
     for i : m thru n-1 do
       S : endcons(sum(S[i-t[j]+1],j,1,l),S),
     return(S)))
   )))$
/* The sequence is f(0),f(1),f(2),...,f(n-1), where
   f(n) := f(n-first(t)) + ... + f(m-last(t))
   if this expression is defined (i.e., iff n >= max(t)),
   while otherwise f(n) := 1.
   For example with fibi : int_seq_bt([1,2]) we get
   fibi(7) = [1, 1, 2, 3, 5, 8, 13]
   (note here that fib is the predefined Fibonacci-function).
*/


/* ***************
   * Power means *
   ***************
*/

/* n-ary arithmetic mean (while the arithmetic mean for branching tuples t
   is just mean(t)): */
meann([t]) := mean(t)$

/* Geometric mean: */
oklib_plain_load(descriptive)$
gmean(t) := geometric_mean(t)$
/* n-ary geometric mean: */
gmeann([t]) := gmean(t)$

/* Harmonic mean: */
hmean(t) := harmonic_mean(t)$
/* n-ary harmonic mean: */
hmeann([t]) := hmean(t)$

/* Power means with index -inf <= p <= inf: */
genmean(t, p) := if p = minf then lmin(t) elseif p = 0 then gmean(t) elseif p = inf then lmax(t) else mean(t^p)^(1/p)$
/* (n+1)-ary power means: */
genmeann([u]) := genmean(rest(u,-1), last(u))$
/* Binary power mean: */
genmean2(x,y,p) := genmeann(x,y,p)$
/* Ternary power mean: */
genmean3(x,y,z,p) := genmeann(x,y,z,p)$


/* ***********************************************
   * Lower and upper bounds for the tau-function *
   ***********************************************
*/

load (descriptive)$

/* The lower bound given by the arithmetic mean: */
tau_lo(t) := if length(t)=1 then 1 else length(t)^(1/mean(t))$
/* n-ary version: */
tau_lon([t]) := tau_lo(t)$

/* The upper bound given by the power means (defined below): */
tau_up(t) := if length(t)=1 then 1 else length(t)^(1/genmean(t,2-length(t)))$
/* n-ary version: */
tau_upn([t]) := tau_up(t)$

/* Logarithmic versions: */
ltau_lo(t) := if length(t)=1 then 0 else log(length(t)) / mean(t)$
fltau_lo(t) := if length(t)=1 then 0 else log(length(t)+0.0) / mean(t)$
bfltau_lo(t) := if length(t)=1 then 0 else log(length(t)+0.0b0) / mean(t)$
ltau2_lo(a,b) := log(4) / (a+b)$
fltau2_lo(a,b) := float(log(4) / (a+b))$
bfltau2_lo(a,b) := bfloat(log(4) / (a+b))$

/* The variation on ltau2 closest to lambert_w: */
wtau(x) := if x=0 then 0 else ltau2(1,1/x)$

/* Lower bounds for wtau:
     lambert_w(x) <= wtau(x)
     ltau2_lo(1,1/x) = log(4)/(1+1/x) <= wtau(x)
   first lower bound >= second <=> x >= x0 :
fpprec:80;
newtonepsilon : bfloat(10^(-fpprec+5));
mnewton([log(4)/(1+1/x) - lambert_w(x)],[x],[2]);
  [[x0 = 2.8787993695729798495668440485160794111608214742614924382713163235938559992130699b0]]
*/

/* The best known lower bound on Lambert-W: */
lambertw_lo(x) := (log(x) - log(log(x)) + 1) * log(x) / (1+log(x))$
bflambertw_lo(x) := (log(bfloat(x)) - log(log(bfloat(x))) + 1.0b0) * log(bfloat(x)) / (1+log(bfloat(x)))$
/* The difference to the mean-bound: */
dltau2_llo(a,b) := lambertw_lo(b/a)/b - fltau2_lo(a,b)$
bfdltau2_llo(a,b) := bflambertw_lo(b/a)/bfloat(b) - bfltau2_lo(a,b)$
/*
mnewton([bfdltau2_llo(1,x0)],[x0],[2]);
[x0 = 2.881120662747338304986 2597121946413028734129489594486206966130596348009064425166b0]]
*/

/* Derived lower and upper bounds for wtau(x)

   Based on
     lambert_w(x) <= wtau(x) <= ln(x / lambert_w(x) + 1)
*/
wtau_lo(x) := max(log(4)/(1+1/x), lambertw_lo(x))$
wtau_up(x) := min(log(2)*sqrt(x), log(x*(1+log(x)) / (log(x) - log(log(x)) + 1) / log(x) + 1))$

/* One step of Newton-iteration for computing wtau(x): */
wtau_newton(x, x0) :=
  x0 + (exp(-x0) + exp(-x0/x) - 1) / (exp(-x0) + exp(-x0/x) / x)$


/* Lower and upper bounds expanded by one step of Newton-iteration (where
   the latter now also yields a lower bound):
*/
wtau_lo1(x) := block([x0 : wtau_lo(x)], wtau_newton(x, x0))$
wtau_up1(x) := block([x0 : wtau_up(x)], wtau_newton(x, x0))$

bfwtau_lo1(x) := block([x0 : bfloat(wtau_lo(x))], bfloat(wtau_newton(x, x0)))$
bfwtau_up1(x) := block([x0 : bfloat(wtau_up(x))], bfloat(wtau_newton(x, x0)))$
wtau_diffib(x) := wtau_up1(x) - wtau_lo1(x)$
bfwtau_diffib(x) := bfwtau_up1(x) - bfwtau_lo1(x)$

/*
fpprec : 100;
plot2d(bfwtau_diffib(x), [x,10^0,10^2]);

It seems that wtau_diffib(x) >= 0 except for the range between the
following two zeros:

zero_interval(wtau_diffib, 3.0b0, 5.0b0, 10^-50);
  3.886572523782958878846061768714522830040856924998522836139657229604329641267966426860715589450011058b0
zero_interval(wtau_diffib, 20.0b0, 30.0b0, 10^-50);
  2.884297132043715060543685463152041847614073215735904484131704320110123434269763134526036124364762838b1
*/


/* ****************************
   * Comparison of tau-values *
   ****************************
*/

/* bt_comparison(t,alpha) is pos, zero, neg if tau(t) > alpha resp. 
   = alpha resp. < alpha 
   (this decision uses only symbolic means, no numeric ones): */
bt_comparison(t,alpha) := sign(radcan(chi(t,alpha) - 1))$
/* Remark: This function can return wrong results, and better results
   (but slower) are obtained by using simplify_t instead of radcan.
   Furthermore bfloat-computations may be used, which might also yield
   wrong results. One can turn off the bfloat-computations via
   setting signbfloat : false, but then also the power of reduction
   decreases.
*/


/* *******************************************************
   *   Computing the tau-function                        *
   *******************************************************
*/

/* The chi-functional: */
chi(t,x) := bt_sum(x^(-t))$

/* For fixed t, the function computing the Newton-step (what is to be added
   to the old x for the new x, i.e., -f(x)/f'(x)) for the equation
   f(x) = chi(t,x)-1 = 0:
*/
chi_newtonstep(t) := buildq([t],
 lambda([x], block([p : x^(-t)],
  return((apply("+",p)-1) / apply("+",t*p/x)))))$

/* Computing the tau-function by the Newton-method: */
gtau(t) := block([l:length(t)],
 if l = 0 then return(inf) elseif l = 1 then return(1),
 return(
  block([x : tau_lo(t), xp, dxf : chi_newtonstep(t)],
   do (xp : x + dxf(x), if xp <= x then return(x), x:xp)
  )))$
declare(gtau, posfun)$

/* Given a branching tuple, compute its tau-value as float (supplying a
   standard eps appropriate for float):
*/
tau(t) := gtau(float(t))$
declare(tau, posfun)$
/* n-ary version: */
taun([v]) := tau(v)$
declare(taun, posfun)$

/* Binary and ternary versions: */
tau2(x,y) := taun(x,y)$
declare(tau2, posfun)$
tau3(x,y,z) := taun(x,y,z)$
declare(tau3, posfun)$


/* Now computing log(tau(t)) */

lchi(t,x) := bt_sum(exp(x*-t))$

lchi_newtonstep(t) := buildq([t],
 lambda([x], block([p : exp(x*-t)],
  return((apply("+",p)-1) / apply("+",t*p)))))$

ltau(t) := block([l:length(t)],
 if l = 0 then return(inf) elseif l = 1 then return(0),
 return(
  block([x : fltau_lo(t), xp, dxf : lchi_newtonstep(t)],
   do (xp : x + dxf(x), if xp <= x then return(x), x:xp)
  )))$
declare(ltau, posfun)$
ltaun([v]) := ltau(v)$
declare(ltaun, posfun)$

ltau2(x,y) := ltaun(x,y)$
declare(ltau2, posfun)$
ltau3(x,y,z) := ltaun(x,y,z)$
declare(ltau3, posfun)$


/* ********************
   * Higher precision *
   ********************
*/

/* General remarks on floating-point representations:
   Use float(x) to compute a floating-point representation of x. 
   To use higher precision, set fpprec to the required number of
   decimal digits, and convert via bfloat. 
   Or use the following conversion function.
*/
/* Convert a number to a number with a given precision: */
hp_float(x, decimal_digits) := block([fpprec : decimal_digits], bfloat(x))$

/* The tau-value with a given precision: */
tau_hp(t, decimal_digits) := block([fpprec : decimal_digits],
  gtau(bfloat(t)))$

bfltau(t) := block([l:length(t), mine],
 if l = 0 then return(inf) elseif l = 1 then return(0),
 mine : lmin(t),
 t : t/mine,
 return(
  block([x : bfltau_lo(t), xp, dxf : lchi_newtonstep(t)],
   do (xp : x + dxf(x), if xp <= x then return(x), x:xp)
  )/mine))$
declare(bfltau, posfun)$

ltau_hp(t,d) := block([fpprec : d], bfltau(bfloat(t)))$


/* ************************
   * Symbolic computation *
   ************************
*/

oklib_plain_include(sqdnst)$

/* Computes a symbolical solution if possible (otherwise returns false): */
tau_symbolical(t) := block([l : length(t), x, sol, pos_sol, n_pos, breakup:breakup],
 if l = 0 then inf elseif l = 1 then 1
 else (sol : map(rhs, solve(chi(t,x)-1, x)), 
       pos_sol : sublist_indices(sol, lambda([x], is(x > 0))),
       n_pos : length(pos_sol),
       if n_pos = 1 then 
         return(sqrtdenest(sqrtdenest(sol[pos_sol[1]])))
       elseif n_pos >= 2 then print("INCONSISTENCY with tau_symbolical for ", t)
       else return(false)))$
/* Remark: Apply "optimize" to the result to obtain a representation with
   shared subterms. */


/* ***********************************
   * Derivatives of the tau-function *
   ***********************************
*/

/* The total differential for the tau-function: */
Dtau(t) := block([tv : tau(t)], block([pv : tv^(-t)],
  return((-tv * log(tv) / apply("+", t * pv)) * pv)))$

Dtaun([t]) := Dtau(t)$
Dtau2(x,y) := Dtaun(x,y)$
Dtau3(x,y,z) := Dtaun(x,y,z)$

/* Symbolic differentiation of tau2: */
Dtau2s(x,y) := block( [ tv : tau2s(x,y)], block( [pv : tv^(-[x,y]) ] ,
  return((- tv * log(tv) / apply("+", [x,y] * pv)) * pv)))$

gradef(tau2s(x,y), Dtau2s(x,y)[1], Dtau2s(x,y)[2])$


/* ****************************************
   * The induced probability distribution *
   ****************************************
*/

/* The probability distribution derived from a non-empty branching tuple: */
tauprob(t) := if length(t)=1 then [1] else
 block([ts : t / lmin(t)], tau(ts)^(-ts))$
tauprobn([t]) := tauprob(t)$
tauprob2(x,y) := tauprobn(x,y)$
tauprob3(x,y,z) := tauprobn(x,y,z)$

/* Higher precision: */
tauprob_hp(t, decimal_digits) := if length(t)=1 then [1] else
 block([fpprec : fpprec], 
  fpprec : decimal_digits, t : bfloat(t),
  block([ts : t / lmin(t)], tau_hp(ts,decimal_digits)^(-ts)))$

/* Symbolical computation (if possible): */
tauprob_symbolical(t) := tau_symbolical(t)^(-t)$
/* Applying factor(expand(r)), radcan(r) or fullratsimp(r) to the result r 
   might help simplifying. */

/* The canonical inversion for tuples p with bt_sum(p) = 1: */
invtauprob(p) := -map(log,p)$
/* tauprob(invtprop(p)) = p and invtprop(tauprob(t)) = t * log(tau(t)) */


/* ****************
   * The tau-mean *
   ****************
*/

/* Auxiliary function to test for zero: */
zerop(x) := is(equal(x,0))$
/* Auxiliary function to test for +infinity: */
infp(x) := is(equal(x,inf))$

/* The basic tau-mean: */
taumeanb(t) := float(log(length(t))) / log(tau(t))$
taumeanb2(x,y) := taumeanb([x,y]);
taumeanb3(x,y,z) := taumeanb([x,y,z]);
/* The tau-mean for tuples allowing zero-values: */
taumean(t) := if length(t) <= 1 then inf 
  elseif some_s(zerop, t) then 0 
  else float(log(length(t))) / log(tau(t))$
/* The n-ary tau-mean: */
taumeann([t]) := taumean(t)$
/* The binary tau-mean: */
taumean2(x,y) := taumeann(x,y)$
/* The ternary tau-mean: */
taumean3(x,y,z) := taumeann(x,y,z)$

/* Tau-mean additionally also allowing inf-values: */
taumean_inf(t) := if some_s(infp, t) then 
    block([t : delete(inf, t)], if t = [0] then unknown else taumean(t))
  else taumean(t)$
taumean_infn([t]) := taumean_inf(t)$


/* *********************************************
   *   Convexity considerations: line versions *
   *********************************************
*/


/* Considerung for a branching tuple t0 and a direction d0 (a real vector of
   the same length as t) the function x -> tau(t0 + x * d0): */

tau_line(x) := (local(x), tau(t0 + x * d0))$
logtau_line(x) := (local(x), log(tau(t0 + x * d0)))$
loglogtau_line(x) := (local(x), log(logtau_line(x)))$
tauprob_line(x) := (local(x), tauprob(t0 + x * d0)[i0])$
taumean_line(x) := (local(x), taumean(t0 + x * d0))$
/* assume(length(t0) >= 1), assume(t0[i] > 0) */
taumeandiff_line(x) := (local(x, t), 
  block([t : t0 + x * d0], taumean(t) - genmean(t, p0))
)$

/* Returning the interval bounds (for the open interval): */
tau_line_dom() := block(
  [pos : sublist_indices(d0, lambda([x], x > 0)), neg : sublist_indices(d0, lambda([x], x < 0))],
  [lmax(- part(t0, pos) / part(d0,pos)), lmin(- part(t0, neg) / part(d0, neg))]
)$


/* The chi-function on a line (but chi(t,x) only for x > 1): */
chi_line(x) := (local(x), chi(t0 + x * d0, a0 + x * b0))$
/* assume(length(t0) >= 2), assume(t0[i] > 0), assume(a0 > 1) */

chi_line_dom() :=
 block([ts : append(t0, [a0 - 1]), ds : append(d0, [b0])], 
   block(
    [pos : sublist_indices(ds, lambda([x], x > 0)), neg : sublist_indices(ds, lambda([x], x < 0))],
    [lmax(- part(ts, pos) / part(ds,pos)), lmin(- part(ts, neg) / part(ds, neg))]
))$

chin([u]) := chi(rest(u,-1), last(u))$
chi2(t1,t2,x) := chin(t1,t2,x)$
chi3(t1,t2,t3,x) := chin(t1,t2,t3,x)$

hess_chi2 : hessian(chi2(t1,t2,x),[t1,t2,x])$
/* if for example x has a value, then apply remvalue(x), or, better, kill(x) */

eigen_chi2(a,b,c) := eigens_by_jacobi(at(hess_chi2, [t1=a,t2=b,x=c]))$
/* a, b > 0, c > 1 */
test_posdef_chi2(a,b,c) := lmin(eigen_chi2(a,b,c)[1])$


/* ************************************
   * Investigations on approximations *
   ************************************
*/

/* Consider the bounds
     genmean(t,k-2) <= taumeanb(t) <= mean(t).
*/

/* For k = 2 the lower bound is always better as an approximation than
   the upper bound.
   Here we investigate how this can be quantified. 
*/
/* For k >= 3 this is not always the case (example [5.0,5.0,0.835]),
   but it appears that still the lower bound yields a better approximation:
    - perhaps regarding the integral. ?
*/
/* It is now known yet what happens for k > 3. */

dltau_2(x,y) := taumeanb2(x,y) - float(gmean([x,y]))$
dutau_2(x,y) := mean([x,y]) - taumeanb2(x,y)$
dtau_2(x,y) := dutau_2(x,y) - dltau_2(x,y)$
/* For all x,y > 0 we have dtau_2(x,y) >= 0 (equality holds
   iff x = y). */

dltau_3(x,y,z) := taumeanb3(x,y,z) - float(hmean([x,y,z]))$
dutau_3(x,y,z) := mean([x,y,z]) - taumeanb3(x,y,z)$
dtau_3(x,y,z) := dutau_3(x,y,z) - dltau_3(x,y,z)$


/*!
\endhtmlonly
*/
