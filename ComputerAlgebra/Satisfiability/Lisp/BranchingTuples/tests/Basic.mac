/* Oliver Kullmann, 20.8.2009 (Swansea) */
/* Copyright 2009, 2011, 2019 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/BranchingTuples/tests/Basic.mac
  \brief Tests for basic operations related to the tau-function

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/BranchingTuples/tests/Basic.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/MaximaInternals/Auxiliary.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/BranchingTuples/Basic.mac")$

kill(f)$

/* ************************
   * Elementary functions *
   ************************
*/

okltest_bt_apply_permutation(f) := block([x,y],
  assert(f([],[]) = []),
  assert(f([1],[x]) = [x]),
  assert(f([1,2],[x,y]) = [x,y]),
  assert(f([2,1],[x,y]) = [y,x]),
  assert(f([3,2,1],[x,y,10]) = [10,y,x]),
  true)$

okltest_int_seq_bt(f) := block([s],
  s : f([5]),
  for n : 0 thru 10 do
    assert(s(n) = create_list(1,i,1,n)),
  s : f([1,2]),
  for n : 0 thru 6 do
    assert(s(n) = create_list(fib(i+1),i,0,n-1)),
  s : f([1,3]),
  assert(s(8) = [1,1,1,2,3,4,6,9]),
  s : f([2,4,3]),
  true)$


/* ***************
   * Power means *
   ***************
*/

okltest_meann(f) := block([x,y,z],
  assert(f(x) = x),
  assert(f(x,y) = (x+y)/2),
  assert(f(x,y,z) = (x+y+z)/3),
  true)$

okltest_gmean(f) := block([x,y,z],
  assert(f([x]) = x),
  assert(f([x,y]) = sqrt(x*y)),
  assert(f([x,y,z]) = (x*y*z)^(1/3)),
  assert(f([0,x,y,z]) = 0),
  true)$

okltest_gmeann(f) := block([x,y,z],
  assert(f(x) = x),
  assert(f(x,y) = sqrt(x*y)),
  assert(f(x,y,z) = (x*y*z)^(1/3)),
  assert(f(0,x,y,z) = 0),
  true)$

okltest_hmean(f) := block([x,y,z],
  assert(f([x]) = x),
  assert(f([x,y]) = 2/(1/x+1/y)),
  assert(f([x,y,z]) = 3/(1/x+1/y+1/z)),
  true)$

okltest_hmeann(f) := block([x,y,z],
  assert(f(x) = x),
  assert(f(x,y) = 2/(1/x+1/y)),
  assert(f(x,y,z) = 3/(1/x+1/y+1/z)),
  true)$


/* ***********************************************
   * Lower and upper bounds for the tau-function *
   ***********************************************
*/

okltest_tau_lo(f) := block([a,b],
  assert(f([a]) = 1),
  assert(simplify_t(f([a,b]) = 4^(1/(a+b)))),
  true
)$

okltest_tau_lon(f) := block([a,b,c],
  assert(f(a) = 1),
  assert(simplify_t(f(a,b) = 4^(1/(a+b)))),
  assert(simplify_t(f(a,b,c) = 27^(1/(a+b+c)))),
  assert(f(a,a,a,a) = 4^(1/a)),
  true
)$

okltest_tau_up(f) := block([a,b,c],
  assert(f([a]) = 1),
  assert(f([a,b]) = 2^(1/sqrt(a*b))),
  assert(simplify_t(f([a,b,c]) = (3^(1/3))^(1/a + 1/b + 1/c))),
  true)$

okltest_tau_upn(f) := block([a,b,c],
  assert(f(a) = 1),
  assert(f(a,b) = 2^(1/sqrt(a*b))),
  assert(simplify_t(f(a,b,c) = (3^(1/3))^(1/a + 1/b + 1/c))),
  assume_pos : true,
  assert(f(a,a) = 2^(1/a)),
  assert(f(a,a,a) = 3^(1/a)),
  assert(f(a,a,a,a) = 4^(1/a)),
  true)$


/* ****************************
   * Comparison of tau-values *
   ****************************
*/

okltest_bt_comparison(f) := block([signbfloat : true],
  assert(f([1,1], 2) = zero),
  assert(f([1,1], 3) = neg),
  assert(f([1,1], 1) = pos),
  assert(f([1,2], (sqrt(5)+1)/2) = zero),
  assert(f([1,2], (sqrt(5)+1)/2 + 10^-1000) = neg),
  assert(f([1,2], (sqrt(5)+1)/2 - 10^-1000) = pos),
  true)$


/* ********************************
   *   Computing the tau-function *
   ********************************
*/

okltest_chi(f) := block([x,a,b,c],
  assert(f([],x) = 0),
  assert(f([a],x) = x^(-a)),
  assert(f([a,b],x) = x^-a + x^-b),
  assert(f([a,b,c],x) = f([a,b],x) + x^-c),
  true)$

okltest_chi_newtonstep(f) := block([x,a,b,c],
  assert(f([a])(x) = (x^-a - 1)/(a*x^(-a-1))),
  assert(f([a,b])(x) = (x^-a + x^-b - 1) / (a*x^(-a-1) + b*x^(-b-1))),
  assert(f([a,b,c])(x) = (x^-a + x^-b + x^-c - 1) / (a*x^(-a-1) + b*x^(-b-1) + c*x^(-c-1))),
  true)$

okltest_gtau(f) := block([a],
  assert(f([]) = inf),
  assert(f([a]) = 1),
  assert(f([1,1]) = 2),
  assert(f([1,1,1]) = 3),
  assert(f([1,1,1,1]) = 4),
  assert(f(float([2,3])) = 1.3247179572447460),
  true)$

okltest_tau(f) := block([a],
  assert(f([]) = inf),
  assert(floatnump(f([])) = false),
  assert(f([a]) = 1),
  assert(floatnump(f([a])) = false),
  assert(f([1,1]) = 2.0),
  assert(floatnump(f([1,1])) = true),
  assert(f([1,2]) = 1.618033988749895),
  assert(f([1,3]) = 1.465571231876768),
  assert(f([1,4]) = 1.3802775690976141),
  assert(f([2,3]) = 1.3247179572447460),
  true)$

okltest_taun(f) := block([a],
  assert(f(a) = 1),
  assert(f(1e-3,1e-3) = 1.0715086071862673e+301), /* last two digits are in fact 519 */
  assert(f(1e15,1e15) = 1.00000000000000069),
  assert(f(1,2,3,4,5) = 1.9659482366454855), /* last digit is 3 */
  true)$

okltest_tau2(f) := (
  assert(abs(f(1,1e15) - 1.00000000000000311) < 10^-13),
  assert(f(1,1e-14) = 3.464250465335383e+12), /* only first three digits are correct */
  true)$

okltest_tau3(f) := (
  assert(f(1,2,3) = 1.839286755214161),
  assert(f(1,2,2.96e16) = 1.618033988749895),
  assert(abs(f(1,2,1e-14) - 3.463865309249857e+12) < 10^-3). /* only first four digits correct */
  true)$

okltest_lchi(f) := block([x,a,b,c],
  assert(f([],x) = 0),
  assert(f([a],x) = exp(x*-a)),
  assert(f([a,b],x) = exp(x*-a) + exp(x*-b)),
  assert(f([a,b,c],x) = f([a,b],x) + exp(x*-c)),
  true)$

okltest_lchi_newtonstep(f) := block([x,a,b,c],
  assert(f([a])(x) = (exp(x*-a) - 1)/(a*exp(x*-a))),
  assert(f([a,b])(x) = (exp(x*-a) + exp(x*-b) - 1) / (a*exp(x*-a) + b*exp(x*-b))),
  assert(f([a,b,c])(x) = (exp(x*-a) + exp(x*-b) + exp(x*-c) - 1) / (a*exp(x*-a) + b*exp(x*-b) + c*exp(x*-c))),
  true)$

okltest_ltau(f) := block([a],
  assert(f([a]) = 0),
  assert(f([1,1]) = float(log(2))),
  assert(f([1,1,1]) = float(log(3))),
  assert(f([1,2]) = float(log(sqrt(5)+1)-log(2))),
  assert(f([10,20]) = float((log(sqrt(5)+1)-log(2))/10)),
  assert(abs(f([1,3]) - float(log(tau_hp([1,3],16)))) < 10^-16),
  assert(abs(f([2,3]) - float(log(tau_hp([2,3],16)))) < 10^-16),
  true)$

okltest_ltaun(f) := block([a],
  assert(f(a) = 0),
  assert(f(1e-3,1e-3) = 693.1471805599452), /* last digit is 3 */
  assert(f(1e15,1e15) = 6.931471805599453e-16),
  assert(f(1,2,3,4,5) = .6759746921034223), /* last digit is 2 */
  true)$


/* ********************
   * Higher precision *
   ********************
*/

oklib_fpprec_old : fpprec;
fpprec:100;
okltest_tau_hp(f) := block([a],
  assert(f([],1) = inf),
  assert(f([a],1) = 1),
  assert(f([1,1],1) = hp_float(2,1)),
  assert(f([1,2],20) - hp_float(1.618033988749894848205b0,20) = 0.0b0),
  assert(abs(f([1e-3,1e-3],20) - hp_float(1.071508607186251860125b301,20)) = 0.0b0),
  assert(hp_float(abs(f([1b-2,2b-2],30) - hp_float(((1+sqrt(5))/2)^100, 30)),100) = 0.0b0),
  assert(f([1,1e15],20) = hp_float(1.00000000000003110152b0,20)),
  true)$
fpprec:oklib_fpprec_old;


/* ************************
   * Symbolic computation *
   ************************
*/

okltest_tau_symbolical(f) := (
  for a : 1 thru 5 do block([t : [1,a], sol, sol_num],
    sol : f(t),
    assert(simplify_t(chi(t,sol) = 1)),
    sol_num : hp_float(sol, 20),
    assert(tau(t) = float(sol_num))
  ),
  true)$


/* ************************************
   * Derivatives of the tau-function *
   ************************************
*/


/* ****************************************
   * The induced probability distribution *
   ****************************************
*/

okltest_tauprob(f) := block([x,res].
  assert(f([0]) = [1]),
  assert(f([x]) = [1]),
  res : f([1,2]),
  assert_float_equal(res[1], 0.6180339887498948),
  assert_float_equal(res[2], 0.3819660112501052),
  assert(f([1,1]) = [0.5, 0.5]),
  assert(f([2,2]) = [0.5, 0.5]),
  assert(f([3,3]) = [0.5, 0.5]),
  for l : 3 thru 4 do
   for v : 1 thru 3 do block([t : create_list(v,i,1,l)],
    res : f(t),
    for r in res do
      assert_float_equal(r, 1/l)
  ),
  true)$

okltest_tauprob_hp(f) := block([x,res,d:30].
  assert(f([0],d) = [1]),
  assert(f([x],d) = [1]),
  res : f([1,2],d),
  assert_bfloat_equal(res[1], 6.18033988749894848204586834366b-1, d),
  assert_bfloat_equal(res[2], 3.81966011250105151795413165634b-1, d),
  for l : 2 thru 4 do
   for v : 1 thru 3 do block([t : create_list(v,i,1,l)],
    res : f(t,d),
    for r in res do
      assert_bfloat_equal(r, 1/l, d)
  ),
  true)$

okltest_tauprob_symbolical(f) := block([x],
  assert(f([0]) = [1]),
  assert(f([x]) = [1]),
  for l : 2 thru 4 do
   for v : 1 thru 3 do 
    assert(f(create_list(v,i,1,l)) = create_list(1/l,i,1,l)),
  assert(f([1,2]) = [2/(sqrt(5)+1),4/(sqrt(5)+1)^2]),
  true)$


/* ****************
   * The tau-mean *
   ****************
*/

okltest_taumean(f) := (
  assert(f([]) = inf),
  assert(f([1]) = inf),
  assert(f([0]) = inf),
  assert(f([2,0]) = 0),
  assert(f([2,0,2]) = 0),
  /* XXX */
  true)$

okltest_taumean_inf(f) := (
  assert(f([inf]) = inf),
  assert(f([inf,inf]) = inf),
  assert(f([0,inf]) = unknown),
  assert(f([0,0,inf]) = 0),
  assert(okltest_taumean(f) = true),
  /* XXX */
  true)$


/* *********************************************
   *   Convexity considerations: line versions *
   *********************************************
*/

/* ************************************
   * Investigations on approximations *
   ************************************
*/


/*!
\endhtmlonly
*/
