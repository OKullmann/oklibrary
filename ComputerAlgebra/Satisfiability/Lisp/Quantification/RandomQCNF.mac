/* Oliver Kullmann, 16.5.2019 (Swansea) */
/* Copyright 2019 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Quantification/RandomQCNF.mac
  \brief Creating random (D)QCNF

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Quantification/RandomQCNF.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/RandomClauseSets.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$


/* *********************************
   * Random DQCNF, all sizes fixed *
   *********************************
*/

/*
 na/ne : number of universal/existential variables
 c     : number of clauses
 ka/ke : number of universal/existential literals in clauses
 ds    : domain size

 ka <= na
 ke <= ne
 ke >= 1
 ds >= ka

Returns an error (calling random(0)) in case the required ka
different variables can not be found in A.

Example:

set_random_state(make_random_state(0))$
random_dqcl_fixed(5,5,6,2,2,2);
[[1,2,3,4,5],[6,7,8,9,10],
 [{3,5,7,9},{-10,-5,3,7},{-10,-5,4,7},{-6,-5,1,8},{-8,-7,-3,5},{-6,-4,3,8}],
 [[6,{4,5}],[7,{1,4}],[8,{4,5}],[9,{3,5}],[10,{3,5}]]
]
random_dqcl_fixed(6,6,6,2,3,4);
[[1,2,3,4,5,6],[7,8,9,10,11,12],
 [{-11,-9,-6,-1,8},{-11,-10,-1,5,12},{-11,-7,-5,3,8},{-11,-5,-1,7,9},{-10,-9,-8,-4,1},{-6,-3,7,8,11}],
 [[7,{2,3,4,6}],[8,{3,4,5,6}],[9,{1,3,4,5}],[10,{1,3,4,6}],[11,{1,3,4,6}],[12,{1,2,5,6}]]
]

*/
random_dqcl_fixed(na,ne,c,ka,ke,ds) := block([
 VA : create_list(i,i,1,na),
 VE : create_list(i,i,na+1,na+ne),
 F:[], D:[], E,A,h,C],
 for i : na+1 thru na+ne do
   D : cons([i, setify(random_k_sublist_l(VA, ds))], D),
 h : sm2hm(D),
 for i : 1 thru c do (
   E : random_k_sublist_l(VE, ke),
   A : lappend(create_list(listify(ev_hm(h,v)),v,na+1,na+ne)),
   A : random_k_sublist_l(A, ka), /* possible error */
   C : append(E,A),
   for j : 1 thru length(C) do if random(2) = 1 then C[j] : -C[j],
   F : cons(setify(C), F)
 ),
 [VA,VE,reverse(F),reverse(D)])$

random_dqcs_fixed(na,ne,c,ka,ke,ds) :=
 dqcl2dqcs(random_dqcl_fixed(na,ne,c,ka,ke,ds))$

/*!
\endhtmlonly
*/
