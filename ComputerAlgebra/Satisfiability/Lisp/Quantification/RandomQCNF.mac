/* Oliver Kullmann, 16.5.2019 (Swansea) */
/* Copyright 2019 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Quantification/RandomQCNF.mac
  \brief Creating random (D)QCNF

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Quantification/RandomQCNF.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Quantification/DQCNF.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/RandomClauseSets.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$


/* *********************************
   * Random DQCNF, all sizes fixed *
   *********************************
*/

/*
 na/ne : number of universal/existential variables
 c     : number of clauses
 ka/ke : number of universal/existential literals in clauses
 ds    : domain size

 ka <= na
 ke <= ne
 ke >= 1
 ds >= ka

Returns an error (calling random(0)) in case the required ka
different variables can not be found in A.

Example:

set_random_state(make_random_state(0))$
random_dqcl_fixed(5,5,2,6,2,2);
[[1,2,3,4,5],[6,7,8,9,10],
 [{1,4,7,9},{-10,-4,1,7},{-10,-5,3,7},{-6,-5,4,8},{-8,-7,-4,5},{-6,-5,4,8}],
 [[6,{4,5}],[7,{1,4}],[8,{4,5}],[9,{3,5}],[10,{3,5}]]]
random_dqcl_fixed(6,6,4,6,2,3);
[[1,2,3,4,5,6],[7,8,9,10,11,12],
 [{-11,-9,-6,-5,8},{-11,-10,-1,5,12},{-11,-7,-4,3,8},{-11,-4,-3,7,9},{-10,-9,-8,-5,1},{-6,-4,7,8,11}],
 [[7,{2,3,4,6}],[8,{3,4,5,6}],[9,{1,3,4,5}],[10,{1,3,4,6}],[11,{1,3,4,6}],[12,{1,2,5,6}]]]
random_dqcl_fixed_bl(8,10,3,[[3,2,2],[4,3,1]]);
[[1,2,3,4,5,6,7,8],[9,10,11,12,13,14,15,16,17,18],
 [{-14,2,3,12},{-12,3,5,9},{-12,2,8,15},{-4,-2,1,11},{-15,1,3,8},{4,6,8,14},{-3,2,8,12}],
 [[9,{3,5,8}],[10,{1,7,8}],[11,{1,2,4}],[12,{2,3,8}],[13,{1,3,8}],[14,{4,6,8}],[15,{1,3,8}],[16,{2,5,7}],[17,{2,3,4}],[18,{3,5,7}]]]

TODOS:

1. General plans (e-mail from 10.4.2019):

The types of DQCNFs generated:

1. The dependencies:
 (a) include every universal variable v with given probability p_v; or
 (b) Fix a uniform dependency-size k, and choose always k at random.
I can't see a (natural) model which in the extreme case includes QBF, that is,
that the dependencies are linearly ordered. Do you see one?

2. The clauses
 Best seem to consider existential and universal variable separately,
 and choose first the existential, and then the universal ones.
 (a) For the existential variables three possibilities:
  I. Include e-var v with probability p_v
  II. Fixed e-clause-size k, uniform choice at random
  III. Fixed e-clause-size k, and additionally the degrees d_v of every
  existential variable are given.
 For signs, choose sign with probability 1/2, or allow for every
 variable probability p_v.
 (b) For every clause C and the chosen e-variables, determine the set
 A_C = union of D_v for the chosen v-variables, and from them
  I. Fixed a-clause-size k', uniformly chosen, or
  II. Include a-variable v with probability p_v.
  (All the mentioned probabilities are independent of each other; they
  might come from a pool of interesting distributions.)

3. Indeed, we can just revert Point 2, and choose first the universal
variables, according to one of the three methods, and then the
existential ones (two methods), using then the inverse dependency-relation.

For reproducibility, probabilities are given as fractions p/q, with p, q
64-bit unsigned integers (that seems enough).

Having these numbers, we can assure reproducibility. For probability
distributions, the C++ standard includes various ones:
  https://en.cppreference.com/w/cpp/numeric/random
but all of them need to be implemented, since the C++ standard does not
fix an algorithm for them, and thus reproducibility is not guaranteed.
(I have started this business in my module Random.)

*/
/* Random dqcnf, as a 4-tuple of lists, with the clauses in the order
   of generation.
*/
/* Creating the variables and the dependency-map: */
create_VA_dqcl(na,ne) := create_list(i,i,1,na)$
create_VE_dqcl(na,ne) := create_list(i,i,na+1,na+ne)$
create_randomD_dqcl(VA,VE,ds) :=
 map(lambda([v], [v, setify(random_k_sublist_l(VA, ds))]), VE)$
/* The main function: */
random_dqcl_fixed(na,ne,ds,c,ka,ke) :=
 random_dqcl_fixed_bl(na,ne,ds,[[c,ka,ke]])$
/* More generally, the block-version: */
random_dqcl_fixed_bl(na,ne,ds,B) := block([
 VA : create_VA_dqcl(na,ne), VE : create_VE_dqcl(na,ne), D],
 D : create_randomD_dqcl(VA,VE,ds),
 [VA,VE,lappend(create_list(
          random_dqcl_fixed_cl(VA,VE,D,b[1],b[2],b[3]), b,B)),D])$
/* Given the frame VA,VE,D and one block c,ka,ke, produce random clauses: */
random_dqcl_fixed_cl(VA,VE,D,c,ka,ke) := block([F:[], h,E,A,C],
 h : sm2hm(D),
 for i : 1 thru c do (
   E : random_k_sublist_l(VE, ke),
   A : lappend(create_list(listify(ev_hm(h,v)),v,E)),
   A : random_k_sublist_l(A, ka), /* possible error */
   C : append(E,A),
   for j : 1 thru length(C) do if random(2) = 1 then C[j] : -C[j],
   F : cons(setify(C), F)
 ),
 reverse(F))$

random_dqcs_fixed(na,ne,ds,c,ka,ke) :=
 dqcl2dqcs(random_dqcl_fixed(na,ne,ds,c,ka,ke))$

output_random_dqcl_fixed(na,ne,ds,c,ka,ke) := block([
  F : random_dqcl_fixed(na,ne,c,ka,ke,ds),
  c1 : sconcat("Created by Maxima::output_random_dqcl_fixed(",na,",",ne,",",ds,",",ka,",",ke,",",c,")."),
  c2 : created_by_OKlib(),
  filename : sconcat("Random_DQCNF_",na,"_",ne,"_",ds,"_",ka,"_",ke,"_",c,".cnf")],
  F[3] : sort_cl(F[3]),
  with_stdout(filename, print_dqcl_comments(F, [c1,c2]))
)$



/* A random assignment of A1-pas for domain D: */
random_tdqpa(D) := block([phi : []],
 for p in D do
   phi : cons([first(p), random_element(listify(all_1wbf(second(p))))], phi),
 setify(phi))$

/* A random dqcl F, which is satisfied by a random A1-total assignment phi,
   returning [F,phi]:

TODOS:

0. UPDATE

1. Add another parameter k, the number of satisfying assignments considered.
   phi then becomes a list, and satisfyp_dqpac then takes this list
   as first argument.

2. Supply the list of satisfying assignments as arguments.

3. Supply other types of models.
    - Random boolean functions.

*/
random_satA1_dqcl_fixed(na,ne,c,ka,ke,ds) := block([
 VA : create_list(i,i,1,na),
 VE : create_list(i,i,na+1,na+ne),
 F:[], D:[], phi,E,A,h,i:0],
 for i : na+1 thru na+ne do
   D : cons([i, setify(random_k_sublist_l(VA, ds))], D),
 phi : random_tdqpa(D),
 h : sm2hm(D),
 while i < c do (
   E : random_k_sublist_l(VE, ke),
   A : lappend(create_list(listify(ev_hm(h,v)),v,E)),
   A : random_k_sublist_l(A, ka), /* possible error */
   for j : 1 thru length(E) do if random(2) = 1 then E[j] : -E[j],
   for j : 1 thru length(A) do if random(2) = 1 then A[j] : -A[j],
   A : setify(A), E : setify(E),
   if satisfyp_dqpac(phi,A,E) then (
     F : cons(union(A,E), F), i : i + 1
   )
 ),
 [[VA,VE,reverse(F),reverse(D)], phi])$


/*!
\endhtmlonly
*/
