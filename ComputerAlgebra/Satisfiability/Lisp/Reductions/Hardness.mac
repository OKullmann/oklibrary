/* Matthew Gwynne, 21.6.2011 (Swansea) */
/* Copyright 2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Reductions/Hardness.mac
  \brief Functions related to the hardness of clause-sets

  The hardness of a clause-set F is the minimum k in N such that
  all clauses C which follow from F can be detected via r_k.

  That is, the minimum k in N for which for all clauses C with
  F |= C we have generalised_ucp(apply_pa(comp_sl(C),F),k) = {{}}.

  See "Hardness of boolean function representations" in
  Experimentation/Investigations/BooleanFunctions/plans/general.hpp.

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Reductions/Hardness.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Statistics.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Reductions/GeneralisedUCP.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Resolution/PrimeImplicatesImplicants.mac")$


/* ***************************
   * Computing the hardness  *
   ***************************
*/

/* Computing the hardness of a clause-set F with it's prime implicates F_PI
   as input.

   In the case there is a clause C in F_PI which does not follow from
   F, hardness_wpi returns und.
*/
hardness_wpi(F,F_PI) := block([max_k : 0, count : 0, maxcount, n],
  maxcount : length(F_PI), n : nvar_cs(F),
  for C in F_PI do block([F_phi : apply_pa(comp_sl(C),F)],
    count : count + 1,
    if oklib_monitor and mod(count, 50) = 0 then
      print(sconcat("[",count,"/",maxcount,"] Hardness(F) >= ", max_k," ...")),
    for k : 0 while generalised_ucp(F_phi,k) # {{}} and k <= n do
      max_k : max(max_k, k + 1)),
  if max_k > n then return(und) else return(max_k))$
/* Taking just the clause-set F and computing the prime implicates. */
hardness(F) := hardness_wpi(F,min_resolution_closure_cs(F)[1])$

/*!
\endhtmlonly
*/

