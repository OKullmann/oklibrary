/* Oliver Kullmann, 30.4.2008 (Guangzhou) */
/* Copyright 2008, 2013, 2018 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Symmetries/tests/Symmetries.mac
  \brief Tests for symmetry operations (on clause-sets)

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Symmetries/tests/Symmetries.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/Pigeonhole.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Reductions/GeneralisedUCP.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Symmetries/Symmetries.mac")$


kill(f)$

/* *****************
   * Automorphisms *
   *****************
*/

okltest_num_varauto_fcs(f) := (
  assert(f([{},{}]) = 1),
  assert(f([{1,2},{}]) = 2),
  assert(f([{1,2},{{1}}]) = 1),
  /* assert(f([{1,2,3,4,5,6,7,8,9,10}, {{1,2},{1,5},{1,6},{2,3},{2,7},{3,4},{3,8},{4,5},{4,9},{5,10},{6,8},{6,9},{7,9},{7,10},{8,10}}]) = 120), */ /* mg2g(petersen_graph()); takes 90 min */
  true)$

okltest_num_flipauto_fcs(f) := (
  assert(f([{},{}]) = 1),
  assert(f([{1,2},{}]) = 4),
  assert(f([{1,2,3},{{1},{-1},{2},{3},{-3}}]) = 4),
  assert(f([{1,2},{{1,2},{-1,-2}}]) = 2),
  true)$

okltest_num_auto_fcs(f) := (
  assert(f([{},{}]) = 1),
  assert(f([{1,2},{}]) = 8),
  assert(f([{1,2},{{1}}]) = 2),
  assert(f([{1,2,3},{{1},{-1},{2},{3},{-3}}]) = 8),
  assert(f([{1,2},{{1,2},{-1,-2}}]) = 4),
  true)$


/* ***********************
   * Isomorphism testing *
   ***********************
*/

/* Generic test function, checking for fcs-isomorphism-predicates: */

okltest_is_isomorphic_fcs(f) := block(
  assert(f([{},{}],[{},{}]) = true),
  assert(f([{},{{}}],[{},{{}}]) = true),
  assert(f([{},{}],[{},{{}}]) = false),
  assert(f([{},{}],[{1},{}]) = false),
  assert(f([{2},{}],[{1},{}]) = true),
  assert(f([{1},{{-1},{1}}],[{2},{{-2},{2}}]) = true),
  assert(f([{1},{{1}}],[{1},{{-1}}]) = true),
  assert(f([{1},{{1},{}}],[{1},{{-1}}]) = false),
  assert(f([{1,2,3},{{-3,-2},{-3,-1,2},{-3,1,2},{-2,-1,3},{-1,2,3},{1,3}}],
    [{1,2,3},{{-3,-2},{-3,-1,2},{-3,1,2},{-2,-1,3},{-2,1,3},{2,3}}])
    = false),
  assert(f([{1,2,3},{{-3,-2},{-3,-1,2},{-3,1,2},{-2,-1,3},{-1,2,3},{1,3}}],
    [{1,2,3},{{-3,-2},{-3,1,2},{-2,-1,3},{-2,1,3},{-1,2},{1,2,3}}]) = true),
  assert(f([{1,2,3},{{-3,-2},{-3,1,2},{-2,-1,3},{-2,1,3},{-1,2},{1,2,3}}],
    [{1,2,3},{{-3,-2},{-3,-1,2},{-3,1,2},{-2,-1,3},{-1,2,3},{1,3}}]) = true),
  assert(f([{1,2,3,4},{{-4,-3},{-4,-1,2,3},{-4,1,3},{-3,-2,-1,4},{-2,-1,3},{-2,1,4},{2,4}}],
    [{1,2,3,4},{{-4,-3},{-4,1,2,3},{-3,-2,1,4},{-3,-1,4},{-2,3},{-1,2,3},{1,2,4}}])
    = true),
  if oklib_test_level = 0 then return(true),
  for n : 3 thru 4 do block([FF : weak_php_fcs(n+1,n), v, G],
    v : choose_element(FF[1]),
    G : apply_pa_f({v},FF),
    G : cs_to_fcs(weakaut_red(generalised_ucp1(G[2]),1)),
    assert(f(G, weak_php_fcs(n,n-1)) = true)
  ),
  block([FF1 : full_fcs(3), FF2 : full_fcs(3)],
    assert(f(FF1,FF2) = true),
    assert(FF1 = full_fcs(3)), assert(FF2 = full_fcs(3))
  ),
  true)$

okltest_is_varisomorphic_fcs_p(f) := block(
  assert(f([{},{}],[{},{}]) = true),
  assert(f([{},{{}}],[{},{{}}]) = true),
  assert(f([{},{}],[{},{{}}]) = false),
  assert(f([{},{}],[{1},{}]) = false),
  assert(f([{2},{}],[{1},{}]) = true),
  assert(f([{1},{{-1},{1}}],[{2},{{-2},{2}}]) = true),
  assert(f([{1},{{1}}],[{1},{{-1}}]) = false),
  assert(f([{1},{{1},{}}],[{1},{{-1}}]) = false),
  assert(f([{1,2},{{},{1},{2},{1,2},{-1}}], [{1,3},{{},{1},{3},{1,3},{-3}}]) = true),
  true)$


/* **********************************
   * Isomorphism classes management *
   **********************************
*/

okltest_representatives_fcs(f) := block([FF,SFF],
  assert(f({}) = {}),
  assert(f({FF}) = {FF}),
  assert(f({[{},{{}}],[{},{}]}) = {[{},{{}}],[{},{}]}),
  block([R : f({[{1},{}], [{2},{}], [{},{}]})],
    assert(length(R) = 2),
    assert(elementp([{},{}], R) = true),
    assert(length(intersection(R, {[{1},{}], [{2},{}]})) = 1)
  ),
  SFF : 
   {[setn(4),{{-4,-3,-2},{-4,-3,-1,2},{-4,-3,1,2},{-4,-2,-1,3},{-4,-2,1,3},
   {-4,-1,2,3},{-3,-2,-1,4},{-3,-2,1,4},{-3,-1,2,4},{-3,1,2,4},
   {-2,-1,3,4},{-2,1,3,4},{-1,2,3,4},{1,2,3}}],
   [setn(4),{{-4,-3,-2,-1},{-4,-3,-2,1},{-4,-3,-1,2},{-4,-2,-1,3},
   {-4,-2,1,3},{-4,-1,2,3},{-3,-2,-1,4},{-3,-2,1,4},{-3,-1,2,4},
   {-3,1,2},{-2,-1,3,4},{-2,1,3,4},{-1,2,3,4},{1,2,3}}]},
  assert(f(SFF) = SFF),
  true)$

okltest_manage_repository_isomorphism_types(f) := block([repo,M,FF1,FF2,deg],
  repo : sm2hm({}),
  assert(f([{},{}],repo) = true),
  M : {[[0,0,[],[]], {[{},{}]}]},
  assert(hm2sm(repo) = M),
  assert(f([{},{}],repo) = false),
  assert(hm2sm(repo) = M),
  assert(f([{},{{}}],repo) = true),
  M : adjoin([[0,1,[],[[0,1]]], {[{},{{}}]}], M),
  assert(hm2sm(repo) = M),
  assert(f([{},{{}}],repo) = false),
  assert(hm2sm(repo) = M),
  assert(f([{1},{}],repo) = true),
  M : adjoin([[1,0,[[0,2]],[]],{[{1},{}]}], M),
  assert(hm2sm(repo) = M),
  assert(f([{1},{}],repo) = false),
  assert(hm2sm(repo) = M),
  assert(f([{2},{}],repo) = false),
  assert(hm2sm(repo) = M),
  assert(f([{1},{{1}}],repo) = true),
  M : adjoin([[1,1,[[0,1],[1,1]],[[1,1]]], {[{1},{{1}}]}], M),
  assert(hm2sm(repo) = M),
  assert(f([{1},{{1}}],repo) = false),
  assert(hm2sm(repo) = M),
  FF1 : [setn(4),{{-4,-3},{-4,-1,2,3},{-4,1,2,3},{-3,-2,4},{-2,-1,3},{-2,1,3},{2,4}}],
  assert(f(FF1,repo) = true),
  deg : [4,7,[[2,4],[3,3],[4,1]],[[2,2],[3,3],[4,2]]],
  M : adjoin([deg, {FF1}], M),
  assert(hm2sm(repo) = M),
  FF2 : [setn(4),{{-4,-3},{-4,2,3},{-3,-2,1,4},{-3,-1,4},{-2,3},{-1,2,3,4},{1,2,4}}],
  assert(f(FF2,repo) = true),
  M : disjoin([deg,{FF1}],M), M : adjoin([deg,{FF1,FF2}],M),
  assert(hm2sm(repo) = M),
  true)$


/* *******************************
   * Analysing hash-repositories *
   *******************************
*/

okltest_analyse_isorepo_def(f) := block([R],
  assert(f(sm2hm({})) = []),
  true)$

okltest_analyse_isorepo_set(f) := block(
  assert(f(sm2hm({})) = {}),
  true)$

okltest_analyse_isorepo_defset_reference_implementation(repository) := block(
 [E : equiv_classes(analyse_isorepo_set(repository), 
        lambda([F,G], is(deficiency_cs(F) = deficiency_cs(G))))],
  return(map(lambda([S],[deficiency_cs(choose_element(S)),S]),
           sort(listify(E), lambda([S1,S2], 
             is(deficiency_cs(choose_element(S1)) < 
                deficiency_cs(choose_element(S2))))))))$

okltest_analyse_isorepo_defset(f) := block(
 [FF : make_array(any,4), h : sm2hm({})],
  assert(f(h) = []),
  FF[0] : [{},{}],
  compose_hm_sm(h,{[fcs_identifier(FF[0]), {FF[0]}]}),
  assert(f(h) = [[0,{FF[0][2]}]]),
  FF[1] : [{1},{{1}}],
  set_hm(h,fcs_identifier(FF[0]), {FF[0],FF[1]}),
  assert(f(h) = [[0,{FF[0][2],FF[1][2]}]]),
  FF[2] : [{},{{}}],
  set_hm(h,fcs_identifier(FF[2]), {FF[2]}),
  assert(f(h) = [[0,{FF[0][2],FF[1][2]}], [1,{FF[2][2]}]]),
  FF[3] : full_fcs(2),
  set_hm(h,fcs_identifier(FF[3]), {FF[3]}),
  assert(f(h) = [[0,{FF[0][2],FF[1][2]}], [1,{FF[2][2]}], [2,{FF[3][2]}]]),
  if oklib_test_level = 0 then return(true),
  for n : 0 thru 3 do
    manage_repository_isomorphism_types(weak_php_fcs(n+2,n),h),
  assert(okltest_analyse_isorepo_defset_reference_implementation(h) = f(h)),
  true)$

/*!
\endhtmlonly
*/
