/* Oliver Kullmann, 30.4.2008 (Guangzhou) */
/* Copyright 2008, 2009, 2018 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Symmetries/Symmetries.mac
  \brief Functionality related to symmetries of clause-sets

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Symmetries/Symmetries.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Graphs/Lisp/Basic.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Hypergraphs.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Statistics.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$
oklib_include("OKlib/ComputerAlgebra/CombinatorialMatrices/Lisp/Isomorphisms.mac")$


/* *****************
   * Automorphisms *
   *****************
*/

/* The number of automorphisms, via the number of all images under the
   possible transportations:
*/

/* The number of var-automorphisms: */
num_varauto_fcs(F) := block([n : length(first(F))],
 n! / length(all_var_renamings_fcs(F)))$
/* The number of sign-flip-automorphisms: */
num_flipauto_fcs(F) := block([n : length(first(F))],
 2^n / length(all_sign_flippings_fcs(F)))$
/* The number of automorphisms: */
num_auto_fcs(F) := block([n : length(first(F))],
 (n! * 2^n) / length(all_renamings_fcs(F)))$


/* ****************************************
   * Isomorphism testing via backtracking *
   ****************************************
*/

/* Checks whether two clause-sets are isomorphic (where renaming
   of variables and flipping is considered), by using a direct backtracking 
   approach:
*/
is_isomorphic_btr_cs(F1,F2) :=
 is_isomorphic_btr_fcs(cs_to_fcs(F1), cs_to_fcs(F2))$
/* Checks whether two formal clause-sets are isomorphic: */
is_isomorphic_btr_fcs(FF1,FF2) := block(
 if elementp({},FF1[2]) then (
   if not elementp({},FF2[2]) then return(false))
 elseif elementp({},FF2[2]) then return(false),
 block(
 [V1o : var_cs(FF1[2]), V2o : var_cs(FF2[2]),
  F1r, F2r, n, V, F1, F2, degl1, degl2, map_poss : []],
  if nvar_f(FF1) # nvar_f(FF2) then return(false),
  if length(V1o) # length(V2o) then return(false),
  n : length(V1o), V : setn(n),
  if emptyp(V) then return(true),
  F1r : standardise_fcs([V1o,FF1[2]]),
  F2r : standardise_fcs([V2o,FF2[2]]),
  F1 : disjoin({},F1r[1][2]), F2 : disjoin({},F2r[1][2]),
  degl1 : all_literal_degrees_fcs([V,F1]),
  degl2 : all_literal_degrees_fcs([V,F2]),
  block([deg_pairs : sm2hm({})],
    for v in V do block([deg : [ev_hm(degl2,v), ev_hm(degl2,-v)]],
      if deg[1] = deg[2] then
        set_hm(deg_pairs, deg, union({v,-v}, ev_hm_d(deg_pairs, deg, {})))
      else (
        set_hm(deg_pairs, deg, adjoin(v, ev_hm_d(deg_pairs, deg, {}))),
        set_hm(deg_pairs, reverse(deg), adjoin(-v, ev_hm_d(deg_pairs, reverse(deg), {}))))
    ),
    for v in V do block([deg : [ev_hm(degl1,v), ev_hm(degl1,-v)]],
      map_poss : endcons([v,ev_hm_d(deg_pairs, deg, {})], map_poss))
  ),
  map_poss : sort(map_poss, lambda([p1,p2], is(length(p1[2]) < length(p2[2])))),
  is_isomorphic_btr_piso(sm2hm({}), {}, map_poss, F1)))$

/* Additional a partial isomorphism as a hash-map from variables
   to literals is given, with its domain, the map of possibilities
   for mapping remaining variables (sorted by ascending sets
   of possibilities), and the set of remaining clauses from F1 to
   be mapped to clauses in F1.
   Prerequisite: map_possibilities, rem_clauses are not empty.
   Inherits F1, F2.
*/
is_isomorphic_btr_piso(part_iso,domain_piso,map_possibilities,rem_clauses) := block(
 [B : first(map_possibilities), v, Y, found_iso : false],
  v : B[1], Y : B[2],
  domain_piso : adjoin(v,domain_piso),
  for y in Y unless found_iso do block(
   [inconsistent : false, to_be_removed : {}],
    set_hm(part_iso,v,y),
    for C in rem_clauses unless inconsistent do (
      if subsetp(var_c(C), domain_piso) then
        if not elementp(substitute_c(C,part_iso), F2) then
          inconsistent : true
        else
          to_be_removed : adjoin(C,to_be_removed)
    ),
    if not inconsistent then block(
     [new_rem_clauses : setdifference(rem_clauses, to_be_removed),
      new_map_possibilities : copylist(rest(map_possibilities))],
      if emptyp(new_rem_clauses) then found_iso : true else (
        for i : 1 thru length(new_map_possibilities) do block(
         [P : new_map_possibilities[i]],
          new_map_possibilities[i] : [P[1], setdifference(P[2],{y,-y})]),
        new_map_possibilities : sort(new_map_possibilities,
          lambda([p1,p2], is(length(p1[2]) < length(p2[2])))),
        if is_isomorphic_btr_piso(
          part_iso,domain_piso,new_map_possibilities,new_rem_clauses)
        then found_iso : true
      )
    )
  ),
  del_hm(part_iso,v),
  return(found_iso))$    


/* **********************************************
   * Isomorphism testing via graph isomorphisms *
   **********************************************
*/

/* Checks whether two formal clause-sets are isomorphic (where renaming
   of variables and flipping is considered), by using the 
   digraph-isomorphism-check from the Maxima graphs-package:
*/
is_isomorphic_fcs(FF1,FF2) :=
 if ncl_list_fcs(FF1) # ncl_list_fcs(FF2) then false
 elseif variable_degrees_list_cs(FF1[2]) # variable_degrees_list_cs(FF2[2]) then false
 elseif literal_degrees_list_fcs(FF1) # literal_degrees_list_fcs(FF2) then false
 else is_isomorphic(
   dg2mdg(var_lit_clause_digraph_tr(FF1)),
   dg2mdg(var_lit_clause_digraph_tr(FF2)))$
/* The variation for clause-sets as inputs */
is_isomorphic_cs(F1,F2) := is_isomorphic_fcs(cs_to_fcs(F1),cs_to_fcs(F2))$
/* In case one FF1 is compared with many FF2, store the data for FF1. */
prepare_iso_fcs(FF1, storage_var) := (
  storage_var :: [
    ncl_list_fcs(FF1),
    variable_degrees_list_cs(FF1[2]),
    literal_degrees_list_fcs(FF1),
    dg2mdg(var_lit_clause_digraph_tr(FF1))])$
is_isomorphic_prep_fcs(FF2, storage_var) := block(
 [store : ev(storage_var)],
  if store[1] # ncl_list_fcs(FF2) then false
  elseif store[2] # variable_degrees_list_cs(FF2[2]) then false
  elseif store[3] # literal_degrees_list_fcs(FF2) then false
  else is_isomorphic(
    store[4],
    dg2mdg(var_lit_clause_digraph_tr(FF2))))$


/* **********************************************
   * Isomorphism testing via matrix isomorphism *
   **********************************************
*/

is_varisomorphic_com_fcs_p(FF1,FF2) :=
  is_isomorphic_rowpermall_com_p(cl_var_com_fcs(FF1), cl_var_com_fcs(FF2))$


/* **********************************
   * Isomorphism classes management *
   **********************************
*/

/* For a set of formal clause-sets, determines a subset of non-isomorphic
   representatives: */
representatives_fcs(SFF) := block([classes : equiv_classes(SFF, is_isomorphic_btr_fcs)],
  return(map(choose_element, classes)))$
/* The variation for a set of clause-sets: */
representatives_cs(SF) := block([classes : equiv_classes(SF, is_isomorphic_btr_cs)],
  return(map(choose_element, classes)))$

/* A "hash-repository of isomorphism types" is a hash-map using the
   value of "fcs_identifier" as key, and with a set of pairwise
   non-isomorphic formal clause-sets as value. */

fcs_identifier(FF) := [nvar_f(FF), ncl_fcs(FF), literal_degrees_list_fcs(FF), ncl_list_fcs(FF)]$

/* Given a hash_repository repo of isomormphism types, check whether a
   given formal clause-set is already contained or not, and in the latter
   case insert it into the repository.
   Returns true iff FF has been inserted.
   repo is a hash-map of isomorphism types.
*/
manage_repository_isomorphism_types(FF, repo) := block(
 [p : fcs_identifier(FF), candidates],
  candidates : ev_hm(repo,p),
  if candidates = false then (
    set_hm(repo,p,{FF}), return(true))
  else block([found : false],
    for GG in candidates unless found do
      if is_isomorphic_btr_fcs(FF,GG) then found : true,
    if found then return(false) else (
      set_hm(repo,p,adjoin(FF,candidates)),
      return(true))))$


/* *******************************
   * Analysing hash-repositories *
   *******************************
*/

/* Compute the sorted list of pairs [deficiency, count] for a given
   hash-repository:
*/
analyse_isorepo_def(repository) := block(
 [M : hm2sm(repository), h : sm2hm({})],
  for P in M do block([count : length(P[2]), def : P[1][2] - P[1][1]],
    set_hm(h,def,ev_hm_d(h,def,0)+count)),
  sort(listify(hm2sm(h)),lambda([P1,P2], is(P1[1] < P2[1]))))$
/* Returns the set of all clause-sets in the repository. */
analyse_isorepo_set(repository) :=
 family_sets_union(map(second,hm2sm(repository)),
                   lambda([S],map(fcs2cs,S)))$
/* Returns the sorted list [deficiency, set of clause-sets]: */
analyse_isorepo_defset(repository) := block(
 [M : hm2sm(repository), h : sm2hm({})],
  for P in M do block([def : P[1][2] - P[1][1]],
    set_hm(h,def,union(ev_hm_d(h,def,{}), map(fcs2cs,P[2])))),
  sort(listify(hm2sm(h)),lambda([P1,P2], is(P1[1] < P2[1]))))$


/*!
\endhtmlonly
*/
