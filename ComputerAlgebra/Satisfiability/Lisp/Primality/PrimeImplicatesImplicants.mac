/* Oliver Kullmann, 27.3.2008 (Swansea) */
/* Copyright 2008, 2009, 2010, 2012, 2019 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/Primality/PrimeImplicatesImplicants.mac
  \brief Functions regarding computation of prime implicates/implicants of boolean functions and clause-sets

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/Primality/PrimeImplicatesImplicants.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Resolution/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ConflictCombinatorics/HittingClauseSets.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Transversals/Bounded/MaintainingBound.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Constructions.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac")$


/* *****************
   * Prime clauses *
   *****************
*/

/* Generic function, using the "best" method (at Maxima-level) to compute
   the set of all prime-clauses of clause-set F:
*/
prime_clauses_cs(F) := min_extdp_prod_cs(F)$

/* Considering F as CNF, prime_clauses_cs(F) is the set of all "prime
   implicates" of the corresponding boolean function, while considering F as
   a DNF this is the set of all "prime implicants".

   That is, a prime implicate of F as CNF is a CNF-clause C which follows
   from F, while this is not true for any strict subset of C. And a prime
   implicant of F as a DNF is a DNF-clause C which implies F, while this is
   not true for any strict subset of C.

   Note that in this library a "clause" C is a combinatorial object, and
   whether C is a "CNF-clause" or a "DNF-clause" is just a matter of an
   (additional) interpretation.

   In other words, using the CNF interpretation, the prime clauses of F
   are the comp_sl(phi) for partial assignments phi such that phi * F
   is unsatisfiable, while this is not true for any strict subset of phi.
   And using the DNF interpretation, the prime clauses of F
   are the phi for partial assignments phi such that phi * F
   is tautological, while this is not true for any strict subset of phi.

   Note that in this library partial assignments are just represented
   as DNF-clauses, taking for clause-sets the "default interpretation"
   as CNF-clause-sets.

   Alternative computations:
   For general F we have
     prime_clauses_cs(F) = min_resolution_closure_cs(F)[1]
                         = min_2resolution_closure_cs(expand_cs(F))
                         = min_elements(dual_cs(G))
     (the first method is often called the "consensus algorithm", the third
     the "double negation procedure of Nelson").
   For full F we have
     prime_clauses_cs(F) = min_2resolution_closure_cs(F)
   (the prime-computation of the Quine/McCluskey procedure).

*/

/* Tison's method

   This is just like applying DP-resolution, but keeping all clauses, except
   when they are subsumed. So we treat it as "extended DP".
*/
extdp_operator_cs(F,v) := block(
 [Fv : subset(F, lambda([C], not disjointp(C, {v,-v})))],
  union(F, resolvents_cs_l(Fv,v)))$
min_extdp_operator_cs(F,v) := min_elements(extdp_operator_cs(F,v))$

/* Using V (from left to right): */
min_extdp_cs(F,V) := (for v in V do F : min_extdp_operator_cs(F,v), F)$

/* Heuristics: */
min_extdp_prod_cs(F) := min_extdp_cs(F,sortvar_prodocc_cs(F))$


/* **********************
   * Dual prime clauses *
   **********************
*/

/* Considering F as CNF, the "dual prime clauses" are the prime implicants
   of F, while considering F as DNF, the dual prime clauses are the
   prime implicates of F.
*/

/* Various ways of computing the set of dual prime clauses of a clause-set F:

   dual_prime_clauses_cs(F) =
     min_elements(dual_cs(F)) =
     min_2resolution_closure_cs(all_sat_cs(F)) =

     min_resolution_closure_cs(G)[1]

   where G is any DNF representation of F (for example, disjoint DNF
   representations are obtained from any splitting tree for F).
*/

/* Note that

     prime_clauses_cs(F) = dual_prime_clauses_cs(dual_prime_clauses_cs(F)),

   and more generally

     prime_clauses_cs(F) = dual_prime_clauses_cs(G),

   where G is any DNF representation of F. This yields

     prime_clauses_cs(F) = min_elements(dual_cs(G)).

*/


/* *************************************
   * Prime-clauses of full clause-sets *
   *************************************
*/

/* The special case of min_resolution_closure_cs where the input clauses
   are all full (contain all variables).
   In other words, computing all minimal resolvents, i.e., all prime clauses
   (for CNF's these are the prime implicates, for DNF's the prime implicants)
   for full clause-sets.
*/
min_2resolution_closure_cs(F) := block(
 [prime_implicates : {}, new_implicates, n : nvar_cs(F)],
  for i : 0 thru n do (
    [F, new_implicates] : two_subsumption_resolvents_rem_cs(F),
    prime_implicates : union(prime_implicates,new_implicates)),
  return(prime_implicates))$
/* With monitoring, and returns additionally the list of level sizes: */
min_2resolution_closure_mon_cs(F) := block(
 [prime_implicates : {}, new_implicates, n : nvar_cs(F),
  counts : [length(F)]],
  for i : 0 thru n do (
    if oklib_monitor then (
      print("min_2resolution_closure_cs: entering level =", n - i),
      print("Yet", length(prime_implicates), "prime implicates found.")),
    [F, new_implicates] : two_subsumption_resolvents_rem_cs(F),
    prime_implicates : union(prime_implicates,new_implicates),
    counts : cons(length(F), counts)
  ),
  return([prime_implicates, reverse(counts)]))$


/* ******************************************************
   * Minimum equivalent clause-sets of full clause-sets *
   ******************************************************
*/

/* Given a full clause-set F, the equivalent clause-sets with a minimal
   numbers of clauses and secondly minimal number of literal occurrences
   are exactly the minimum transversals of the hypergraph
   subsumption_ghg(min_2resolution_closure_cs(F), F)
   (see ComputerAlgebra/Hypergraphs/Lisp/Basics.mac for
   subsumption_ghg).
*/

/* The subsumption-hypergraph of a full clause-set F: Vertices are the
   prime clauses of F, hyperedges are the sets of prime-clauses which
   subsume some total assignment:
*/
subsumption_hg_full_cs(F) :=
 ghg2hg(subsumption_ghg(min_2resolution_closure_cs(F), F))$

/* Now computing the reduced subsumption-hypergraph (where necessary prime
   clauses have been eliminated as well as subsumptions), together with the
   set of necessary clauses:
*/
rsubsumption_hg_full_cs(F) := rsubsumption_hg(min_2resolution_closure_cs(F), F)$
rsubsumption_hg_full_fcs(FF) := rsubsumption_hg_full_cs(fcs2cs(FF))$


/*
   Using a simple hypergraph transversal algorithm for computing all minimum
   "prime representations" (as a repetition-free list) of a full clause-set F:
*/
all_minequiv_bvs_cs(F) :=
  minimum_transversals_bvs_hg(subsumption_hg_full_cs(F))$
all_minequiv_bvs_fcs(FF) := all_minequiv_bvs_cs(fcs2cs(FF))$

/* Computing the list of all minimum prime representations by using the
   output S of rsubsumption_hg_full_cs (this is somewhat more efficient):
*/
all_minequiv_bvs_rsubhg(S) :=
  add_elements_l(S[2], minimum_transversals_bvs_hg(S[1]))$
/* The resulting computation of all minimum prime representations of a
   full clause-set F: */
all_minequiv_bvsr_cs(F) := all_minequiv_bvs_rsubhg(rsubsumption_hg_full_cs(F))$
all_minequiv_bvsr_fcs(FF) := all_minequiv_bvsr_cs(fcs2cs(FF))$
/* Allowing the specification of total assignments which the prime clauses
   must subsume. */
all_minequiv_bvsr_sub_cs(F, G_sub) :=
  all_minequiv_bvs_rsubhg(
    rsubsumption_hg(min_2resolution_closure_cs(F), G_sub))$


/* *************************************
   * Dualisation for full clause-sets  *
   *************************************
*/

/* Computing the dual prime clauses, that is, for a full CNF the set of all
   prime implicants (minimal satisfying assignments), and for a full DNF the
   set of all prime implicates (minimal clauses which follow):
*/
dual_min_2resolution_closure_cs(F) :=
 comp_cs(min_2resolution_closure_cs(setdifference(full_cs_v(var_cs(F)), F)))$
/* We have
   dual_min_2resolution_closure_cs(F) = min_resolution_closure_cs(dual_cs(F))[1]
   (for full clause-sets).
   Note that here
     comp_cs(setdifference(full_cs_v(var_cs(F)), F)) = all_sat_cs(F).
*/

/* Computing all minimum "dual prime representations" of a full clause-set F,
   using a simple algorithm (as above):
*/
dual_all_minequiv_bvs_cs(F)  := block(
 [G : setdifference(full_fcs_v(var_cs(F))[2], F)],
  map(comp_cs,minimum_transversals_bvs_hg(ghg2hg(
    subsumption_ghg(min_2resolution_closure_cs(G), G)))))$


/* **************************************************
   * Finding contained prime-clauses by SAT solvers *
   **************************************************
*/

/* Given a clause-set F (interpreted as CNF) and a clause C which follows from
   F, find a prime implicate C' <= S with the help of SAT solver S (which must
   be applicable to the closure of {F} under applications of partial
   assignments):
*/
/* RENAME: contained_prime_clause_cs */
contained_prime_implicate(F,C,S) := block([reduced : true],
 while reduced do (
   reduced : false,
   for x in C unless reduced do block([D : disjoin(x,C)],
     if S(apply_pa(comp_sl(D), F)) = false then (
       C : D, reduced : true))),
 return(C))$


/* Replace for a clause-set F (as CNF) each clause C by a prime
   implicate C' <= C, using a SAT solver which works on
   the closure of {F} under the application of partial
   assignments: */
/* RENAME: replace_by_prime_clauses_cs */
replace_by_prime_implicates(F,S) := block([G : {}],
  for C in F do G : adjoin(contained_prime_implicate(F,C,S), G),
  return(G))$
/* The special case where F is a hitting clause-set: */
/* RENAME: replace_by_prime_clauses_hitting_cs */
replace_by_prime_implicates_hitting(F) :=
  replace_by_prime_implicates(F,sat_decision_hitting_cs)$


/*!
\endhtmlonly
*/
