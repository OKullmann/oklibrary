/* Oliver Kullmann, 16.6.2018 (Swansea) */
/* Copyright 2018, 2019, 2020 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/tests/Binary.mac
  \brief Tests for functions related to 2-MU

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/tests/Binary.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/Binary.mac")$

kill(f)$

/* *********************
   * Basic definitions *
   *********************
*/

okltest_ubmu_csp(f) := (
  assert(f({}) = false),
  assert(f({{}}) = false),
  assert(f({{1},{-1}}) = false),
  assert(f({{1,2},{1,-2},{-1,2},{-1,-2}}) = true),
  true)$

okltest_bmu_csp(f) := (
  assert(f({}) = false),
  assert(f({{}}) = true),
  assert(f({{1},{-1}}) = true),
  assert(f({{1,2},{1,-2},{-1,2},{-1,-2}}) = true),
  assert(f({{1},{2},{3},{-1,-2,-3}}) = false),
  true)$

okltest_sarcs_clashp(f) := (
  assert(f({}) = false),
  assert(f({[1,2]}) = false),
  assert(f({[1,-1]}) = true),
  assert(f({[1,2],[2,3],[3,1]}) = false),
  assert(f({[1,2],[2,3],[3,-1]}) = true),
  true)$

okltest_cycle_analysis_imp_fcs(f) := (
  assert(f([{},{}]) = [[],[]]),
  assert(f([{1,2},{{1,2}}]) = [[],[]]),
  assert(f([{1,2,3},{{-1,2},{-2,1}}]) = [[[2,2]],[]]),
  assert(f([{1,2},{{1,2},{-1,-2},{-1,2},{1,-2}}]) = [[[2,4],[4,2]],[[4,2]]]),
  true)$


/* ****************************
   * All 2-MUs by brute force *
   ****************************
*/

okltest_all_ubmu(f) := block([L],
  assert(f(0) = {}),
  assert(f(1) = {}),
  assert(f(2) = {{{1,2},{-1,2},{1,-2},{-1,-2}}}),
  if oklib_test_level = 0 then return(true),
  L : f(3),
  assert(length(L) = 49),
  assert(every(ubmu_csp, L) = true),
  true)$

okltest_all_ubmue(f) := block([L],
  assert(f(0) = {}),
  assert(f(1) = {}),
  assert(f(2) = {{{1,2},{-1,2},{1,-2},{-1,-2}}}),
  if oklib_test_level = 0 then return(true),
  L : f(3),
  assert(length(L) = 46),
  assert(every(ubmu_csp, L) = true),
  true)$

okltest_all_bmu(f) := block([L],
  assert(f(0) = {{{}}}),
  assert(f(1) = {{{}},{{1},{-1}}}),
  assert(length(f(2)) = 12),
  if oklib_test_level = 0 then return(true),
  L : f(3),
  assert(length(L) = 149),
  assert(every(bmu_csp, L) = true),
  true)$

okltest_all_bmue(f) := block([L],
  assert(f(0) = {{{}}}),
  assert(f(1) = {{{1},{-1}}}),
  assert(length(f(2)) = 9),
  if oklib_test_level = 0 then return(true),
  L : f(3),
  assert(length(L) = 118),
  assert(every(bmu_csp, L) = true),
  true)$


/* ******************************
   * Some small auxiliary 2-CNF *
   ******************************
*/

okltest_impl_cl(f) := (
  assert(f(1,1) = []),
  assert(f(1,2) = [{-1,2}]),
  assert(f(1,3) = [{-1,2},{-2,3}]),
  assert(f(4,5) = [{-4,5}]),
  true)$

okltest_impl_cs(f) := (
  assert(f(2,1) = {}),
  assert(f(6,7) = {{-6,7}}),
  true)$


/* **********************
   * Deficiency-1-cases *
   **********************
*/

okltest_hp_bmu_cl(f) := (
  assert(f(1) = [{1},{-1}]),
  assert(f(2) = [{1},{-1,2},{-2}]),
  assert(f(3) = [{1},{-1,2},{-2,3},{-3}]),
  true)$

okltest_hp_bmu_cs(f) := (
  assert(f(1) = {{1},{-1}}),
  assert(f(2) = {{1},{-1,2},{-2}}),
  assert(f(3) = {{1},{-1,2},{-2,3},{-3}}),
  for n : 1 thru 7 do
    assert(bmu_csp(f(n)) = true),
  true)$

okltest_hp_bmu_fcl(f) := (
  assert(f(1) = [[1],[{1},{-1}]]),
  assert(f(2) = [[1,2],[{1},{-1,2},{-2}]]),
  assert(f(3) = [[1,2,3],[{1},{-1,2},{-2,3},{-3}]]),
  true)$

okltest_hp_bmu_fcs(f) := (
  assert(f(1) = [{1},{{1},{-1}}]),
  assert(f(2) = [{1,2},{{1},{-1,2},{-2}}]),
  assert(f(3) = [{1,2,3},{{1},{-1,2},{-2,3},{-3}}]),
  for n : 1 thru 7 do
    assert(cycle_analysis_imp_fcs(f(n)) = [[[2*n,1]],[[2*n,1]]]),
  true)$

okltest_ht_bmu_cl(f) := (
  assert(okltest_hp_bmu_cl(buildq([f], lambda([n], f(n,n)))) = true),
  assert(f(1,1) = [{1},{-1}]),
  assert(f(2,1) = [{1},{-1,2},{-2,-1}]),
  assert(f(2,2) = [{1},{-1,2},{-2}]),
  assert(f(3,1) = [{1},{-1,2},{-2,3},{-3,-1}]),
  assert(f(3,2) = [{1},{-1,2},{-2,3},{-3,-2}]),
  assert(f(3,3) = [{1},{-1,2},{-2,3},{-3}]),
  true)$

okltest_ht_bmu_cs(f) := (
  assert(okltest_hp_bmu_cs(buildq([f], lambda([n], f(n,n)))) = true),
  assert(f(1,1) = {{1},{-1}}),
  assert(f(2,1) = {{1},{-1,2},{-2,-1}}),
  assert(f(3,1) = {{1},{-1,2},{-2,3},{-3,-1}}),
  for n : 1 thru 7 do
    for i : 1 thru n do
      assert(bmu_csp(f(n,i)) = true),
  true)$

okltest_ht_bmu_fcl(f) := (
  assert(okltest_hp_bmu_fcl(buildq([f], lambda([n], f(n,n)))) = true),
  assert(f(1,1) = [[1],[{1},{-1}]]),
  assert(f(2,1) = [[1,2],[{1},{-1,2},{-2,-1}]]),
  assert(f(3,1) = [[1,2,3],[{1},{-1,2},{-2,3},{-3,-1}]]),
  true)$

okltest_ht_bmu_fcs(f) := (
  assert(okltest_hp_bmu_fcs(buildq([f], lambda([n], f(n,n)))) = true),
  assert(f(1,1) = [{1},{{1},{-1}}]),
  assert(f(2,1) = [{1,2},{{1},{-1,2},{-2,-1}}]),
  assert(f(3,1) = [{1,2,3},{{1},{-1,2},{-2,3},{-3,-1}}]),
  for n : 1 thru 7 do
    for i : 1 thru n do block([c : if i=n then 1 else 2],
      assert(cycle_analysis_imp_fcs(f(n,i)) = [[[n+i,c]],[[n+i,c]]])
  ),
  true)$

okltest_uni4_bmu_cl(f) := (
  assert(f(1,1) = [{1},{-1}]),
  assert(f(2,1) = [{1},{-1,2},{-2,-1}]),
  assert(f(2,2) = [{1,2},{-1,2},{-2}]),
  assert(f(3,1) = [{1},{-1,2},{-2,3},{-3,-1}]),
  assert(f(3,2) = [{1,2},{-1,2},{-2,3},{-3,-2}]),
  assert(f(3,3) = [{1,3},{-1,2},{-2,3},{-3}]),
  true)$

okltest_uni4_bmu_cs(f) := (
  for n : 3 thru 6 do
    for i : 2 thru n-1 do
      assert(ubmu_csp(f(n,i))),
  true)$

okltest_uni3_bmu_cl(f) := (
  assert(f(1,1,1) = [{1},{-1}]),
  assert(f(2,1,1) = [{1},{-1,2},{-2,-1}]),
  assert(f(2,2,2) = [{1,2},{-1,2},{-2}]),
  assert(f(3,1,1) = [{1},{-1,2},{-2,3},{-3,-1}]),
  assert(f(3,2,2) = [{1,2},{-1,2},{-2,3},{-3,-2}]),
  assert(f(3,3,3) = [{1,3},{-1,2},{-2,3},{-3}]),
  assert(f(4,2,3) = [{1,2},{-1,2},{-2,3},{-3,4},{-4,-3}]),
  true)$

okltest_uni3_bmu_cs(f) := (
  for n : 4 thru 7 do
    for x : 2 thru n-1 do
      for y : x thru n-1 do
        assert(ubmu_csp(f(n,x,y))),
  true)$


/* ***********************
   * The nonsingular B_n *
   ***********************
*/

okltest_nonsing_bmu_fcl(f) := (
  assert(f(0) = [[],[{}]]),
  assert(f(1) = [[1],[{-1},{1}]]),
  assert(f(2) = [[1,2],[{-1,2},{1,-2},{-1,-2},{1,2}]]),
  assert(f(3) = [[1,2,3],[{-1,2},{1,-2},{-2,3},{2,-3},{-1,-3},{1,3}]]),
  true)$

okltest_nonsing_bmu_cl(f) := (
  assert(f(0) = [{}]),
  assert(okltest_nonsing_bmu_fcl(buildq([f], lambda([n], cl2fcl(f(n))))) = true),
  true)$

okltest_nonsing_bmu_fcs(f) := (
  assert(f(0) = [{},{{}}]),
  assert(f(1) = [{1},{{-1},{1}}]),
  assert(f(2) = [{1,2},{{-1,2},{1,-2},{-1,-2},{1,2}}]),
  assert(f(3) = [{1,2,3},{{-1,2},{1,-2},{-2,3},{2,-3},{-1,-3},{1,3}}]),
  true)$

okltest_nonsing_bmu_cs(f) := (
  assert(f(0) = {{}}),
  assert(okltest_nonsing_bmu_fcs(buildq([f], lambda([n], cs2fcs(f(n))))) = true),
  true)$


/* **********************
   * Cycle descriptions *
   **********************
*/

okltest_valid_triple_bmu(f) := (
  assert(f(0) = false),
  assert(f([]) = false),
  assert(f([0,0,0]) = false),
  assert(f([1,0,1]) = true),
  true)$

okltest_valid_cycledesc_bmu(f) := (
  assert(f(0) = false),
  assert(f([[1,0,1]]) = false),
  assert(f([[1,0,1],[1,0,1]]) = true),
  true)$

okltest_deficiency_cycledesc(f) := block([x],
  assert(f([[x,x,x],[x,x,x]]) = 2),
  true)$

okltest_ncl_cycledesc(f) := block([a1,b1,c1,a2,b2,c2],
  assert(f([[a1,b1,c1],[a2,b2,c2]]) = a1+b1+c1+a2+b2+c2),
  true)$

okltest_nlitocc_cycledesc(f) := block([a1,b1,c1,a2,b2,c2],
  assert(f([[a1,b1,c1],[a2,b2,c2]]) = 2*(a1+b1+c1+a2+b2+c2)),
  true)$

okltest_cycledesc2bmu_cs(f) := (
  assert(f([[1,1,1],[1,1,1]]) = {{-1,2},{-2,3},{-3,4},{-4,1},{-3,-1},{4,2}}),
  assert(f([[2,2,2],[2,2,2],[2,2,2]]) = { {-1,2},{-2,3},{-3,4},{-4,5},{-5,6},{-6,7},{-7,8},{-8,1},{-5,9},{-9,10},{-10,11},{-11,12},{-12,13},{-13,3},{-12,14},{-14,-1},{7,15},{-15,10} }),
  for n : 2 thru 6 do
    assert(f(create_list([1,0,1],i,1,n)) = nonsing_bmu_cs(n)),
  true)$

okltest_cycledesc2bmu_fcl(f) := (
  for n : 2 thru 6 do
    assert(f(create_list([1,0,1],i,1,n)) = nonsing_bmu_fcl(n)),
  assert(okltest_cycledesc2bmu_cs(buildq([f], lambda([T], fcl2cs(f(T))))) = true),
  true)$


/*!
\endhtmlonly
*/
