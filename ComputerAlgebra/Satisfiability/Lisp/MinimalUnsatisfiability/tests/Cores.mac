/* Oliver Kullmann, 8.4.2008 (Swansea) */
/* Copyright 2008, 2009, 2012, 2018, 2019 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/tests/Cores.mac
  \brief Tests for functions about finding irredundant cores

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/tests/Cores.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Backtracking/DLL_solvers.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Transversals/Minimal/RecursiveSplitting.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/Binary.mac");


kill(f)$


/* *************************************************
   * Minimally unsatisfiable cores of minimum size *
   *************************************************
*/

okltest_min_size_mus(f) := block([S : dll_simplest_trivial1],
  assert(f({{}},S) = 1),
  assert(f({{1},{-1}},S) = 2),
  assert(f({{1},{-1},{2},{-2}},S) = 2),
  assert(f({{1},{-1},{}},S) = 1),
  assert(f({{1,2},{-2,3},{-1,3},{1,-2},{2,3}},S) = inf),
  assert(f({{1,2},{-2,-3},{-1,3},{1,-2},{2,-3}},S) = 5),
  assert(f({{1,2},{-2,-3},{-1,3},{1,-2},{2,-3},{2,3}},S) = 5),
  true)$

okltest_contains_us(f) := block([S : dll_simplest_trivial1],
  assert(f({},0,S) = false),
  assert(f({},1,S) = false),
  assert(f({},inf,S) = false),
  assert(f({{}},0,S) = false),
  assert(f({{}},1,S) = true),
  assert(f({{}},2,S) = true),
  assert(f({{-1},{1}},0,S) = false),
  assert(f({{-1},{1}},1,S) = false),
  assert(f({{-1},{1}},2,S) = true),
  assert(f({{-1},{1}},inf,S) = true),
  true)$


/* ***********************************
   * Computing all irredundant cores *
   ***********************************
*/

okltest_all_irr_cores(f) := block([S : dll_simplest_trivial1],
  assert(f([{},{}],S) = {{}}),
  assert(f([{},{{}}],S) = {{{}}}),
  assert(f([{1},{{1}}],S) = {{{1}}}),
  assert(f([{1},{{1},{}}],S) = {{{}}}),
  assert(f([{1},{{1},{-1}}],S) = {{{1},{-1}}}),
  assert(f([{1},{{1},{-1},{}}],S) = {{{1},{-1}},{{}}}),
  assert(f([{1,2},{{1,2},{-1,2}}],S) = {{{1,2},{-1,2}}}),
  assert(f([{1,2,3},{{1,2},{1,-2},{1},{3}}],S) = {{{1},{3}}, {{1,2},{1,-2},{3}}}),
  assert(f([{1,2},{{-1},{1},{2},{-2}}],S) = {{{-1},{1}},{{-2},{2}}}),
  assert(f([{1,2,3,4},{{1,2},{-1,2},{-2},{3},{4},{-3,-4}}],S) = {{{1,2},{-1,2},{-2}}, {{3},{4},{-3,-4}}}),
  if oklib_test_level = 0 then return(true),
  block([oklib_test_level : oklib_test_level - 1],
    okltest_all_min_usat_cores_bydef(buildq([f],lambda([F,S],f(F,S))))),
  true)$

okltest_all_min_usat_cores(f) := block([S : dll_simplest_trivial1],
  assert(f([{},{{}}],S) = {{{}}}),
  assert(f([{1},{{}}],S) = {{{}}}),
  assert(f([{1},{{1},{-1}}],S) = {{{1},{-1}}}),
  assert(f([{1,2},{{1},{-1},{1,2}}],S) = {{{1},{-1}}}),
  assert(f([{1},{{1},{-1},{}}],S) = {{{1},{-1}},{{}}}),
  assert(f([{1,2},{{1},{-1},{2},{-2}}],S) = {{{1},{-1}},{{2},{-2}}}),
  assert(f([{1,2},{{1},{-1},{2},{-2},{1,2}}],S) = {{{1},{-1}},{{2},{-2}},{{1,2},{-1},{-2}}}),
  true);

okltest_all_forced_irr_cores(f) := block(
 [S : dll_simplest_trivial1,
  nf : buildq([f,S],lambda([F,P], block (
   [counter_irr : 0, potentially_unusable_clauses : not emptyp(F)],
    f(F,P,S))))],
  assert(nf({},{}) = {{}}),
  assert(nf({},{{}}) = {{{}}}),
  assert(nf({},{{1}}) = {{{1}}}),
  assert(nf({{1}},{}) = {{{1}}}),
  assert(nf({{1}},{{1,2}}) = {{{1}}}),
  assert(nf({{1,2}},{{-1,2}}) = {{{1,2},{-1,2}}}),
  assert(nf({{1}},{{2},{-2}}) = {}),
  assert(nf({{1}},{{-1},{2},{-2}}) = {{{1},{-1}}}),
  true)$


/* *************************************************
   * Heuristical search for some irredundant cores *
   *************************************************
*/

/* Generic test function for testing whether f on input an unsatisfiable
   clause-set F returns some minimally unsatisfiable core of F:
*/
okltest_some_mus_cs(f) := (
  /* Cases where F has exactly one minimally unsatisfiable subset: */
  assert(f({{}}) = {{}}),
  assert(f({{1},{-1}}) = {{1},{-1}}),
  assert(f({{1},{-1},{2}}) = {{1},{-1}}),
  assert(f({{1,2},{-1,2},{-2,3},{-2,-3},{1,3}}) = {{1,2},{-1,2},{-2,3},{-2,-3}}),
  /* XXX */
  true)$


okltest_first_mus_fcs(f) := block([S : dll_simplest_trivial1],
  assert(f([{},{{}}],S) = [{},{{}}]),
  assert(f([{1},{{},{1}}],S) = [{1},{{}}]),
  assert(f([{1},{{1},{-1}}],S) = [{1},{{1},{-1}}]),
  assert(f([{1,2},{{1},{-1},{1,2}}],S) = [{1,2},{{1},{-1}}]),
  for n : 0 thru 3 do block([FF : full_fcs(n)],
    assert(f(FF,S) = FF)),
  assert(okltest_some_mus_cs(buildq([f,S], lambda([F], fcs2cs(f(cs2fcs(F),S))))) = true),
  true)$

/* Generic test function for testing whether f on input a clause-set F
   returns some irredundant core of F:
*/
okltest_some_irr_cs(f) := (
  /* Cases where F has exactly one irredundant core */
  assert(f({}) = {}),
  assert(f({{1}}) = {{1}}),
  assert(f({{-1}}) = {{-1}}),
  assert(f({{1},{1,2}}) = {{1}}),
  assert(f({{1,2},{-1,2},{1,-2}}) = {{1,2},{-1,2},{1,-2}}),
  assert(f({{1,2},{-2,3},{1,3}}) = {{1,2},{-2,3}}),
  /* XXX */
  assert(okltest_some_mus_cs(f) = true),
  true)$

okltest_first_irr_fcs(f) := block([S : dll_simplest_trivial1],
  assert(f([{},{}],S) = [{},{}]),
  assert(f([{1},{{1}}],S) = [{1},{{1}}]),
  assert(f([{1,2},{{1,2},{-1,2}}],S) = [{1,2},{{1,2},{-1,2}}]),
  assert(f([{1,2},{{1},{1,2}}],S) = [{1,2},{{1}}]),
  assert(okltest_some_irr_cs(buildq([f,S], lambda([F], fcs2cs(f(cs2fcs(F),S))))) = true),
  if oklib_test_level = 0 then return(true),
  block([oklib_test_level : oklib_test_level-1],
    assert(okltest_first_mus_fcs(f) = true)),
  true)$


/* *********************************
   * Sampling of irredundant cores *
   *********************************
*/

okltest_sample_irr_cores(f) := block([Sol,x],
  assert(f([{},{}],Sol,0,x,0) = {}),
  assert(f([{},{{}}],Sol,0,x,0) = {}),
  Sol : dll_simplest_trivial1,
  assert(f([{},{{}}],Sol,1,0,0) = {{{}}}),
  for n : 0 thru 2 do block([FF : full_fcs(n)],
    assert(f(FF,Sol,inf,0,0) = {FF[2]}),
    assert(f(FF,Sol,inf,0,1) = {FF[2]}),
    assert(f(FF,Sol,inf,1,0) = {FF[2]}),
    assert(f(FF,Sol,inf,1,1) = {FF[2]}),
    assert(f(FF,Sol,1,1,2) = {FF[2]})),
  block(
   [FF : [{1,2},{{1},{-1},{2},{-2}}],
    MUS : {{{1},{-1}},{{2},{-2}}}],
    assert(f(FF,Sol,0,0,0) = {}),
    assert(length(intersection(f(FF,Sol,1,0,0), MUS)) = 1),
    assert(length(intersection(f(FF,Sol,1,1,1), MUS)) = 1),
    assert(union(f(FF,Sol,1,0,0),f(FF,Sol,1,1,1)) = MUS),
    assert(f(FF,Sol,2,0,0) = MUS),
    assert(f(FF,Sol,2,0,1) = MUS),
    assert(f(FF,Sol,2,1,0) = MUS),
    assert(f(FF,Sol,2,1,1) = MUS)
  ),
  if oklib_test_level = 0 then return(true),
  block(
   [FF : [{1,2,3}, {{1},{-1},{2},{-2},{3},{-3},{1,2},{1,3},{2,3}}],
    MUS : { {{1},{-1}}, {{2},{-2}}, {{3},{-3}}, {{1,2},{-1},{-2}}, 
            {{1,3},{-1},{-3}}, {{2,3},{-2},{-3}} }, MUS2],
    assert(f(FF,Sol,6,0,0) = MUS),
    assert(f(FF,Sol,inf,0,0) = MUS),
    MUS2 : f(FF,Sol,5,0.5,0),
    assert(subsetp(MUS2,MUS) = true),
    assert(length(intersection(MUS2,MUS)) = 5)
  ),
  block([oklib_test_level : oklib_test_level - 1],
    okltest_all_irr_cores_bydef(buildq([f],lambda([FF,S],f(FF,S,inf,1,0)))),
    okltest_all_irr_cores_bydef(buildq([f],lambda([FF,S],f(FF,S,inf,0.5,0)))),
    okltest_all_irr_cores_bydef(buildq([f],lambda([FF,S],f(FF,S,inf,0,0))))
  ),
  true)$


/* ********************************************
   * Maximally non-equivalent sub-clause-sets *
   ********************************************
*/

okltest_all_max_noneq_scs(f) := (
  block([EQp : lambda([F],is(F={}))],
    assert(f({},EQp) = {})
  ),
  block([EQp : lambda([F], not dll_simplest_trivial1(cs_to_fcs(F)))],
    assert(f({},EQp) = {{}}),
    assert(f({{}},EQp) = {{}})
  ),
  true)$

okltest_all_max_sat_scs(f) := block([S : dll_simplest_trivial1],
  assert(f({{}},S) = {{}}),
  assert(f({{1},{-1}},S) = {{{1}},{{-1}}}),
  assert(f({{1},{-1},{}},S) = {{{1}},{{-1}}}),
  assert(f({{1},{-1},{1,2}},S) = {{{1},{1,2}},{{-1},{1,2}}}),
  assert(f({{1},{-1},{2},{-2}},S) = {{{1},{2}},{{1},{-2}},{{-1},{2}},{{-1},{-2}}}),
  if oklib_test_level = 0 then return(true),
  block(
   [oklib_test_level : oklib_test_level - 1,
    muf : buildq([f],lambda([FF,S],transversal_hyp_rs(ecomp_hyp([FF[2],f(FF[2],S)]))[2]))],
    okltest_all_min_usat_cores(muf)),
  true)$

okltest_all_min_corsets_bymaxsat_cs(f) := (
  assert(f({}) = {{}}),
  assert(f({{}}) = {{{}}}),
  assert(f({{1}}) = {{}}),
  assert(f({{1},{-1}}) = {{{1}},{{-1}}}),
  true)$

okltest_equivalence_checker_scl(f) := block([S : dll_simplest_trivial1],
  assert(f({},S)({}) = true),
  block([EQp : f({{}},S)],
    assert(EQp({}) = false),
    assert(EQp({{}}) = true)
  ),
  true)$

okltest_all_max_neq_scs(f) := block([S : dll_simplest_trivial1],
  assert(f({},S) = {}),
  assert(f({{}},S) = {{}}),
  if oklib_test_level = 0 then return(true),
  block(
   [oklib_test_level : oklib_test_level - 1],
     okltest_all_max_sat_scs(f)),
  if oklib_test_level = 1 then return(true),
  block(
   [oklib_test_level : oklib_test_level - 1,
    irf : buildq([f],lambda([FF,S],transversal_hyp_rs(ecomp_hyp([FF[2],f(FF[2],S)]))[2]))],
    okltest_all_irr_cores(irf)),
  true)$


/* ************************************
   * Duality between MAXSAT and MUSAT *
   ************************************
*/

okltest_all_max_neq_scs_bydual(f) := block([H : transversal_hg_rs],
  okltest_all_max_neq_scs(buildq([f,H],
    lambda([F,S],f(F,lambda([GG],all_irr_cores_bydef(GG,S)),H)))),
  true)$

okltest_all_irr_cores_bydual(f) := block([H : transversal_hg_rs],
  okltest_all_irr_cores(buildq([f,H],
    lambda([F,S],f(F,lambda([G],all_max_neq_scs_bydef(G,S)),H)))),
  true)$


/* *****************
   * Computing UMU *
   *****************
*/

okltest_umu_enum0_cs(f) := (
  assert(f({}) = {}),
  assert(f({{}}) = {{}}),
  assert(f({{-1,-2},{1},{2},{3},{4},{-4}}) = {{-4},{-2,-1},{1},{2},{4}}),
  assert(f({{1,2},{-1,-2},{1,-2},{-1,2},{1}}) = {{1,2},{-1,-2},{1,-2},{-1,2},{1}}),
  assert(f({{1},{2}}) = {}),
  assert(f({{1},{-1},{},{2}}) = {{1},{-1},{}}),
  assert(f({{1},{-1},{},{2},{-2},{3}}) = {{1},{-1},{},{2},{-2}}),
  assert(f({{-1,2},{-2,3},{-3,1},{1,2},{-1,-3},{1,-2,3}}) = {{-1,2},{-2,3},{-3,1},{1,2},{-1,-3}}),
  assert(f({{1},{2,3},{4},{-4},{4,5}}) = {{4},{-4}}),
  for n : 1 thru 3 do block([F0 : all_pass_n(setn(n),2)],
    assert(f(F0) = F0)),
  true)$

okltest_umu_rs0_cs(f) := (
  assert(f({}) = {}),
  assert(okltest_umu_enum0_cs(f) = true),
  assert(f({{1,2},{-1,2},{1,-2},{-1,-2},{3,1,2},{-3,-1},{-3,-2}}) = {{1,2},{-1,2},{1,-2},{-1,-2}}),
  true)$

okltest_umu_rs1_cs(f) := (
  assert(f({}) = {}),
  assert(okltest_umu_rs0_cs(f) = true),
  assert(f({{},{1},{-1},{1,2},{-2},{2,3},{-3,4},{-4},{-1,-2,-3,4}}) = {{},{1},{-1},{1,2},{-2},{2,3},{-3,4},{-4}}),
  true)$

okltest_umu_rs2_cs(f) := (
  assert(f({}) = {}),
  assert(okltest_umu_rs1_cs(f) = true),
  assert(all_pass_n(setn(4),2) = all_pass_n(setn(4),2)),
  true)$

okltest_umu_rs3_cs(f) := (
  assert(f({}) = {}),
  assert(okltest_umu_rs2_cs(f) = true),
  assert(f({{1,2},{-1},{-2},{-3,-4},{3},{4},{1,2,3,4}}) = {{1,2},{-1},{-2},{-3,-4},{3},{4}}),
  true)$

okltest_umu_rs4_cs(f) := (
  assert(f({}) = {}),
  assert(okltest_umu_rs3_cs(f) = true),
  for n : 0 thru 4 do block([F:adjoin(setn(n),nonsing_bmu_cs(n))],
    assert(f(F) = F)
  ),
  true)$


/*!
\endhtmlonly
*/
