/* Oliver Kullmann, 8.4.2008 (Swansea) */
/* Copyright 2008, 2009, 2010, 2012, 2018, 2019 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/Cores.mac
  \brief Functions for computing minimally unsatisfiable and irredundant cores

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/Cores.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Backtracking/DLL_solvers.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Autarkies/TableauAlgorithm.mac");
klib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Transversals/Minimal/RecursiveSplitting.mac")$


/* *************************************************
   * Minimally unsatisfiable cores of minimum size *
   *************************************************
*/

/* Returns the minimum size of a minimally unsatisfiable sub-clause-set
   of clause-set F; uses sat-solver S: */
min_size_mus_bydef(F, S) := if S([var_cs(F),F]) then inf else
 block([k : 0, scls : {}],
  while every_s(lambda([G], S([var_cs(G),G])), scls) do (
   k : k+1, scls : powerset(F, k)),
 return(k))$

/* Decides whether clause-set F contains a (minimally) unsatisfiable
   sub-clause-set of size at most k; uses sat-solver S */
contains_us_bydef(F, k, S) :=
 not every_s(lambda([G], S([var_cs(G),G])), powerset(F,min(k,ncl_cs(F))))$


/* ***********************************
   * Computing all irredundant cores *
   ***********************************
*/

/* The set of all irredundant cores of a formal clause-set, using
   solver S. */

monitor_message_all_irr_cores_bydef() :=
  if oklib_monitor and oklib_monitor_level >= 1 then
    print("all_irr_cores_bydef: ENTRY;", statistics_fcs(FF))$

all_irr_cores_bydef(FF,S) := block(
 [counter_irr : 0, potentially_unusable_clauses : false],
  monitor_message_all_irr_cores_bydef(),
  all_forced_irr_cores_bydef({}, FF[2], S))$
all_irr_cores_bydef_fcs(FF) := all_irr_cores_bydef(FF,current_satsolver)$
all_irr_cores_bydef_cs(F) := all_irr_cores_bydef_fcs(cs2fcs(F))$

/* All minimally unsatisfiable cores of an unsatisfiable formal clause-set: */
all_min_usat_cores_bydef(FF,S) := all_irr_cores_bydef(FF,S)$
all_min_usat_cores_bydef_fcs(FF) := all_min_usat_cores_bydef(FF,current_satsolver)$
all_min_usat_cores_bydef_cs(F) := all_min_usat_cores_bydef(cs2fcs(F),current_satsolver)$


/* The set of all irredundant cores of union(Forced,Possible) which contain
   the given "forced" clauses. Prerequisite: Forced, Possible are disjoint. */
/* Uses inherited variables counter_irr and potentially_unusable_clauses. */

monitor_message_1_all_forced_irr_cores_bydef() :=
  if oklib_monitor and oklib_monitor_level >= 1 then (
    print("all_forced_irr_cores_bydef: Entry"),
    print("Forced:", statistics_cs(Forced)),
    print("Possible:", statistics_cs(Possible)))$
monitor_message_2_all_forced_irr_cores_bydef() :=
  if oklib_monitor then (
    counter_irr : counter_irr + 1,
    print("all_forced_irr_cores_bydef: found no.", counter_irr, ",", statistics_cs(Forced)),
    if oklib_monitor_level >= 2 then print(Forced))$

all_forced_irr_cores_bydef(Forced, Possible, S) := block(
 monitor_message_1_all_forced_irr_cores_bydef(),
 block( /* find new forced clauses */
  [Possible_old : Possible, F : union(Forced, Possible), V],
   V : var_cs(F),
   for C in Possible_old do (
     if not impliesp_f([V,disjoin(C,F)],C,S) then (
       Possible : disjoin(C,Possible),
       Forced : adjoin(C,Forced)))),
 if potentially_unusable_clauses and not irredundant_bydef(cs_to_fcs(Forced),S) then return({}),
 block( /* remove superfluous clauses */
  [Possible_old : Possible, V : var_cs(Forced)],
   for C in Possible_old do
     if impliesp_f([V,Forced],C,S) then Possible : disjoin(C,Possible)),
 /* now compute solutions */
 if emptyp(Possible) then (
   monitor_message_2_all_forced_irr_cores_bydef(),
   return({Forced})),
 block([C : choose_element(Possible), Cores_without_C],
  Possible : disjoin(C,Possible),
  Cores_without_C : all_forced_irr_cores_bydef(Forced, Possible,S),
  Forced : adjoin(C,Forced), potentially_unusable_clauses : true,
  return(union(Cores_without_C, all_forced_irr_cores_bydef(Forced,Possible,S)))))$


/* *************************************************
   * Heuristical search for some irredundant cores *
   *************************************************
*/

/* Returns some minimally unsatisfiable sub-clause-set of input FF,
   assumed to be unsatisfiable; returns a formal unsatisfiable clause-set,
   using the trivial heuristics, which just removes always the first possible
   clause).
   The set of variables of the result is the original set.
*/
/* RENAME: first_mus_fcsss */
first_mus_fcs(FF, S) := block(
 [V : FF[1], F : FF[2]],
  for C in F do if not S([V, disjoin(C,F)]) then F : disjoin(C,F),
  return([V,F]))$
/* RENAME: first_mus_csss */
first_mus_cs(F, S) := fcs2cs(first_mus_fcs(cs2fcs(F),S))$
/* Additionally a set of necessary clauses is given: */
first_mus_fcsssne(FF, S, nec) := block(
 [V : FF[1], F : FF[2]],
  for C in setdifference(F,nec) do
    if not S([V, disjoin(C,F)]) then F : disjoin(C,F),
  return([V,F]))$
first_mus_csssne(F, S, nec) := fcs2cs(first_mus_fcsssne(cs2fcs(F), S, nec))$
/* Now FF is a formal clause-list, and that order is used; ouput still fcs: */
first_mus_fclssne(FF, S, nec) := block(
  [V : setify(FF[1]), F : setify(FF[2])],
   for C in FF[2] do
     if not elementp(C,nec) and not S([V, disjoin(C,F)]) then F : disjoin(C,F),
  return([V,F]))$


/* RENAME: first_mus_fcs */
first_mus_bs_fcs(FF) := first_mus_fcs(FF, current_satsolver)$
/* RENAME: first_mus_cs */
first_mus_bs_cs(F) := first_mus_cs(F, current_satsolver)$
first_mus_csne(F, nec) := first_mus_csssne(F, current_satsolver, nec)$
first_mus_fclne(FF, nec) := first_mus_fclssne(FF, current_satsolver, nec)$

/* More generally, returns some irredundant core of input FF,
   (trivial heuristics, removing the first possible clause). */
first_irr_fcs(FF, S) := block(
 [V : FF[1], F : FF[2], Core : {}],
    for C in FF[2] do
      if not impliesp_f([V,disjoin(C,F)],C,S) then
        Core : adjoin(C,Core)
      else F : disjoin(C,F),
  return([V,Core]))$


/* *********************************
   * Sampling of irredundant cores *
   *********************************
*/

/* A sample of at most N elements of the set of all irredundant cores,
   where for the recursive branching with probability p first the left
   branch is taken (not including the considered clause). */
sample_irr_cores(FF,Solver,Count,branch_probability,seed) := block(
 [counter_irr : 0,
  potentially_unusable_clauses : false,
  generator_state : make_random_state(seed)],
  set_random_state(generator_state),
  monitor_message_all_irr_cores_bydef(),
  sample_forced_irr_cores({}, FF[2]))$

/* The set of all irredundant cores of union(Forced,Possible) which contain
   the given "forced" clauses. Prerequisite: Forced is irredundant. */
/* Uses inherited variable Solver, Count, branch_probability and
   counter_irr, potentially_unusable_clauses. */
sample_forced_irr_cores(Forced, Possible) := block(
 if Count <= 0 then return({}),
 monitor_message_1_all_forced_irr_cores_bydef(),
 block( /* find new forced clauses */
  [Possible_old : Possible, F : union(Forced, Possible), V],
   V : var_cs(F),
   for C in Possible_old do (
     if not impliesp_f([V,disjoin(C,F)],C,Solver) then (
       Possible : disjoin(C,Possible),
       Forced : adjoin(C,Forced)))),
 if potentially_unusable_clauses and not irredundant_bydef(cs_to_fcs(Forced),Solver) then return({}),
 block( /* remove superfluous clauses */
  [Possible_old : Possible, V : var_cs(Forced)],
   for C in Possible_old do
     if impliesp_f([V,Forced],C,Solver) then Possible : disjoin(C,Possible)),
 /* now compute solutions */
 if emptyp(Possible) then (
   Count : Count - 1,
   monitor_message_2_all_forced_irr_cores_bydef(),
   return({Forced})),
 block([C : choose_element(Possible)],
  Possible : disjoin(C,Possible),
  if random(1.0) <= branch_probability then block([Cores_without_C],
    Cores_without_C : sample_forced_irr_cores(Forced, Possible),
    Forced : adjoin(C,Forced), potentially_unusable_clauses : true,
    return(union(Cores_without_C, sample_forced_irr_cores(Forced,Possible))))
  else block([Cores_with_C],
    potentially_unusable_clauses : true,
    Cores_with_C : sample_forced_irr_cores(adjoin(C,Forced), Possible),
    return(union(Cores_with_C, sample_forced_irr_cores(Forced,Possible))))))$


/* ********************************************
   * Maximally non-equivalent sub-clause-sets *
   ********************************************
*/

/* The set of sub-clause-sets of clause-set F, which are not equivalent to
   some given boolean function F_0, and which are maximal w.r.t. this
   property.
   EQp(F) decides whether F is equivalent to this underlying F_0 or not.
   It is assumed that if EQp(G) is true for G <= F, then also EQp(G') is
   true for all G <= G' <= F.
*/
all_max_noneq_scs_bydef(F,EQp) := if F = {} then
 if EQp({}) then {} else {{}}
 else all_forced_max_noneq_scs_bydef({},F,{})$

/* The variation where the elements of Forced need to be taken,
   and the whole F is union(Forced,Possible,Removed). */
/* Inherits EQp. Invariant: EQp(Forced) is false. */
all_forced_max_noneq_scs_bydef(Forced,Possible,Removed) := block(
 [extension : []],
 for C in Possible while emptyp(extension) do
   if not EQp(adjoin(C,Forced)) then extension : [C],
 if emptyp(extension) then (
   extension : false,
   for C in Removed unless extension do
     if not EQp(adjoin(C,Forced)) then extension : true,
   if extension then return({}) else return({Forced}))
 else block([C : extension[1]],
   Possible : disjoin(C,Possible),
   return(union(
     all_forced_max_noneq_scs_bydef(adjoin(C,Forced),Possible,Removed),
     all_forced_max_noneq_scs_bydef(Forced,Possible,adjoin(C,Removed))))))$

/* The special case where F is unsatisfiable: */
all_max_sat_scs_bydef(F,S) :=
 all_max_noneq_scs_bydef(F,buildq([S],lambda([G],not(S(cs_to_fcs(G))))))$
all_max_sat_scs_bydef_cs(F) := all_max_sat_scs_bydef(F,current_satsolver)$

/* The complements of maximal satisfiable sub-clause-sets, the MCSs, i.e.
   minimal correction sets:
*/
all_min_corsets_bymaxsat_cs(F) := ecomp_hg([F,all_max_sat_scs_bydef_cs(F)])[2]$

/* Delivers a generic equivalence-checker for sub-clause-sets: */
equivalence_checker_scl_bydef(F,S) :=
 buildq([F,S],lambda([G],every_s(lambda([C],impliesp(G,C,S)),setdifference(F,G))))$

/* All maximally non-equivalent sub-clause-sets of clause-set F: */
/* Remark: For unsatisfiable F use all_max_sat_scs_bydef. */
all_max_neq_scs_bydef(F,S) := all_max_noneq_scs_bydef(F,equivalence_checker_scl_bydef(F,S))$
all_max_neq_scs_bydef_cs(F) := all_max_neq_scs_bydef(F,current_satsolver)$


/* ************************************
   * Duality between MAXSAT and MUSAT *
   ************************************
*/

/* The irredundant cores are exactly the minimal transversals of
   the complements of maximally not-equivalent sub-clause-sets,
   and vice versa. */

/* Given a function for computing all irredundant cores (from formal
   clause-sets), and a function for computing hypergraph transversals,
   compute all maximally not-equivalent sub-clause-sets: */
all_max_neq_scs_bydual(F,f_irr_cores,f_hyp_trans) :=
  ecomp_hg(f_hyp_trans([F,f_irr_cores(cs_to_fcs(F))]))[2]$
/* Given a function for computing all maximally not-equivalent
   sub-clause-sets (for a clause-set), compute all irredundant cores: */
all_irr_cores_bydual(FF, f_all_max_neq, f_hyp_trans) :=
  f_hyp_trans(ecomp_hg([FF[2],f_all_max_neq(FF[2])]))[2]$

/* Instantiations: */
all_min_usat_cores_bydual0_cs(F) :=
  all_irr_cores_bydual(cs2fcs(F),all_max_sat_scs_bydef_cs,transversal_hg_rs)$


/* *****************
   * Computing UMU *
   *****************
*/

/* Computing umu(F), the union of mus(F), directly by enumeration: */
umu_enum0_cs(F) := if current_satsolver(cs2fcs(F)) then {}
  else lunion(all_min_usat_cores_bydef_cs(F))$
/* Now using all minimal correction-sets: */
umu_enummcs_cs(F) := lunion(all_min_corsets_bymaxsat_cs(F))$

/* Simplest recursive splitting on some mus: */
umu_rs0_cs(F) := umu_rs0_rec_cs(F,{})$
/* The set of C in F such that there is G in mus(F) with C in G and
   forced <= G, where forced is an irredundant clause-set:
*/
umu_rs0_rec_cs(F, forced) := block([mus,res],
  if current_satsolver(cs2fcs(F)) then return({}),
  mus : first_mus_bs_cs(F),
  res : if subsetp(forced,mus) then mus else {},
  if mus = F then return(res),
  mus : listify(setdifference(mus,forced)),
  for C in mus do (
    res : union(res, umu_rs0_rec_cs(disjoin(C,F), forced)),
    if C # last(mus) then (
      forced : adjoin(C,forced),
      if not irredundant_bydef_cs(forced) then return(done)
    )
  ),
  res)$

/* Same semantics as rs0, but using the lean kernel for cutting off branches:
*/
umu_rs1_cs(F) := umu_rs1_rec_cs(F,{})$
umu_rs1_rec_cs(F, forced) := block(
 [LK,mus,res],
  LK : first(lean_kernel_tableau_fs_cs(F)),
  if emptyp(LK) then return({}),
  if not subsetp(forced, LK) then return({}),
  F : LK,
  mus : first_mus_bs_cs(F),
  res : if subsetp(forced,mus) then mus else {},
  if mus = F then return(res),
  mus : listify(setdifference(mus,forced)),
  for C in mus do (
    res : union(res, umu_rs1_rec_cs(disjoin(C,F), forced)),
    if C # last(mus) then (
      forced : adjoin(C,forced),
      if not irredundant_bydef_cs(forced) then return(done)
    )
  ),
  res)$
/* To remove some branches, one can use
     umu_rs1_cs(F) := umu_rs1_rec_cs(F,all_irrcl_bydef_cs(F))$
*/

/* As rs1, but now stopping if nothing new (using "current umu"): */
umu_rs2_cs(F) := umu_rs2_rec_cs(F,{},{})$
/* As with rs1, but not returning clauses which are already in cumu;
   as always, forced is irredundant, and now forced is contained in cumu:
*/
umu_rs2_rec_cs(F, forced,cumu) := block(
 [mus,res,l,C],
  F : first(lean_kernel_tableau_fs_cs(F)),
  if emptyp(F) or not subsetp(forced, F) or subsetp(F,cumu) then return({}),
  mus : first_mus_bs_cs(F),
  res : if subsetp(forced,mus) then mus else {},
  if mus = F then return(res),
  mus : listify(setdifference(mus,forced)),
  l : length(mus),
  for i : 1 thru l do (
    C : mus[i],
    res : union(res, umu_rs2_rec_cs(disjoin(C,F), forced, union(res,cumu))),
    if i # l then (
      forced : adjoin(C,forced),
      if not irredundant_bydef_cs(forced) then return(done)
    )
  ),
  res)$
/* To remove some branches, one can use
     umu_rs2_cs(F) := umu_rs2_rec_cs(F,all_irrcl_bydef_cs(F),{})$
*/

/* As rs2, but now using a global cumu, accumulating everything: */
umu_rs3_cs(F0) := block([cumu : {}],
  umu_rs3_rec_cs(F0,{}), cumu)$
/* As with rs2, but return-value now indicates whether we have reached F0: */
umu_rs3_rec_cs(F, forced) := block(
 [mus,l,C],
  F : first(lean_kernel_tableau_fs_cs(F)),
  if emptyp(F) or not subsetp(forced, F) or subsetp(F,cumu) then return(false),
  mus : first_mus_bs_cs(F), cumu : union(cumu, mus),
  if cumu = F0 then return(true) elseif mus = F then return(false),
  mus : listify(setdifference(mus,forced)), l : length(mus),
  for i : 1 thru l do (
    C : mus[i],
    if umu_rs3_rec_cs(disjoin(C,F), forced) then return(true),
    if i # l then (
      forced : adjoin(C,forced),
      if not irredundant_bydef_cs(forced) then return(false)
    )
  ))$

/* As rs3, but now removing clauses which are redundant together with forced: */
umu_rs4_cs(F0) := block([cumu],
  F0 : first(lean_kernel_tableau_fs_cs(F0)),
  if emptyp(F0) then return({}),
  cumu : all_irrcl_bydef_cs(F0),
  if not current_satsolver(cs2fcs(cumu)) then return(cumu),
  umu_rs4_rec_cs(F0,cumu,cumu), cumu)$
/* Invariants for F:
     - F <= F0
     - F is unsatisfiable.
   Invariants for cumu:
     - cumu <= umu(F0),
     - cumu contains all necessary clauses of F0
     - cumu only grows, never shrinks.
   Invariants for forced:
     - nec <= forced
     - forced <= F, forced <= cumu
     - forced contains all necessary clauses of F0
     - forced is satisfiable and irredundant.
   Invariants for nec:
     - nec is a set of necessary clauses for F.
*/
umu_rs4_rec_cs(F, forced, nec) := block(
 [mus,l,C,G,DF,VF,lVF,VG,Vf,lVf],
  if not emptyp(forced) then
    if length(forced) = 1 then (
      C : first(forced),
      for D in disjoin(C,F) do
        if subsetp(C,D) or subsetp(D,C) then F : disjoin(D,F)
    ) else
      for C in setdifference(F,forced) do
        if not irredundant_bydef_cs(adjoin(C,forced)) then F : disjoin(C,F),
  F : first(lean_kernel_tableau_fs_cs(F)),
  if emptyp(F) or not subsetp(forced, F) then return(false),
  DF : setdifference(F,cumu), if emptyp(DF) then return(false),
  VF : var_cs(F), lVF : length(VF),
  mus : first_mus_fclne([listify(VF),
    append(listify(setdifference(setdifference(F,DF),forced)),
           listify(forced), listify(DF))], nec)[2],
  cumu : union(cumu, mus),
  if cumu = F0 then return(true) elseif mus = F then return(false),
  mus : listify(setdifference(mus,forced)), l : length(mus),
  Vf : var_cs(forced), lVf : length(Vf),
  for i : 1 thru l do (
    C : mus[i], G : disjoin(C,F), VG : var_cs(G),
    if length(VG)=lVF and current_satsolver([VG,G]) then (
      if i = l then return(false),
      nec : adjoin(C,nec),
      forced : adjoin(C,forced), Vf : union(var_c(C),Vf),
      if length(Vf)=lVf and not current_satsolver([Vf,forced]) then
        return(false)
      else lVf : length(Vf)
    )
    else (
      if umu_rs4_rec_cs(G, forced, nec) then return(true),
      if i = l then return(false),
      forced : adjoin(C,forced), Vf : union(var_c(C),Vf),
      if length(Vf)=lVf and not current_satsolver([Vf,forced]) then
        return(false)
      else lVf : length(Vf),
      if not irredundant_bydef_cs(forced) then return(false)
    ),
    if subsetp(F,cumu) then return(false)
  ))$

/* Best selection: */
current_umu_cs(F) := umu_rs4_cs(F)$


/*!
\endhtmlonly
*/
