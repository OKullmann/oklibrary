/* Oliver Kullmann, 8.4.2008 (Swansea) */
/* Copyright 2008, 2018, 2019 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/testobjects/Cores.mac

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/testobjects/Cores.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/Cores.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/tests/Cores.mac")$

/* *************************************************
   * Minimally unsatisfiable cores of minimum size *
   *************************************************
*/

okltest_min_size_mus(min_size_mus_bydef);

okltest_contains_us(contains_us_bydef);

/* ***********************************
   * Computing all irredundant cores *
   ***********************************
*/

okltest_all_irr_cores(all_irr_cores_bydef);
okltest_all_min_usat_cores(all_min_usat_cores_bydef);
okltest_all_forced_irr_cores(all_forced_irr_cores_bydef);

/* *************************************************
   * Heuristical search for some irredundant cores *
   *************************************************
*/

okltest_first_mus_fcs(first_mus_fcs);

okltest_first_irr_fcs(first_irr_fcs);

/* *********************************
   * Sampling of irredundant cores *
   *********************************
*/

okltest_sample_irr_cores(sample_irr_cores);

/* ********************************************
   * Maximally non-equivalent sub-clause-sets *
   ********************************************
*/

okltest_all_max_noneq_scs(all_max_noneq_scs_bydef);
okltest_all_max_sat_scs(all_max_sat_scs_bydef);

okltest_all_min_corsets_bymaxsat_cs(all_min_corsets_bymaxsat_cs);

okltest_equivalence_checker_scl(equivalence_checker_scl_bydef);
okltest_all_max_neq_scs(all_max_neq_scs_bydef);

/* ************************************
   * Duality between MAXSAT and MUSAT *
   ************************************
*/

okltest_all_max_neq_scs_bydual(all_max_neq_scs_bydual);
okltest_all_irr_cores_bydual(all_irr_cores_bydual);

/* *****************
   * Computing UMU *
   *****************
*/

okltest_umu_enum0_cs(umu_enum0_cs);
okltest_umu_enum0_cs(umu_enummcs_cs);

okltest_umu_rs0_cs(umu_rs0_cs);
okltest_umu_rs1_cs(umu_rs1_cs);
okltest_umu_rs2_cs(umu_rs2_cs);
okltest_umu_rs3_cs(umu_rs3_cs);
okltest_umu_rs4_cs(umu_rs4_cs);

/*!
\endhtmlonly
*/
