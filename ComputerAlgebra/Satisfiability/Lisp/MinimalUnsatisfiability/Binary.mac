/* Oliver Kullmann, 16.6.2018 (Swansea) */
/* Copyright 2018, 2019 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/Binary.mac
  \brief Generators and analysis w.r.t. minimally unsatisfiable clause-sets containing only clauses of length at most 2

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/Binary.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Constructions.mac")$
oklib_include("OKlib/ComputerAlgebra/NumberTheory/Lisp/Auxiliary.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/Cores.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Hypergraphs.mac")$
oklib_include("OKlib/ComputerAlgebra/Graphs/Lisp/Connectedness.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Statistics.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$


/* *********************
   * Basic definitions *
   *********************
*/

/* Uniform 2-MUs, which here is an abbreviation for "2-uniform": */
ubmu_csp(F) := puniform_csp(F,2) and min_unsat_bydef_cs(F)$
/* All 2-MUs: */
bmu_csp(F) := max_rank_cs(F) <= 2 and min_unsat_bydef_cs(F)$

/* Reminders:

   The number of variables of a clause-set F is
     nvar_cs(F),
   while the deficiency is
     deficiency_cs(F).

   The implification-digraph is
     imp_cs2dg(F).

   For a digraph G:
    - The deficiency is deficiency_dg(G).
    - The set of all cycles is allcycles_dg(G) (with only one pair of
      vertices repeated).
    - Testing a digraph for strong resp. minimally strong connection:
      sconnected_dg_p(G) resp. minsconnected_dg_p(G).
    - Draw a digraph G via
      draw_graph(dg2mdg(G), spring_embedding_depth=1000)

   The number of (var/sign)-automorphisms of cs F is (via simple brute-force,
   using time s=n! resp. s=2^n resp. s=n!*2^n and space s / m for m the
   resp. number of automorphisms):
     num_varauto_fcs(cs2fcs(F))
     num_flipauto_fcs(cs2fcs(F))
     num_auto_fcs(cs2fcs(F))

   A digraph G is output to file ready to be piped into dreadnaut (for counting
   automorphisms) via
     output_dreadnaut_dg(G,filename).

*/

/* Whether a set of pairs of literals (arcs) is contradictory: */
sarcs_clashp(C) := block([L:lunion(map(setify,C))], clashp(L,L))$
/* For a fcs F the pair of two lists: lengths of cycles, lengths of
   clashing cycles (in the implication digraph), where for each list
   the lengths are grouped and counted, resulting in pairs
   [length,count], ascendingly sorted by length:
*/
cycle_analysis_imp_fcs(F) := block([G : imp_fcs2dg(F), allC, contC],
 allC : allcycles_dg(G),
 contC : subset(allC, sarcs_clashp),
 [list_distribution(map(length,listify(allC))), list_distribution(map(length,listify(contC)))])$


/* ****************************
   * All 2-MUs by brute force *
   ****************************
*/

/* All 2-uniform 2-CNF MUs over variables 1,...,n, (possibly not using
   all variables):
*/
all_ubmu(n) := if n<=1 then {} else
 all_min_usat_cores_bydef_cs(all_ubin_cs(n))$
/* Only those with exactly n variables: */
all_ubmue(n) := subset(all_ubmu(n), lambda([F], is(nvar_cs(F) = n)))$

/* All 2-CNF MUs over variables 1,...,n (including empty and unit-clauses): */
all_bmu(n) := all_min_usat_cores_bydef_cs(all_bin_cs(n))$
/* Only those using all variables: */
all_bmue(n) := subset(all_bmu(n), lambda([F], is(nvar_cs(F) = n)))$

/* To get all p-uniform clause-set in a set S of clause-sets, use
     subset(S, lambda([F], puniform_csp(F,p))).
   For the subset of clause-sets of deficiency k:
     subset(S, lambda([F], is(deficiency_cs(F) = k))).

  For all of these sets, representatives of the isomorphism-classes are
  obtained by using representatives_cs, i.e.

    representatives_cs(all_bmue(n));

*/

/*

  For 0 <= n <= 5 (as tuples the numbers of elements of deficiency 1, 2, ...)

Considering all 2-MUs:

  all_bmu:                          1     2     12    149   2763  69268
                                                                  (17906,32290,15880,3000,192)
  mod iso:                          1     2     5     12    27    59
                                                                  (23,21,11,3,1)

  all_bmue(n):                      1     1     9     118   2232  56832
                                                                  (12480,26880,14400,2880,192)
  mod iso:                          1     1     3     7     15    32
                                                                  (9,12,8,2,1)
Only considering 2-uniform 2-MUs;

  all_ubmu:                         0     0     1     49    1654  55022
                                                                  (3660,32290,15880,3000,192)
  mod iso:                          0     0     1     5     16    43
                                                                  (7,21,11,3,1)

  all_ubmue:                        0     0     1     46    1464  47232
                                                                  (2880,26880,14400,2880,192)
  mod iso:                          0     0     1     4     11    27
                                                                  (4,12,8,2,1)

Considering only RHO (i.e., the non-2-uniform cases):

  all                               1     2     11    100   1109  14246 = 1 + sum_{k=1}^n binom(n,k) * k * k! * 2^(k-1)
  mod iso                           1     2     4     7     11    16 = n^2/2 + n/2 + 1
  all_e                             1     1     8     72    768   9600 = n * n! * 2^(n-1) for n >= 1
  mod iso e                         1     1     2     3     4     5  = max(n,1)


all_bmu(n) = sum(all_bmue(k) * binomial(n,k), k, 0, n)
E.g., sum_l([1,1,9,118,2232,56832] * [1,5,10,10,5,1]);
  69268
all_bmu(n) / iso = sum(all_bmue(k) / iso, k, 0, n)
E.g., 1+1+3+7+15+32 = 59.

all_ubmu(n) = sum(all_ubmue(k) * binomial(n,k), k, 0, n)
E.g., sum_l([0,0,1,46,1464,47232] * [1,5,10,10,5,1]);
  55022
all_ubmu(n) / iso = sum(all_ubmue(k) / iso, k, 0, n)
E.g., 0+0+1+4+11+27 = 43.


Mod iso we have similar sum-relations, but the factors are one (so the partial
sums of the all_(u)bmue-sequences are the all_(u)bmu-sequences):


*/


/* ******************************
   * Some small auxiliary 2-CNF *
   ******************************
*/

/* The equivalence of literals x, y: */
equiv_cl(x,y) := [{-x,y}, {-y,x}]$
equiv_cs(x,y) := setify(equiv_cl(x,y))$

/* The list of implications from a to b (natural numbers >= 1): */
impl_cl(a,b) := create_list({-i,i+1},i,a,b-1)$
impl_cs(a,b) := setify(impl_cl(a,b))$
/* The implications b -> b-1 -> ... -> 1 are given by
   comp_cl(impl_cl(a,b)).
*/


/* ******************
   * The Horn-paths *
   ******************
*/

/*

  Defining the clause-set ht_bmu_fcs(n,i), 1 <= i <= n:

  n-1 binary clauses:

  1 -> 2 -> ... -> n

  -n -> -(n-1) -> ... -> -1

  Plus one unit-clause:

  -1 -> 1

  Plus a binary/unit clause:

  n -> -i, i -> -n
  for some 1 <= i <= n; we have the hp-form iff n=i.

  This yields the fundamental cycle

  1 -> ... -> n -> -i -> ... -> -1 -> 1

  of length (n-1) + 1 + (i-1) + 1 = n+i.

  Plus its transposed

  -1 -> 1 -> ... -> i -> -n -> ... -> -1.

  These two cycles are equal iff n=i.

  The number of variables is n, the number of clauses n+1,
  the number vertices 2n, the number of arcs 2+2(n-1) = 2n for n=i,
  otherwise 1 + 2n = 2n+1.

  The implication digraph has a whole is

                      -> (i+1) -> ... -> n -> -i
  -1 -> 1 -> ... -> i                           -> -(i-1) -> ... -> -1
                      -> -n ->      ...    -> -i

  The disjoint paths have (both) length n-i+1, the joint part of the
  fundamental cycles has length 2i-1.
  So for i=n we have the directed cycle of length 2n, while otherwise we
  have the directed path of length 2i-1, completed at its ends to two cycles
  via disjoint paths of length n-i+1:

                                     -> i+1 -> ... -> n      -> *
  *=-i -> ... -> -1 -> 1 -> ... -> i
                                     -> -n  -> ... -> -(i+1) -> *

  We have exactly one non-trivial cs-automorphism for i < n:

    i+1 |-> -n, ..., n |-> -(i+1)

  swapping the two disjoint extensions. Exactly for i=n (and n >= 2) we have
  additional dg-automorphism.

*/

/* The 2-MUs with exactly two unit-clauses, for n >= 1: */
hp_bmu_cl(n) := endcons({-n}, cons({1}, impl_cl(1,n)))$
hp_bmu_cs(n) := setify(hp_bmu_cl(n))$
hp_bmu_fcl(n) := [create_list(i,i,1,n), hp_bmu_cl(n)]$
hp_bmu_fcs(n) := [setn(n), hp_bmu_cs(n)]$

/* imp_cs2dg(hp_bmu_cs(n)) is the cycle
     1 -> ... -> n -> -n -> -(n-1) -> ... -> -1 -> 1
   of length 2n. This is an MSD of deficiency 0.
   So the automormorphism group of the implication
   digraph is Z_2n, the cyclic group of order 2n.
   While hp_bmu_fcs(n) has exactly one non-trivial automorphism,
   mapping 1 -> -n, 2 -> -(n-1), ..., n -> -1.
*/

/* More generally, for n >= 1 and 1 <= i <= n, adding literal -i to the
   negative clause:
*/
ht_bmu_cl(n,i) := endcons({-n,-i}, cons({1}, impl_cl(1,n)))$
ht_bmu_cs(n,i) := setify(ht_bmu_cl(n,i))$
ht_bmu_fcl(n,i) := [create_list(i,i,1,n), ht_bmu_cl(n,i)]$
ht_bmu_fcs(n,i) := [setn(n), ht_bmu_cs(n,i)]$
/* We have ht_bmu_*(n,n) = hp_bmu_*(n). */

/* For i < n we have exactly 2 cycles (both contradictory), and exactly one
   non-trival cs-automorphism, and also exactly one non-trivial
   implication-digraph automorphism. We also have an MSD, of deficiency 1.
   The clause-sets ht_bmu_cs(n,i), ht_bmu_cs(n',i') are isomorphic iff
   [n,i] = [n',i'].
*/


/* ***********************
   * The nonsingular B_n *
   ***********************
*/

/* For n # 1 the up to isomorphism unique nonsingular 2-MUs with n variables;
   since the general constructions fits also for n=1, also n=1 is included:
*/
nonsing_bmu_cl(n) := if n = 0 then [{}] else
 append(lappend(create_list(equiv_cl(i,i+1),i,1,n-1)), equiv_cl(1,-n))$
nonsing_bmu_cs(n) := setify(nonsing_bmu_cl(n))$
nonsing_bmu_fcl(n) := [create_list(i,i,1,n), nonsing_bmu_cl(n)]$
nonsing_bmu_fcs(n) := map(setify,nonsing_bmu_fcl(n))$
/* We have
     nonsing_bmu_cs(n) = union(impl_cs(1,n), comp_cs(impl_cs(1,n)),
                               equiv_cs(1,-n))
     deficiency_cs(nonsing_bmu_cs(n)) = max(1,n).
*/


/* **********************
   * Cycle descriptions *
   **********************
*/

/* The valid cycle descriptions: */
valid_triple_bmu(T) := listp(T) and length(T)=3 and naturalp(T[1])
 and naturalp(T[3]) and naturalzp(T[2])$
valid_cycledesc_bmu(T) := listp(T) and length(T) >= 2
 and every_s(valid_triple_bmu, T)$

deficiency_cycledesc(T) := length(T)$
ncl_cycledesc(T) := sum_l(map(sum_l,T))$
nvar_cycledesc(T) := ncl_cycledesc(T) - deficiency_cycledesc(T)$
nlitocc_cycledesc(T) := 2 * ncl_cycledesc(T)$

/* For inputs T which fulfill valid_cycledesc_bmu(T): */
cycledesc2bmu_fcl(T) := block([c:sum_l(lappend(T)), k:length(T), n, F:[],
 S:map(sum_l,T), max, old_max, beg_int, end_int],
 n:c-k, max:S[1]+T[k][2],
 beg_int : T[1][1]+1, end_int : beg_int + T[1][2],
 F:impl_cl(1,max), F:endcons({-max,1},F),
 for i : 2 thru k-1 do (
   F:endcons({-end_int,max+1}, F),
   F:append(F,impl_cl(max+1,max+S[i]-1)),
   old_max:max, max:max+S[i]-1,
   F:endcons({-max,beg_int},F),
   beg_int:old_max+T[i][1],
   end_int:beg_int+T[i][2]
 ),
 if T[k][1] > 1 then (
   F:endcons({-end_int,max+1},F),
   F:append(F,impl_cl(max+1,max+T[k][1]-1)),
   F:endcons({-(max+T[k][1]-1), -1},F)
 ) else F:endcons({-end_int,-1},F),
 if T[k][3] > 1 then (
   F:endcons({if T[k][2]=0 then 1 else 1+S[1],max+T[k][1]},F),
   F:append(F,impl_cl(max+T[k][1],max+T[k][1]+T[k][3]-2)),
   F:endcons({-(max+T[k][1]+T[k][3]-2), beg_int},F)
 ) else F:endcons({if T[k][2]=0 then 1 else S[1]+1,beg_int},F),
 [create_list(i,i,1,n),F])$

cycledesc2bmu_cs(T) := fcl2cs(cycledesc2bmu_fcl(T))$
cycledesc2bmu_fcs(T) := fcl2fcs(cycledesc2bmu_fcl(T))$

/* The implication digraph of a cycle-description: */
cycledesc2dg(T) := imp_fcs2dg(cycledesc2bmu_fcs(T))$
/* The set of all cycles for T: */
cycledesc2allcycles(T) := allcycles_dg(cycledesc2dg(T))$
/* The set of contradictory cycles for T: */
cycledesc2allcontrcycl(T) := subset(cycledesc2allcycles(T), sarcs_clashp)$
/* The length of the fundamental cycle: */
lengthfundcycl_cycledesc(T) := sum_l(map(first,T)) + sum_l(map(third,T)) +
 2 * sum_l(map(second,T))$

/* The implication-digraph, with vertices starting with 0: */
shift_vertex_0(v) := if v < 0 then v+n else v+(n-1)$
shift_arc_0(e) := map(shift_vertex_0, e)$
cycledesc2std0dg(T) := block([G : cycledesc2dg(T), n : nvar_cycledesc(T)],
 [map(shift_vertex_0, first(G)), map(shift_arc_0, second(G))])$

/* Testing properties of the implication-digraph (for automorphisms see
   below):
*/
sconnected_cycledesc_p(T) := sconnected_dg_p(cycledesc2std0dg(T))$
/* The conjecture is that T yields always an SD. */
minsconnected_cycledesc_p(T) := minsconnected_dg_p(cycledesc2std0dg(T))$
/* The conjecture is that T yields an MSD iff all a_i, c_i >= 2. */


/* ********************************************
   * Automorphisms of cycle descriptions etc. *
   ********************************************
*/

/* From here on a complete REVISION is needed. */

/* Reversal of each triple ("point reflection"): */
preflection_t(T) := map(reverse,T)$

/* Reflection of a cycle description: */
rotate_middle(T) := block([M:map(second,T)],
  M : rotate(M,-1),
  create_list([first(T[i]), M[i], third(T[i])], i, 1, length(T)))$
reflection_t(T) := rotate_middle(reverse(T))$

/* Rotation of a cycle description: */
rotate_t(T) := block([R:rotate(T,1)],
  append([reverse(first(R))], rest(R,1)))$

/* Closure under the operations preflection_t, reflection_t, rotate_t for a set of tuples: */
closure_3op_st(S) := block([oldlength:length(S)],
  do (
    S : union(S, map(preflection_t,S)),
    S : union(S, map(reflection_t,S)),
    S : union(S, map(rotate_t, S)),
    if length(S) = oldlength then return(S),
    oldlength : length(S)
  ))$
/* So the orbit of a cycle-description T is
   closure_3op_st({T});
*/
size_autg_cycledesc(T) := 4*length(T) / length(closure_3op_st({T}))$

/* Output the graph to file f in the dreadnaut-format, plus instruction
   to compute the automorphism-group:
*/
output_dreadnaut_cycledesc(T,f) := output_dreadnaut_std0dg(cycledesc2std0dg(T), f)$
/* The conjecture is that the automorphism groups of
     cycledesc2bmu_fcs(T) and cycledesc2dg(T)
   are always canonically isomorphic.
*/


/* *************************************
   * Determining all isomorphism types *
   *************************************
*/

/* Whether two cycle descriptions are equivalent: */
equiv_cycledesc_p(T1,T2) := length(T1)=length(T2) and
  ncl_cycledesc(T1)=ncl_cycledesc(T2) and
  elementp(T2, closure_3op_st({T1}))$

/* All triples with a given sum s: */
all_triples(s) := setify(create_list([a,b,s-a-b], a,1,s-1, b,0,s-a-1))$

/* The set of all partitions of length k of n with every element at least 2: */
all_partitions_min2(n,k) :=
 subset(integer_partitions(n,k), lambda([p], is(last(p) >= 2)))$
/* The same with unordered partitions: */
all_upartitions_min2(n,k) := lunion(
 map(permutations,subset(integer_partitions(n,k), lambda([p], is(last(p) >= 2)))))$

/* For a given tuple of triple-sums, all possible cycle descriptions: */
all_cycledesc_ts(S) := apply(cartesian_product,map(all_triples, S))$

/* All cycle descriptions with c clauses and deficiency k: */
all_cycledesc(k,c) := lunion(map(all_cycledesc_ts, all_upartitions_min2(c,k)))$

/* The equivalence-classes of cycle descriptions of deficiency k with c clauses: */
equiv_cycle_desc(k,c) := equiv_classes(all_cycledesc(k,c), equiv_cycledesc_p)$
/* Their number: */
nequiv_cycle_desc(k,c) := length(equiv_cycle_desc(k,c))$

/*!
\endhtmlonly
*/
