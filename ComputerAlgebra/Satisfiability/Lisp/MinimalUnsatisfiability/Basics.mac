/* Oliver Kullmann, 29.11.2007 (Swansea) */
/* Copyright 2007, 2008, 2009, 2010, 2011, 2012, 2017 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/Basics.mac
  \brief Operations regarding minimally unsatisfiable clause-sets

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/MinimalUnsatisfiability/Basics.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Backtracking/DLL_solvers.mac")$


/* *************************
   * Deciding irredundancy *
   *************************
*/

/* Predicate to decide whether formal clause-set FF implies clause C,
   using solver S: */
/* RENAME: impliesp_fcs */
impliesp_f(FF,C,S) := not S(apply_pa_f(comp_sl(C),FF))$
impliesp_fcs(FF,C,S) := impliesp_f(FF,C,S)$
/* The variation for clause-sets F. */
/* RENAME: impliesp_cs */
impliesp(F,C,S) := not S(cs2fcs(apply_pa_cs(comp_sl(C),F)))$
impliesp_cs(F,C,S) := impliesp(F,C,S)$

/* Returns true iff input FF (formal clause-set) is minimally unsatisfiable.
   The second input, the "solver", shall just return true or false. */
min_unsat_bydef(FF, solver) := not solver(FF) and
 block([all_sat : true],
  for C in FF[2] unless not all_sat do
   all_sat : solver([FF[1], disjoin(C, FF[2])]),
  return(all_sat))$
min_unsat_bydef_fcs(FF) := min_unsat_bydef(FF, current_satsolver)$
min_unsat_bydef_cs(F) := min_unsat_bydef_fcs(cs2fcs(F))$
/* More generally, returns true iff input FF (formal clause-set) is
   irredundant. */
irredundant_bydef(FF, solver) :=
 block([V : FF[1], F : FF[2], redundancy : false],
  for C in F unless redundancy do
   redundancy : impliesp_f([V,disjoin(C,F)],C,solver),
  return(not redundancy))$
irredundant_bydef_fcs(FF) := irredundant_bydef(FF, current_satsolver)$
irredundant_bydef_cs(F) := irredundant_bydef_fcs(cs2fcs(F))$


/* *****************************
   * Classification of clauses *
   *****************************
*/

/* Returns the set of all irredundant clauses (for unsatisfiable
   clause-sets also called necessary clauses) for input FF: */
all_irrcl_bydef(FF,S) := block([V : FF[1], F : FF[2], I : {}],
  for C in F do
    if not impliesp_f([V,disjoin(C,F)],C,S) then I : adjoin(C,I),
  return(I))$
all_irrcl_bydef_fcs(FF) := all_irrcl_bydef(FF,current_satsolver)$
all_irrcl_bydef_cs(F) := all_irrcl_bydef_fcs(cs2fcs(F))$


/* **************************************
   * Saturated minimal unsatisfiability *
   **************************************
*/

/* Returns true iff input formal clause-set FF is saturated minimally
   unsatisfiable:
*/
saturated_min_unsat_bydef(FF, solver) := min_unsat_bydef(FF,solver) and
 every_s(lambda([x],irredundant_bydef(apply_pa_fcs({x},FF),solver)),
         literals_v(FF[1]))$
saturated_min_unsat_bydef_fcs(FF) :=
  saturated_min_unsat_bydef(FF, current_satsolver)$
saturated_min_unsat_bydef_cs(F) := saturated_min_unsat_bydef_fcs(cs2fcs(F))$

/* Return the set of partial assignments of size at most 1 which after
   application to formal clause-set FF do not result in a minimally
   unsatisfiable clause-set. So
    saturated_min_unsat_bydef(FF) = true iff non_saturating_pas_bydef(FF) = {}
   for a minimally unsatisfiable FF.
*/
non_saturating_pas_bydef(FF,solver) := block(
 [assignments : union({{}}, map(set,literals_v(FF[1]))),
  result : {}],
  for phi in assignments do
    if not min_unsat_bydef(apply_pa_fcs(phi,FF),solver) then
      result : adjoin(phi,result),
  return(result))$
non_saturating_pas_bydef_fcs(FF) :=
  non_saturating_pas_bydef(FF, current_satsolver)$
/* Same, but now for MU F: */
non_saturating_mu_pas_bydef(FF,solver) := block(
 [assignments : union({{}}, map(set,literals_v(FF[1]))),
  result : {}],
  for phi in assignments do
    if not irredundant_bydef(apply_pa_fcs(phi,FF),solver) then
      result : adjoin(phi,result),
  return(result))$
non_saturating_mu_pas_bydef_fcs(FF) :=
  non_saturating_mu_pas_bydef(FF, current_satsolver)$

/* For MU F (very inefficient first implementation): */
all_saturations_bydef_fcs(F) := block(
 [res:{}, NS:non_saturating_mu_pas_bydef_fcs(F), V,L, D,E, G,H],
  if emptyp(NS) then return({fcs2cs(F)}),
  V : F[1],
  L : lunion(NS),
  for C in F[2] do (
   G : disjoin(C,F[2]),
   D : union(C,comp_sl(C)),
   for x in setdifference(L,D) do (
    E : adjoin(x,C),
    H : adjoin(E,G),
    if not current_satsolver([V,H]) then
     res : union(all_saturations_bydef_fcs([V,H]), res)
  )
 ),
 res)$


/* *************************************
   * Marginal minimal unsatisfiability *
   *************************************
*/

/* Returns true iff input FF is marginal minimally unsatisfiable: */
marginal_min_unsat_bydef(FF, solver) := min_unsat_bydef(FF,solver) and
 if (
  for C in FF[2] do
   if (
     for x in C do
       if irredundant_bydef([FF[1], adjoin(disjoin(x,C),disjoin(C,FF[2]))], solver)
       then return(false)
   ) # done then return(false)
 ) =  done then true else false$
marginal_min_unsat_bydef_fcs(FF) :=
  marginal_min_unsat_bydef(FF, current_satsolver)$
marginal_min_unsat_bydef_cs(F) := marginal_min_unsat_bydef_fcs(cs2fcs(F))$


/*!
\endhtmlonly
*/
