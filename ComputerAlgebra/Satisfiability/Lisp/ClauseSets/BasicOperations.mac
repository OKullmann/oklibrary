/* Oliver Kullmann, 29.11.2007 (Swansea) */
/* Copyright 2007, 2008, 2009, 2010, 2011, 2012 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac
  \brief Functions for basic operations with clause-sets

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Strings.mac")$

/* Guaranteed to be included: */
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Statistics.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/PartialAssignments.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Substitutions.mac")$


/* **************************
   * Variables and literals *
   **************************
*/

/*
 A "boolean variable" might be any expression x, such that "- x" is defined
 and yields a different object, and such that abs(x) = x.
*/

v_p(v) :=
 not stringp(v) and
 is(is(v>0)=true) and
 is(is(-v<0)=true) and
 is(is(-v#v)=true) and
 is(is(abs(v)=v)=true) and
 is(is(abs(-v)=v)=true) and
 is(is(--v=v)=true)$

/*
 A "boolean literal" might be a boolean variable "v" or a negated boolean
 variable "-v".
*/

l_p(x) :=
 is(is(--x=x)=true) and
 if is(x>0)=true then
   is(is(abs(x)=x)=true) and v_p(x)
 elseif is(x<0)=true then
   is(is(abs(x)=-x)=true) and v_p(-x)
 else false$

/* The underlying variable of a literal: */
var_l(x) := abs(x)$

/* The sign of a literal in {-1,+1}: */
sign_l(x) := block([s : sign(x)], if s = pos then 1 else -1)$

/* The literals for a set of variables, V can also be a set of literals,
   and then we obtain the closure under complementation (and also
   a list of literals is possible): */
literals_v(V) := block([L : listify(V)], setify(append(L,-L)))$

/* A generic function for creating variables, e.g.,
     gv("h"), gv(1,2,[33])
   etc. For equality-checking use (as usual in this context) just "=".
*/
kill(gv)$
declare(gv, noun)$
declare(gv, posfun)$
gv_var([x]) := apply(nounify(gv),x)$


/* ***********
   * Clauses *
   ***********
*/

/* Complementation of a set or list of literals: */
comp_sl(L) := map("-", L)$

/*
 A "boolean clause" is a set C of boolean literals such that
 C and comp_sl(C) have empty intersection.
*/

c_p(C) := setp(C) and every_s(l_p,C) and emptyp(intersection(C,comp_sl(C)))$

/* Tests whether two literal sets contain a clashing literal. */
clashp(A,B) := not emptyp(intersection(A,comp_sl(B)))$

/* The set of variables in a clause: */
var_c(C) := map(var_l, C)$
/* The set of variables in a set of literals: */
var_sl(C) := map(var_l, C)$

/* The positive resp. negative literals in a clause (can also be applied to
   a set of literals): */
pospart_c(C) := subset(C, lambda([x], is(x>0)))$
negpart_c(C) := subset(C, lambda([x], is(x<0)))$

/* The set of all full clauses over a set or list V of variables is computed by
     full_cs_v(V) (resp. full_cs(n) for V = {1,...,n})
   in ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac.
*/


/* ***************
   * Clause-sets *
   ***************
*/

/*
 A "boolean clause-set" (cs) is a set of boolean clauses.
*/
cs_p(F) := setp(F) and every_s(c_p,F)$
/*
 An "ordered boolean clause-set" (ocs) is a repetition-free list
 of boolean clauses.
*/
ocs_p(F) := listnorep_p(F) and every_s(c_p,F)$
/*
 A "boolean clause-list" (cl) is a list of boolean clauses.
*/
cl_p(F) := listp(F) and every_s(c_p,F)$

/*
 A "formal boolean clause-set" is a pair [V, F], where V is a set of
 variables, while F is a clause-set using only variables from V
 (that is, with var_cs(F) <= V).
*/
fcs_p(FF) := listp(FF) and is(length(FF) = 2) and setp(FF[1]) and
  every_s(v_p,FF[1]) and cs_p(FF[2]) and subsetp(var_cs(FF[2]),FF[1])$
/*
 An "ordered formal boolean clause-set" is a pair [V,F], where V is
 a repetition-free list of variables, while F is an ordered clause-set
 using only variables from V.
*/
ofcs_p(FF) := listp(FF) and is(length(FF) = 2) and listnorep_p(FF[1])
  and every_s(v_p,FF[1]) and ocs_p(FF[2]) and subsetp(var_ocs(FF[2]),setify(FF[1]))$
/*
 An "formal boolean clause-list" is a pair [V,F], where V is
 a repetition-free list of variables, while F is a clause-list
 using only variables from V.
*/
fcl_p(FF) := listp(FF) and is(length(FF) = 2) and listnorep_p(FF[1])
  and every_s(v_p,FF[1]) and cl_p(FF[2]) and subsetp(var_cl(FF[2]),setify(FF[1]))$

/* Extracting the set of variables: */

var_cs(F) := var_sl(lunion(F))$
var_cl(F) := var_sl(lunion(F))$
var_ocs(F) := var_cl(F)$
/* RENAME: var_fcs */
var_cs_f(FF) := FF[1]$
var_fcs(FF) := FF[1]$
var_fcl(FF) := setify(FF[1])$
var_ofcs(FF) := var_fcl(FF)$

/* Extracting the repetition-free list of variables in a clause-list
   (in the order as they occur): */
ovar_cl(F) := block([L : [], V : {}],
  for C in F do block([vc : var_c(C), nv],
    nv : setdifference(vc, V),
    L : append(L,listify(nv)),
    V : union(V,nv)
  ),
  return(L))$
ovar_ocs(F) := ovar_cl(F)$

/* Promotions: */

/* RENAME: cs2fcs */
cs_to_fcs(F) := [var_cs(F), F]$
cs2fcs(F) := [var_cs(F), F]$
cl2fcl(F) := [listify(var_cl(F)), F]$
ocs2fcl(F) := [listify(var_ocs(F)), F]$
ocs2ofcs(F) := [ovar_cl(F), F]$
/* So a clause-list is promoted to a formal clause-list by taking the
   order of variables as given by the given (Maxima) order on the variables,
   while for an ordered clause-set we take the order of the
   variables as found in the clause-list (this is more expensive).
   This is the only case where we have given an order on the clauses,
   but not on the variables, and where (different from cl2fcl) the order
   is not considered to be "arbitrary".
*/

cs2ocs(F) := listify(F)$
cs2cl(F) := listify(F)$
fcs2ofcs(FF) := map(listify,FF)$
fcs2fcl(FF) := map(listify,FF)$

cs2fcl(F) := cl2fcl(cs2cl(F))$

/* Downcasts: */

ocs2cs(F) := setify(F)$
cl2cs(F) := setify(F)$
fcl2fcs(FF) := map(setify,FF)$
ofcs2fcs(FF) := map(setify,FF)$

/* RENAME: fcs2cs */
clauses_f(FF) := FF[2]$
fcs2cs(FF) := second(FF)$
ofcs2ocs(FF) := second(FF)$
fcl2cl(FF) := second(FF)$


/* ***********************************
   * Selecting parts of a clause-set *
   ***********************************
*/

/* All clauses of length k of a clause-set. */
/* RENAME: scs_k */
scls_k(F,k) := subset(F, lambda([C], is(length(C) = k)))$
scs_k(F,k) := scls_k(F,k)$

/* All clauses of a clause-set containing a literal. */
/* RENAME: scs_l */
scls_l(F,l) := subset(F, lambda([C], elementp(l,C)))$
scs_l(F,l) := scls_l(F,l)$

/* All clauses of a clause-set containing a variable.
*/
/* RENAME: scs_v */
scls_v(F,v) := subset(F, lambda([C], elementp(v,var_c(C))))$
scs_v(F,v) := scls_v(F,v)$
/* More generally, all clauses containing some of a given set of variables.
   This is denoted by "F_V" in articles.
 */
/* RENAME: scs_V */
scls_V(F,V) := subset(F, lambda([C], not disjointp(var_c(C),V)))$
scs_V(F,V) := scls_V(F,V)$
socs_V(F,V) := sublist(F, lambda([C], not disjointp(var_c(C),V)))$


/* **************************
   * Crossing out variables *
   **************************
*/

apply_sv_c(V,C) := setdifference(C,literals_v(V))$

apply_sv_cs(V,F) := block([L : literals_v(V)],
  setify(map(lambda([C],setdifference(C,L)),listify(F))))$
apply_sv_cl(V,F) := block([L : literals_v(V)],
  map(lambda([C],setdifference(C,L)),F))$
apply_sv_ip_cl(V,_F) := block([L : literals_v(V)],
  _F :: map(lambda([C],setdifference(C,L)),ev(_F)),
  return(true))$

restrict_V_cs(F,V) := block([L : literals_v(V)],
  disjoin({},setify(map(lambda([C],intersection(C,L)),listify(F)))))$
restrict_V_cl(F,V) := block([L : literals_v(V)],
  delete({},map(lambda([C],intersection(C,L)),F)))$


/* *****************************************
   * Printing clause-sets in Dimacs-format *
   *****************************************
*/

/* Output a literal (with trailing space): */
dimacs_l_string(x) := sconcat(x," ")$

/* Output a clause (with trailing space): */
dimacs_c_string(C) := dimacs_c_stringext(C,dimacs_l_string)$
/* Allows the literal translation to be passed in as function f which
   takes a literal and returns a string. */
dimacs_c_stringext(C,f) := xreduce(sconcat, map(f,listify(C)), "")$

/* Print a formal clause-set in ("extended") Dimacs format where literals
   are translated to the strings printed using the function f, which takes
   a literal and returns a string. */
/* RENAME: printextf_fcs */
print_fcsext(comment,FF,f) := block(
  print_nlb(sconcat("c ", comment)),
  print_nlb(sconcat("p cnf ", nvar_fcs(FF), " ", ncl_fcs(FF))),
  for C in clauses_f(FF) do print_nlb(sconcat(dimacs_c_stringext(C,f), "0"))
)$
printextf_fcs(comment,FF,f) := print_fcsext(comment,FF,f)$
printextf_fcl(comment,FF,f) := print_fcsext(comment,FF,f)$

/* Print a formal clause-set in ("extended") Dimacs format (printing terms
   directly as strings): */
/* RENAME: printext_fcs */
print_cs_f(comment,FF) := print_fcsext(comment,FF,dimacs_l_string)$
print_fcs(comment,FF) := print_cs_f(comment,FF)$
printext_fcs(comment,FF) := printextf_fcs(comment,FF,dimacs_l_string)$
printext_fcl(comment,FF) := printextf_fcl(comment,FF,dimacs_l_string)$

/* Remark: The n-parameter in the parameter line is the number of *occurring*
   variables. So this function should not be used for printing of standard
   Dimacs format, but instead print_fcs_v(comment,FF,[]) should be used
   (except when the clause-set is standardised, and there are no gaps
   regarding occurring variables).
*/

/* Output formal clause-set FF to file n (using printext_fcs): */
/* RENAME: outputext_fcs */
output_fcs(comment,FF,n) := output_fcsext(comment,FF,n,dimacs_l_string)$
outputext_fcs(comment,FF,n) := outputextf_fcs(comment,FF,n,dimacs_l_string)$
outputext_fcl(comment,FF,n) := outputextf_fcl(comment,FF,n,dimacs_l_string)$
/* Takes additionally a function f which takes a literal and returns
   a string, which is used for literal translation at the basic level. */
/* RENAME: outputextf_fcs */
output_fcsext(comment,FF,n,f) := with_stdout(n, print_fcsext(comment,FF,f))$
outputextf_fcs(comment,FF,n,f) := with_stdout(n, printextf_fcs(comment,FF,f))$
outputextf_fcl(comment,FF,n,f) := with_stdout(n, printextf_fcl(comment,FF,f))$

/* Print a formal clause-set in Dimacs format, together with a map
   which explains the meaning of variables (this is useful for example
   if variables have been standardised): */
/* RENAME: print_fcs_v */
print_cs_f_v(comment,FF,varlist) := block(
 [n : lmax(FF[1]), c : ncl_fcs(FF)],
  if n=minf then n:0,
  print_nlb(sconcat("c ", comment)),
  for i from 1 thru length(varlist) do print_nlb(sconcat("c ", i, " : ", varlist[i])),
  print_nlb(sconcat("p cnf ", n, " ", c)),
  for C in clauses_f(FF) do print_nlb(sconcat(dimacs_c_string(C), "0"))
)$
print_fcs_v(comment,FF,varlist) := print_cs_f_v(comment,FF,varlist)$
print_fcl_v(comment,FF,varlist) := block(
 [n : lmax(FF[1]), c : ncl_fcs(FF)],
  if n=minf then n:0,
  print_nlb(sconcat("c ", comment)),
  block([i:1], for v in varlist do (
    print_nlb(sconcat("c ", i, " : ", v)), i : i + 1
  )),
  print_nlb(sconcat("p cnf ", n, " ", c)),
  for C in FF[2] do print_nlb(sconcat(dimacs_c_string(C), "0"))
)$

/* Output formal clause-set FF to file n, using a variable-list
   (based on print_fcs_v): */
/* RENAME: output_fcs_v */
output_cs_f_v(comment,FF,n,varlist) :=
  with_stdout(n, print_cs_f_v(comment,FF,varlist))$
output_fcs_v(comment,FF,n,varlist) :=
  with_stdout(n, print_cs_f_v(comment,FF,varlist))$
output_fcl_v(comment,FF,n,varlist) :=
  with_stdout(n, print_fcl_v(comment,FF,varlist))$

/* Standard statistics of a formal clause-set as a string:
*/
standard_statistics_fcs(FF) := block([S : extended_statistics_fcs(FF)],
sconcat(
"c Number of variables: ", S[1], "
c Number of clauses: ", S[2], "
c Number of literal occurrences: ", S[3], "
c Minimal clause length: ", S[4], "
c Maximal clause length: ", S[5], "
c List of pairs [clause-length m, #clauses of length m]:
c ", S[6], "
c Minimal literal degree: ", S[7], "
c Maximal literal degree: ", S[8], "
c Minimal variable degree: ", S[9], "
c Maximal variable degree: ", S[10]))$

/* *****************************************
   * Reading clause-sets in Dimacs-format  *
   *****************************************
*/


oklib_plain_include("stringproc")$

read_fcl_f(n) := block([fh, line, ll,p_n, p_found : false],
  fh : openr(n),
  while not(p_found) and stringp(line : readline(fh))  do (
    if (slength(line) >= 1) and (charat(line,1) = "p") then (
      p_n : parse_string(tokens(line)[3]),
      p_found : true)
  ),
  assert(p_found),
  return(
    [listify(setn(p_n)),
     rest(map(setify, split_list(read_list(fh),0)),-1)]))$


/* *****************************************
   * Printing clause-sets in PLA-format    *
   *****************************************
*/


/* A file in the PLA format represents a partial finite function,
   f : {0,1}^n -> {0,1}^m, by encoding the DNF of the relational
   viewpoint of f (f' : {0,1}^{n+m} such that f'((I,O)) = 1 if f(I) = O).

   A PLA file has a header:

     .i n
     .o m

   followed by lines each containing two words I_S and O_S: strings of 1s, 0s,
   and "-" characters of length n and m respectively. Each such line
   indicates that f(I) = O for all I in I* and O in O*. I* and O* are
   the sets of all boolean vectors matching I_S and O_S on the 1 and 0
   characters, but where all "-" characters have been replaced
   (independently) by 0 or 1.

   For more information on the PLA format, see
   "Improve documentation for Espresso" in
   Buildsystem/ExternalSources/SpecialBuilds/plans/BooleanFunctions.hpp.
*/


/* Outputting a formal clause-list F to PLA format.

   F is considered to be a DNF. The i-th clause in F corresponds to the i-th
   non-header line in the PLA. The i-th variable in F corresponds to the
   i-th input variable in the PLA, and the output variable of the PLA
   corresponds to the output of F w.r.t the corresponding DNF clause.
 */
print_fcl2pla(comment, F) := block([F_std, vector],
  if comment # "" then print_nlb(sconcat("# ",comment)),
  print_nlb(sconcat(".i ", length(F[1]))),
  print_nlb(".o 1"),
  print_nlb(".type fd"),
  F_std : standardise_fcl(F),
  for C in F_std[1][2] do (
    vector :
      create_list(
        if elementp(F_std[2][i],C) then "1"
        else if elementp(-F_std[2][i],C) then "0"
        else "-",
        i, 1, length(F[1])),
    print_nlb(rreduce(sconcat, vector, " 1"))))$
/* Note the clause-set is considered as a DNF, as this
is the default for the PLA format. */
output_fcl2pla(comment,F,n) := with_stdout(n,print_fcl2pla(comment,F))$

/*!
\endhtmlonly
*/
