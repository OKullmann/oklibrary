/* Oliver Kullmann, 5.5.2008 (Guangzhou) */
/* Copyright 2008, 2009, 2010, 2012, 2013, 2019 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/ClauseSets/tests/Constructions.mac
  \brief Tests for the basic operations with clause-sets

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/tests/Constructions.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/tests/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/tests/Generators.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$

kill(f)$


/* **********************
   * Logical operations *
   **********************
*/

okltest_c2cl_expand(f) := (
  assert(f({},[]) = [{}]),
  assert(f({},[1]) = [{-1},{1}]),
  assert(f({1},[]) = [{1}]),
  assert(f({1},[2]) = [{1,-2},{1,2}]),
  assert(f({1,2},[3,4]) = [{1,2,-3,-4},{1,2,-3,4},{1,2,3,-4},{1,2,3,4}]),
  true)$

okltest_c2cs_expand(f) := (
  assert(f({},{}) = {{}}),
  assert(f({},{1}) = {{-1},{1}}),
  assert(f({1},{}) = {{1}}),
  assert(f({1},{2}) = {{1,-2},{1,2}}),
  assert(f({1,2},{3,4}) = {{1,2,-3,-4},{1,2,-3,4},{1,2,3,-4},{1,2,3,4}}),
  true)$

okltest_expand_fcs(f) := (
  assert(okltest_full_fcs_v(buildq([f], lambda([V], f([if listp(V) then setify(V) else V,{{}}])))) = true),
  for n : 0 thru 5 do block([V : setn(n), FF : full_fcs(n)],
    assert(f([V, create_list({i},i,1,n)]) = [V, disjoin(comp_sl(V),FF[2])])),
  true)$

okltest_expand_cs(f) := (
  assert(f({}) = {}),
  assert(f({{}}) = {{}}),
  assert(f({{1}}) = {{1}}),
  assert(f({{1},{-1}}) = {{1},{-1}}),
  assert(f({{1},{2}}) = {{1,2},{1,-2},{2,-1}}),
  true)$

okltest_or_cs2(f) := (
  assert(f({},{}) = {}),
  assert(f({},{{}}) = {}),
  assert(f({{}},{}) = {}),
  assert(f({{}},{{}}) = {{}}),
  assert(f({{}},{{1}}) = {{1}}),
  assert(f({{1}},{{-1}}) = {}),
  assert(f({{},{1},{-1}},{{},{1},{-1}}) = {{},{1},{-1}}),
  true)$

okltest_or_cs(f) := (
  /* XXX */
  true)$

okltest_dual_cs(f) := (
  assert(f({}) = {{}}),
  assert(f({{}}) = {}),
  assert(f({{1}}) = {{1}}),
  assert(f({{1},{-1}}) = {}),
  assert(f({{1},{2}}) = {{1,2}}),
  assert(f({{1},{-1,2}}) = {{1,2}}),
  assert(f({{1,2},{1,-2}}) = {{1},{1,-2},{1,2}}),
  assert(f({{1,2},{1,-2},{-1,2}}) = {{1,2}}),
  true)$

okltest_comp_cs(f) := (
  assert(f({}) = {}),
  assert(f({{}}) = {{}}),
  assert(f({{1}}) = {{-1}}),
  assert(f({{1,2},{-2,-3}}) = {{-1,-2},{2,3}}),
  true)$

okltest_comp_fcs(f) := block(
  okltest_comp_cs(buildq([f],lambda([F], fcs2cs(f(cs2fcs(F)))))),
  assert(f([{1,2,3},{{1,2},{-1,2}}]) = [{1,2,3},{{-1,-2},{1,-2}}]),
  true)$

okltest_neg_cs(f) := (
  assert(f({}) = {{}}),
  assert(f({{}}) = {}),
  assert(f({{1}}) = {{-1}}),
  assert(f({{1},{-1}}) = {}),
  /* XXX */
  true)$

okltest_add_neg_cl_cs(f) := (
  assert(f({},{}) = {}),
  assert(f({},{1}) = {{-1}}),
  assert(f({{1,2},{-1}},{1,2,3}) = {{1,2},{-1},{-2},{-3}}),
  true)$


/* ****************************
   * Combinatorial operations *
   ****************************
*/

okltest_vardisjoint_sum_fcs(f) := (
  assert(f() = [{},{}]),
  okltest_standardise_fcs(buildq([f],lambda([FF],[f(FF),listify(FF[1])]))),
  assert(f([{3,4},{{-3},{4}}],[{1,3},{{1,3},{-1,-3}}]) = [{1,2,3,4},{{-1},{2},{3,4},{-3,-4}}]),
  true)$

okltest_vardisjoint_full_gluing(f) := (
  assert(f([{},{}],[{},{}]) = [{},{}]),
  assert(f([{},{}],[{},{{}}]) = [{1},{{-1}}]),
  assert(f([{},{{}}],[{},{{}}]) = [{1},{{1},{-1}}]),
  assert(f([{},{}],[{1},{{1},{-1}}]) = [{1,2},{{-2,1},{-2,-1}}]),
  assert(f([{1,2},{{1},{-1,2}}],full_fcs(2)) = [{1,2,3,4,5},{{5,1},{5,-1,2},{-5,3,4},{-5,-3,4},{-5,3,-4},{-5,-3,-4}}]),
  true)$

okltest_full_gluing(f) := (
  assert(f([{},{}],[{},{}]) = [{1},{}]),
  assert(f([{},{{}}],[{},{}]) = [{1},{{1}}]),
  assert(f([{},{}],[{},{{}}]) = [{1},{{-1}}]),
  assert(f([{},{{}}],[{},{{}}]) = [{1},{{1},{-1}}]),
  assert(f([{1},{{1}}],[{1},{{1}}]) = [{1,2},{{1,2},{1,-2}}]),
  assert(f([{1,3},{{1},{3}}],[{1,2},{{1},{2}}]) = [{1,2,3,4},{{1,4},{3,4},{1,-4},{2,-4}}]),
  assert(f([{2,4},{{2},{4}}],[{2,3},{{2},{3}}]) = [{1,2,3,4},{{1,4},{3,4},{1,-4},{2,-4}}]),
  assert(f([{1,2},{{1,2},{-1,2},{-2}}],[{1,2},{{1,-2},{1,2},{-1}}]) = [{1,2,3},{{1,2,3},{-1,2,3},{-2,3},{1,-2,-3},{1,2,-3},{-1,-3}}]),
  true)$

okltest_partial_gluing(f) := (
  okltest_full_gluing(buildq([f],lambda([FF1,FF2],f(FF1,FF1[2],FF2,FF2[2])))),
  assert(f([{1,2},{{1},{2}}],{{2}},[{2,3},{{2},{3}}],{{3}}) = [{1,2,3,4},{{1},{2,4},{2},{3,-4}}]),
  true)$

okltest_twisting_cs(f) := (
  assert(f({{}},{},{}) = {}),
  assert(f({{}},{},{{1,2},{-1}}) = {{1,2},{-1}}),
  assert(f({{1}},{1},{{1,2},{-1}}) = {{1,2}}),
  assert(f({{-1}},{-1},{{1,2},{-1}}) = {{-1}}),
  assert(f({{3}},{3},{{1,2},{-1}}) = {{1,2,3},{-1,3}}),
  assert(f({{1},{2}},{1},{}) = {{2}}),
  assert(f({{1},{2}},{1},{{}}) = {{1},{2}}),
  assert(f({{1},{2}},{1},{{3}}) = {{1,3},{2}}),
  assert(f({{1},{2},{-1}},{-1},{{3},{1,2},{2,3}}) = {{1},{2},{-1,3},{-1,2,3}}),
  true)$

okltest_twisting_var_disjoint_cs(f) := (
  assert(f({{}},{},{}) = {}),
  assert(f({{}},{},{{1,2},{-1}}) = {{1,2},{-1}}),
  assert(f({{1}},{1},{{1,2},{-1}}) = {{1,2,3},{1,-2}}),
  assert(f({{-1}},{-1},{{1,2},{-1}}) = {{-1,2,3},{-1,-2}}),
  assert(f({{3}},{3},{{1,2},{-1}}) = {{1,2,3},{1,-2}}),
  assert(f({{1},{2}},{1},{}) = {{2}}),
  assert(f({{1},{2}},{1},{{}}) = {{1},{2}}),
  assert(f({{1},{2}},{1},{{3}}) = {{1,3},{2}}),
  assert(f({{1},{2},{-1}},{-1},{{3},{1,2},{2,3}}) = {{1},{2},{-1,5},{-1,3,4},{-1,4,5}}),
  true)$

/*!
\endhtmlonly
*/
