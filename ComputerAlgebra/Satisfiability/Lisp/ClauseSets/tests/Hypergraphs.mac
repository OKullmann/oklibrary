/* Oliver Kullmann, 2.2.2008 (Swansea) */
/* Copyright 2008, 2009, 2010, 2011, 2018, 2020 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/ClauseSets/tests/Hypergraphs.mac
  \brief Tests for graph- and hypergraph-functionality regarding clause-sets

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/tests/Hypergraphs.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac")$
oklib_include("OKlib/ComputerAlgebra/Graphs/Lisp/Basic.mac")$
oklib_include("OKlib/ComputerAlgebra/CombinatorialMatrices/Lisp/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$

kill(f)$

/* *******************************************
   * Clause-variable matrices and variations *
   *******************************************
*/

okltest_clvar_g(f) := (
  assert(f([{},{}]) = [{},{}]),
  assert(f([{},{{}}]) = [{[{},1]},{}]),
  assert(f([{1},{}]) = [{[1,2]},{}]),
  assert(f([{1},{{}}]) = [{[{},1],[1,2]},{}]),
  assert(f([{1,2},{{1,2},{1,-2}}]) = [{[{1,2},1],[{1,-2},1],[1,2],[2,2]}, 
    {{[{1,2},1],[1,2]},{[{1,2},1],[2,2]},{[{1,-2},1],[1,2]},{[{1,-2},1],[2,2]}}]),
  true)$

okltest_var_fcs2hg(f) := (
  assert(f([{},{}]) = [{},{}]),
  assert(f([{},{{}}]) = [{},{{}}]),
  assert(f([{1},{{-1}}]) = [{1},{{1}}]),
  assert(f([{1},{{-1},{1}}]) = [{1},{{1}}]),
  assert(f([{1,2},{{1},{-2}}]) = [{1,2},{{1},{2}}]),
  true)$

okltest_var_fcs2ghg(f) := (
  /* XXX */
  assert(okltest_var_fcs2hg(buildq([f], lambda([FF], ghg2hg(f(FF))))) = true),
  true)$

okltest_cvg_cs(f) := block([F,G],
  assert(f({}) = [{},{}]),
  assert(f({{}}) = [{{}},{}]),
  for n : 0 thru 4 do (
    F : full_fcs(n)[2],
    G : f(F),
    assert(G[1] = F),
    assert(complete_g_p(G))
  ),
  true)$

okltest_cl_var_com_fcs(f) := block(
  assert(comequalp(f([{},{}]), emptycom) = true),
  assert(comequalp(f([{1},{}]), zerocom({},{1})) = true),
  assert(comequalp(f([{},{{}}]), zerocom({{}},{})) = true),
  assert(comequalp(f([{1},{{}}]), zerocom({{}},{1})) = true),
  assert(comequalp(f([{1},{{1}}]), [{{1}},{1},lambda([i,j],1)]) = true),
  assert(comequalp(f([{1},{{-1}}]), [{{-1}},{1},lambda([i,j],-1)]) = true),
  if oklib_test_level = 1 then return(true),
  true)$

okltest_clvar_com2fcs(f) := block([x,L],
  assert(f([{},{},x]) = [{},{}]),
  assert(f([{1},{},x]) = [{},{{}}]),
  assert(f([{},{1},x]) = [{1},{}]),
  assert(f([{1},{1},lambda([i,j],0)]) = [{1},{{}}]),
  assert(f([{1},{1},lambda([i,j],-1)]) = [{1},{{-1}}]),
  assert(f([{1},{1},lambda([i,j],1)]) = [{1},{{1}}]),
  for n : 0 thru 6 do block([FF : full_fcs(n)],
    assert(f(clvar_fcs2com(FF)) = FF)
  ),
  assert(okltest_clvar_m2fcs(buildq([f], lambda([M], f(m2com(M))))) = true),
  true)$

okltest_clvar_ocom2fcl(f) := block([x,L],
  assert(f([[],[],x]) = [[],[]]),
  assert(f([[1],[],x]) = [[],[{}]]),
  assert(f([[],[1],x]) = [[1],[]]),
  assert(f([[1],[1],lambda([i,j],0)]) = [[1],[{}]]),
  assert(f([[1],[1],lambda([i,j],-1)]) = [[1],[{-1}]]),
  assert(f([[1],[1],lambda([i,j],1)]) = [[1],[{1}]]),
  for n : 0 thru 6 do block([FF : full_fcl(n)],
    assert(f(clvar_fcl2ocom(FF)) = FF)
  ),
  assert(okltest_clvar_m2fcs(buildq([f], lambda([M], fcl2fcs(f(m2ocom(M)))))) = true),
  true)$

okltest_clvar_m2fcs(f) := (
  assert(f(matrix()) = [{},{}]),
  assert(f(matrix([])) = [{},{{}}]).
  assert(f(matrix([-1,0,1,-2,2])) = [{1,2,3,4,5},{{-1,3,-4,5}}]),
  assert(f(matrix([],[])) = [{},{{}}]),
  assert(f(matrix([1],[-1])) = [{1},{{1},{-1}}]),
  assert(f(matrix([0,1,2],[-1,2,-4],[0,0,0],[1,1,-1])) = [{1,2,3},{{2,3},{-1,2,-3},{},{1,2,-3}}]),
  true)$

okltest_clvar_w_com2fcs(f) := block([x,L],
  assert(f([{},{},x],gv) = [{},{}]),
  assert(f([{1},{},x],gv) = [{},{{}}]),
  assert(f([{},{1},x],gv) = [{gv(1)},{}]),
  assert(f([{1},{1},lambda([i,j],0)],gv) = [{gv(1)},{{}}]),
  assert(f([{1},{1},lambda([i,j],-1)],gv) = [{gv(1)},{{-gv(1)}}]),
  assert(f([{1},{1},lambda([i,j],1)],gv) = [{gv(1)},{{gv(1)}}]),
  for n : 0 thru 6 do block([FF : full_fcs(n)],
    assert(f(clvar_fcs2com(FF),identity) = FF)
  ),
  assert(okltest_clvar_m2fcs(buildq([f], lambda([M], f(m2com(M),identity)))) = true),
  true)$

okltest_clvar_w_ocom2fcl(f) := block([x,L],
  assert(f([[],[],x],gv) = [[],[]]),
  assert(f([[1],[],x],gv) = [[],[{}]]),
  assert(f([[],[1],x],gv) = [[gv(1)],[]]),
  assert(f([[1],[1],lambda([i,j],0)],gv) = [[gv(1)],[{}]]),
  assert(f([[1],[1],lambda([i,j],-1)],gv) = [[gv(1)],[{-gv(1)}]]),
  assert(f([[1],[1],lambda([i,j],1)],gv) = [[gv(1)],[{gv(1)}]]),
  for n : 0 thru 6 do block([FF : full_fcl(n)],
    assert(f(clvar_fcl2ocom(FF),identity) = FF)
  ),
  assert(okltest_clvar_m2fcs(buildq([f], lambda([M], fcl2fcs(f(m2ocom(M),identity))))) = true),
  true)$

okltest_cl_int_scom_cs(f) := (
  assert(scomequalp(f({}), emptyscom) = true),
  assert(scomequalp(f({{}}), zeroscom({{}})) = true),
  assert(scomequalp(f({{1}}), [{{1}},lambda([i,j],1)]) = true),
  assert(scomequalp(f({{-1}}), [{{-1}},lambda([i,j],1)]) = true),
  assert(scomequalp(f({{1},{-1}}), [{{1},{-1}},lambda([i,j], if i=j then 1 else -1)]) = true),
  assert(scomequalp(f({{1,2},{3,4}}), [{{1,2},{3,4}},lambda([i,j], if i=j then 2 else 0)]) = true),
  true)$

okltest_var_int_scom_fcs(f) := (
  assert(scomequalp(f([{},{}]), emptyscom) = true),
  assert(scomequalp(f([{},{{}}]), emptyscom) = true),
  assert(scomequalp(f([{1},{}]), zeroscom({1})) = true),
  assert(scomequalp(f([{1},{{}}]), zeroscom({1})) = true),
  assert(scomequalp(f([{1},{{1}}]), constantscom({1},1)) = true),
  assert(scomequalp(f([{1},{{-1}}]), constantscom({1},1)) = true),
  assert(scomequalp(f([{1},{{1},{}}]), constantscom({1},1)) = true),
  assert(scomequalp(f([{1},{{1},{-1}}]), constantscom({1},2)) = true),
  assert(scomequalp(f([{1,2},{{1},{2}}]), [{1,2},lambda([i,j],if i=j then 1 else 0)]) = true),
  assert(scomequalp(f([{1,2},{{1,2},{-1,-2}}]), [{1,2},lambda([i,j],if i=j then 2 else 2)]) = true),
  assert(scomequalp(f([{1,2},{{1,2},{1,-2}}]), [{1,2},lambda([i,j],if i=j then 2 else 0)]) = true),
  for n : 0 thru 3 do block([FF : full_fcs(n)],
    assert(scomequalp(f(FF), cdiagscom(setn(n),2^n)))),
  true)$

okltest_var_lit_clause_digraph(f) := block(
  assert(f([{},{}]) = [{},{}]),
  assert(f([{},{{}}]) = [{{}},{}]),
  assert(f([{1},{}]) = [{1,[1,1],[1,-1]},{[1,[1,1]],[1,[1,-1]]}]),
  assert(f([{1},{{}}]) = [{1,[1,1],[1,-1],{}},{[1,[1,1]],[1,[1,-1]]}]),
  assert(f([{1},{{1}}]) = [{1,[1,1],[1,-1],{1}},{[1,[1,1]],[1,[1,-1]],[[1,1],{1}]}]),
  assert(f([{1},{{1},{-1}}]) = [{1,[1,1],[1,-1],{1},{-1}},{[1,[1,1]],[1,[1,-1]],[[1,1],{1}],[[1,-1],{-1}]}]),
  assert(f([{1,2},{{1,2},{-1,-2}}]) = [
   {1,2,[1,-1],[1,1],[2,-1],[2,1],{1,2},{-1,-2}}, 
   { [1,[1,-1]],[1,[1,1]],[2,[2,-1]],[2,[2,1]], 
     [[1,1],{1,2}], [[2,1],{1,2}], [[1,-1],{-1,-2}],[[2,-1],{-1,-2}] }
  ]),
  true)$


/* ***************************************
   * Implication graphs (and variations) *
   ***************************************
*/

okltest_implication_dg_fcs(f) := block(
  assert(f([{},{}]) = [{},{}]),
  assert(f([{},{{}}]) = [{},{}]),
  assert(f([{1},{{1}}]) = [{1,-1},{[-1,1]}]),
  assert(f([{1},{{-1}}]) = [{1,-1},{[1,-1]}]),
  assert(f([{1},{{1},{-1}}]) = [{1,-1},{[-1,1],[1,-1]}]),
  assert(okltest_imp_cs2dg(buildq([f], lambda([F], f(cs2fcs(F))))) = true),
  true)$

okltest_imp_cs2dg(f) := (
  assert(f({}) = [{},{}]),
  assert(f({{1},{-1,2},{-2,3},{-3,4},{-4}}) = [{-4,-3,-2,-1,1,2,3,4}, {[-1,1],[1,2],[2,3],[3,4],[4,-4],[-4,-3],[-3,-2],[-2,-1]}]),
  true)$

okltest_imp_fcs2std0dg(f) := (
  assert(f([{},{}]) = [{},{}]),
  assert(f([{},{{}}]) = [{},{}]),
  assert(f([{1},{{1}}]) = [{0,1},{[0,1]}]),
  assert(f([{1},{{-1}}]) = [{0,1},{[1,0]}]),
  assert(f([{1},{{1},{-1}}]) = [{0,1},{[0,1],[1,0]}]),
  assert(okltest_imp_cs2std0dg(buildq([f], lambda([F], f(cs2fcs(F))))) = true),
  true)$

okltest_imp_cs2std0dg(f) := (
  assert(f({}) = [{},{}]),
  assert(f({{1},{-1,2},{-2,3},{-3,4},{-4}}) = [{0,1,2,3,4,5,6,7}, {[3,4],[4,5],[5,6],[6,7],[7,0],[0,1],[1,2],[2,3]}]),
  true)$


/* ************
   * Measures *
   ************
*/

okltest_min_degree_cvg_cs(f) := (
  assert(f({}) = inf),
  assert(f({{}}) = 0),
  assert(f({{1}}) = 0),
  assert(f({{1},{-1}}) = 1),
  assert(f({{1},{-1},{}}) = 0),
  true)$

okltest_max_degree_cvg_cs(f) := (
  assert(f({}) = minf),
  assert(f({{}}) = 0),
  assert(f({{1}}) = 0),
  assert(f({{1},{-1}}) = 1),
  assert(f({{1},{-1},{}}) = 1),
  true)$

okltest_deficiency_fcs(f) := (
  assert(f([{},{}]) = 0),
  assert(f([{},{{}}]) = 1),
  assert(f([{1},{{1}}]) = 0),
  assert(f([{1},{{1},{-1}}]) = 1),
  assert(f([{1},{{1},{-1},{}}]) = 2),
  assert(f([{1,2},{{1},{-1}}]) = 0),
  assert(okltest_deficiency_cs(buildq([f], lambda([F], f(cs2fcs(F))))) = true),
  true)$

okltest_deficiency_cs(f) := (
  assert(f({}) = 0),
  assert(f({{}}) = 1),
  assert(f({{1}}) = 0),
  assert(f({{1},{-1}}) = 1),
  assert(f({{1},{-1},{}}) = 2),
  for n : 0 thru 4 do
    assert(f(full_cs(n)) = 2^n-n),
  true)$

okltest_max_deficiency_fcs(f) := (
  assert(f([{},{}]) = 0),
  assert(f([{},{{}}]) = 1),
  assert(f([{1},{{1}}]) = 0),
  assert(f([{1},{{1},{-1}}]) = 1),
  assert(f([{1},{{1},{-1},{}}]) = 2),
  assert(f([{1,2},{{1},{-1}}]) = 1),
  true)$

okltest_surplus_bydef_fcs(f) := (
  assert(f([{},{}]) = 0),
  assert(f([{},{{}}]) = 0),
  assert(f([{1},{}]) = -1),
  assert(f([{1},{{}}]) = -1),
  assert(f([{1,2},{}]) = -2),
  assert(f([{1,2},{{}}]) = -2),
  assert(f([{1},{{1}}]) = 0),
  assert(f([{1},{{1},{-1}}]) = 1),
  assert(f([{1},{{1},{-1},{}}]) = 1),
  assert(f([{1,2},{{1},{-1},{2},{-2}}]) = 1),
  true)$

okltest_surplus_bydef_cs(f) := (
  assert(okltest_surplus_bydef_fcs(buildq([f], lambda([FF], 
    block([d : nvar_fcs(FF) - nvar_cs(FF[2])], 
      if d>0 then min(f(FF[2]), 0) - d else f(FF[2]))))) = true),
  true)$


/* ************
   * Analysis *
   ************
*/

okltest_var_disjointfcsp(f) := (
  assert(f([{},{}],[{},{}]) = true),
  assert(f([{},{}],[{},{{}}]) = true),
  assert(f([{},{{}}],[{},{{}}]) = true),
  assert(f([{1},{{}}],[{},{{}}]) = true),
  assert(f([{},{{}}],[{2},{{}}]) = true),
  assert(f([{1},{{}}],[{1},{{}}]) = false),
  true)$

okltest_accumulation_variables_cs(f) := (
  assert(f({}) = {}),
  assert(f({{}}) = {}),
  assert(f({{1}}) = {1}),
  assert(f({{1},{-1}}) = {1}),
  assert(f({{-3,-1},{-3,1},{-2,-1,3},{-2,1,3},{-1,2,3},{1,2,3}}) = {}),
  assert(f({{1,2,3},{1,-2,3},{1,2,-3},{1,-2,-3},{-1,4,5},{-1,-4,5},{-1,4,-5},{-1,-4,-5}}) = {1}),
  for n : 0 thru 3 do block([F : full_fcs(n)[2]],
    assert(f(F) = if n <= 1 then setn(n) else {})),
  true)$

okltest_full_variables_fcs(f) := (
  assert(f([{},{}]) = {}),
  assert(f([{1,2},{}]) = {1,2}),
  assert(f([{},{{}}]) = {}),
  assert(f([{1,2},{{}}]) = {}),
  assert(f([{1,2,3},{{-3,-1},{-3,1},{-2,-1,3},{-2,1,3},{-1,2,3},{1,2,3}}]) = {1,3}),
  for n : 0 thru 3 do
    assert(f(full_fcs(n)) = setn(n)),
  true)$

/*!
\endhtmlonly
*/
