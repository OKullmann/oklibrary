/* Oliver Kullmann, 28.1.2008 (Swansea) */
/* Copyright 2008, 2009, 2010, 2011, 2012 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/ClauseSets/tests/BasicOperations.mac
  \brief Tests for the basic operations with clause-sets

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/tests/BasicOperations.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/Pigeonhole.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Strings.mac")$


kill(f)$

/* **************************
   * Variables and literals *
   **************************
*/

okltest_v_p(f) := block([x],
  assert(f("x") = false),
  assert(f(1) = true),
  assert(f(0) = false),
  assert(f(-1) = false),
  assert(f(x) = false),
  assert(f(php(3,4)) = true),
  true)$

okltest_l_p(f) := block([x],
  assert(f(1) = true),
  assert(f(0) = false),
  assert(f(-1) = true),
  assert(f(x) = false),
  assert(f(php(3,4)) = true),
  assert(f(-php(3,4)) = true),
  true)$


okltest_var_l(f) := (
  for i : 1 thru 10 do (
    assert(f(i) = i),
    assert(f(-i) = i)
  ),
  true
)$

okltest_sign_l(f) := (
  for i : 1 thru 10 do (
    assert(f(i) = 1),
    assert(f(-i) = -1)
  ),
  true
)$

okltest_literals_v(f) := (
  assert(f({}) = {}),
  assert(f({1}) = {1,-1}),
  assert(f({1,2}) = {1,-1,2,-2}),
  assert(f({-1}) = {1,-1}),
  assert(f({1,-2}) = {1,-1,2,-2}),
  assert(f({1,-2,-1}) = {1,-1,2,-2}),
  true)$

okltest_gv(f) := block([a],
  assert(v_p(f()) = true),
  assert(v_p(f(1)) = true),
  assert(v_p(f(1,2,[],{})) = true),
  /* assert(v_p(f("hh")) = true), */ /* BUG with Maxima */
  assert(v_p(f(a)) = true),
  assert(is(f(1) = f(1)) = true),
  assert(is(f(1) = f(2)) = false),
  assert(is(f(1) = f(a)) = false),
  assert(is(f(a) = f(a)) = true),
  assert(is(gv_var(a) = f(a)) = true),
  true)$


/* ***********
   * Clauses *
   ***********
*/

okltest_comp_sl(f) := (
  assert(f({}) = {}),
  assert(f({1}) = {-1}),
  assert(f({-1}) = {1}),
  assert(f({1,-2}) = {-1,2}),
  assert(f({1,-1}) = {1,-1}),
  assert(f({2,-2,1,-3}) = {2,-2,-1,3}),
  true)$

okltest_c_p(f) := block([x],
  assert(f({}) = true),
  assert(f([]) = false),
  assert(f(1) = false),
  assert(f(-1) = false),
  assert(f(0) = false),
  assert(f({1}) = true),
  assert(f({[]}) = false),
  assert(f({1,-2}) = true),
  assert(f({1,-1}) = false),
  assert(f(x) = false),
  assert(f({x}) = false),
  assert(okltest_l_p(buildq([f],lambda([x],f({x}))))),
  true)$

okltest_clashp(f) := (
  assert(f({},{}) = false),
  assert(f({1},{}) = false),
  assert(f({},{1}) = false),
  assert(f({1},{1}) = false),
  assert(f({1},{-1}) = true),
  assert(f({1,2},{-2,3}) = true),
  true)$

okltest_var_sl(f) := (
  assert(f({}) = {}),
  assert(f({1}) = {1}),
  assert(f({1,-2}) = {1,2}),
  assert(f({1,-1,2,-3}) = {1,2,3}),
  true)$

okltest_pospart_c(f) := (
  assert(f({}) = {}),
  assert(f({-1}) = {}),
  assert(f({1}) = {1}),
  assert(f({1,-2,3,-4}) = {1,3}),
  true)$

okltest_negpart_c(f) := (
  assert(okltest_pospart_c(buildq([f],lambda([C],comp_sl(f(comp_sl(C))))))),
  true)$


/* ***************
   * Clause-sets *
   ***************
*/

okltest_cs_p(f) := block([x],
  assert(f({}) = true),
  assert(f({{}}) = true),
  assert(f([]) = false),
  assert(f([[]]) = false),
  assert(f({1}) = false),
  assert(f({-1}) = false),
  assert(f({x}) = false),
  assert(f({{x}}) = false),
  assert(f({{1},{-1}}) = true),
  assert(f({{1,-1}}) = false),
  assert(f({{},[]}) = false),
  assert(okltest_c_p(buildq([f],lambda([C],f({C}))))),
  true)$

okltest_ocs_p(f) := block([x],
  assert(f(0) = false),
  assert(f({}) = false),
  assert(f([]) = true),
  assert(f([{}]) = true),
  assert(f([0]) = false),
  assert(f([{1,-1}]) = false),
  assert(f([{1},{-1},{2},{-2}]) = true),
  assert(f([{1},{1}]) = false),
  assert(f([{1},{1,2}]) = true),
  assert(okltest_c_p(buildq([f],lambda([C],f([C]))))),
  true)$

okltest_cl_p(f) := block([x],
  assert(f(0) = false),
  assert(f({}) = false),
  assert(f([]) = true),
  assert(f([{}]) = true),
  assert(f([0]) = false),
  assert(f([{1,-1}]) = false),
  assert(f([{1},{-1},{2},{-2}]) = true),
  assert(f([{1},{1}]) = true),
  assert(f([{1},{1,2}]) = true),
  assert(okltest_c_p(buildq([f],lambda([C],f([C]))))),
  true)$

okltest_fcs_p(f) := block([x],
  assert(f([{},{}]) = true),
  assert(f([{},{{}}]) = true),
  assert(f(x) = false),
  assert(f({}) = false),
  assert(f([]) = false),
  assert(f([{}]) = false),
  assert(f([{1},{}]) = true),
  assert(f([{-1},{}]) = false),
  assert(f([{},{{1}}]) = false),
  assert(f([{x},{}]) = false),
  assert(f([{x},{{x}}]) = false),
  assert(f([{1},{{1},{-1}}]) = true),
  assert(f([{1},{{1,-1}}]) = false),
  assert(f([{1},{{1},{-1},{1,2}}]) = false),
  assert(okltest_v_p(buildq([f],lambda([v],f([{v},{}]))))),
  true)$

okltest_ofcs_p(f) := block(
  assert(f([[],[]]) = true),
  assert(f([[],[{}]]) = true),
  assert(f(x) = false),
  assert(f({}) = false),
  assert(f([]) = false),
  assert(f([[]]) = false),
  assert(f([[1],[]]) = true),
  assert(f([[-1],[]]) = false),
  assert(f([[],[{1}]]) = false),
  assert(f([[x],[]]) = false),
  assert(f([[x],[{x}]]) = false),
  assert(f([[1],[{1},{-1}]]) = true),
  assert(f([[1],[{1,-1}]]) = false),
  assert(f([[1],[{1},{-1},{1,2}]]) = false),
  assert(f([[],[{},{}]]) = false),
  assert(f([[1],[{1},{1}]]) = false),
  assert(okltest_v_p(buildq([f],lambda([v],f([[v],[]]))))),
  true)$

okltest_fcl_p(f) := block([x],
  assert(okltest_ofcs_p(buildq([f],lambda([FF],f(FF) and listnorep_p(FF[2]))))),
  assert(f([[],[{},{}]]) = true),
  assert(f([[1],[{1},{1}]]) = true),
  true)$

okltest_var_cs(f) := (
  assert(f({}) = {}),
  assert(f({{}}) = {}),
  assert(f({{1}}) = {1}),
  assert(f({{1},{-1}}) = {1}),
  assert(f({{1},{-1,2},{-2,3},{3,1}}) = {1,2,3}),
  true)$

okltest_var_cl(f) := (
  assert(okltest_var_cs(buildq([f],lambda([F],f(listify(F)))))),
  assert(f([{1},{1},{2},{-2},{},{-1}]) = {1,2}),
  true)$

okltest_var_ocs(f) := (
  assert(okltest_var_cs(buildq([f],lambda([F],f(listify(F)))))),
  true)$

okltest_var_fcs(f) := (
  assert(okltest_var_cs(buildq([f],lambda([F],f(cs2fcs(F)))))),
  assert(f([{1,2},{}]) = {1,2}),
  assert(f([{1,2,3}, {{}}]) = {1,2,3}),
  true)$

okltest_var_fcl(f) := (
  assert(okltest_var_fcs(buildq([f],lambda([FF],f(fcs2ofcs(FF)))))),
  assert(f([[1,3,2],[{}]]) = {1,2,3}),
  true)$

okltest_var_ofcs(f) := (
  assert(okltest_var_fcs(buildq([f],lambda([FF],f(fcs2ofcs(FF)))))),
  true)$

okltest_ovar_cl(f) := (
  assert(f([]) = []),
  assert(f([{}]) = []),
  assert(f([{},{}]) = []),
  assert(f([{1},{-1}]) = [1]),
  assert(f([{},{-1},{},{}]) = [1]),
  assert(f([{-2,1},{-3,2},{1,3}]) = [1,2,3]),
  assert(f([{-2,3},{3,-4},{-1,2,3},{}]) = [2,3,4,1]),
  assert(f([{4,3},{3,2},{-2,-1}]) = [3,4,2,1]),
  true)$

okltest_cs2fcs(f) := (
  assert(f({}) = [{},{}]),
  assert(f({{}}) = [{},{{}}]),
  assert(f({{1}}) = [{1},{{1}}]),
  assert(f({{2,4},{-3,-1}}) = [{1,2,3,4},{{2,4},{-3,-1}}]),
  true)$

okltest_cl2fcl(f) := (
  assert(f([]) = [[],[]]),
  assert(f([{}]) = [[],[{}]]),
  assert(f([{3,4},{-1,-2}]) = [[1,2,3,4],[{3,4},{-1,-2}]]),
  true)$

okltest_ocs2ofcs(f) := (
  assert(f([]) = [[],[]]),
  assert(f([{}]) = [[],[{}]]),
  assert(f([{3,4},{-1,-2}]) = [[3,4,1,2],[{3,4},{-1,-2}]]),
  assert(okltest_cl2fcl(buildq([f],lambda([FF],block([T:f(FF)],[sort(T[1]),T[2]]))))),
  true)$

okltest_cs2ocs(f) := (
  assert(f({}) = []),
  assert(f({{}}) = [{}]),
  assert(f({{1,2},{-3,4}}) = [{-3,4},{1,2}]),
  true)$

okltest_fcs2ofcs(f) := (
  assert(f([{},{}]) = [[],[]]),
  assert(f([{},{{}}]) = [[],[{}]]),
  assert(f([{1},{}]) = [[1],[]]),
  assert(f([{1,3},{{}}]) = [[1,3],[{}]]),
  assert(f([{1,2,3},{{1,2},{-3},{-1,-2}}]) = [[1,2,3],[{-3},{-1,-2},{1,2}]]),
  true)$

okltest_fcs2fcl(f) := (
  assert(okltest_fcs2ofcs(f)),
  true)$

okltest_cs2fcl(f):= (
  assert(f({}) = [[],[]]),
  assert(f({{}}) = [[],[{}]]),
  assert(f({{5},{-5},{2},{2,3}}) = [[2,3,5],[{-5},{2},{2,3},{5}]]),
  true)$

okltest_ocs2cs(f) := (
  assert(f([]) = {}),
  assert(f([{}]) = {{}}),
  assert(f([{},{1},{-1}]) = {{},{1},{-1}}),
  true)$

okltest_cl2cs(f) := (
  assert(f([]) = {}),
  assert(f([{}]) = {{}}),
  assert(f([{},{},{1},{-1}]) = {{},{1},{-1}}),
  assert(okltest_ocs2cs(f)),
  true)$

okltest_fcs2cs(f) := (
  assert(f([{},{}]) = {}),
  assert(f([{},{{}}]) = {{}}),
  assert(f([{3,1,2},{{3},{-1},{-3},{1},{-1,-2,-3}}]) = {{3},{-1},{-3},{1},{-1,-2,-3}}),
  true)$

okltest_ofcs2ocs(f) := (
  assert(f([[],[]]) = []),
  assert(f([[],[{}]]) = [{}]),
  assert(f([[3,1],[{3},{-1},{-3},{1}]]) = [{3},{-1},{-3},{1}]),
  assert(okltest_fcs2cs(buildq([f],lambda([FF],cl2cs(f(fcs2fcl(FF))))))),
  true)$

okltest_fcl2cl(f) := (
  assert(f([[],[]]) = []),
  assert(f([[],[{}]]) = [{}]),
  assert(f([[3,1],[{3},{-1},{3},{1}]]) = [{3},{-1},{3},{1}]),
  assert(okltest_fcs2cs(f)),
  true)$


/* ***********************************
   * Selecting parts of a clause-set *
   ***********************************
*/

okltest_scs_k(f) := (
  assert(f({},0) = {}),
  assert(f({},1) = {}),
  assert(f({{}},0) = {{}}),
  assert(f({{}},1) = {}),
  assert(f({{1}},0) = {}),
  assert(f({{1}},1) = {{1}}),
  true)$

okltest_scs_l(f) := (
  assert(f({},1) = {}),
  assert(f({{}},1) = {}),
  assert(f({{1}},1) = {{1}}),
  assert(f({{1}},-1) = {}),
  assert(f({{1}},2) = {}),
  assert(f({{1,2},{-1,2}},1) = {{1,2}}),
  assert(f({{1,2},{-1,2}},-1) = {{-1,2}}),
  assert(f({{1,2},{-1,2}},2) = {{1,2},{-1,2}}),
  true)$

okltest_scs_v(f) := (
  assert(f({},1) = {}),
  assert(f({{}},1) = {}),
  assert(f({{1}},1) = {{1}}),
  assert(f({{1}},-1) = {}),
  assert(f({{1}},2) = {}),
  assert(f({{1,2},{-1,2}},1) = {{1,2},{-1,2}}),
  assert(f({{1,2},{-1,2}},2) = {{1,2},{-1,2}}),
  assert(f({{1,2},{-1,2}},3) = {}),
  true)$

okltest_scs_V(f) := block([F],
  assert(f({},{}) = {}),
  assert(f({{}},{}) = {}),
  assert(f({},{1}) = {}),
  assert(f({{1}},{}) = {}),
  okltest_scls_v(buildq([f],lambda([F,v],f(F,{v})))),
  F : {{1,2},{-1,3},{2,3},{3,4},{-2,-4}},
  assert(f(F,{1,2}) = {{1,2},{-1,3},{2,3},{-2,-4}}),
  assert(f(F,{1,4}) = {{1,2},{-1,3},{3,4},{-2,-4}}),
  true)$

/* **************************
   * Crossing out variables *
   **************************
*/

okltest_apply_sv_c(f) := (
  assert(f({},{}) = {}),
  assert(f({},{1,-2}) = {1,-2}),
  assert(f({1},{}) = {}),
  assert(f({1},{1,-2}) = {-2}),
  assert(f({1,2},{1,-2}) = {}),
  true)$

okltest_apply_sv_cs(f) := (
  assert(f({},{}) = {}),
  assert(f({},{{}}) = {{}}),
  assert(f({1},{}) = {}),
  assert(f({1},{{}}) = {{}}),
  assert(f({1,2},{{1},{-1,2},{-2,3},{3,4}}) = {{},{3},{3,4}}),
  assert(okltest_apply_sv_c(buildq([f],lambda([V,C],single_element(f(V,{C})))))),
  true)$

okltest_apply_sv_cl(f) := (
  assert(f({},[]) = []),
  assert(okltest_apply_sv_cs(buildq([f],lambda([V,F],cl2cs(f(V,cs2cl(F))))))),
  true)$

okltest_apply_sv_ip_cl(f) := block([F],
  F : [], assert(f({},'F) = true), assert(F = []),
  F : [{1}], assert(f({1},'F) = true), assert(F = [{}]),
  assert(okltest_apply_sv_cl(buildq([f],lambda([V,F],
    f(V,'F), return(F))))),
  true)$

okltest_restrict_V_cs(f) := (
  assert(f({},{}) = {}),
  assert(f({{}},{}) = {}),
  assert(f({{1,2},{-1,-2},{}},{1}) = {{1},{-1}}),
  assert(f({{1,2},{-1,-2},{}},{1,2}) = {{1,2},{-1,-2}}),
  true)$

okltest_restrict_V_cl(f) := (
  assert(f([],{}) = []),
  assert(f([{}],{}) = []),
  assert(f([{1,2},{-1,-2},{},{1,2}],{1}) = [{1},{-1},{1}]),
  assert(f([{1,2},{-1,-2},{},{-2,3},{-3}],{1,2}) = [{1,2},{-1,-2},{-2}]),
  assert(okltest_restrict_V_cs(buildq([f],lambda([F,V],cl2cs(f(cs2cl(F),V)))))),
  true)$


/* *****************************************
   * Printing clause-sets in Dimacs-format *
   *****************************************
*/

okltest_dimacs_l_string(f) := (
  /* XXX */
  true)$

okltest_dimacs_c_string(f) := (
  assert(f({}) = ""),
  assert(f({1}) = "1 "),
  assert(f({1,2,3,4}) = "1 2 3 4 "),
  true)$

okltest_dimacs_c_stringext(f) := (
  assert(okltest_dimacs_c_string(
      buildq([f:f],lambda([a],f(a,dimacs_l_string))))),
  true)$

okltest_print_fcs_v(f) := block([a,b],
  assert(sequal(print2string(f("XXX",[{},{}],[])), sconcatnl("c XXX","p cnf 0 0")) = true),
  assert(sequal(print2string(f("XXX",[{},{{}}],[])), sconcatnl("c XXX","p cnf 0 1","0")) = true),
  assert(sequal(print2string(f("",[{1,2},{{1,-2},{1,2}}],[a,b])), sconcatnl("c ", "c 1 : a", "c 2 : b", "p cnf 2 2", "-2 1 0", "1 2 0")) = true),
  /* XXX */
  true)$

okltest_print_fcl_v(f) := block([a,b],
  assert(sequal(print2string(f("XXX",[[],[]],[])), sconcatnl("c XXX","p cnf 0 0")) = true),
  assert(sequal(print2string(f("XXX",[[],[{}]],[])), sconcatnl("c XXX","p cnf 0 1","0")) = true),
  assert(sequal(print2string(f("",[[2,1],[{2},{1,-2},{1,2}]],[a,b])), sconcatnl("c ", "c 1 : a", "c 2 : b", "p cnf 2 3","2 0", "-2 1 0", "1 2 0")) = true),
  /* XXX */
  true)$

okltest_standard_statistics_fcs(f) := (
  /* XXX */
  true)$


/* *****************************************
   * Printing clause-sets in PLA-format    *
   *****************************************
*/

okltest_print_fcl2pla(f) := block(
  assert(
    sequal(print2string(f("",[[],[]])),
      sconcatnl(".i 0",".o 1",".type fd")) = true),
  assert(
    sequal(print2string(f("XXX",[[],[]])),
      sconcatnl("# XXX",".i 0",".o 1",".type fd")) = true),
  for i : 1 thru 5 do
    assert(
      sequal(print2string(f("",[create_list(j,j,1,i),[]])),
        sconcatnl(sconcat(".i ",i),".o 1",".type fd")) = true),
  assert(
    sequal(print2string(f("XXX",[[1],[{}]])),
      sconcatnl("# XXX",".i 1",".o 1",".type fd","- 1")) = true),
  assert(
    sequal(print2string(f("XXX",[[1],[{1}]])),
      sconcatnl("# XXX",".i 1",".o 1",".type fd","1 1")) = true),
  assert(
    sequal(print2string(f("XXX",[[1],[{-1}]])),
      sconcatnl("# XXX",".i 1",".o 1",".type fd","0 1")) = true),
  assert(
    sequal(print2string(f("XXX",[[1,2],[{-1},{2}]])),
      sconcatnl("# XXX",".i 2",".o 1",".type fd","0- 1","-1 1")) = true),
  assert(
    sequal(print2string(f("XXX",[[1,2],[{-1,2},{2}]])),
      sconcatnl("# XXX",".i 2",".o 1",".type fd","01 1","-1 1")) = true),
  assert(
    sequal(print2string(f("XXX",[[1,2],[{-1,2},{1,2}]])),
      sconcatnl("# XXX",".i 2",".o 1",".type fd","01 1","11 1")) = true),
  assert(
    sequal(print2string(f("XXX",[[1,2,3],[{-1,2},{1,2},{1,-3}]])),
      sconcatnl("# XXX",".i 3",".o 1",
                ".type fd","01- 1","11- 1","1-0 1")) = true),
  true)$


/*!
\endhtmlonly
*/
