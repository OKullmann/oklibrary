/* Oliver Kullmann, 31.12.2007 (Swansea) */
/* Copyright 2007, 2008, 2009, 2010, 2011, 2018 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Hypergraphs.mac
  \brief Functions related to the various transformation to graphs and hypergraphs

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Hypergraphs.mac");

  For other graphs see Satisfiability/Lisp/Resolution/Graphs.mac.

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/Graphs/Lisp/Basic.mac")$
oklib_include("OKlib/ComputerAlgebra/CombinatorialMatrices/Lisp/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$



/* *******************************************
   * Clause-variable matrices and variations *
   *******************************************
*/

/* A formal clause-set as a hypergraph: */
/* RENAME: fcs2hg */
hyp_fcs(FF) := [literals_v(FF[1]), FF[2]]$
fcs2hg(FF) := hyp_fcs(FF)$


/* The clause-variable graph of a formal clause-set (also "incidence graph").
   The set of vertices is the disjoint-sum of the clauses ("left") and the
   variables ("right").
*/
/* RENAME: clvar_fcs2g */
clvar_g(FF) := [set_sumn(FF[2], FF[1]),
  family_sets_union(FF[2], 
    lambda([C], map(lambda([x],{[C,1],[var_l(x),2]}), C)))]$
clvar_fcs2g(FF) := clvar_g(FF)$


/* The variable-hypergraph of a formal clause-set: */
/* RENAME: var_fcs2hg */
var_hyp(FF) := [FF[1], map(var_c,FF[2])]$
var_fcs2hg(FF) := var_hyp(FF)$
var_fcs2ghg(FF) := [FF[1], FF[2], lambda([H],var_c(H))]$


/* The variable-interaction graph (or "primal graph") of a formal clause-set: */
/* RENAME vi_fcs2g */
vig_fcs(FF) := section_hyp(var_hyp(FF),2)$
vi_fcs2g(FF) := vig_fcs(FF)$


/* The common-variable graph of a clause-set (this is also the
   "stochastic-dependence graph"). */
/* RENAME: cv_cs2g */
cvg_cs(F) := [F, 
 subset(powerset(F,2), lambda([S], 
        block([L : listify(S)], not disjointp(var_c(L[1]), var_c(L[2])))))]$
cv_cs2g(F) := cvg_cs(F)$


/* The combinatorial clause-variable matrix of a formal clause-set: */
/* RENAME: clvar_fcs2com */
cl_var_com_fcs(FF) := [FF[2], FF[1], lambda([C,v], 
  if elementp(v, C) then +1 else if elementp(-v,C) then -1 else 0)]$
clvar_fcs2com(FF) := cl_var_com_fcs(FF)$
/* Remark: abs_com(clvar_fcs2com(FF)) = hypver_ghg2com(var_fcs2ghg(FF)). */
/* RENAME: clvar_ofcs2ocom */
cl_var_ocom_ofcs(FF) := [FF[2], FF[1], lambda([C,v], 
  if elementp(v, C) then +1 else if elementp(-v,C) then -1 else 0)]$
clvar_ofcs2ocom(FF) := cl_var_ocom_ofcs(FF)$
clvar_fcl2ocom(FF) := cl_var_ocom_ofcs(FF)$

/* The inverse operation, creating a formal clause-set from a
   combinatorial matrix, using the columns as variables (positive entries
   yield positive literals, negative entries negative literals).
   Prerequisite: The columns indices can serve as variables.
   The matrix entries are not restricted to {-1,0,+1}, only the
   relation "<" must be applicable.
*/
clvar_com2fcs(M) := [M[2], 
 map(lambda([i], disjoin(0,
  map(lambda([j], block([x : M[3](i,j)], 
   if x > 0 then j elseif x < 0 then -j else 0)), M[2]))), 
 M[1])]$
clvar_ocom2fcl(M) := [M[2],
 map(lambda([i], disjoin(0, setify(
  map(lambda([j], block([x : M[3](i,j)], 
   if x > 0 then j elseif x < 0 then -j else 0)),
  M[2])))),
 M[1])]$
/* Now taking a Maxima matrix as input: */
clvar_m2fcs(M) := clvar_com2fcs(m2com(M))$
/* If the column-indices can not serve as variables, use the function-argument
   make_var to create variables as make_var(j) ("w" in the name is for
   wrapper):
*/
clvar_w_com2fcs(M,make_var) := [map(make_var,M[2]), 
 map(lambda([i], disjoin(0,
  map(lambda([j], block([x : M[3](i,j)], 
   if x > 0 then make_var(j) elseif x < 0 then -make_var(j) else 0)), M[2]))), 
 M[1])]$
clvar_w_ocom2fcl(M,make_var) := [map(make_var,M[2]),
 map(lambda([i], disjoin(0, setify(
  map(lambda([j], block([x : M[3](i,j)], 
   if x > 0 then make_var(j) elseif x < 0 then -make_var(j) else 0)),
  M[2])))),
 M[1])]$


/* The clause-intersection matrix (as square combinatorial matrix)
   of a clause-set (for each pair of clauses the number of common literals
   minus the number of clashing literals). */
cl_int_scom_cs(F) := block([FF : cs_to_fcs(F), M],
 M : cl_var_com_fcs(FF),
  return(com2scom(prod_com(M, trans(M)))))$
/* The clause-var-intersection matrix (as square combinatorial matrix)
   of a clause-set (for each pair of clauses the number of common variables).
*/
cl_varint_scom_cs(F) := block([FF : cs_to_fcs(F), M],
 M : abs_com(cl_var_com_fcs(FF)),
  return(com2scom(prod_com(M, trans(M)))))$


/* The variable-intersection matrix (as square combinatorial matrix)
   of a formal clause-set (for each pair of variables the number of 
   occurrences with the same sign occurrences minus the number of 
   occurrences with opposite signs) */
var_int_scom_fcs(FF) := block([M : cl_var_com_fcs(FF)],
  return(com2scom(prod_com(trans(M), M))))$


/* The directed variable-literal-clause graph of a formal
   clause-set (from a variable to its two literals, from a
   literal to its clauses).
   Literals are here represented as pairs [v,+1] resp. [v,-1].
*/
/* RENAME: varlitcl_fcs2dg */
var_lit_clause_digraph(FF) := block([Var,Lit,Cl,V,E],
  Var : listify(FF[1]),
  Lit : create_list([v,j], v,Var, j,[-1,1]),
  Cl : listify(FF[2]),
  V : append(Var,Lit,Cl),
  E : append(
        create_list([v,[v,j]], v,Var, j,[-1,1]),
        create_list([x,C], x,Lit, 
          C,sublist(Cl,lambda([D],elementp(x[2]*x[1],D)))
        )
      ),
  return([setify(V),setify(E)]))$
/* The transitive closure of var_lit_clause_digraph. */
/* RENAME: varlitcltr_fcs2dg */
var_lit_clause_digraph_tr(FF) := block(
 [G : var_lit_clause_digraph(FF),Var,Cl,E],
  Var : listify(FF[1]),
  Cl : listify(FF[2]),
  E :  create_list([v,C], v,Var, 
          C,sublist(Cl,lambda([D],elementp(v,var_c(D))))),
  return([G[1],union(G[2],setify(E))]))$


/* ***************************************
   * Implication graphs (and variations) *
   ***************************************
*/

/* The directed implication graph of a formal clause-set (only considering
   clauses of length 1 or 2). */
/* RENAME: imp_fcs2dg(FF) */
implication_dg_fcs(FF) := block(
 [F1 : map(listify,listify(scls_k(FF[2],1))), 
  F2 : map(listify,listify(scls_k(FF[2],2)))],
  [literals_v(FF[1]), setify(append(create_list([-U[1],U[1]],U,F1), 
      create_list([-C[1],C[2]],C,F2), create_list([-C[2],C[1]],C,F2)))])$
imp_fcs2dg(FF) := implication_dg_fcs(FF)$
imp_cs2dg(F) := imp_fcs2dg(cs2fcs(F))$


/* ************
   * Measures *
   ************
*/

/* The minimal degree of the common-variable graph: */
min_degree_cvg_cs(F) := if emptyp(F) then inf else
  min_degree(g2mg(cvg_cs(F)))[1]$
/* The maximal degree of the common-variable graph */
max_degree_cvg_cs(F) := if emptyp(F) then minf else
  max_degree(g2mg(cvg_cs(F)))[1]$


/* The deficiency of a formal clause-set: */
deficiency_fcs(FF) := length(FF[2]) - length(FF[1])$
/* The deficiency of a clause-set */
deficiency_cs(F) := deficiency_fcs(cs2fcs(F))$

/* The maximal deficiency of a formal clause-set: */
max_deficiency_fcs(FF) := length(FF[2]) - length(max_matching(g2mg(clvar_g(FF))))$

/* The surplus of a formal clause-set, computed by definition: */
surplus_bydef_fcs(FF) := if emptyp(FF[1]) then 0 else
  lmin(map(lambda([V], length(scs_V(FF[2],V)) - length(V)), disjoin({},powerset(FF[1]))))$
surplus_bydef_cs(F) := surplus_bydef_fcs(cs2fcs(F))$


/* ************
   * Analysis *
   ************
*/

var_disjointfcsp(FF1,FF2) := disjointp(FF1[1],FF2[1])$
var_disjointcsp(F1,F2) := var_disjointfcsp(cs_to_fcs(F1),cs_to_fcs(F2))$

/* The set of accumulation variables of a clause-set (those variables which
   after splitting create variable-disjoint clause-sets). */
accumulation_variables_cs(F) := block([V : var_cs(F), result : {}],
  for v in V do 
    if var_disjointcsp(apply_pa({v},F), apply_pa({-v},F)) then
      result : adjoin(v,result),
  return(result))$

/* The set of full variables (occurring in every clause) of a
   formal clause-set. */
full_variables_fcs(FF) := block([F : FF[2], D, c : ncl_f(FF)],
 if F = {} then return(FF[1]) elseif F = {{}} then return({}),
 D : hm2sm(variable_degrees_cs(F)),
 return(map(lambda([P],first(P)),subset(D, lambda([P], is(second(P)=c))))))$
full_variables_cs(F) := full_variables_fcs(cs_to_fcs(F))$

/*!
\endhtmlonly
*/
