/* Oliver Kullmann, 5.7.2008 (Swansea) */
/* Copyright 2008, 2011, 2012 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Satisfiability/Lisp/ClauseSets/PartialAssignments.mac
  \brief Basic operations for partial assignments

Use by

oklib_load("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/PartialAssignments.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$


/* ****************************************
   * The notion of a "partial assignment" *
   ****************************************
*/

/*
 A "partial boolean assignment" is a boolean clause, interpreted
 as setting its elements to true.
*/

pa_p(phi) := c_p(phi)$

/* ***********************************
   * Enumerating partial assignments *
   ***********************************
*/

/* The set of all partial assignments over a set of variables: */
all_pass(V) := if emptyp(V) then {{}} else
 block([e : choose_element(V), S],
  S : all_pass(disjoin(e,V)),
  return(union(S,
           map(lambda([phi],adjoin(e,phi)),S),
           map(lambda([phi],adjoin(-e,phi)),S))))$
/* Now V is a list, and returned is a list (in lexicographical
   order, when representing a partial assignment as a total function
   in list-representation, using the linear order on V, and using the
   order "undefined" < false < true on the values): */
all_pass_l(V) := if emptyp(V) then [{}] else
 block([e : first(V), S],
  S : all_pass_l(rest(V)),
  return(append(S,
           map(lambda([phi],adjoin(-e,phi)),S),
           map(lambda([phi],adjoin(e,phi)),S))))$
/* This time only those partial assignments with domain size n. */
all_pass_n(V,n) := if n < 0 then {}
 elseif n=0 then {{}}
 elseif emptyp(V) then {}
 else block([e : choose_element(V), S0, S1],
   V : disjoin(e,V),
   S0 : all_pass_n(V,n-1),
   S1 : all_pass_n(V,n),
   return(union(S1,
            map(lambda([phi],adjoin(e,phi)),S0),
            map(lambda([phi],adjoin(-e,phi)),S0))))$

/* The set of all total assignments over a set or list V of variables: */
all_tass(V) := map(setify,uaapply(cartesian_product,
 map(lambda([v],{-v,v}),listify(V))))$
/* Given V as a list, return a list, using lexicographical order: */
all_tass_l(V) := map(setify, cartesian_product_l(map(lambda([v],[-v,v]),V)))$


/* ********************
   * Basic operations *
   ********************
*/

/* The variables in a partial assignment: */
var_pa(phi) := var_c(phi)$

/* Restricting a partial assignment phi to a set V of variables.
   (V does not need to be a subset of var_pa(phi).) */
restr_pa(phi,V) := subset(phi, lambda([x], elementp(var_l(x),V)))$
/* Remove variables in V from phi: */
restr_c_pa(phi,V) := subset(phi, lambda([x], not elementp(var_l(x),V)))$

/* The composition of partial assignments (first phi, then psi): */
compo_pass(psi,phi) := union(phi, setdifference(psi,comp_sl(phi)))$

/* **********
   * Output *
   **********
*/

oklib_plain_include("stringproc");

/* Outputs the given partial assignment as a partial assignment file: */
output_pa(phi,n) :=
  with_stdout(n,
    print(sconcat("v ", simplode(listify(phi), " "), " 0")))$

/* ********************************
   * Applying partial assignments *
   ********************************
*/

/* Apply a partial assignment to a boolean clause-set. */
/* RENAME: apply_pa_cs */
apply_pa(phi,F) := setdifference2(remove_non_disjoint(F,phi), comp_sl(phi))$
apply_pa_cs(phi,F) := apply_pa(phi,F)$
apply_pa_cl(phi,F) := block([comp_phi : comp_sl(phi)],
  map(lambda([C],setdifference(C,comp_phi)),
      sublist(F,lambda([C],disjointp(C,phi)))))$
/* RENAME: apply_pa_fcs */
apply_pa_f(phi,FF) := [setdifference(var_cs_f(FF), var_pa(phi)),
  apply_pa_cs(phi, clauses_f(FF))]$
apply_pa_fcs(phi,FF) := apply_pa_f(phi,FF)$

/* In-place modification, argument _F passed by name; returns "true": */
apply_pa_ip_cl(phi,_F) := block([comp_phi : comp_sl(phi)],
  _F :: sublist(ev(_F),lambda([C],disjointp(C,phi))),
  _F :: map(lambda([C],setdifference(C,comp_phi)),ev(_F)),
  true)$


/* ****************************************************
   * Analysing partial assignments for satisfyingness *
   ****************************************************
*/

/* Tests whether a partial assignment satisfies a clause: */
sat_pac_p(phi,C) := not disjointp(phi,C)$

/* Test for a satisfying assignment w.r.t. a clause-set: */
/* RENAME: sat_pacs_p */
satisfyingpap(phi,F) := every_s(lambda([C],sat_pac_p(phi,C)),F)$
sat_pacs_p(phi,F) := satisfyingpap(phi,F)$
sat_paocs_p(phi,F) :=  every_s(lambda([C],sat_pac_p(phi,C)),F)$
sat_pacl_p(phi,F) := every_s(lambda([C],sat_pac_p(phi,C)),F)$
/* RENAME: sat_pafcs_p */
/* Test for a satisfying assignment w.r.t. a formal clause-set: */
satisfyingpafp(phi,FF) := sat_pacs_p(phi,FF[2])$
sat_pafcs_p(phi,FF) := satisfyingpafp(phi,FF)$
sat_paofcs_p(phi,FF) := sat_paocs_p(phi,FF[2])$
sat_pafcl_p(phi,FF) := sat_pacl_p(phi,FF[2])$

/* The set of satisfied clauses for a partial assignment w.r.t. a clause-set:
*/
/* RENAME: sat_pa_cs */
sat_pa(phi,F) := subset(F, lambda([C], sat_pac_p(phi,C)))$
sat_pa_cs(phi,F) := sat_pa(phi,F)$
/* RENAME: sat_pa_fcs */
sat_paf(phi,FF) := sat_pa(phi,FF[2])$
sat_pa_fcs(phi,FF) := sat_paf(phi,FF)$


/* ************************************************
   * Analysing partial assignments for autarkness *
   ************************************************
*/

/* Test for a weak autarky w.r.t. a clause-set: */
waut_pacs_p(phi,F) := is(subsetp(apply_pa_cs(phi,F),F))$

/* Test for an autarky w.r.t. a clause-set: */
aut_pacs_p(phi,F) := block([cphi : comp_sl(phi)],
  every_s(lambda([C], disjointp(cphi,C) or not disjointp(phi,C)), F))$
aut_paocs_p(phi,F) := block([cphi : comp_sl(phi)],
  every_s(lambda([C], disjointp(cphi,C) or not disjointp(phi,C)), F))$
aut_paofcs_p(phi,FF) := block([cphi : comp_sl(phi)],
  every_s(lambda([C], disjointp(cphi,C) or not disjointp(phi,C)), FF[2]))$


/* ********************************************
   * Complete analysis of partial assignments *
   ********************************************
*/

/* The set of satisfied, falsified, untouched and critical (original) clauses
   for a partial assignment phi w.r.t. a clause-set F. */
/* These four sets constitute a partioning of F:
    - if F contains {}, then this belongs to the falsified clauses;
    - a critical clause is a touched but neither satisfied nor
      falsified clause.
*/
/* RENAME: analyse_pa_cs */
analyse_pa(phi,F) := block([V : var_c(phi), s : {}, f : {}, u : {}, c : {}],
 for C in F do block([r : apply_pa_cs(phi,{C})],
  if r = {} then s : adjoin(C,s)
  elseif r = {{}} then f : adjoin(C,f)
  elseif disjointp(var_c(C), V) then u : adjoin(C,u)
  else c : adjoin(C,c)),
 return([s,f,u,c]))$
analyse_pa_cs(phi,F) := analyse_pa(phi,F)$
/* RENAME: analyse_pa_fcs */
analyse_paf(phi,FF) := analyse_pa_cs(phi,FF[2])$
analyse_pa_fcs(phi,FF) := analyse_paf(phi,FF)$


/* ************************************
   * All satisfying assignments bydef *
   ************************************
*/

/* The set of all satisfying total assignments of a clause-set F
    w.r.t. a set or list V of variables: */
/* RENAME: all_sattass_cs */
all_sat_tass(F,V) := subset(all_tass(V), lambda([phi],sat_pacs_p(phi,F)))$
all_sattass_cs(F,V) := all_sat_tass(F,V)$
/* For a list V of variables, using that order for the enumeration: */
all_sattass_ocs(F,V) := sublist(all_tass_l(V),
  lambda([phi], sat_paocs_p(phi,F)))$
all_sat_cs(F) := all_sattass_cs(F,var_cs(F))$
all_sat_fcs(FF) := all_sattass_cs(FF[2],FF[1])$
all_sat_ofcs(FF) := all_sattass_ocs(FF[2],FF[1])$


/* ***********************
   * All autarkies bydef *
   ***********************
*/

/* The set of all autarkies of a clause-set F: */
all_aut_cs(F) := subset(all_pass(var_cs(F)), lambda([phi],aut_pacs_p(phi,F)))$/* As a repetition-free list, where for the order of partial assignments the
  order as the variables occur in the clauses is determinative: */
all_aut_ocs(F) := sublist(all_pass_l(ovar_ocs(F)), lambda([phi],aut_paocs_p(phi,F)))$
all_aut_ofcs(FF) := sublist(all_pass_l(FF[1]), lambda([phi],aut_paofcs_p(phi,FF)))$

/* The autarky monoid of a clause-set: */
autmon_cs(F) := [all_aut_cs(F), compo_pass, {}]$
/* The "listified" autarky monoid of an ordered clause-set: */
autmon_ocs(F) := [all_aut_ocs(F), compo_pass, {}]$

/*!
\endhtmlonly
*/
