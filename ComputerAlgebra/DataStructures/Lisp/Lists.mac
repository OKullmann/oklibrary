/* Oliver Kullmann, 20.2.2008 (Swansea) */
/* Copyright 2008, 2009, 2010, 2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/DataStructures/Lisp/Lists.mac
  \brief Functions for handling lists (in Maxima/Lisp)

Use by

oklib_load("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$


/* ***************
   * List access *
   ***************
*/

/* x can either be a number, then it is returned, or a list,
   and then we get the corresponding element:
*/
firste(x) := if listp(x) then first(x) else x$
seconde(x) := if listp(x) then second(x) else x$
thirde(x) := if listp(x) then third(x) else x$
fourthe(x) := if listp(x) then fourth(x) else x$

/* ***********************
   * Apply-functionality *
   ***********************
*/

/* "Unrestricted apply" (for arbitrary argument-list-length);
   dissipating into apply's with blocksize many arguments: 
*/
uapply(_op,L,blocksize) :=  block([l : length(L)],
  if l <= blocksize then apply('_op,L)
  else block([d : divide(l-1, blocksize), res : apply('_op,[first(L)])],
    L : rest(L),
    thru d[1] do (
      res : apply('_op, [res, apply('_op, take_elements(blocksize,L))]),
      L : rest(L, blocksize)
    ),
    if d[2] # 0 then
      apply('_op, [res, apply('_op, take_elements(d[2],L))])
    else
      res))$
/* To be used with "append" etc.: */
uaapply(_op,L) := uapply(_op,L,maximal_argument_length)$
/* Remark: "apply("+",L)" etc. is possible for arbitrary lists L. */
/* Remark: For "union" and "intersection" use lunion resp. lintersection.
*/

/* The special case of appending the elements of a list: */
lappend(L) := uaapply(append,L)$


/* *******************************
   * Testing properties of lists *
   *******************************
*/

/* The versions of "every" and "some" with short-circuit evaluation: */

/* For unary predicates: */
every_s(_prede,_L) := block([_nocountex : true],
  for _x in _L while _nocountex do
    _nocountex : _prede(_x),
  return(_nocountex))$
/* For arbitrary predicates (with at least one argument): */
everynary_s([_L]) := block(
 [_nocountex : true, _pred : first(_L), _R : rest(_L)],
  for _x in apply(map, cons("[",_R)) while _nocountex do
    _nocountex : ev(apply(_pred, _x),pred),
  return(_nocountex))$
/* Remarks:
 - every is faster than every_s if all elements are to be evaluated;
   every_s is faster than everynary_s if the predicate is unary.
*/

/* For unary predicates: */
some_s(_preds,_L) := block([_countex : false],
  for _x in _L unless _countex do
    _countex : _preds(_x),
  return(_countex))$
/* For arbitrary predicates (with at least one argument): */
somenary_s([_L]) := block(
 [_countex : false, _pred : first(_L), _R : rest(_L)],
  for _x in apply(map, cons("[",_R)) unless _countex do
    _countex : ev(apply(_pred, _x),pred),
  return(_countex))$
/* Remarks:
 - some is faster than some_s if all elements are to be evaluated;
 - some_s is faster than somenary_s if the predicate is unary.
*/

/* Checks whether L is a list without repetitions: */
listnorep_p(L) := listp(L) and is(length(unique(L)) = length(L))$
/* Checks whether L is a constant list: */
lconstant_p(L) := if emptyp(L) then true else
  block([x : first(L)], every_s(lambda([y],is(x=y)), rest(L)))$

/* Checks whether L is strictly ascending: */
strictascending_p(L) := if length(L) <= 1 then true
 else everynary_s("<",rest(L,-1),rest(L))$
strictdescending_p(L) := if length(L) <= 1 then true
 else everynary_s(">",rest(L,-1),rest(L))$
/* Checks whether L is ascending: */
ascending_p(L) := if length(L) <= 1 then true
 else everynary_s("<=",rest(L,-1),rest(L))$
descending_p(L) := if length(L) <= 1 then true
 else everynary_s(">=",rest(L,-1),rest(L))$

/* Checks whether L1 is an initial part of L2: */
prefix_p(L1,L2) := if length(L1) > length(L2) then false
 else is(L1 = take_l(length(L1),L2))$


/* *******************************************
   * Summations and products over lists/sets *
   *******************************************
*/

sum_l(L) := apply("+",L)$
sum_s(S) := apply("+",listify(S))$
gsum_l(f,L) := apply("+",map(f,L))$
gsum_s(f,S) := apply("+",map(f,listify(S)))$
prod_l(L) := apply("*",L)$
prod_s(S) := apply("*",listify(S))$
gprod_l(f,L) := apply("*",map(f,L))$
gprod_s(f,S) := apply("*",map(f,listify(S)))$


/* *************************************
   * Finding special elements in lists *
   *************************************
*/

/* Computing the first smallest element w.r.t. length of a list
   (or of a set). */
/* Prerequisite: L is not empty. */
first_smallest_l(L) := block([s : inf, S, l],  
  for x in L do (l : length(x),
    if l < s then (s : l, S : x)),
  S)$
/* Now a lower bound on length is given: */
first_smallest_lb_l(L,lb) := block([s : inf, S, l],  
  for x in L unless s = lb do (l : length(x),
    if l < s then (s : l, S : x)),
  S)$
/* first_smallest_lb_l(L,0) computes the same result as first_smallest_l(L),
   but the computation is aborted as soon as an empty element was found
   (the price is the repeated evaluation of the condition).
*/

/* More generally, compute the minimum value of function _fmin together with
   the corresponding first element (returned as pair).
   If the list is empty, then return [inf].
*/
/* Prerequisite: _fmin(x) < inf for x in L. */
first_smallest_f_l(_fmin,L) := if emptyp(L) then [inf] else
 block([min_v : inf, opt_x, v],
  for x in L do (v : _fmin(x),
    if v < min_v then (opt_x : x, min_v : v)),
  [min_v, opt_x])$
/* Prerequisite: _fmax(x) > minf for x in L. */
first_largest_f_l(_fmax,L) := if emptyp(L) then [minf] else
 block([max_v : minf, opt_x, v],
  for x in L do (v : _fmax(x),
    if v > max_v then (opt_x : x, max_v : v)),
  [max_v, opt_x])$

/* Just computing the smallest element of f(x) for x in L: */
smallest_f_l(_fmin,L) := if length(L) <= 20000 then lmin(map(_fmin,L)) else 
 block([min_v : inf, v],
  for x in L do ( v : _fmin(x), if v < min_v then min_v : v ),
  min_v)$
/* And computing the largest element of f(x) for x in L: */
largest_f_l(_fmax,L) := if length(L) <= 20000 then lmax(map(_fmax,L)) else 
 block([max_v : minf, v],
  for x in L do ( v : _fmax(x), if v > max_v then max_v : v ),
  max_v)$


/* The index of the first element x in list L with property _pred(x);
   if there is no such x then return inf. */
find_first_l(_pred,L) := if emptyp(L) then inf else
 block([found : false, i : 1],
  for x_ in L unless found do
    if _pred(x_)=true then found : true
    else i : i + 1,
  if found then i else inf)$

/* The index of the last element x in list L with property _pred(x);
   if there is no such x then return minf. */
find_last_l(_pred,L) := if emptyp(L) then minf else
 block([found : false, i : length(L)],
  for x_ in reverse(L) unless found do
    if _pred(x_)=true then found : true
    else i : i - 1,
  if found then return(i) else return(minf))$

elementp_l(x,L) := block([found : false],
  for y in L do if x=y then (found:true, return()),
  return(found))$


/* *************************
   * Sublist constructions *
   *************************
*/

/* The first n elements of L for 0 <= n <= length(L), while for 
   length(L) <= n <= 2 length(L) we use n' := 2 length(L) - n and
   return the last n' elements. Error if n < 0 or n > 2 length(L). */
/* Returns a shallow copy of L. */
/* RENAME: take_l */
take_elements(n,L) := rest(L, - (length(L) - n))$
take_l(n,L) := take_elements(n,L)$

/* Finds the list of indices of elements equal to x. */
sublist_indices_el(L,x) := sublist_indices(L,lambda([e],is(e=x)))$

/* Removes element with index i from list L. Error if i < 1 or 
   i > length(L). */
/* Returns a shallow copy of L. */
remove_element(i,L) := append(take_elements(i-1,L), rest(L,i))$
/* Removes all elements in list E from list L (returing a shallow copy of L):
*/
remove_elements(E,L) := (for x in E do L : delete(x,L), L)$

/* Return the sublist of list L for which the corresponding entry in
   okl-array I is 0. Returns a shallow copy. */
sublist_indicator(L,I) := block([res : [], l : length(L), i : 1],
 for x in L do (
   if I[i] = 0 then res : cons(x,res),
   i : i + 1),
 return(reverse(res)))$

/* Remove consecutive repeated elements: */
remove_consrep(L) := if length(L) <= 1 then L
 elseif first(L)#second(L) then cons(first(L),remove_consrep(rest(L)))
 else remove_consrep(rest(L))$


/* *********************
   * List partitioning *
   *********************
*/

/* Partitions a given list l into a list of lists of size n,
   or less (in the case of the last-element list).
   Prerequisite n > 0. */
/* Returns a shallow copy of L. */
partition_elements(l,n) := if emptyp(l) then [] else 
 block([nn : min(length(l),n)],
  cons(take_elements(nn,l), partition_elements(rest(l,nn),n)))$
/* We have apply(append, partition_elements(l,n)) = l. */

/* Partition a list into yes- and no- instances */
partition_list(L,pred_) := [sublist(L,'pred_),sublist(L,lambda([x],not pred_(x)))]$
/* Same functionality, but now for more expensive predicates ("epo" for
   "evaluate predicate once"): */
partition_list_epo(L,pred_) := block([A : [], B : []],
  for x in L do if pred_(x) then A : cons(x,A) else B : cons(x,B),
  return([reverse(A),reverse(B)]))$

/* Partition a list into lists of elements which have
   the same value under the mapping eq_. */
partition_list_eq(L,eq_) := block([H : sm2hm({}),v],
  for x in L do 
    if (v : ev_hm_d(H,eq_(x),undef)) = undef then set_hm(H,eq_(x),[x])
    else set_hm(H,eq_(x),cons(x,v)),
  return(map(lambda([A],reverse(A[2])),listify(hm2sm(H)))))$


/* Split a list into sublists using elements for which the given predicate
   returns true as the delimiting elements: */
split_list(L,e) := split_list_epo(L,buildq([e],lambda([a], is(a = e))))$

/* Split a list into sublists using elements for which the given predicate
   returns true as the delimiting elements: */
split_list_epo(L,pred_) := block([R:[],CL : []],
  for e in L do
    if pred_(e) then (R : cons(reverse(CL),R),CL : [])
    else CL : cons(e,CL),
  R : cons(reverse(CL),R),
  return(reverse(R)))$


/* **********************
   * List constructions *
   **********************
*/

/* Rotates a list n elements to the right. Negative n rotates to the left. */
rotate(l,n) := 
  if n = 0 or l = [] then l
  else if sign(n) = pos then rotate(append([last(l)],rest(l,-1)), n-1)
  else rotate(append(rest(l), [first(l)]), n+1)$

/* Converts a list "l" to a matrix with rows of length "len_row", 
   computes the transposed matrix, and returns the flattening of 
   this matrix. len_row must be a multiple of the length of l. */
transpose_l(l,len_row) :=
  m2l_r(transpose(apply(matrix,partition_elements(l,len_row))))$

/* Removes duplicated elements in the order they appear (i.e., the second
   occurrence and later ones are removed).
   Returns copies of each first occurrence.
*/
stable_unique(L) := block([S:{}, res:[]],
 for x in L do if not elementp(x,S) then (S : adjoin(x,S), res : cons(x,res)),
 reverse(res))$
/* Remark: The Maxima-function unique(L) is not stable (but faster). */


/* *************************
   * Random parts of lists *
   *************************
*/

/* Setting the state 0 <= n < 2^32. */
/* Apparently each state is independent of every other state, and comprises
   a reasonably long sequence of random numbers.*/
/* It appears that when Maxima is initialised then the random state is set
   to some fixed but unspecified value. */
set_random(n) := set_random_state(make_random_state(n))$

/* Returns a random element with indices between a and b
   from a non-empty list L. */
/* Prerequisites: 1 <= a <= b <= length(L). */
random_element_ab(a,b,L) := L[random(b-a+1)+a]$
/* Returns a random element from a non-empty list: */
random_element(L) := random_element_ab(1,length(L),L)$

/* Removes a random element from a non-empty list passed by
   reference, and returns that element: */
remove_random_element(L) := block([n : length(ev(L)), i, x],
  i : random(n) + 1,
  x : ev(L)[i],
  L :: remove_element(i,ev(L)),
  return(x))$


/* ************************
   * Numerical operations *
   ************************
*/

/* Count the number of occurrences of x in L: */
count_l(x,L) := block([_res : 0],
 for _y in L do if _y = x then _res : _res + 1,
 _res)$
/* More generally, count the number of elements in L where _pred is true: */
countpred_l(_pred,L) := block([_res : 0],
 for _x in L do if _pred(_x) then _res : _res + 1,
 _res)$

/* Count the number of non-trivial maximal contiguous sublists of L with
   constant value x:
*/
countntconst_l(x,L) := if length(L) <= 1 then 0
 elseif first(L) # x then countntconst_l(x,rest(L))
 elseif second(L) # x then countntconst_l(x,rest(L,2))
 else block([i : find_first_l(lambda([y],is(y#x)),L)],
   if i=inf then 1
   else 1 + countntconst_l(x,rest(L, i)))$

/* The list of sizes of (maximal) constant intervals: */
size_constintervals_l(L) := if emptyp(L) then []
 elseif length(L) = 1 then [1]
 else block([r : size_constintervals_l(rest(L))],
   if first(L) = second(L) then (r[1] : r[1] + 1, r)
   else cons(1,r))$


/* Applies the Delta-operator to list L, that is, take the difference
   of successive elements L[i+1] - L[i]:
*/
Delta_l(L) := if length(L) <= 1 then [] else
 cons(second(L)-first(L), Delta_l(rest(L)))$

/* Count the number of "plateaus of inflection": */
count_extremals_l(L) := if emptyp(L) then 0
 elseif length(L)=1 then 1
 else 1 + length(remove_consrep(delete(0,signum(Delta_l(L)))))$


/* MOVE functions to ComputerAlgebra/CombinatorialMatrices/Lisp/Basics.mac. */

/* Flattens a matrix into a list of the elements, row by row: */
m2l_r(m) := lappend(create_list(m[i],i,1,length(m)))$

/* Returns a list of the given matrix's columns (as lists) */
/* RENAME: m2ll_c */
matrixcolumns(m) := partition_elements(m2l_r(transpose(m)),length(m))$

/* Builds a matrix from a list of its columns (as lists) */
/* RENAME: m_c */
columns2matrix(mc) := transpose(uaapply(matrix, mc))$


/* ***********
   * Sorting *
   ***********
*/

/* Sorts a list according to the element's length (ascending and stable): */
sort_length(L) := lappend(sort_length_part(L))$
/* Now sorting by descending length (stable): */
sort_length_desc(L) := lappend(sort_length_desc_part(L))$

/* Distributing the elements of list L into a list of list, collecting
   elements of equal length, and sorting the meta-lists by ascending
   element-length. First returning the result as okl-array:
*/
sort_length_part_ary(L) := block([S : listify(setify(map(length,L))), n, h, A, m],
  n : length(S),
  h : osm2hm(l2osm_inv(S)),
  A : okl_make_array(any, n),
  for i : 1 thru n do A[i] : [],
  for x in L do (m : ev_hm(h,length(x)), A[m] : cons(x,A[m])),
  for i : 1 thru n do A[i] : reverse(A[i]),
  A)$
/* Now returning a list (of lists): */
sort_length_part(L) := ary2l(sort_length_part_ary(L))$
/* Now sorting by descending element-length: */
sort_length_desc_part(L) := reverse(sort_length_part(L))$


/*!
\endhtmlonly
*/
