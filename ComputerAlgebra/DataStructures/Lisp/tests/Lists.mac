/* Oliver Kullmann, 20.2.2008 (Swansea) */
/* Copyright 2008, 2009, 2010, 2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/DataStructures/Lisp/tests/Lists.mac
  \brief Tests for list-processing functions

Use by

oklib_load("OKlib/ComputerAlgebra/DataStructures/Lisp/tests/Lists.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$

kill(f)$

/* ***************
   * List access *
   ***************
*/

okltest_firste(f) := block([x],
  assert(f([0]) = 0),
  assert(f([1,2,3]) = 1),
  assert(f(x) = x),
  assert(f(0) = 0),
  true)$

okltest_seconde(f) := block([x],
  assert(f([1,2]) = 2),
  assert(f([1,7,3]) = 7),
  assert(f(x) = x),
  assert(f(0) = 0),
  true)$

okltest_thirde(f) := block([x],
  assert(f([1,2,3]) = 3),
  assert(f([1,2,7,4]) = 7),
  assert(f(x) = x),
  assert(f(0) = 0),
  true)$

okltest_fourthe(f) := block([x],
  assert(f([1,2,3,4]) = 4),
  assert(f([1,2,3,7,5]) = 7),
  assert(f(x) = x),
  assert(f(0) = 0),
  true)$


/* ***********************
   * Apply-functionality *
   ***********************
*/

okltest_uaapply(f) := block(
  assert(f(append,[]) = []),
  if oklib_test_level = 0 then return(true),
  assert(f(append,create_list([],i,1,100000)) = []),
  true)$

okltest_lappend(f) := block(
  assert(f([]) = []),
  assert(f([[]]) = []),
  assert(f([[1],[],[2],[],[3],[]]) = [1,2,3]),
  if oklib_test_level = 0 then return(true),
  assert(f(create_list([],i,1,100000)) = []),
  true)$


/* *******************************
   * Testing properties of lists *
   *******************************
*/

okltest_every_s(f) := block([c],
  assert(f(identity,[]) = true),
  assert(f(identity,[false]) = false),
  assert(f(identity,[true]) = true),
  assert(f(identity,[true,false]) = false),
  assert(f(identity,[true,true]) = true),
  c : 0,
  assert(f(lambda([x],(c:c+1,false)),[1,2]) = false),
  assert(c = 1),
  c : 0,
  assert(every(lambda([x],(c:c+1,false)),[1,2]) = false),
  assert(c = 2),
  true)$

okltest_everynary_s(f) := block([c2],
  assert(okltest_every_s(f) = true),
  assert(f("<",[],[]) = true),
  assert(f("<",[1,2],[2,3]) = true),
  assert(f("<",[1,2],[2,2]) = false),
  c : 0,
  assert(f(lambda([x,y],(c:c+1,is(x<y))),[1,2,3],[2,2,4]) = false),
  assert(c = 2),
  true)$

okltest_some_s(f) := (
  assert(f(identity,[]) = false),
  assert(f(identity,[false]) = false),
  assert(f(identity,[true]) = true),
  assert(f(identity,[true,false]) = true),
  assert(f(identity,[false,false]) = false),
  c : 0,
  assert(f(lambda([x],(c:c+1,true)),[1,2]) = true),
  assert(c = 1),
  c : 0,
  assert(every(lambda([x],(c:c+1,true)),[1,2]) = true),
  assert(c = 2),
  assert(okltest_every_s(buildq([f],lambda([p,L],not f(lambda([x],not p(x)),L))))),
  assert(okltest_every_s(buildq([f],lambda([_newpred,M],
    not f(lambda([x], not _newpred(x)), M))))),
  block(
   [localf : buildq([f],lambda([SetSys], f(lambda([S], not emptyp(S)), SetSys)))],
    assert(f(localf,[]) = false),
    assert(f(localf,[{{}}]) = false),
    assert(f(localf,[{{}},{{},{1}}]) = true)
  ),
  true)$

okltest_somenary_s(f) := block([c2],
  assert(okltest_some_s(f) = true),
  assert(f("<",[],[]) = false),
  assert(f("<",[1,2],[2,3]) = true),
  assert(f("<",[1,2],[2,2]) = true),
  assert(f("<",[3,2],[2,2]) = false),
  c : 0,
  assert(f(lambda([x,y],(c:c+1,is(x<y))),[1,2,3],[2,2,4]) = true),
  assert(c = 1),
  true)$

okltest_listnorep_p(f) := (
  assert(f(0) = false),
  assert(f({}) = false),
  assert(f([]) = true),
  assert(f([1]) = true),
  assert(f([1,2]) = true),
  assert(f([1,1]) = false),
  true)$

okltest_lconstant_p(f) := (
  assert(f([]) = true),
  assert(f([1]) = true),
  assert(f([[]]) = true),
  assert(f([1,1]) = true),
  assert(f([1,2]) = false),
  assert(f([1,[]]) = false),
  true)$

okltest_strictascending_p(f) := (
  assert(f([]) = true),
  assert(f([1]) = true),
  assert(f([1,2]) = true),
  assert(f([2,1]) = false),
  true)$

okltest_strictdescending_p(f) := (
  assert(okltest_strictascending_p(buildq([f],lambda([L],f(reverse(L))))) = true),
  assert(f([]) = true),
  assert(f([1]) = true),
  assert(f([1,2]) = false),
  assert(f([2,1]) = true),
  true)$

okltest_ascending_p(f) := (
  assert(f([]) = true),
  assert(f([1]) = true),
  assert(f([1,2]) = true),
  assert(f([2,1]) = false),
  assert(f([1,1]) = true),
  true)$

okltest_descending_p(f) := (
  assert(okltest_ascending_p(buildq([f],lambda([L],f(reverse(L))))) = true),
  assert(f([]) = true),
  assert(f([1]) = true),
  assert(f([1,2]) = false),
  assert(f([2,1]) = true),
  assert(f([2,2]) = true),
  true)$

okltest_prefix_p(f) := (
  assert(f([],[]) = true),
  assert(f([],[1]) = true),
  assert(f([1],[]) = false),
  assert(f([1],[1]) = true),
  assert(f([1],[2]) = false),
  assert(f([1],[2,1]) = false),
  assert(f([1],[1,2]) = true),
  assert(f([1,3,-9], [1,3,-9,5]) = true),
  assert(f([1,3,-9], [1,3,0,-9]) = false),
  assert(f([1,3,-9], [0,1,3,-9]) = false),
  true)$

/* *******************************************
   * Summations and products over lists/sets *
   *******************************************
*/

okltest_sum_l(f) := (
  assert(f([]) = 0),
  assert(f([1]) = 1),
  assert(f([1,2,0,1]) = 4),
  assert(okltest_sum_s(buildq([f],lambda([S],f(listify(S)))))),
  true)$

okltest_sum_s(f) := (
  assert(f({}) = 0),
  assert(f({1}) = 1),
  assert(f({1,2}) = 3),
  true)$

okltest_gsum_l(f) := (
  assert(f(lambda([x],x^2), [1,2]) = 5),
  assert(okltest_sum_l(buildq([f],lambda([L],f(identity,L))))),
  true)$

okltest_gsum_s(f) := (
  assert(f(lambda([x],x^2), {1,2}) = 5),
  assert(okltest_sum_s(buildq([f],lambda([S],f(identity,S))))),
  true)$

okltest_prod_l(f) := (
  assert(f([]) = 1),
  assert(f([1]) = 1),
  assert(f([1,2,3]) = 6),
  assert(okltest_prod_s(buildq([f],lambda([S],f(listify(S)))))),
  true)$

okltest_prod_s(f) := (
  assert(f({}) = 1),
  assert(f({1}) = 1),
  assert(f({1,2,3}) = 6),
  true)$

okltest_gprod_l(f) := (
  assert(f(lambda([x],x^2), [1,2]) = 4),
  assert(okltest_prod_l(buildq([f],lambda([L],f(identity,L))))),
  true)$

okltest_gprod_s(f) := (
  assert(f(lambda([x],x^2), {1,2}) = 4),
  assert(okltest_prod_s(buildq([f],lambda([S],f(identity,S))))),
  true)$


/* *************************************
   * Finding special elements in lists *
   *************************************
*/

okltest_first_smallest_l(f) := (
  assert(f([{}]) = {}),
  assert(f([{1},[]]) = []),
  assert(f([{1,2},[1],{2}]) = [1]),
  true)$

okltest_first_smallest_lb_l(f) := (
  assert(f([{1,2}],1) = {1,2}),
  assert(f([[1,2,3],{1,2,3,4},[1,2],[1,2,3]],2) = [1,2]),
  assert(okltest_first_smallest_l(buildq([f],lambda([L],f(L,0))))),
  true)$

okltest_first_smallest_f_l(f) := (
  assert(f(identity,[]) = [inf]),
  assert(f(identity,[1]) = [1,1]),
  assert(f(identity,[-1]) = [-1,-1]),
  assert(f(lambda([x],x*x),[2,-2]) = [4,2]),
  assert(f(lambda([x],x*x),[2,-2,1]) = [1,1]),
  assert(okltest_smallest_f_l(buildq([f], lambda([_f,L], block([res:f(_f,L)], if res = [inf] then inf else first(res))))) = true),
  true)$

okltest_first_largest_f_l(f) := (
  assert(f(identity,[]) = [minf]),
  assert(f(identity,[1]) = [1,1]),
  assert(f(identity,[-1]) = [-1,-1]),
  assert(f(lambda([x],x*x),[2,-1]) = [4,2]),
  assert(f(lambda([x],x*x),[2,-2,3]) = [9,3]),
  assert(okltest_largest_f_l(buildq([f], lambda([_f,L], block([res:f(_f,L)], if res = [minf] then minf else first(res))))) = true),
  true)$

okltest_smallest_f_l(f) := block([F],
  assert(f(F,[]) = inf),
  assert(f(identity,[3,2,1]) = 1),
  assert(f(lambda([x],x^2), [-3,1,2]) = 1),
  assert(f(lambda([x],x^2), [-5,2,3]) = 4),
  if oklib_test_level = 0 then return(true),
  assert(f(lambda([x],x^2), create_list(x,x,-50000,50000)) = 0),
  true)$

okltest_largest_f_l(f) := block([F],
  assert(f(F,[]) = minf),
  assert(f(identity,[3,2,1]) = 3),
  assert(f(lambda([x],x^2), [-3,1,2]) = 9),
  if oklib_test_level = 0 then return(true),
  assert(f(lambda([x],x^2), create_list(x,x,-50000,50000)) = 50000^2),
  true)$

okltest_find_first_l(f) := ([pred],
  assert(f(pred,[]) = inf),
  assert(f(evenp,[1]) = inf),
  assert(f(evenp,[2]) = 1),
  assert(f(evenp,[1,3,5,1]) = inf),
  assert(f(evenp,[2,4,6,2]) = 1),
  assert(f(evenp,[1,3,5,2,4,6,2]) = 4),
  assert(f(evenp,[1,3,4]) = 3),
  true)$

okltest_find_last_l(f) := ([pred],
  assert(f(pred,[]) = minf),
  assert(f(evenp,[1]) = minf),
  assert(f(evenp,[2]) = 1),
  assert(f(evenp,[1,3,5,1]) = minf),
  assert(f(evenp,[2,4,6,2]) = 4),
  assert(f(evenp,[1,3,5,2,4,6,2]) = 7),
  assert(f(evenp,[2,1,3,5]) = 1),
  true)$

okltest_elementp_l(f) := block([x],
  assert(f(x,[]) = false),
  assert(f(x,[1]) = false),
  assert(f(x,[x]) = true),
  assert(f(1,[0,2,3,1,4]) = true),
  assert(f(1,[0,2,3,4,1]) = true),
  assert(f(1,[1,2,3,4]) = true),
  assert(f(1,[0,2,3,4]) = false),
  true)$


/* **************************
   * Sublist constructions *
   **************************
*/

okltest_take_elements(f) := (
  assert(f(0,[]) = []),
  assert(f(0,[1,2]) = []),
  assert(f(1,[1,2]) = [1]),
  assert(f(2,[1,2]) = [1,2]),
  assert(f(3,[1,2]) = [2]),
  assert(f(4,[1,2]) = []),
  block([L1,L2],
   L1 : [1,2,3],
   L2 : f(2,L1),
   assert(L2 = [1,2]),
   L2[1] : 77,
   assert(L1 = [1,2,3])),
  true)$

okltest_sublist_indices_el(f) := (
  assert(f([],1) = []),
  assert(f([1],1) = [1]),
  assert(f([1],2) = []),
  assert(f([1,2,3,1],1) = [1,4]),
  true)$

okltest_remove_element(f) := (
  assert(f(1,[1]) = []),
  assert(f(1,[1,2]) = [2]),
  assert(f(2,[1,2]) = [1]),
  block([L1,L2],
   L1 : [1,2,3],
   L2 : f(2,L1),
   assert(L2 = [1,3]),
   L2[1] : 77,
   assert(L1 = [1,2,3])),
  true)$

okltest_remove_elements(f) := block([L],
  assert(f([],L) = L),
  assert(f([1],[]) = []),
  assert(f([1],[1]) = []),
  assert(f([1],[1,1,2,1,2]) = [2,2]),
  assert(f([1,2,3],[1,4,2,1,5,2]) = [4,5]),
  true)$

okltest_sublist_indicator(f) := (
  assert(f([],okl_make_array(fixnum,0)) = []),
  assert(f([],okl_make_array(fixnum,1)) = []),
  assert(f([1],okl_make_array(fixnum,1)) = [1]),
  assert(f([1,2],okl_make_array(fixnum,2)) = [1,2]),
  block([A : okl_make_array(fixnum,4)],
   assert(f([1,2,3,4],A) = [1,2,3,4]),
   A[1] : 1,
   assert(f([1,2,3,4],A) = [2,3,4]),
   A[4] : 2,
   assert(f([1,2,3,4],A) = [2,3]),
   A[2] : -1,
   assert(f([1,2,3,4],A) = [3]),
   A[3] : 6,
   assert(f([1,2,3,4],A) = [])
  ),
  block([L : [1,2,3], A : okl_make_array(fixnum,3), L2],
   A[2] : 1,
   L2 : f(L,A),
   assert(L2 = [1,3]),
   L2[1] : 77,
   assert(L[1] = 1)
  ),
  true)$

okltest_remove_consrep(f) := (
  assert(f([]) = []),
  assert(f([1]) = [1]),
  assert(f([1,1]) = [1]),
  assert(f([1,1,2]) = [1,2]),
  assert(f([1,2,2]) = [1,2]),
  assert(f([1,1,2,1,2,2,3,1,2,4,4,3,3,2,2,2,1,1,1,1,4]) = [1,2,1,2,3,1,2,4,3,2,1,4]),
  true)$


/* *********************
   * List partitioning *
   *********************
*/

okltest_partition_elements(f) := (
  for n : 1 thru 3 do
    assert(f([],n) = []),
  for n : 1 thru 3 do
    assert(f([1],n) = [[1]]),
  for n : 1 thru 3 do
    assert(f([1,2],n) = if n=1 then [[1],[2]] else [[1,2]]),
  block([L1,L2],
   L1 : [1,2,3],
   L2 : f(L1,2),
   assert(L2 = [[1,2],[3]]),
   L2[1] : 77,
   assert(L1 = [1,2,3])),
  true)$

okltest_partition_list(f) := block([P],
  assert(f([],P) = [[],[]]),
  assert(f([1,1],evenp) = [[],[1,1]]),
  assert(f([1,3,4,6],evenp) = [[4,6],[1,3]]),
  assert(f([1,2,3,4,5],oddp) = [[1,3,5],[2,4]]),
  for n : 0 thru 6 do block([L : create_list(1,i,1,n), res],
    res : f(L,evenp),
    assert(res = [[],L]),
    assert(f(L,oddp) = reverse(res))
  ),
  for n : 0 thru 6 do block([L : create_list(i,i,1,n), res],
    res : f(L,evenp),
    assert(res = [create_list(2*i,i,1,floor(n/2)), create_list(2*i+1,i,0,if evenp(n) then n/2-1 else (n-1)/2)]),
    assert(f(L,oddp) = reverse(res))
  ),
  true)$

okltest_partition_list_eq(f) := block(
  assert(f([],lambda([x],x)) = []),
  assert(f([1,2,3,4,5],lambda([x],x)) = [[1],[2],[3],[4],[5]]),
  assert(f([1,2,3,4,5],lambda([x],0)) = [[1,2,3,4,5]]),
  assert(f([1,2,3,4,5],lambda([x],floor(x/2))) = [[1],[2,3],[4,5]]),
  assert(f([1,2,3,4,5],lambda([x],ceiling(x/2))) = [[1,2],[3,4],[5]]),
  true)$

okltest_split_list(f) := block(
  assert(f([],1) = [[]]),
  assert(f([1],1) = [[],[]]),
  assert(f([1,1],1) = [[],[],[]]),
  assert(f([1,2,3,0,4,5,6,0,7,8,9],0) = [[1,2,3],[4,5,6],[7,8,9]]),
  true)$

okltest_split_list_epo(f) := block(
  assert(okltest_split_list(
      buildq([f], lambda([L,e],
          f(L, buildq([e],lambda([a], is(a = e)))))))),
  assert(f([1,3,5,0,7,9,11,2,13,15,17,4,19], evenp) =
    [[1,3,5],[7,9,11],[13,15,17],[19]]),
  true)$

/* **********************
   * List constructions *
   **********************
*/

okltest_rotate(f) := (
  assert(f([1,2,3],1) = [3,1,2]),
  assert(f([1,2,3],2) = [2,3,1]),
  for n : -3 thru 3 do
    assert(f([],n) = []),
  for n : -3 thru 3 do
    assert(f([1,2,3],3*n) = [1,2,3]),
  for n : -3 thru 3 do
    assert(f([1,2,3],n) = f([1,2,3],-3+n)),
  block([L1,L2],
   L1 : [1,2,3],
   L2 : f(L1,2),
   assert(L2 = [2,3,1]),
   L2[1] : 77,
   assert(L1 = [1,2,3])),
  true)$

okltest_stable_unique(f) := (
  assert(f([]) = []),
  assert(f([1]) = [1]),
  assert(f([1,2]) = [1,2]),
  assert(f([2,1]) = [2,1]),
  assert(f([1,1]) = [1]),
  assert(f([1,2,3]) = [1,2,3]),
  assert(f([2,1,3]) = [2,1,3]),
  assert(f([1,3,2]) = [1,3,2]),
  assert(f([1,2,1]) = [1,2]),
  assert(f([2,2,1]) = [2,1]),
  assert(f([3,1,1]) = [3,1]),
  assert(f([1,1,3]) = [1,3]),
  assert(f([1,1,1]) = [1]),
  assert(f([1,2,3,4,1,5,2,6,3,7,4,8,5]) = [1,2,3,4,5,6,7,8]),
  true)$

/* *************************
   * Random parts of lists *
   *************************
*/

/* ************************
   * Numerical operations *
   ************************
*/

okltest_count_l(f) := (
  assert(f(0,[]) = 0),
  assert(f(0,[1]) = 0),
  assert(f(0,[0]) = 1),
  assert(f(0,[1,2,0,0,1,-1,0,3]) = 3),
  true)$

okltest_countpred_l(f) := (
  assert(f(identity,[]) = 0),
  assert(f(evenp,[0,2,3,4,5]) = 3),
  assert(okltest_count_l(buildq([f], lambda([x,L], f(lambda([y],is(y=x)),L)))) = true),
  true)$

okltest_countntconst_l(f) := (
  assert(f(0,[]) = 0),
  assert(f(0,[0]) = 0),
  assert(f(0,[0,0]) = 1),
  assert(f(0,[0,0,0,1,0,0,1,2,2,1,1,0]) = 2),
  true)$

okltest_size_constintervals_l(f) := (
  assert(f([]) = []),
  assert(f([0]) = [1]),
  assert(f([0,0]) = [2]),
  assert(f([0,1,1,0,0,2,2,1,0]) = [1,2,2,2,1,1]),
  true)$

okltest_Delta_l(f) := (
  assert(f([]) = []),
  assert(f([7]) = []),
  assert(f([1,3]) = [2]),
  assert(f([1,4,7,9,2,0]) = [3,3,2,-7,-2]),
  true)$

okltest_count_extremals_l(f) := (
  assert(f([]) = 0),
  assert(f([0]) = 1),
  assert(f([0,0]) = 1),
  assert(f([0,0,1]) = 2),
  assert(f([0,0,1,1,2]) = 2),
  assert(f([0,0,1,1,2,2,3,4,5]) = 2),
  assert(f([0,0,1,1,2,2,3,4,5,5,4]) = 3),
  assert(f([0,0,1,1,2,2,3,4,5,5,4,3,-1]) = 3),
  assert(f([0,0,1,1,2,2,3,4,5,5,4,3,-1,-1,0,0,6]) = 4),
  true)$

okltest_m2l_r(f) := (
  assert(f(matrix([])) = []),
  assert(f(matrix([1,2,3])) = [1,2,3]),
  assert(f(matrix([1,2,3],[4,5,6])) = [1,2,3,4,5,6]),
  assert(f(matrix([1,2,3],[4,5,6],[7,8,9])) = [1,2,3,4,5,6,7,8,9]),
  assert(f([]) = []),
  assert(f([[]]) = []),
  assert(f([[1,2,3]]) = [1,2,3]),
  assert(f([[1,2,3],[4,5,6]]) = [1,2,3,4,5,6]),
  assert(f([[1,2,3],[4,5,6],[7,8,9]]) = [1,2,3,4,5,6,7,8,9]),
  assert(f([[1,2,3],[4,5,6],[7,8,9],[]]) = [1,2,3,4,5,6,7,8,9]),
  assert(f([[1,2,3],[4,5,6],[7,8,9],[10]]) = [1,2,3,4,5,6,7,8,9,10]),
  true)$

okltest_transpose_l(f) := (
  for i : 0 thru 5 do
    assert(f([],i) = []),
  assert(f([1,2,3,4],1) = [1,2,3,4]),
  assert(f([1,2,3,4],2) = [1,3,2,4]),
  assert(f([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],4) = [1,5,9,13,2,6,10,14,3,7,11,15,4,8,12,16]), 
  true)$

okltest_matrixcolumns(f) := (
  assert(f(matrix()) = []),
  assert(f(matrix([1],[2],[3])) = [[1,2,3]]),
  assert(f(matrix([1,2,3])) = [[1],[2],[3]]),
  assert(f(matrix([1,2,3],[4,5,6])) = [[1,4],[2,5],[3,6]]),
  assert(f(matrix([1,2,3],[4,5,6],[7,8,9])) = [[1,4,7],[2,5,8],[3,6,9]]),
  true)$

okltest_columns2matrix(f) := (
  assert(f([]) = matrix()),
  assert(f([[1,2,3]]) = matrix([1],[2],[3])),
  assert(f([[1],[2],[3]]) = matrix([1,2,3])),
  assert(f([[1,4],[2,5],[3,6]]) = matrix([1,2,3],[4,5,6])),
  assert(f([[1,4,7],[2,5,8],[3,6,9]]) = matrix([1,2,3],[4,5,6],[7,8,9])),
  true)$


/* ***********
   * Sorting *
   ***********
*/

okltest_sort_length(f) := (
  assert(f([]) = []),
  for n : 0 thru 5 do block([L : create_list(setn(i),i,1,n)],
    assert(f(reverse(L)) = L)
  ),
  assert(f([{1,2},{2,3}]) = [{1,2},{2,3}]),
  true)$

okltest_sort_length_desc(f) := (
  /* XXX */
  true)$

okltest_sort_length_part(f) := block([x,y],
  assert(f([]) = []),
  assert(f([{}]) = [[{}]]),
  assert(f([[x],[y],[x,y]]) = [[[x],[y]],[[x,y]]]),
  assert(f([[x,y],[x],[y]]) = [[[x],[y]],[[x,y]]]),
  assert(f([{1,2,3},{1,2},{4,5,6},{2,3},{1},{}]) = [[{}],[{1}],[{1,2},{2,3}],[{1,2,3},{4,5,6}]]),
  true)$

okltest_sort_length_desc_part(f) := block([x,y],
  assert(f([]) = []),
  assert(f([{}]) = [[{}]]),
  assert(f([[x],[y],[x,y]]) = [[[x,y]],[[x],[y]]]),
  assert(f([[x,y],[x],[y]]) = [[[x,y]],[[x],[y]]]),
  assert(f([{1,2,3},{1,2},{4,5,6},{2,3},{1},{}]) = [[{1,2,3},{4,5,6}],[{1,2},{2,3}],[{1}],[{}]]),
  true)$

okltest_l2order_p(f) := block(
  assert(f([])(1,2) = und),
  assert(f([1])(1,1) = true),
  assert(f([1])(1,2) = und),
  assert(f([1])(2,1) = und),
  assert(f([1,2])(1,2) = true),
  assert(f([1,2])(1,1) = true),
  assert(f([1,2])(2,2) = true),
  assert(f([1,2])(2,1) = false),
  assert(f([1,2,3,4])(1,2) = true),
  assert(f([1,2,3,4])(2,3) = true),
  assert(f([1,2,3,4])(3,4) = true),
  assert(f([1,2,3,4])(2,4) = true),
  assert(f([1,2,3,4])(1,4) = true),
  assert(f([1,2,3,4])(2,1) = false),
  assert(f([1,2,3,4])(4,4) = true),
  assert(f([1,2,3,4])(4,2) = false),
  true)$



/*!
\endhtmlonly
*/
