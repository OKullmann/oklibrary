/* Oliver Kullmann, 3.7.2018 (Swansea) */
/* Copyright 2018, 2019 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Graphs/Lisp/ChessGraphs/BasicNotions.mac
  \brief Functions regarding chess-related notions

Use by

oklib_load("OKlib/ComputerAlgebra/Graphs/Lisp/ChessGraphs/BasicNotions.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Constructions.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/LinearEquations.mac")$
oklib_include("OKlib/ComputerAlgebra/NumberTheory/Lisp/Numbering.mac")$


/* The N-Queens graph and SAT-representation */

kill(qv)$
declare(qv, noun)$
declare(qv, posfun)$
qv_var([x]) := apply(nounify(qv),x)$

/* Whether there is some N >= 0 such that S is a partial solution of the
   N-queens problem for N (in the sense of non-attacking),
   using pairs [i,j] for queens-positions (indices 1-based):
*/
partialsol_nqueens_p(S) := setp(S) and every_s(lambda([p], listp(p) and
  length(p)=2 and naturalp(first(p)) and naturalp(second(p))), S) and
  every_s(lambda([P], block([p1:first(P),p2:second(P)], first(p1)#first(p2)
    and second(p1)#second(p2) and
    abs(first(p1)-first(p2))#abs(second(p1)-second(p2)))), powerset(S,2))$
/*
partialsol_nqueens_p({[1,1],[3,2]});
  true
partialsol_nqueens_p({[1,1],[3,3]});
  false
partialsol_nqueens_p({[1,2],[2,4],[3,1],[4,3]});
  true
*/

/* Translate a set of pairs [i,j] into variables qv(i,j): */
qvmap(SP) := map(lambda([p], apply(qv_var,p)), SP)$

/* Transform a set V of variables qv(i,j) to the corresponding
   set of pairs [i,j]:
*/
nqueens_extrpairs(V) := map(lambda([v], [first(v),second(v)]), V)$

/* Translate a solution as a set of pairs into a DNF-clause: */
extendsol_nqueens(S) := block([N:lmax(map(first,S)),D],
  D : setdifference(all_tuples(setn(N),2),S), union(qvmap(S), comp_sl(qvmap(D))))$
/*
extendsol_nqueens({[1,2],[2,4],[3,1],[4,3]});
  {-qv(1,1),qv(1,2),-qv(1,3),-qv(1,4),-qv(2,1),-qv(2,2),-qv(2,3),qv(2,4),
   qv(3,1),-qv(3,2),-qv(3,3),-qv(3,4),-qv(4,1),-qv(4,2),qv(4,3),-qv(4,4)}
*/
/* The inverse, just keeping the positive literals (but as variables qv(i,j),
   not as pairs [i,j]): */
shrinksol_nqueens(S) := pospart_c(S)$
/*
shrinksol_nqueens(extendsol_nqueens({[1,2],[2,4],[3,1],[4,3]}));
  {qv(1,2),qv(2,4),qv(3,1),qv(4,3)}
*/

/* For a set V of variables, the clause expressing "at most one (AMO) of them":
*/
amo_cs(V) := comp_cs(powerset(V,2))$
/*
amo_cs({});
  {}
amo_cs({1,2});
  {{-2,-1}}
amo_cs({1,2,3});
  {{-3,-2},{-3,-1},{-2,-1}}
*/

/* For a lset V of variables the clauses expressing "all or none of them": */
allequal_cs(V) := if length(V) <= 1 then {} else block([res:[], L:listify(V)],
  for i : 1 thru length(L)-1 do res:cons({-L[i],L[i+1]},res),
  res:cons({-last(L),first(L)},res), setify(res))$
/* This can be established by an SD (strong digraph) between
   the elements of V. The cycle uses the minimal number of arcs.
*/

/* The equivalence relations on the pairs [i,j] as well as on variables
   qv(i,j) as fundamental for the Queens-graph and Queens-constraints:
*/
samerow_p(p1,p2) := is(first(p1) = first(p2))$
samecolumn_p(p1,p2) := is(second(p1) = second(p2))$
samediag_p(p1,p2) := is(second(p1)-first(p1) = second(p2)-first(p2))$
sameantidiag_p(p1,p2) := is(second(p1)+first(p1) = second(p2)+first(p2))$

/* The Queens-graph for a general rectangle: */
queens_g(N,M) :=  block([SQ : cartesian_product(setn(N),setn(M))],
  [SQ, union(
     lunion(map(lambda([K],powerset(K,2)),equiv_classes(SQ, samerow_p))),
     lunion(map(lambda([K],powerset(K,2)),equiv_classes(SQ, samecolumn_p))),
     lunion(map(lambda([K],powerset(K,2)),equiv_classes(SQ, samediag_p))),
     lunion(map(lambda([K],powerset(K,2)),equiv_classes(SQ, sameantidiag_p))))])$

/* The min(N,M)-Queens problem, using binary amo-clauses for rows, columns,
   diagonals and antidiagonals, and alo clauses for the dimension for the
   min(N,M) is attained (both for N=M):
*/
nqueens_fcs(N,M) := block([SQ : qvmap(cartesian_product(setn(N),setn(M)))],
  [SQ, union(
     lunion(map(amo_cs, equiv_classes(SQ, samerow_p))),
     lunion(map(amo_cs, equiv_classes(SQ, samecolumn_p))),
     lunion(map(amo_cs, equiv_classes(SQ, samediag_p))),
     lunion(map(amo_cs, equiv_classes(SQ, sameantidiag_p))),
     if N<=M then equiv_classes(SQ, samerow_p) else {},
     if M<=N then equiv_classes(SQ, samecolumn_p) else {}
   )])$
nqueens_cs(N,M) := fcs2cs(nqueens_fcs(N,M))$

/* The N-rooks problem: */

/* Assuming N <= M, amo for columns, alo for rows: */
nrooks_weak_fcs(N,M) := block([SQ : qvmap(cartesian_product(setn(N),setn(M)))],
  [SQ, union(
     lunion(map(amo_cs, equiv_classes(SQ, samecolumn_p))),
     equiv_classes(SQ, samerow_p)
   )])$
nrooks_weak_cs(N,M) := fcs2cs(nrooks_weak_fcs(N,M))$

nrooks_weak_seco_fcl(N) := block([
 SQ : qvmap(cartesian_product(setn(N),setn(N))), F : [],
 naux : naux_secoamo(N), nextaux : N+1],
  for C in equiv_classes(SQ, samecolumn_p) do (
    F : append(F, seco_amov2cl(listify(C), create_list(i,i,nextaux,nextaux+naux-1))),
    nextaux : nextaux + naux
  ),
 [append(listify(SQ), create_list(i,i, N+1, N + N*naux)),
  append(F,listify(equiv_classes(SQ, samerow_p)))])$


standardise_qv(T) := block(
 ev(T, qv(i,j) := rank_squarenumbering(i,j), qv))$
invstandardise_qv(n) := enum_squarenumbering(n)$

/* For N#M we allow gaps: */
nqueens_stdfcs(N,M) := standardise_qv(nqueens_fcs(N,M))$
nrooks_weak_stdfcs(N,M) := standardise_qv(nrooks_weak_fcs(N,M))$

/* Output the direct translation to a file (now without gaps for the
   variable-numbering): */
output_nqueens(N,M,filename) := block(
 [FF : standardise_fcs(nqueens_stdfcs(N,M))[1]],
  output_fcs_v(
    sconcat("N-Queens SAT with N = ", N, " and M = ", M, ".", newline, "c ", "Created by output_nqueens(", N, ",", M, ",\"", filename, "\").", newline, "c ", created_by_OKlib()),
    FF,
    filename,
    []))$
/* Providing a standard name: "NQueens_N_M.cnf": */
output_nqueens_stdname(N,M) := output_nqueens(N,M,
  sconcat("NQueens_",N,"_",M,".cnf"))$

/* Output the direct translation to a file (now without gaps for the
   variable-numbering): */
output_nrooks_weak(N,M,filename) := block(
 [FF : standardise_fcs(nrooks_weak_stdfcs(N,M))[1]],
  output_fcs_v(
    sconcat("N-Rooks SAT with N = ", N, " and M = ", M, ".", newline, "c ", "Created by output_nqueens_weak(", N, ",", M, ",\"", filename, "\").", newline, "c ", created_by_OKlib()),
    FF,
    filename,
    []))$
/* Providing a standard name: "NRooks_weak_N_M.cnf": */
output_nrooks_weak_stdname(N,M) := output_nrooks_weak(N,M,
  sconcat("NRooks_weak_",N,"_",M,".cnf"))$


/* Now forcing the rotational resp. just the point-symmetries: */
nqueens_rot_fcs(N) := block([F : nqueens_fcs(N,N),
  SQ : cartesian_product(setn(N),setn(N))],
  SQ : equiv_classes(SQ, lambda([x,y],nqueens_rot_p(x,y,N))),
  SQ : map(qvmap, SQ),
 [first(F), union(second(F), lunion(map(allequal_cs, SQ)))])$
nqueens_psym_fcs(N) := block([F : nqueens_fcs(N,N),
  SQ : cartesian_product(setn(N),setn(N))],
  SQ : equiv_classes(SQ, lambda([x,y],nqueens_psym_p(x,y,N))),
  SQ : map(qvmap, SQ),
 [first(F), union(second(F), lunion(map(allequal_cs, SQ)))])$

nqueens_rot_stdfcs(N) := standardise_qv(nqueens_rot_fcs(N))$
nqueens_psym_stdfcs(N) := standardise_qv(nqueens_psym_fcs(N))$

/* Output the direct translation to a file: */
output_nqueens_rot(N,filename) := block(
 [FF : nqueens_rot_stdfcs(N)],
  output_fcs_v(
    sconcat("N-Queens SAT with rotational symmetry and N = ", N, ".", newline, "c ", "Created by output_nqueens_rot(", N, ",\"", filename, "\").", newline, "c ", created_by_OKlib()),
    FF,
    filename,
    []))$
/* Providing a standard name: "NQueens_rot_N.cnf": */
output_nqueens_rot_stdname(N) := output_nqueens_rot(N,
  sconcat("NQueens_rot_",N,".cnf"))$
output_nqueens_psym(N,filename) := block(
 [FF : nqueens_psym_stdfcs(N)],
  output_fcs_v(
    sconcat("N-Queens SAT with point-symmetry and N = ", N, ".", newline, "c ", "Created by output_nqueens_psym(", N, ",\"", filename, "\").", newline, "c ", created_by_OKlib()),
    FF,
    filename,
    []))$
/* Providing a standard name: "NQueens_psym_N.cnf": */
output_nqueens_psym_stdname(N) := output_nqueens_psym(N,
  sconcat("NQueens_psym_",N,".cnf"))$


/* Symmetries */

/* Transforming an N-queens-clause C into a square combinatorial matrix: */
queenscl2scom(C,N) := [setn(N), lambda([i,j], if elementp(qv_var(i,j),C) then +1 elseif elementp(-qv_var(i,j),C) then -1 else 0)]$
/* Now into a Maxima matrix: */
queenscl2m(C,N) := scom2m(queenscl2scom(C,N))$

/* Checking whether a clause lies completely in some row or column: */
isrowcolumn_p(C) := block([V:var_c(C)], is(length(map(first,V))=1) or
  is(length(map(second,V))=1))$
isnotrowcolumn_p(C) := not isrowcolumn_p(C)$

/* The eight standard symmetries: */
/* First the two generating symmetries: */
nqueens_rotate(i,j,N) := [N-j+1,i]$
/* For a point p: */
nqueens_rotate_p(p,N) := nqueens_rotate(first(p),second(p),N)$
nqueens_hmirror(i,j,N) := [N-i+1,j]$
nqueens_hmirror_p(p,N) := nqueens_hmirror(first(p),second(p),N)$
/* Now the m-times rotated versions ("iterated"): */
/* Rotation by m*90 degrees: */
nqueens_irotate(i,j,N,m) := block([p:[i,j]], thru mod(m,4) do p : nqueens_rotate(first(p),second(p),N), p)$
nqueens_irotate_p(p,N,m) := (thru mod(m,4) do p : nqueens_rotate_p(p,N), p)$
/* Mirroring at horizontal midline, antidiagonal, vertical midline, diagonal: */
nqueens_ihmirror(i,j,N,m) := block([p:nqueens_hmirror(i,j,N)],
  nqueens_irotate(first(p),second(p),N,m))$
nqueens_ihmirror_p(p,N,m) := (p:nqueens_hmirror_p(p,N), nqueens_irotate_p(p,N,m))$
/* Versions for sets S of points: */
nqueens_rotate_s(S,N) := map(lambda([p],nqueens_rotate_p(p,N)), S)$
nqueens_irotate_s(S,N,m) := map(lambda([p],nqueens_irotate_p(p,N,m)), S)$
nqueens_hmirror_s(S,N) := map(lambda([p],nqueens_hmirror_p(p,N)), S)$
nqueens_ihmirror_s(S,N,m) := map(lambda([p],nqueens_ihmirror_p(p,N,m)), S)$

/* The orbit of point [i,j]: */
nqueens_orbit(i,j,N) := setify(append(
  create_list(nqueens_irotate(i,j,N,m),m,0,3),
  create_list(nqueens_ihmirror(i,j,N,m),m,0,3)))$
nqueens_orbit_p(p,N) := setify(append(
  create_list(nqueens_irotate_p(p,N,m),m,0,3),
  create_list(nqueens_ihmirror_p(p,N,m),m,0,3)))$
/* The orbit under the four rotations: */
nqueens_orbit_rot(i,j,N) := setify(
  create_list(nqueens_irotate(i,j,N,m),m,0,3))$
nqueens_orbit_rot_p(p,N) := setify(
  create_list(nqueens_irotate_p(p,N,m),m,0,3))$
/* The orbit under the rotation by 180 degrees ("point-symmetry"): */
nqueens_orbit_psym(i,j,N) := setify(
  create_list(nqueens_irotate(i,j,N,m),m,[0,2]))$
nqueens_orbit_psym_p(p,N) := setify(
  create_list(nqueens_irotate_p(p,N,m),m,[0,2]))$
/* The orbit of a set S of points: */
nqueens_orbit_s(S,N) := setify(append(
  create_list(nqueens_irotate_s(S,N,m),m,0,3),
  create_list(nqueens_ihmirror_s(S,N,m),m,0,3)))$

/* Extend map f_(i,j), implicitly defined on variables qv(i,j), to literals: */
nqueens_extvarlit(f_,x) := block([i,j,p], if posp(x) then (i:first(x),j:second(x),p:f_(i,j),qv_var(first(p),second(p))) else (i:first(-x),j:seccond(-x),p:f_(i,j),-qv_var(first(p),second(p))))$

/* Testing whether points p1, p2 are equivalent due to point-symmetry: */
nqueens_psym_p(p1,p2,N) := p1=p2 or nqueens_irotate_p(p1,N,2)=p2$
/* Now under rotational symmetry: */
nqueens_rot_p(p1,p2,N) := elementp(p2, nqueens_orbit_rot_p(p1,N))$

/* Testing whether clauses C, D are isomorphic (there is a symmetry mapping, which transforms C to D): */
nqueens_isoc_p(C,D,N) := block(
 [PC:nqueens_extrpairs(pospart_c(C)), NC:nqueens_extrpairs(comp_sl(negpart_c(C))),
  PD:nqueens_extrpairs(pospart_c(D)), ND:nqueens_extrpairs(comp_sl(negpart_c(D))),
  solved:false],
  if length(PC)#length(PD) or length(NC)#length(ND) then return(false),
  thru 4 do (PC:nqueens_rotate_s(PC,N), NC:nqueens_rotate_s(NC,N),
    if PC=PD and NC=ND then (solved:true, return(true))),
  if solved then return(true),
  PC:nqueens_hmirror_s(PC,N), NC:nqueens_hmirror_s(NC,N),
  thru 4 do (PC:nqueens_rotate_s(PC,N), NC:nqueens_rotate_s(NC,N),
    if PC=PD and NC=ND then (solved:true, return(true))),
  if solved then return(true) else return(false))$



/* White and black squares (vertices/variables): */
blacksq_p(p) := evenp(first(p) + second(p))$
whitesq_p(p) := oddp(first(p) + second(p))$

/* The constraint that the number of white queens/rooks is odd/even, using variables
   max(N,M)^2+1, ..., as auxiliary variables:
*/
oddwhitequeens_fcs(N,M) := if N*M <= 1 then [{},{{}}] else block(
 [n : max(N,M)^2,
  W : qvmap(cartesian_product(setn(N), setn(M))), X, s, V],
  W : subset(W, whitesq_p),
  s : first(W), X : disjoin(s,W), X : adjoin(-s,X),
  V : create_list(n+i,i,1,length(W)-2),
  [union(W,setify(V)), setify(prt2cl_aux_1(listify(X), V))])$

/* Literal x is equivalent to clause C: */
equiv_litcl_cs(x,C) := adjoin(adjoin(-x,C), setify(create_list({x,-y},y,listify(C))))$

/* Directly using the standard numbering: */
oddwhiterooks_stdfcs(N) := if N<=1 then [{},{{}}] else block(
 [n : N^2,
  W : subset(setn(N^2),evenp), X, s, V],
  s : first(W), X : disjoin(s,W), X : adjoin(-s,X),
  V : create_list(n+i,i,1,length(W)-2),
  [union(W,setify(V)), setify(prt2cl_aux_1(listify(X), V))])$
/* Using fewer variables, due to amo for the columns, i.e., variable N^2+i
   is true iff column i contains a white rook: */
oddwhiterooks_amo_fcs(N) := if N<=1 then [{},{{}}] else block(
 [n : N^2,
  SQ : subset(qvmap(cartesian_product(setn(N),setn(N))), whitesq_p),
  columns, V1, V2],
  columns :  sort(listify(equiv_classes(SQ, samecolumn_p)), lambda([C1,C2],is(second(first(C1)) < second(first(C2))))),
  V1 : create_list(n+i,i,1,N),
  V2 : create_list(n+N+i,i,1,N-2),
  [setify(append(V1,V2)), union(
     lunion(create_list(equiv_litcl_cs(V1[i],columns[i]),i,1,N)),
     setify(prt2cl_aux_1(cons(-(n+1),rest(V1)),V2)))])$
oddblackrooks_amo_fcs(N,offset) := if N<=1 then [{},{{}}] else block(
 [SQ : subset(qvmap(cartesian_product(setn(N),setn(N))), blacksq_p),
  columns, V1, V2],
  columns :  sort(listify(equiv_classes(SQ, samecolumn_p)), lambda([C1,C2],is(second(first(C1)) < second(first(C2))))),
  V1 : create_list(offset+i,i,1,N),
  V2 : create_list(offset+N+i,i,1,N-2),
  [setify(append(V1,V2)), union(
     lunion(create_list(equiv_litcl_cs(V1[i],columns[i]),i,1,N)),
     setify(prt2cl_aux_1(cons(-(offset+1),rest(V1)),V2)))])$
evenblackrooks_amo_fcs(N,offset) := if N<=1 then [{},{{}}] else block(
 [n : N^2,
  SQ : subset(qvmap(cartesian_product(setn(N),setn(N))), blacksq_p),
  columns, V1, V2],
  columns :  sort(listify(equiv_classes(SQ, samecolumn_p)), lambda([C1,C2],is(second(first(C1)) < second(first(C2))))),
  V1 : create_list(offset+i,i,1,N),
  V2 : create_list(offset+N+i,i,1,N-2),
  [setify(append(V1,V2)), union(
     lunion(create_list(equiv_litcl_cs(V1[i],columns[i]),i,1,N)),
     setify(prt2cl_aux_1(V1,V2)))])$

evenwhitequeens_fcs(N,M) := if N*M <= 1 then [{},{}] else block(
 [n : max(N,M)^2,
  W : qvmap(cartesian_product(setn(N), setn(M))), V],
  W : subset(W, whitesq_p),
  V : create_list(n+i,i,1,length(W)-2),
  [union(W,setify(V)), setify(prt2cl_aux_1(listify(W), V))])$
oddblackqueens_fcs(N,M,offset) := if N*M = 0 then [{},{{}}] else block(
 [B : qvmap(cartesian_product(setn(N), setn(M))), X, s, V],
  B : subset(B, blacksq_p),
  s : first(B), X : disjoin(s,B), X : adjoin(-s,X),
  V : create_list(offset+i,i,1,length(B)-2),
  [union(B,setify(V)), setify(prt2cl_aux_1(listify(X), V))])$
evenblackqueens_fcs(N,M,offset) := if N*M = 0 then [{},{}] else block(
 [B : qvmap(cartesian_product(setn(N), setn(M))), V],
  B : subset(B, blacksq_p),
  V : create_list(offset+i,i,1,length(B)-2),
  [union(B,setify(V)), setify(prt2cl_aux_1(listify(B), V))])$

/* The N-Queens/Rooks problems with the even/odd constraints: */
nqueens_oddwhite_stdfcs(N,M) := block(
 [F1 : nqueens_stdfcs(N,M), F2 : standardise_qv(oddwhitequeens_fcs(N,M))],
 [union(first(F1), first(F2)), union(second(F1), second(F2))])$
nqueens_evenwhite_stdfcs(N,M) := block(
 [F1 : nqueens_stdfcs(N,M), F2 : standardise_qv(evenwhitequeens_fcs(N,M))],
 [union(first(F1), first(F2)), union(second(F1), second(F2))])$

nrooks_weak_oddwhite_stdfcs(N,M) := block(
 [F1 : nrooks_weak_stdfcs(N,M), F2 : standardise_qv(oddwhitequeens_fcs(N,M))],
 [union(first(F1), first(F2)), union(second(F1), second(F2))])$
/* Seems to be MU for N notin {1,3}: */
nrooks_weak_oddwhite_amo_stdfcs(N) := block(
 [F1 : nrooks_weak_stdfcs(N,N), F2 : standardise_qv(oddwhiterooks_amo_fcs(N))],
 [union(first(F1), first(F2)), union(second(F1), second(F2))])$

/* Using the natural order on the white fields: */
nrooks_weakd_oddwhite_stdfcs(N) := block(
 [F1 : nrooks_weak_stdfcs(N,N), F2 : oddwhiterooks_stdfcs(N)],
 [union(first(F1), first(F2)), union(second(F1), second(F2))])$

nqueens_evenwhite_stdfcs(N,M) := block(
 [F1 : nqueens_stdfcs(N,M), F2 : standardise_qv(evenwhitequeens_fcs(N,M))],
 [union(first(F1), first(F2)), union(second(F1), second(F2))])$
/* The derived number of black queens also required: */
nqueens_oddwhiteplus_stdfcs(N,M) := block(
 [F1 : nqueens_stdfcs(N,M), F2 : standardise_qv(oddwhitequeens_fcs(N,M)),
  V, F3, n],
  V : union(first(F1), first(F2)), n : lmax(V),
  F3 : standardise_qv(if oddp(min(N,M)) then evenblackqueens_fcs(N,M,n)
       else oddblackqueens_fcs(N,M,n)),
 [union(V,first(F3)), union(second(F1),second(F2),second(F3))])$
nqueens_oddwhiteplus_amo_stdfcs(N) := block(
 [F1 : nqueens_stdfcs(N,N), F2 : standardise_qv(oddwhiterooks_amo_fcs(N)),
  V, F3, n],
  V : union(first(F1), first(F2)), n : lmax(V),
  F3 : standardise_qv(if oddp(N) then evenblackrooks_amo_fcs(N,n)
       else oddblackrooks_amo_fcs(N,n)),
 [union(V,first(F3)), union(second(F1),second(F2),second(F3))])$
nqueens_evenwhiteplus_stdfcs(N,M) := block(
 [F1 : nqueens_stdfcs(N,M), F2 : standardise_qv(evenwhitequeens_fcs(N,M)),
  V, F3, n],
  V : union(first(F1), first(F2)), n : lmax(V),
  F3 : standardise_qv(if evenp(min(N,M)) then evenblackqueens_fcs(N,M,n)
       else oddblackqueens_fcs(N,M,n)),
 [union(V,first(F3)), union(second(F1),second(F2),second(F3))])$


/* Output the direct translation to a file (now without gaps for the
   variable-numbering): */
output_nqueens_oddwhite(N,M,filename) := block(
 [FF : standardise_fcs(nqueens_oddwhite_stdfcs(N,M))[1]],
  output_fcs_v(
    sconcat("N-Queens SAT, odd number of white queens, with N = ", N, " and M = ", M, ".", newline, "c ", "Created by output_nqueens_oddwhite(", N, ",", M, ",\"", filename, "\").", newline, "c ", created_by_OKlib()),
    FF,
    filename,
    []))$
/* Providing a standard name: "NQueens_oddwhite_N_M.cnf": */
output_nqueens_oddwhite_stdname(N,M) := output_nqueens_oddwhite(N,M,
  sconcat("NQueens_oddwhite_",N,"_",M,".cnf"))$

output_nrooks_weak_oddwhite(N,M,filename) := block(
 [FF : standardise_fcs(nrooks_weak_oddwhite_stdfcs(N,M))[1]],
  output_fcs_v(
    sconcat("N-Rooks weak SAT, odd number of white queens, with N = ", N, " and M = ", M, ".", newline, "c ", "Created by output_nrooks_weak_oddwhite(", N, ",", M, ",\"", filename, "\").", newline, "c ", created_by_OKlib()),
    FF,
    filename,
    []))$
/* Providing a standard name: "NRooks_weak_oddwhite_N_M.cnf": */
output_nrooks_weak_oddwhite_stdname(N,M) := output_nrooks_weak_oddwhite(N,M,
  sconcat("NRooks_weak_oddwhite_",N,"_",M,".cnf"))$

output_nrooks_weak_oddwhite_amo(N,filename) := block(
 [FF : standardise_fcs(nrooks_weak_oddwhite_amo_stdfcs(N))[1]],
  output_fcs_v(
    sconcat("N-Rooks weak SAT, odd number of white queens, with N = ", N, " and M = ", M, ".", newline, "c ", "Created by output_nrooks_weak_oddwhite_amo(", N, ",\"", filename, "\").", newline, "c ", created_by_OKlib()),
    FF,
    filename,
    []))$
/* Providing a standard name: "NRooks_weak_oddwhite_amo_N.cnf": */
output_nrooks_weak_oddwhite_amo_stdname(N) := output_nrooks_weak_oddwhite_amo(N,
  sconcat("NRooks_weak_oddwhite_amo_",N,".cnf"))$

/* Directly using the standard numbering (easier for the SAT-solver): */
output_nrooks_weakd_oddwhite(N,filename) := block(
 [FF : nrooks_weakd_oddwhite_stdfcs(N)],
  output_fcs_v(
    sconcat("N-Rooks weak SAT, odd number of white queens, with N = ", N, ".", newline, "c ", "Created by output_nrooks_weakd_oddwhite(", N, ",\"", filename, "\").", newline, "c ", created_by_OKlib()),
    FF,
    filename,
    []))$
/* Providing a standard name: "NRooks_weakd_oddwhite_N.cnf": */
output_nrooks_weakd_oddwhite_stdname(N) := output_nrooks_weakd_oddwhite(N,
  sconcat("NRooks_weakd_oddwhite_",N,".cnf"))$

output_nqueens_oddwhiteplus(N,M,filename) := block(
 [FF : standardise_fcs(nqueens_oddwhiteplus_stdfcs(N,M))[1]],
  output_fcs_v(
    sconcat("N-Queens SAT, odd number of white queens, even/odd number of black queens, with N = ", N, " and M = ", M, ".", newline, "c ", "Created by output_nqueens_oddwhiteplus(", N, ",", M, ",\"", filename, "\").", newline, "c ", created_by_OKlib()),
    FF,
    filename,
    []))$
/* Providing a standard name: "NQueens_oddwhiteplus_N_M.cnf": */
output_nqueens_oddwhiteplus_stdname(N,M) :=
 output_nqueens_oddwhiteplus(N,M,
   sconcat("NQueens_oddwhiteplus_",N,"_",M,".cnf"))$

output_nqueens_oddwhiteplus_amo(N,filename) := block(
 [FF : standardise_fcs(nqueens_oddwhiteplus_amo_stdfcs(N))[1]],
  output_fcs_v(
    sconcat("N-Queens SAT, odd number of white queens, even/odd number of black queens, with N = ", N, ".", newline, "c ", "Created by output_nqueens_oddwhiteplus_amo(", N, ",\"", filename, "\").", newline, "c ", created_by_OKlib()),
    FF,
    filename,
    []))$
/* Providing a standard name: "NQueens_oddwhiteplus_amo_N.cnf": */
output_nqueens_oddwhiteplus_amo_stdname(N) :=
 output_nqueens_oddwhiteplus_amo(N,
   sconcat("NQueens_oddwhiteplus_amo_",N,".cnf"))$


/* Output the direct translation to a file (now without gaps for the
   variable-numbering): */
output_nqueens_evenwhite(N,M,filename) := block(
 [FF : standardise_fcs(nqueens_evenwhite_stdfcs(N,M))[1]],
  output_fcs_v(
    sconcat("N-Queens SAT, even number of white queens, with N = ", N, " and M = ", M, ".", newline, "c ", "Created by output_nqueens_evenwhite(", N, ",", M, ",\"", filename, "\").", newline, "c ", created_by_OKlib()),
    FF,
    filename,
    []))$
/* Providing a standard name: "NQueens_evenwhite_N_M.cnf": */
output_nqueens_evenwhite_stdname(N,M) := output_nqueens_evenwhite(N,M,
  sconcat("NQueens_evenwhite_",N,"_",M,".cnf"))$

output_nqueens_evenwhiteplus(N,M,filename) := block(
 [FF : standardise_fcs(nqueens_evenwhiteplus_stdfcs(N,M))[1]],
  output_fcs_v(
    sconcat("N-Queens SAT, even number of white queens, even/odd number of black queens, with N = ", N, " and M = ", M, ".", newline, "c ", "Created by output_nqueens_evenwhiteplus(", N, ",", M, ",\"", filename, "\").", newline, "c ", created_by_OKlib()),
    FF,
    filename,
    []))$
/* Providing a standard name: "NQueens_evenwhiteplus_N_M.cnf": */
output_nqueens_evenwhiteplus_stdname(N,M) :=
 output_nqueens_evenwhiteplus(N,M,
   sconcat("NQueens_evenwhiteplus_",N,"_",M,".cnf"))$


/* The total number of solutions for 1 <= N <= 27: */
nqueens_counts : [1,0,0,2,10,4,40,92,352,724,
 2680,14200,73712,365596,2279184,14772512,95815104,666090624,4968057848,39029188884,
 314666222712,2691008701644,24233937684440,227514171973736,2207893435808352,22317699616364044,234907967154122528]$
/* https://oeis.org/A000170 */
/* The maximal entry is ~ 2.35*10^17. */
/* Approximation formula (according to https://oeis.org/A000170): */
nqueens_approx_count(N) := N! / 2.54^N$

/* The number of isomorphism classes of solutions (classes of symmetric solutions) for 1 <= N <= 27: */
iso_nqueens_counts : [1,0,0,1,2,1,6,12,46,92,
 341,1787,9233,45752,285053,1846955,11977939,83263591,621012754,4878666808,
 39333324973,336376244042,3029242658210,28439272956934,275986683743434,2789712466510289,29363495934315694]$
/* https://oeis.org/A002562 */

/* The number of rotational-symmetry solutions for 1 <= N <= 63: */
rot_nqueens_counts : [1,0,0,2,2,0,0,0,0,0,
 0,8,8,0,0,64,128,0,0,480,
 704,0,0,3328,3264,0,0,32896,43776,0,
 0,406784,667904,0,0,5845504,8650752,0,0,77184000,
 101492736,0,0,1261588480,1795233792,0,0,21517426688,35028172800,0,
 0,406875119616,652044443648,0,0,8613581094912,12530550128640,0,0,194409626533888,
 291826098503680,0,0]$
/* https://oeis.org/A033148 */
/* According to there: count = 0 for mod(N,4) in {2,3}.
   In case of mod(N,4) = 1, the count is a multiple of 2^((N-1)/4).
*/

/* The number of point-symmetric solutions for 1 <= N <= 40: */
psym_nqueens_counts : [1,0,0,2,2,4,8,4,16,12,
 48,80,136,420,1240,3000,8152,18104,44184,144620,
 375664,1250692,3581240,11675080,34132592,115718268,320403024,1250901440,3600075088,14589438024,
43266334696,181254386312,533869114600,2419751731604,6905549827664,33686204023352,97762487422768,496654774712700,1472761266426976,7715290606371500]$
/* https://oeis.org/A032522 */

/* The number of independent vertex sets in the N-Queens graph for 1<=N<=16:
*/
partial_nqueens_counts : [2,5,18,87,462,2635,16870,118969,915442,7535369,
 66807234,633443407,6354135838,67480769839,754734433310,8870886701401]$
/* https://oeis.org/A287227 for N <= 10. */
/* N > 10 computed in OKlibrary. */


/* The toroidal (modular) case */

/* Now modular arithmetic modulo N is used, and coordinates are 0-based.
   That is, ZZ_N = {0,...,N-1} is used.

   There are now also exactly N diagonals (difference in ZZ_N is equal),
   and exactly N antidiagonals (sum in ZZ_N is equal).
   Every toroidal N-queens solution is an N-queens solution, but not vice
   versa (except for N = 1,2,3, 5).

   A "toroidal solution" for N is a set S of pairs [x,y] in (ZZ_N)^2 such that
   the four sets
    - first projection of S
    - second projection of S
    - differences of S (in ZZ_N)
    - sums of S (in ZZ_N)
   are all equal to ZZ_N.

   Solutions exist iff N is not divisible by 2 or 3.

   Solutions are counted at https://oeis.org/A051906 .

*/

tnqueens_counts : [1, 0, 0, 0, 10, 0, 28, 0, 0, 0,
 88, 0, 4524, 0, 0, 0, 140692, 0, 820496, 0,
 0, 0, 128850048, 0, 1957725000, 0, 0, 0, 605917055356, 0,
 13404947681712, 0, 0, 0]$

sol_tnqueens_p(S) := setp(S) and every_s(lambda([p], listp(p) and
  length(p)=2), S) and block([N : length(S), Z : setmn(0,length(S)-1)],
    map(first,S) = Z and
    map(second,S) = Z and
    map(lambda([p], mod(first(p)+second(p), N)), S) = Z and
    map(lambda([p], mod(first(p)-second(p), N)), S) = Z)$
/*
sol_tnqueens_p({[0,1],[1,3],[2,0],[3,2]});
  false
*/

/* Construction of solutions according to Zur Luria, May 2017 */

construction_B(k) := block([N : 2^(2*k) + 1],
  setify(create_list([mod(2^k*y,N),y], y, 0, N-1)))$
/* We have
     sol_tnqueens_p(construction_B(k)) = true
   for all k >= 1.
*/


/* ******************
   * Knight's graph *
   ******************
*/

/*

  https://en.wikipedia.org/wiki/Knight's_graph
  Vertices: M*N
  Edges   :  4*M*N − 6*(M+N) + 8 for N,M >= 2

*/

knightjump_unbound_p(p1,p2) :=
  (abs(first(p1)-first(p2)) = 1 and abs(second(p1)-second(p2)) = 2) or
  (abs(first(p1)-first(p2)) = 2 and abs(second(p1)-second(p2)) = 1)$

knightjumps_bound(p1,N,M) := subset(cartesian_product(setn(N),setn(M)),
  lambda([p2], knightjump_unbound_p(p1,p2)))$

knights_g(N,M) := block([SQ : cartesian_product(setn(N),setn(M))],
  [SQ, subset(powerset(SQ,2), lambda([e], knightjump_unbound_p(first(e),second(e))))])$

knights_g_numver(N,M) := N*M$
knights_g_numedg(N,M) := if min(N,M) <= 1 then 0 else 4*N*M - 6*(N+M) + 8$

knights_mg(N,M) := g2mg(knights_g(N,M))$

one_hamilt_knights_path(N,M) := hamilton_path(knights_mg(N,M))$
one_hamilt_knights_tour(N,M) := hamilton_cycle(knights_mg(N,M))$
/* https://en.wikipedia.org/wiki/Knight%27s_tour#Existence */

/*!
\endhtmlonly
*/
