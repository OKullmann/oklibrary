/* Oliver Kullmann, 27.11.2011 (Swansea) */
/* Copyright 2011, 2018, 2019 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Graphs/Lisp/Connectedness.mac
  \brief Functions regarding connectness in graphs

Use by

oklib_load("OKlib/ComputerAlgebra/Graphs/Lisp/Connectedness.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Graphs/Lisp/Basic.mac")$

/*
  For tests regarding connectedness see connected_g_p and sconnected_dg_p
  (plus variations) in ComputerAlgebra/Graphs/Lisp/Basic.mac.
*/

/* Connected components of a graph: */
concom_g(G) := block([mg : g2mg(G)], setify(map(setify,
 map(lambda([C], map(lambda([v], get_vertex_label(v,mg)), C)), 
     connected_components(mg)))))$

/* Paths and cycles */

/* The set of all paths from a to b in digraph G, representing the paths
   as arc-sets (without repeated vertices):
*/
allpaths_dg(G,a,b) := if a=b then {{}} else
 block(
  [outa : subset(second(G), lambda([e], is(first(e)=a))),
   ina : subset(second(G), lambda([e], is(second(e)=a))),
   NG],
  NG : [disjoin(a, first(G)), setdifference(second(G), union(ina,outa))],
  lunion(create_list(
    add_element([a,x], allpaths_dg(NG,x,b)),
    x, listify(map(second,outa)))))$

/* The set of all cycles (simple circuits) in digraph G, as arc-sets
   (with only one pair of vertices repeated): */
allcycles_dg(G) := if length(second(G)) <= 1 then {} else
 block(
  [a : first(first(G)), outa, ina],
  outa : subset(second(G), lambda([e], is(first(e)=a))),
  ina : subset(second(G), lambda([e], is(second(e)=a))),
  union(
   lunion(
     create_list(
       add_element([a,x],
                   allpaths_dg([first(G), setdifference(second(G),outa)],x,a)),
       x, listify(map(second,outa)))),
    allcycles_dg([disjoin(a,first(G)),
                  setdifference(second(G), union(ina,outa))])))$
/* Remark: A discussion can be found at
   https://stackoverflow.com/questions/546655/finding-all-cycles-in-a-directed-graph
*/

/* For a cycle C in digraph G, whether C is cordless; indeed C can be any
  set of arcs, and true is returned iff the arcs in G connecting the
  head-vertices from C are precisely those in C:
*/
chordless_dg_p(C,G) := is(induced_subgraph_dg(map(first,C),G)[2] = C)$

/* Convenience instantiation: */
all_chordless_cycles_dg(G) := subset(allcycles_dg(G), lambda([C], chordless_dg_p(C,G)))$


/*!
\endhtmlonly
*/
