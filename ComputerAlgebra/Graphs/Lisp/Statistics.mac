/* Matthew Gwynne, 21.7.2008 (Swansea) */
/* Copyright 2008, 2010, 2019 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Graphs/Lisp/Statistics.mac
  \brief Graph statistics

Use by

oklib_load("OKlib/ComputerAlgebra/Graphs/Lisp/Statistics.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$
oklib_include("OKlib/ComputerAlgebra/Graphs/Lisp/Basic.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$


/* *************************
   * Around the deficiency *
   *************************
*/

deficiency_dg(G) := length(second(G)) - length(first(G))$


/* ******************
   * Vertex degrees *
   ******************
*/

/* The degree of a vertex in a graph: */
degree_g(v,G) := length(neighbours_g(v,G))$
/* For general graphs, counting loops once: */
degree1_gg(v,G) := length(subset(G[2],lambda([e],elementp(v,G[3](e)))))$
/* Counting loops twice: */
degree2_gg(v,G) := gsum_s(
  lambda([el],block([e : G[3](el)], 
   if elementp(v,e) then if length(e) = 1 then 2 else 1
   else 0)),
  G[2])$

/* Out- and in-degrees in digraphs: */
outdegree_dg(v,G) := outdegree_dgl(v,G)$
outdegree_dgl(v,G) := 
 length(sublist(listify(G[2]), lambda([e], is(e[1]=v))))$
indegree_dg(v,G) := indegree_dgl(v,G)$
indegree_dgl(v,G) := 
 length(sublist(listify(G[2]), lambda([e], is(e[2]=v))))$


/* Remark: If degrees for several vertices are needed, then better the 
   following functions are used.
*/

/* The vertex-degrees of a general graph as hash-map, as a generic function,
   applicable to gg and ogg, counting loops only once: */
vertex_degrees1_genericg(G) := block([h : sm2hm({})],
 for e in G[2] do
   for v in G[3](e) do enter_new_occurrence(h,v),
 for v in G[1] do if ev_hm(h,v) = false then set_hm(h,v,0),
 return(h))$

vertex_degrees_g(G) := vertex_degrees1_genericg(g2gg(G))$
vertex_degrees_og(G) := vertex_degrees1_genericg(og2ogg(G))$
/* For graphs with loops, counting loops once: */
vertex_degrees1_gl(G) := vertex_degrees1_genericg(gl2gg(G))$
vertex_degrees1_ogl(G) := vertex_degrees1_genericg(ogl2ogg(G))$
vertex_degrees1_gg(G) := vertex_degrees1_genericg(G)$
vertex_degrees1_ogg(G) := vertex_degrees1_genericg(G)$

/* The generic version, counting loops twice (again for
   general graphs (ordered or unordered)): */
vertex_degrees2_genericg(G) := block([h : sm2hm({})],
 for e in G[2] do
   for v in expand_edge(G[3](e)) do enter_new_occurrence(h,v),
 for v in G[1] do if ev_hm(h,v) = false then set_hm(h,v,0),
 return(h))$

vertex_degrees2_gl(G) := vertex_degrees2_genericg(gl2gg(G))$
vertex_degrees2_ogl(G) := vertex_degrees2_genericg(ogl2ogg(G))$
vertex_degrees2_gg(G) := vertex_degrees2_genericg(G)$
vertex_degrees2_ogg(G) := vertex_degrees2_genericg(G)$

/* The vertex out-/in-degrees of a general directed graph as hash-map, as a
  generic function, applicable to gdg and ogdg: */
vertex_outdegrees_genericdg(G) := block([h : sm2hm({})],
 for e in G[2] do enter_new_occurrence(h,G[3](first(e))),
 for v in G[1] do if ev_hm(h,v) = false then set_hm(h,v,0),
 return(h))$
vertex_indegrees_genericdg(G) := block([h : sm2hm({})],
 for e in G[2] do enter_new_occurrence(h,G[3](second(e))),
 for v in G[1] do if ev_hm(h,v) = false then set_hm(h,v,0),
 return(h))$

vertex_outdegrees_dg(G) := vertex_outdegrees_genericdg(dg2gdg(G))$
vertex_outdegrees_dgl(G) := vertex_outdegrees_genericdg(dgl2gdg(G))$
vertex_outdegrees_odg(G) := vertex_outdegrees_genericdg(odg2ogdg(G))$
vertex_outdegrees_odgl(G) := vertex_outdegrees_genericdg(odgl2ogdg(G))$

vertex_indegrees_dg(G) := vertex_indegrees_genericdg(dg2gdg(G))$
vertex_indegrees_dgl(G) := vertex_indegrees_genericdg(dgl2gdg(G))$
vertex_indegrees_odg(G) := vertex_indegrees_genericdg(odg2ogdg(G))$
vertex_indegrees_odgl(G) := vertex_indegrees_genericdg(odgl2ogdg(G))$


/* Returns the pair [min-degree, vertex_of_minimum_degree], using
   the vertex occurring earliest in the vertex list of the 
   ordered graph. [inf] is returned for the graph
   with empty vertex set. */
min_vertex_degree_v_og(G) := block([vd : vertex_degrees_og(G)],
  first_smallest_f_l(lambda([v],ev_hm(vd,v)), G[1]))$
min_vertex_degree1_v_ogl(G) := block([vd : vertex_degrees1_ogl(G)],
  first_smallest_f_l(lambda([v],ev_hm(vd,v)), G[1]))$
min_vertex_degree2_v_ogl(G) := block([vd : vertex_degrees2_ogl(G)],
  first_smallest_f_l(lambda([v],ev_hm(vd,v)), G[1]))$

max_vertex_degree_v_og(G) := block([vd : vertex_degrees_og(G)],
  first_largest_f_l(lambda([v],ev_hm(vd,v)), G[1]))$
max_vertex_degree1_v_ogl(G) := block([vd : vertex_degrees1_ogl(G)],
  first_largest_f_l(lambda([v],ev_hm(vd,v)), G[1]))$
max_vertex_degree2_v_ogl(G) := block([vd : vertex_degrees2_ogl(G)],
  first_largest_f_l(lambda([v],ev_hm(vd,v)), G[1]))$

/* Out- and in-degrees, accepting gdg and ogdg: */
min_vertex_outdegree_v_genericdg(G) := block(
 [vd : vertex_outdegrees_genericdg(G)],
  first_smallest_f_l(lambda([v],ev_hm(vd,v)), G[1]))$
min_vertex_indegree_v_genericdg(G) := block(
 [vd : vertex_indegrees_genericdg(G)],
  first_smallest_f_l(lambda([v],ev_hm(vd,v)), G[1]))$

min_vertex_outdegree_v_dg(G) := min_vertex_outdegree_v_genericdg(dg2gdg(G))$
min_vertex_outdegree_v_dgl(G) := min_vertex_outdegree_v_genericdg(dgl2gdg(G))$
min_vertex_indegree_v_dg(G) := min_vertex_indegree_v_genericdg(dg2gdg(G))$
min_vertex_indegree_v_dgl(G) := min_vertex_indegree_v_genericdg(dgl2gdg(G))$

/* Only computing the degrees: */
min_vertex_outdegree_genericdg(G) := block(
 [vd : vertex_outdegrees_genericdg(G)],
  smallest_f_l(lambda([v],ev_hm(vd,v)), G[1]))$
min_vertex_indegree_genericdg(G) := block(
 [vd : vertex_indegrees_genericdg(G)],
  smallest_f_l(lambda([v],ev_hm(vd,v)), G[1]))$


min_vertex_outdegree_dg(G) := min_vertex_outdegree_genericdg(dg2gdg(G))$
min_vertex_outdegree_dgl(G) := min_vertex_outdegree_genericdg(dgl2gdg(G))$
min_vertex_indegree_dg(G) := min_vertex_indegree_genericdg(dg2gdg(G))$
min_vertex_indegree_dgl(G) := min_vertex_indegree_genericdg(dgl2gdg(G))$


/* The hashmap of [vertex degree, frequency] pairs for a graph (that is,
   given a vertex degree, return its frequency): */
vertex_degrees_hm_g(G) := block(
  [degrees : hm2sm(vertex_degrees_g(G)), deg_freq : sm2hm({})],
  for vd in degrees do
    enter_new_occurrence(deg_freq, vd[2]),
  return(deg_freq))$


/*!
\endhtmlonly
*/
