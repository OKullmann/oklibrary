/* Matthew Gwynne, 24.7.2008 (Swansea) */
/* Copyright 2008, 2010, 2019 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Graphs/Lisp/tests/Statistics.mac
  \brief Tests for graph statistics

Use by

oklib_load("OKlib/ComputerAlgebra/Graphs/Lisp/tests/Statistics.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Graphs/Lisp/Basic.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/HashMaps.mac")$
oklib_include("OKlib/ComputerAlgebra/Graphs/Lisp/Generators.mac")$


kill(f)$

/* *************************
   * Around the deficiency *
   *************************
*/

okltest_deficiency_dg(f) := (
  assert(f([{},{}]) = 0),
  assert(f([{1},{}]) = -1),
  assert(f([{1,2},{[1,2],[2,1]}]) = 0),
  true)$


/* ******************
   * Vertex degrees *
   ******************
*/

okltest_degree_g(f) := (
  assert(f(1,[{1},{}]) = 0),
  assert(f(1,[{1,2},{}]) = 0),
  assert(f(1,[{1,2},{{1,2}}]) = 1),
  for n : 0 thru 3 do block([G : complete_stdg(n)],
    for v in G[1] do
      assert(f(v,G) = n-1)
  ),
  for n : 2 thru 4 do block([G : og2g(pathgraph_og(n))],
    for v in G[1] do block([d : f(v,G)],
      if elementp(v,{1,n}) then assert(d = 1)
      else assert(d = 2)
  )),
  for n : 3 thru 5 do block([G : ogl2gl(cyclegraph_ogl(n))],
    for v in G[1] do
      assert(f(v,G) = 2)
  ),
  true)$

okltest_degree1_gg(f) := (
  for n : 0 thru 3 do block([G : ogg2gg(dipole_ogg(n))],
    for v in G[1] do
      assert(f(v,G) = n)
  ),
   for n : 0 thru 3 do block([G : ogg2gg(bouquet_ogg(n))],
    assert(f(1,G) = n)
  ),
  assert(okltest_degree_g(buildq([f],lambda([v,G],f(v,g2gg(G)))))),
  true)$

okltest_degree2_gg(f) := (
  for n : 0 thru 3 do block([G : ogg2gg(dipole_ogg(n))],
    for v in G[1] do
      assert(f(v,G) = n)
  ),
   for n : 0 thru 3 do block([G : ogg2gg(bouquet_ogg(n))],
    assert(f(1,G) = 2* n)
  ),
  assert(okltest_degree_g(buildq([f],lambda([v,G],f(v,g2gg(G)))))),
  true)$

okltest_outdegree_dg(f) := (
  assert(f(1,[{1},{}]) = 0),
  assert(f(1,[{1,2,3},{[1,2],[2,3]}]) = 1),
  assert(f(2,[{1,2,3},{[1,2],[2,3]}]) = 1),
  assert(f(3,[{1,2,3},{[1,2],[2,3]}]) = 0),
  true)$

okltest_outdegree_dgl(f) := (
  assert(f(1,[{1},{[1,1]}]) = 1),
  assert(okltest_outdegree_dg(f) = true),
  true)$

okltest_indegree_dg(f) := (
  assert(f(1,[{1,2},{[2,1]}]) = 1),
  assert(okltest_outdegree_dg(buildq([f], lambda([v,G], f(v,transposed_dg(G))))) = true),
  true)$

okltest_indegree_dgl(f) := (
  assert(f(1,[{1,2},{[1,1],[2,1]}]) = 2),
  assert(okltest_indegree_dg(f) = true),
  assert(okltest_outdegree_dg(buildq([f], lambda([v,G], f(v,transposed_dg(G))))) = true),
  true)$

okltest_vertex_degrees_g(f) := block(
  assert(hm2sm(f([{},{}])) = {}),
  assert(hm2sm(f([{1},{}])) = {[1,0]}),
  assert(hm2sm(f([{1,2},{}])) = {[1,0],[2,0]}),
  assert(hm2sm(f([{1,2},{{1,2}}])) = {[1,1],[2,1]}),
  assert(hm2sm(f([{1,2,3,4,5,6},{{1,2},{3,2},{2,4},{4,5},{4,6}}])) =
    {[1,1],[3,1],[2,3],[4,3],[5,1],[6,1]}),
  assert(okltest_degree_g(buildq([f],lambda([v,G],ev_hm(f(G),v))))),
  true)$

okltest_vertex_degrees_og(f) := block(
  assert(hm2sm(f([[],[]])) = {}),
  assert(hm2sm(f([[1],[]])) = {[1,0]}),
  assert(hm2sm(f([[1,2],[]])) = {[1,0],[2,0]}),
  assert(hm2sm(f([[1,2],[[1,2]]])) = {[1,1],[2,1]}),
  assert(hm2sm(f([[1,2,3,4,5,6],[[1,2],[3,2],[2,4],[4,5],[4,6]]])) =
    {[1,1],[3,1],[2,3],[4,3],[5,1],[6,1]}),
  assert(okltest_vertex_degrees_g(buildq([f],lambda([G],f(g2og(G)))))),
  true)$

okltest_vertex_degrees1_gl(f) := block(
  assert(okltest_vertex_degrees_g(f)),
  assert(hm2sm(f([{1},{{1}}])) = {[1,1]}),
  assert(hm2sm(f([{1,2},{{2},{1,2}}])) = {[1,1],[2,2]}),
  true)$

okltest_vertex_degrees1_ogl(f) := block(
  assert(okltest_vertex_degrees1_gl(buildq([f],lambda([G],f(gl2ogl(G)))))),
  true)$

okltest_vertex_degrees1_gg(f) := (
  assert(okltest_vertex_degrees1_gl(buildq([f],lambda([G],f(gl2gg(G)))))),
  assert(okltest_degree1_gg(buildq([f],lambda([v,G],ev_hm(f(G),v))))),
  true)$

okltest_vertex_degrees1_ogg(f) := block(
  assert(okltest_vertex_degrees1_gg(buildq([f],lambda([G],f(gg2ogg(G)))))),
  true)$

okltest_vertex_degrees2_gl(f) := block(
  assert(okltest_vertex_degrees_g(f)),
  assert(hm2sm(f([{1},{{1}}])) = {[1,2]}),
  assert(hm2sm(f([{1,2},{{2},{1,2}}])) = {[1,1],[2,3]}),
  true)$

okltest_vertex_degrees2_ogl(f) := block(
  assert(okltest_vertex_degrees2_gl(buildq([f],lambda([G],f(gl2ogl(G)))))),
  true)$

okltest_vertex_degrees2_gg(f) := (
  assert(okltest_vertex_degrees2_gl(buildq([f],lambda([G],f(gl2gg(G)))))),
  assert(okltest_degree2_gg(buildq([f],lambda([v,G],ev_hm(f(G),v))))),
  true)$

okltest_vertex_degrees2_ogg(f) := block(
  assert(okltest_vertex_degrees2_gg(buildq([f],lambda([G],f(gg2ogg(G)))))),
  true)$

okltest_vertex_outdegrees_dg(f) := (
  assert(hm2sm(f([{},{}])) = {}),
  assert(hm2sm(f([{1},{}])) = {[1,0]}),
  assert(hm2sm(f([{1,2,3,4},{[1,2],[1,3],[2,1]}])) = {[1,2],[2,1],[3,0],[4,0]}),
  true)$

okltest_vertex_outdegrees_dgl(f) := (
  assert(hm2sm(f([{1},{[1,1]}])) = {[1,1]}),
  assert(okltest_vertex_outdegrees_dg(f) = true),
  true)$

okltest_vertex_outdegrees_odg(f) := (
  assert(okltest_vertex_outdegrees_dg(buildq([f], lambda([G], f(dg2odg(G))))) = true),
  true)$

okltest_vertex_outdegrees_odgl(f) := (
  assert(okltest_vertex_outdegrees_dgl(buildq([f], lambda([G], f(dgl2odgl(G))))) = true),
  true)$

okltest_vertex_indegrees_dg(f) := (
  assert(okltest_vertex_outdegrees_dg(buildq([f], lambda([G], f(transposed_dg(G))))) = true),
  true)$

okltest_vertex_indegrees_dgl(f) := (
  assert(okltest_vertex_outdegrees_dgl(buildq([f], lambda([G], f(transposed_dgl(G))))) = true),
  true)$

okltest_vertex_indegrees_odg(f) := (
  assert(okltest_vertex_outdegrees_odg(buildq([f], lambda([G], f(transposed_odg(G))))) = true),
  true)$

okltest_vertex_indegrees_odgl(f) := (
assert(okltest_vertex_outdegrees_odgl(buildq([f], lambda([G], f(transposed_odgl(G))))) = true),
  true)$

okltest_min_vertex_degree_v_og(f) := block(
  assert(f([[],[]]) = [inf]),
  assert(f([[1],[]]) = [0,1]),
  assert(f([[1,2],[]]) = [0,1]),
  assert(f([[2,1],[]]) = [0,2]),
  assert(f([[1,2],[{1,2}]]) = [1,1]),
  assert(f([[2,1],[{1,2}]]) = [1,2]),
  assert(f([[1,2,3,4,5,6],[{1,2},{3,2},{2,4},{4,5},{4,6}]]) =
    [1,1]),
  assert(f([[1,2,3,4,5,6],[{1,2},{3,1},{1,4},{4,5},{4,6}]]) =
    [1,2]),
  assert(f([[3,2,1,4,5,6],[{1,2},{3,1},{1,4},{4,5},{4,6}]]) =
    [1,3]),
  assert(f([[1,2,3,4,5,6,7],[{1,2},{3,2},{2,4},{4,5},{4,6}]]) =
    [0,7]),
  true)$

okltest_min_vertex_degree1_v_ogl(f) := (
  assert(f([[1],[{1}]]) = [1,1]),
  assert(okltest_min_vertex_degree_v_og(f)),
  true)$

okltest_min_vertex_degree2_v_ogl(f) := (
  assert(f([[1],[{1}]]) = [2,1]),
  assert(okltest_min_vertex_degree_v_og(f)),
  true)$

okltest_max_vertex_degree_v_og(f) := (
  assert(f([[],[]]) = [minf]),
  assert(f([[1],[]]) = [0,1]),
  assert(f([[1,2],[]]) = [0,1]),
  assert(f([[2,1],[]]) = [0,2]),
  assert(f([[1,2],[{1,2}]]) = [1,1]),
  assert(f([[2,1],[{1,2}]]) = [1,2]),
  assert(f([[1,2,3],[{1,2},{1,3}]]) = [2,1]),
  assert(f([[1,2,3],[{2,1},{2,3}]]) = [2,2]),
  true)$

okltest_max_vertex_degree1_v_ogl(f) := (
  assert(f([[1],[{1}]]) = [1,1]),
  assert(okltest_max_vertex_degree_v_og(f)),
  true)$

okltest_max_vertex_degree2_v_ogl(f) := (
  assert(f([[1],[{1}]]) = [2,1]),
  assert(okltest_max_vertex_degree_v_og(f)),
  true)$

okltest_min_vertex_outdegree_v_dg(f) := (
  assert(f([{},{}]) = [inf]),
  assert(f([{1},{}]) = [0,1]),
  assert(f([{-1,1},{}]) = [0,-1]),
  assert(f([{1,2,3},{[1,2],[2,3],[3,1],[1,3]}]) = [1,2]),
  assert(okltest_min_vertex_outdegree_dg(buildq([f], lambda([G], first(f(G))))) = true),
  true)$

okltest_min_vertex_outdegree_v_dgl(f) := (
  assert(f([{1},{[1,1]}]) = [1,1]),
  assert(okltest_min_vertex_outdegree_v_dg(f) = true),
  assert(okltest_min_vertex_outdegree_dgl(buildq([f], lambda([G], first(f(G))))) = true),
  true)$

okltest_min_vertex_indegree_v_dg(f) := (
  assert(okltest_min_vertex_outdegree_v_dg(buildq([f], lambda([G], f(transposed_dg(G))))) = true),
  assert(okltest_min_vertex_indegree_dg(buildq([f], lambda([G], first(f(G))))) = true),
  true)$

okltest_min_vertex_indegree_v_dgl(f) := (
  assert(okltest_min_vertex_outdegree_v_dgl(buildq([f], lambda([G], f(transposed_dgl(G))))) = true),
  assert(okltest_min_vertex_indegree_dgl(buildq([f], lambda([G], first(f(G))))) = true),
  true)$

okltest_min_vertex_outdegree_dg(f) := (
  assert(f([{},{}]) = inf),
  assert(f([{1},{}]) = 0),
  assert(f([{-1,1},{}]) = 0),
  assert(f([{1,2,3},{[1,2],[2,3],[3,1],[2,3],[3,2]}]) = 1),
  true)$

okltest_min_vertex_outdegree_dgl(f) := (
  assert(f([{1},{[1,1]}]) = 1),
  assert(okltest_min_vertex_outdegree_dg(f) = true),
  true)$

okltest_min_vertex_indegree_dg(f) := (
  assert(okltest_min_vertex_outdegree_dg(buildq([f], lambda([G], f(transposed_dg(G))))) = true),
  true)$

okltest_min_vertex_indegree_dgl(f) := (
  assert(okltest_min_vertex_outdegree_dgl(buildq([f], lambda([G], f(transposed_dgl(G))))) = true),
  true)$

okltest_vertex_degrees_hm_g(f) := block(
  assert(hm2sm(f([{},{}])) = {}),
  assert(hm2sm(f([{1},{}])) = {[0,1]}),
  assert(hm2sm(f([{1,2},{}])) = {[0,2]}),
  assert(hm2sm(f([{1,2},{{1,2}}])) = {[1,2]}),
  assert(hm2sm(f([{1,2,3,4,5,6},{{1,2},{3,2},{2,4},{4,5},{4,6}}])) =
    {[1,4],[3,2]}),
  true)$



/*!
\endhtmlonly
*/
