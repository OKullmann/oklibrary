/* Oliver Kullmann, 30.4.2008 (Guangzhou) */
/* Copyright 2008, 2009, 2010, 2011, 2018, 2019 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Graphs/Lisp/tests/Basic.mac
  \brief Tests for basic graph functionality

Use by

oklib_load("OKlib/ComputerAlgebra/Graphs/Lisp/tests/Basic.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Graphs/Lisp/Basic.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/Hypergraphs.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/Graphs/Lisp/Generators.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$


kill(f)$


/* ******************************
   * Providing basic test cases *
   ******************************
*/

okltest_list_g : [
 [{},{}],
 [{1},{}],
 [{1,2},{{1,2}}],
 [{1,2,3},{{1,2},{1,3}}],
 [{1,2,3},{{1,2},{1,3},{2,3}}],
 [{1,2,3,4},{{1,2},{2,3},{3,4},{4,1}}]
]$

okltest_list_gl : [
 [{1},{{1}}],
 [{1,2},{{1},{2},{1,2}}]
]$

okltest_list_dg : [
 [{},{}],
 [{1},{}],
 [{1,2},{[1,2]}],
 [{1,2},{[1,2],[2,1]}]
]$

okltest_list_dgl : [
 [{1},{[1,1]}],
 [{1,2},{[1,1],[2,2],[1,2]}]
]$

okltest_list_mug : [
 [{},{},identity],
 [{1},{},identity],
 [{1,2},{{1,2}},lambda([e],2)]
]$

okltest_list_mugl : [
 [{1},{{1}},lambda([e],2)]
]$

okltest_list_mudg : [
 [{},{},identity],
 [{1},{},identity],
 [{1,2},{[1,2]},lambda([e],2)],
 [{1,2},{[1,2],[2,1]},lambda([e],if e=[1,2] then 1 else 2)]
]$

okltest_list_mudgl : [
 [{1},{[1,1]},lambda([e],2)]
]$

okltest_list_gg : [
 [{},{},identity],
 [{1},{},identity],
 [{1},{1,2},lambda([e],{1})],
 [{1,2},{1,2,3,4},lambda([e],if e=1 then {1} elseif e=2 then {2} else {1,2})]
]$

okltest_list_gdg : [
 [{},{},identity],
 [{1},{},identity],
 [{1},{1,2},lambda([e],[1,1])],
 [{1,2},{1,2,3,4},lambda([e],if e=1 then [1,1] elseif e=2 then [2,2] else [1,2])]
]$

okltest_list_og : [
 [[],[]],
 [[1],[]],
 [[1,2],[{1,2}]],
 [[2,1],[{1,2}]]
]$

okltest_list_ogl : [
 [[1],[{1}]],
 [[1,2],[{1},{2},{1,2}]],
 [[2,1],[{1,2},{2},{1}]]
]$

okltest_list_odg : [
 [[],[]],
 [[1],[]],
 [[1,2],[[1,2]]],
 [[2,1],[[2,1],[1,2]]]
]$

okltest_list_odgl : [
 [[1],[[1,1]]],
 [[1,2],[[1,1],[2,2],[1,2]]],
 [[2,1],[[2,2],[1,2],[1,1],[2,1]]]
]$

okltest_list_omug : [
 [[],[],identity],
 [[1],[],identity],
 [[1,2],[{1,2}],lambda([e],2)],
 [[2,1],[{1,2}],lambda([e],2)]
]$

okltest_list_omugl : [
 [[1],[{1}],lambda([e],2)],
 [[2,1],[{2},{1},{1,2}],lambda([e],2)]
]$

okltest_list_omudg : [
 [[],[],identity],
 [[1],[],identity],
 [[1,2],[[1,2]],lambda([e],2)],
 [[2,1],[[2,1],[1,2]],lambda([e],if e=[1,2] then 1 else 2)]
]$

okltest_list_omudgl : [
 [[1],[[1,1]],lambda([e],2)]
]$

okltest_list_ogg : [
 [[],[],identity],
 [[1],[],identity],
 [[1],[1,2],lambda([e],{1})],
 [[1,2],[1,2,3,4],lambda([e],if e=1 then {1} elseif e=2 then {2} else {1,2})]
]$

okltest_list_ogdg : [
 [[],[],identity],
 [[1],[],identity],
 [[1],[1,2],lambda([e],[1,1])],
 [[1,2],[1,2,3,4],lambda([e],if e=1 then [1,1] elseif e=2 then [2,2] else [1,2])]
]$

okltest_list_allgraphs : [
 okltest_list_g,okltest_list_gl,okltest_list_dgl,okltest_list_mug,
 okltest_list_mugl,okltest_list_mudg,okltest_list_mudgl,okltest_list_gg,
 okltest_list_gdg,okltest_list_og,okltest_list_ogl,okltest_list_odg,
 okltest_list_odgl,okltest_list_omug,okltest_list_omugl,okltest_list_omudg,
 okltest_list_omudgl,okltest_list_ogg,okltest_list_ogdg
]$

/* ************************************
   * Checking the defining properties *
   ************************************
*/

okltest_g_p(f) := block(
  for G in okltest_list_g do
    assert(f(G) = true),
  assert(f([]) = false),
  assert(f([[],{}]) = false),
  assert(f([{},[]]) = false),
  assert(f([[],[]]) = false),
  assert(f([{},{{}}]) = false),
  assert(f([{},{{1,2}}]) = false),
  assert(f([{1},{{1}}]) = false),
  assert(f([{1,2},{[1,2]}]) = false),
  assert(f([{1,2,3},{{1,2,3}}]) = false),
  true)$

okltest_gl_p(f) := block(
  for G in okltest_list_gl do
    assert(f(G) = true),
  assert(f([]) = false),
  assert(f([[],{}]) = false),
  assert(f([{},[]]) = false),
  assert(f([[],[]]) = false),
  assert(f([{},{{}}]) = false),
  assert(f([{},{{1,2}}]) = false),
  assert(f([{1},{{1}}]) = true),
  assert(f([{1,2},{[1,2]}]) = false),
  assert(f([{1,2,3},{{1,2,3}}]) = false),
  true)$

okltest_dg_p(f) := block(
  for G in okltest_list_dg do
    assert(f(G) = true),
  assert(f([]) = false),
  assert(f([[],{}]) = false),
  assert(f([{},[]]) = false),
  assert(f([[],[]]) = false),
  assert(f([{},{[]}]) = false),
  assert(f([{},{[1,2]}]) = false),
  assert(f([{1},{[1]}]) = false),
  assert(f([{1,2},{{1,2}}]) = false),
  assert(f([{1,2,3},{[1,2,3]}]) = false),
  true)$

okltest_dgl_p(f) := block(
  for G in okltest_list_dgl do
    assert(f(G) = true),
  assert(f([]) = false),
  assert(f([[],{}]) = false),
  assert(f([{},[]]) = false),
  assert(f([[],[]]) = false),
  assert(f([{},{[]}]) = false),
  assert(f([{},{[1,2]}]) = false),
  assert(f([{1},{[1,1]}]) = true),
  assert(f([{1,2},{{1,2}}]) = false),
  assert(f([{1,2,3},{[1,2,3]}]) = false),
  true)$

okltest_mug_p(f) := block(
  for G in okltest_list_mug do
    assert(f(G) = true),
  okltest_g_p(buildq([f],lambda([G],
    listp(G) and is(length(G) = 2) and f([G[1],G[2],lambda([e],1)])))),
  assert(f([{1,2},{{1,2}},lambda([e],1.0)]) = false),
  true)$

okltest_mugl_p(f) := block(
  for G in okltest_list_mugl do
    assert(f(G) = true),
  okltest_gl_p(buildq([f],lambda([G],
    listp(G) and is(length(G)=2) and f([G[1],G[2],lambda([e],1)])))),
  assert(f([{1,2},{{1,2}},lambda([e],1.0)]) = false),
  true)$

okltest_mudg_p(f) := block(
  for G in okltest_list_mudg do
    assert(f(G) = true),
  okltest_dg_p(buildq([f],lambda([G],
    listp(G) and is(length(G)=2) and f([G[1],G[2],lambda([e],1)])))),
  assert(f([{1,2},{[1,2]},lambda([e],1.0)]) = false),
  true)$

okltest_mudgl_p(f) := block(
  for G in okltest_list_mudgl do
    assert(f(G) = true),
  okltest_dgl_p(buildq([f],lambda([G],
    listp(G) and is(length(G)=2) and f([G[1],G[2],lambda([e],1)])))),
  assert(f([{1,2},{[1,2]},lambda([e],1.0)]) = false),
  true)$

okltest_gg_p(f) := block(
  for G in okltest_list_gg do
    assert(f(G) = true),
  okltest_gl_p(buildq([f],lambda([G],
    listp(G) and is(length(G)=2) and f([G[1],G[2],identity])))),
  true)$

okltest_gdg_p(f) := block(
  for G in okltest_list_gdg do
    assert(f(G) = true),
  okltest_dgl_p(buildq([f],lambda([G],
    listp(G) and is(length(G)=2) and f([G[1],G[2],identity])))),
  true)$

okltest_og_p(f) := block(
  for G in okltest_list_og do
    assert(f(G) = true),
  assert(f([]) = false),
  assert(f([[],{}]) = false),
  assert(f([{},[]]) = false),
  assert(f([{},{}]) = false),
  assert(f([[],[{}]]) = false),
  assert(f([[],[{1,2}]]) = false),
  assert(f([[1],[{1}]]) = false),
  assert(f([[1,2],[[1,2]]]) = false),
  assert(f([[1,2,3],[{1,2,3}]]) = false),
  assert(f([[1,2],[{1,2},{1,2}]]) = false),
  true)$

okltest_ogl_p(f) := block(
  for G in okltest_list_ogl do
    assert(f(G) = true),
  assert(f([]) = false),
  assert(f([[],{}]) = false),
  assert(f([{},[]]) = false),
  assert(f([{},{}]) = false),
  assert(f([[],[{}]]) = false),
  assert(f([[],[{1,2}]]) = false),
  assert(f([[1],[{1}]]) = true),
  assert(f([[1,2],[[1,2]]]) = false),
  assert(f([[1,2,3],[{1,2,3}]]) = false),
  assert(f([[1,2],[{1,2},{1,2}]]) = false),
  true)$

okltest_odg_p(f) := block(
  for G in okltest_list_odg do
    assert(f(G) = true),
  assert(f([]) = false),
  assert(f([[],{}]) = false),
  assert(f([{},[]]) = false),
  assert(f([{},{}]) = false),
  assert(f([[],[[]]]) = false),
  assert(f([[],[[1,2]]]) = false),
  assert(f([[1],[[1]]]) = false),
  assert(f([[1,2],[{1,2}]]) = false),
  assert(f([[1,2,3],[[1,2,3]]]) = false),
  assert(f([[1,2],[[1,2],[1,2]]]) = false),
  true)$

okltest_odgl_p(f) := block(
  for G in okltest_list_odgl do
    assert(f(G) = true),
  assert(f([]) = false),
  assert(f([[],{}]) = false),
  assert(f([{},[]]) = false),
  assert(f([{},{}]) = false),
  assert(f([[],[[]]]) = false),
  assert(f([[],[[1,2]]]) = false),
  assert(f([[1],[[1,1]]]) = true),
  assert(f([[1,2],[{1,2}]]) = false),
  assert(f([[1,2,3],[[1,2,3]]]) = false),
  assert(f([[1,2],[[1,2],[1,2]]]) = false),
  true)$

okltest_omug_p(f) := block(
  for G in okltest_list_omug do
    assert(f(G) = true),
  okltest_og_p(buildq([f],lambda([G],
    listp(G) and is(length(G)=2) and f([G[1],G[2],lambda([e],1)])))),
  assert(f([[1,2],[{1,2}],lambda([e],1.0)]) = false),
  true)$

okltest_omugl_p(f) := block(
  for G in okltest_list_omugl do
    assert(f(G) = true),
  okltest_ogl_p(buildq([f],lambda([G],
    listp(G) and is(length(G)=2) and f([G[1],G[2],lambda([e],1)])))),
  assert(f([[1,2],[{1,2}],lambda([e],1.0)]) = false),
  true)$

okltest_omudg_p(f) := block(
  for G in okltest_list_omudg do
    assert(f(G) = true),
  okltest_odg_p(buildq([f],lambda([G],
    listp(G) and is(length(G)=2) and f([G[1],G[2],lambda([e],1)])))),
  assert(f([[1,2],[[1,2]],lambda([e],1.0)]) = false),
  true)$

okltest_omudgl_p(f) := block(
  for G in okltest_list_omudgl do
    assert(f(G) = true),
  okltest_odgl_p(buildq([f],lambda([G],
    listp(G) and is(length(G)=2) and f([G[1],G[2],lambda([e],1)])))),
  assert(f([[1,2],[[1,2]],lambda([e],1.0)]) = false),
  true)$

okltest_ogg_p(f) := block(
  for G in okltest_list_ogg do
    assert(f(G) = true),
  okltest_ogl_p(buildq([f],lambda([G],
    listp(G) and is(length(G)=2) and f([G[1],G[2],identity])))),
  true)$

okltest_ogdg_p(f) := block(
  for G in okltest_list_ogdg do
    assert(f(G) = true),
  okltest_odgl_p(buildq([f],lambda([G],
    listp(G) and is(length(G)=2) and f([G[1],G[2],identity])))),
  true)$


/* *********************
   * Checking equality *
   *********************
*/

okltest_gr_equalp(f) := block(
  for L in okltest_list_allgraphs do
    for i : 1 thru length(L) do
      for j : 1 thru length(L) do
        if i=j then
          assert(f(L[i],L[j]) = true)
        else
          assert(f(L[i],L[j]) = false),
  true)$


/* **************
   * Promotions *
   **************
*/


okltest_g2mug(f) := block(
  assert(gr_equalp(f([{},{}]), [{},{},identity]) = true),
  assert(gr_equalp(f([{1},{}]), [{1},{},identity]) = true),
  assert(gr_equalp(f([{1,2},{{1,2}}]), [{1,2},{{1,2}},lambda([e],1)]) = true),
  for L in [okltest_list_g] do
    for G in L do
      assert(mug2g(f(G)) = G),
  true)$

okltest_gl2mugl(f) := block(
  assert(gr_equalp(f([{},{}]), [{},{},identity]) = true),
  assert(gr_equalp(f([{1},{}]), [{1},{},identity]) = true),
  assert(gr_equalp(f([{1,2},{{1,2}}]), [{1,2},{{1,2}},lambda([e],1)]) = true),
  for L in [okltest_list_g,okltest_list_gl] do
    for G in L do
      assert(mugl2gl(f(G)) = G),
  true)$

okltest_g2gg(f) := block(
  assert(gr_equalp(f([{},{}]), [{},{},identity]) = true),
  assert(gr_equalp(f([{1},{}]), [{1},{},identity]) = true),
  assert(gr_equalp(f([{1,2},{{1,2}}]), [{1,2},{{1,2}},identity]) = true),
  for G in okltest_list_g do
    assert(gg2gl(f(G)) = G),
  true)$

okltest_gl2gg(f) := block(
  assert(gr_equalp(f([{},{}]), [{},{},identity]) = true),
  assert(gr_equalp(f([{1},{}]), [{1},{},identity]) = true),
  assert(gr_equalp(f([{1,2},{{1,2}}]), [{1,2},{{1,2}},identity]) = true),
  for L in [okltest_list_g,okltest_list_gl] do
    for G in L do
      assert(gg2gl(f(G)) = G),
  true)$

okltest_mug2gg(f) := block([k1,k2],
  assert(gr_equalp(f([{},{},k1]), [{},{},k2]) = true),
  assert(gr_equalp(f([{1},{},k1]), [{1},{},k2]) = true),
  assert(gr_equalp(f([{1,2},{{1,2}},lambda([e],2)]), [{1,2},{[{1,2},1],[{1,2},2]},first]) = true),
  for L in [okltest_list_mug] do
    for G in L do
      assert(gr_equalp(gg2mugl(f(G)),G) = true),
  true)$

okltest_mugl2gg(f) := block([k1,k2],
  assert(gr_equalp(f([{},{},k1]), [{},{},k2]) = true),
  assert(gr_equalp(f([{1},{},k1]), [{1},{},k2]) = true),
  assert(gr_equalp(f([{1,2},{{1,2}},lambda([e],2)]), [{1,2},{[{1,2},1],[{1,2},2]},first]) = true),
  for L in [okltest_list_mug,okltest_list_mugl] do
    for G in L do
      assert(gr_equalp(gg2mugl(f(G)),G) = true),
  true)$

okltest_ogl2omugl(f) := block(
  assert(gr_equalp(f([[],[]]), [[],[],identity]) = true),
  assert(gr_equalp(f([[1],[]]), [[1],[],identity]) = true),
  assert(gr_equalp(f([[1,2],[{1,2}]]), [[1,2],[{1,2}],lambda([e],1)]) = true),
  for L in [okltest_list_og,okltest_list_ogl] do
    for G in L do
      assert(omugl2ogl(f(G)) = G),
  true)$

okltest_og2ogg(f) := block(
  assert(gr_equalp(f([[],[]]), [[],[],identity]) = true),
  assert(gr_equalp(f([[1],[{1}]]), [[1],[{1}],identity]) = true),
  assert(gr_equalp(f([[1,2],[{1,2}]]), [[1,2],[{1,2}],identity]) = true),
  for G in okltest_list_og do
    assert(ogg2ogl(f(G)) = G),
  true)$

okltest_ogl2ogg(f) := block(
  assert(gr_equalp(f([[],[]]), [[],[],identity]) = true),
  assert(gr_equalp(f([[1],[{1}]]), [[1],[{1}],identity]) = true),
  assert(gr_equalp(f([[1,2],[{1,2}]]), [[1,2],[{1,2}],identity]) = true),
  for L in [okltest_list_og,okltest_list_ogl] do
    for G in L do
      assert(ogg2ogl(f(G)) = G),
  true)$

okltest_omugl2ogg(f) := block([k1,k2],
  assert(gr_equalp(f([[],[],k1]), [[],[],k2]) = true),
  assert(gr_equalp(f([[1],[],k1]), [[1],[],k2]) = true),
  assert(gr_equalp(f([[2,1],[{1,2},{1}],lambda([e],2)]), [[2,1],[[{1,2},1],[{1,2},2],[{1},1],[{1},2]],first]) = true),
  for L in [okltest_list_omug,okltest_list_omugl] do
    for G in L do
      assert(gr_equalp(ogg2omugl(f(G)),G) = true),
  true)$

okltest_g2og(f) := block(
  assert(f([{},{}]) = [[],[]]),
  assert(f([{1},{}]) = [[1],[]]),
  assert(f([{1,2},{{1,2}}]) = [[1,2],[{1,2}]]),
  for G in okltest_list_g do
    assert(og2g(f(G)) = G),
  true)$

okltest_gl2ogl(f) := block(
  assert(f([{},{}]) = [[],[]]),
  assert(f([{1},{}]) = [[1],[]]),
  assert(f([{1,2},{{1,2}}]) = [[1,2],[{1,2}]]),
  for L in [okltest_list_g,okltest_list_gl] do
    for G in L do
      assert(ogl2gl(f(G)) = G),
  true)$

okltest_mug2omug(f) := block([k],
  assert(f([{},{},k]) = [[],[],k]),
  assert(gr_equalp(f([{1},{},k]), [[1],[],identity]) = true),
  assert(f([{1,2},{{1,2}},lambda([e],2)]) = [[1,2],[{1,2}],lambda([e],2)]),
  for G in okltest_list_mug do
    assert(omug2mug(f(G)) = G),
  true)$

okltest_mugl2omugl(f) := block([k],
  assert(f([{},{},k]) = [[],[],k]),
  assert(gr_equalp(f([{1},{},k]), [[1],[],identity]) = true),
  assert(f([{1,2},{{1,2}},lambda([e],2)]) = [[1,2],[{1,2}],lambda([e],2)]),
  for L in [okltest_list_mug,okltest_list_mugl] do
    for G in L do
      assert(omugl2mugl(f(G)) = G),
  true)$

okltest_gg2ogg(f) := block([k],
  assert(f([{},{},k]) = [[],[],k]),
  assert(f([{1},{},k]) = [[1],[],k]),
  assert(f([{1,2},{1,2},lambda([e],{1,2})]) = [[1,2],[1,2],lambda([e],{1,2})]),
  for G in okltest_list_gg do
    assert(ogg2gg(f(G)) = G),
  true)$

okltest_dg2mudg(f) := block ([k],
  assert(gr_equalp(f([{},{}]), [{},{},k]) = true),
  assert(gr_equalp(f([{1},{}]), [{1},{},k]) = true),
  assert(f([{1,2},{[1,2],[2,1]}]) = [{1,2},{[1,2],[2,1]},lambda([e],1)]),
  for L in [okltest_list_dg] do
    for G in L do
      assert(mudgl2dgl(f(G)) = G),
  true)$

okltest_dgl2mudgl(f) := block ([k],
  assert(gr_equalp(f([{},{}]), [{},{},k]) = true),
  assert(gr_equalp(f([{1},{}]), [{1},{},k]) = true),
  assert(f([{1,2},{[1,2],[2,1]}]) = [{1,2},{[1,2],[2,1]},lambda([e],1)]),
  assert(f([{1,2},{[1,2],[2,1],[1,1]}]) = [{1,2},{[1,2],[2,1],[1,1]},lambda([e],1)]),
  for L in [okltest_list_dg,okltest_list_dgl] do
    for G in L do
      assert(mudgl2dgl(f(G)) = G),
  true)$

okltest_dg2gdg(f) := block([k],
  assert(gr_equalp(f([{},{}]), [{},{},k]) = true),
  assert(gr_equalp(f([{1},{}]), [{1},{},k]) = true),
  assert(gr_equalp(f([{1,2},{[1,2],[2,1]}]), [{1,2},{[1,2],[2,1]},identity]) = true),
  for L in [okltest_list_dg] do
    for G in L do
      assert(gdg2dgl(f(G)) = G),
  true)$

okltest_dgl2gdg(f) := block([k],
  assert(gr_equalp(f([{},{}]), [{},{},k]) = true),
  assert(gr_equalp(f([{1},{}]), [{1},{},k]) = true),
  assert(gr_equalp(f([{1,2},{[1,2],[2,1]}]), [{1,2},{[1,2],[2,1]},identity]) = true),
  assert(gr_equalp(f([{1,2},{[1,2],[2,1],[1,1]}]), [{1,2},{[1,2],[2,1],[1,1]},identity]) = true),
  for L in [okltest_list_dg,okltest_list_dgl] do
    for G in L do
      assert(gdg2dgl(f(G)) = G),
  true)$

okltest_mudg2gdg(f) := block([k1,k2],
  assert(gr_equalp(f([{},{},k1]), [{},{},k2]) = true),
  assert(gr_equalp(f([{1},{},k1]), [{1},{},k2]) = true),
  assert(gr_equalp(f([{1,2},{[1,2]},lambda([e],2)]), [{1,2},{[[1,2],1],[[1,2],2]},first]) = true),
  for L in [okltest_list_mudg] do
    for G in L do
      assert(gr_equalp(gdg2mudgl(f(G)),G) = true),
  true)$

okltest_mudgl2gdg(f) := block([k1,k2],
  assert(gr_equalp(f([{},{},k1]), [{},{},k2]) = true),
  assert(gr_equalp(f([{1},{},k1]), [{1},{},k2]) = true),
  assert(gr_equalp(f([{1},{[1,1]},lambda([e],3)]), [{1},{[[1,1],1],[[1,1],2],[[1,1],3]},first]) = true),
  assert(gr_equalp(f([{1,2},{[1,2]},lambda([e],2)]), [{1,2},{[[1,2],1],[[1,2],2]},first]) = true),
  for L in [okltest_list_mudg,okltest_list_mudgl] do
    for G in L do
      assert(gr_equalp(gdg2mudgl(f(G)),G) = true),
  true)$

okltest_odgl2omudgl(f) := block ([k],
  assert(gr_equalp(f([[],[]]), [[],[],k]) = true),
  assert(gr_equalp(f([[1],[]]), [[1],[],k]) = true),
  assert(f([[1,2],[[2,1],[1,2]]]) = [[1,2],[[2,1],[1,2]],lambda([e],1)]),
  for L in [okltest_list_odg,okltest_list_odgl] do
    for G in L do
      assert(omudgl2odgl(f(G)) = G),
  true)$

okltest_odg2ogdg(f) := block([k],
  assert(gr_equalp(f([[],[]]), [[],[],k]) = true),
  assert(gr_equalp(f([[1],[]]), [[1],[],k]) = true),
  assert(gr_equalp(f([[2,1],[[1,2],[2,1]]]), [[2,1],[[1,2],[2,1]],identity]) = true),
  for L in [okltest_list_odg] do
    for G in L do
      assert(ogdg2odgl(f(G)) = G),
  true)$

okltest_odgl2ogdg(f) := block([k],
  assert(gr_equalp(f([[],[]]), [[],[],k]) = true),
  assert(gr_equalp(f([[1],[]]), [[1],[],k]) = true),
  assert(gr_equalp(f([[2,1],[[1,2],[2,1]]]), [[2,1],[[1,2],[2,1]],identity]) = true),
  for L in [okltest_list_odg,okltest_list_odgl] do
    for G in L do
      assert(ogdg2odgl(f(G)) = G),
  true)$

okltest_omudgl2ogdg(f) := block([k1,k2],
  assert(gr_equalp(f([[],[],k1]), [[],[],k2]) = true),
  assert(gr_equalp(f([[1],[],k1]), [[1],[],k2]) = true),
  assert(gr_equalp(f([[1,2],[[1,2]],lambda([e],2)]), [[1,2],[[[1,2],1],[[1,2],2]],first]) = true),
  for L in [okltest_list_omudg,okltest_list_omudgl] do
    for G in L do
      assert(gr_equalp(ogdg2omudgl(f(G)),G) = true),
  true)$

okltest_dg2odg(f) := block(
  assert(f([{},{}]) = [[],[]]),
  assert(f([{1},{}]) = [[1],[]]),
  assert(f([{1,2},{[1,2]}]) = [[1,2],[[1,2]]]),
  for G in okltest_list_dg do
    assert(odgl2dgl(f(G)) = G),
  true)$

okltest_dgl2odgl(f) := block(
  assert(f([{},{}]) = [[],[]]),
  assert(f([{1},{}]) = [[1],[]]),
  assert(f([{1,2},{[1,2]}]) = [[1,2],[[1,2]]]),
  for L in [okltest_list_dg,okltest_list_dgl] do
    for G in L do
      assert(odgl2dgl(f(G)) = G),
  true)$

okltest_mudg2omudg(f) := block([k],
  assert(f([{},{},k]) = [[],[],k]),
  assert(gr_equalp(f([{1},{},k]), [[1],[],identity]) = true),
  assert(f([{1,2},{[1,2],[2,1]},lambda([e],2)]) = [[1,2],[[1,2],[2,1]],lambda([e],2)]),
  for L in [okltest_list_mudg] do
    for G in L do
      assert(omudg2mudg(f(G)) = G),
  true)$

okltest_mudgl2omudgl(f) := block([k],
  assert(f([{},{},k]) = [[],[],k]),
  assert(gr_equalp(f([{1},{},k]), [[1],[],identity]) = true),
  assert(f([{1,2},{[1,2],[2,1]},lambda([e],2)]) = [[1,2],[[1,2],[2,1]],lambda([e],2)]),
  for L in [okltest_list_mudg,okltest_list_mudgl] do
    for G in L do
      assert(omudgl2mudgl(f(G)) = G),
  true)$

okltest_gdg2ogdg(f) := block([k],
  assert(f([{},{},k]) = [[],[],k]),
  assert(f([{1},{},k]) = [[1],[],k]),
  assert(f([{1,2,3},{1,2,3},lambda([e],if e=1 then [1,2] elseif e=2 then [2,3] else [3,1])]) = [[1,2,3],[1,2,3],lambda([e],if e=1 then [1,2] elseif e=2 then [2,3] else [3,1])]),
  for G in okltest_list_gg do
    assert(ogdg2gdg(f(G)) = G),
  true)$


/* *************
   * Downcasts *
   *************
*/

okltest_mug2g(f) := block([k,V,E],
  assert(f([{},{},k]) = [{},{}]),
  assert(f([V,E,k]) = [V,E]),
  true)$

okltest_mugl2gl(f) := block([k,V,E],
  assert(f([{},{},k]) = [{},{}]),
  assert(f([{1},{{1}},k]) = [{1},{{1}}]),
  assert(f([V,E,k]) = [V,E]),
  assert(okltest_mug2g(f) = true),
  true)$

okltest_gg2gl(f) := block([e],
  assert(f([{},{},e]) = [{},{}]),
  assert(f(cyclegraph_gg(1)) = [{1},{{1}}]),
  assert(f(cyclegraph_gg(2)) = [{1,2},{{1,2}}]),
  for n : 1 thru 3 do
    assert(f(dipole_gg(n)) = [{1,2},{{1,2}}]),
  true)$

okltest_gg2mugl(f) := block([x],
  assert(gr_equalp(f([{},{},e]), [{},{},lambda([e],x)]) = true),
  assert(gr_equalp(f(cyclegraph_gg(1)), [{1},{{1}}, lambda([e],1)]) = true),
  assert(gr_equalp(f(cyclegraph_gg(2)), [{1,2},{{1,2}}, lambda([e],2)]) = true),
  for n : 1 thru 3 do
    assert(gr_equalp(f(dipole_gg(n)), [{1,2},{{1,2}}, \lambda([e],n)]) = true),
  true)$

okltest_omug2og(f) := block([k,V,E],
  assert(f([[],[],k]) = [[],[]]),
  assert(f([V,E,k]) = [V,E]),
  true)$

okltest_omugl2ogl(f) := block([k,V,E],
  assert(f([[],[],k]) = [[],[]]),
  assert(f([[1],[{1}],k]) = [[1],[{1}]]),
  assert(f([V,E,k]) = [V,E]),
  assert(okltest_mug2g(f) = true),
  true)$

okltest_ogg2ogl(f) := block([e],
  assert(f([[],[],e]) = [[],[]]),
  assert(f(cyclegraph_ogg(1)) = [[1],[{1}]]),
  assert(f(cyclegraph_ogg(2)) = [[1,2],[{1,2}]]),
  for n : 1 thru 3 do
    assert(f(dipole_ogg(n)) = [[1,2],[{1,2}]]),
  true)$

okltest_ogg2omugl(f) := block([e,e2,x],
  assert(gr_equalp(f([[],[],e]), [[],[],e2]) = true),
  assert(gr_equalp(f(cyclegraph_ogg(1)), [[1],[{1}], lambda([e],1)]) = true),
  assert(gr_equalp(f(cyclegraph_ogg(2)), [[1,2],[{1,2}], lambda([e],2)]) = true),
  for n : 1 thru 3 do
    assert(gr_equalp(f(dipole_ogg(n)), [[1,2],[{1,2}], lambda([e],n)]) = true),
  true)$

okltest_og2g(f) := (
  assert(f([[],[]]) = [{},{}]),
  assert(f([[1],[]]) = [{1},{}]),
  assert(f([[1,2],[{1,2}]]) = [{1,2},{{1,2}}]),
  true)$

okltest_ogl2gl(f) := (
  assert(okltest_og2g(f) = true),
  assert(f([[1],[{1}]]) = [{1},{{1}}]),
  true)$

okltest_omug2mug(f) := block([e],
  assert(f([[],[],e]) = [{},{},e]),
  assert(f([[1],[],e]) =  [{1},{},e]),
  assert(f([[1,2],[{1,2}],e]) = [{1,2},{{1,2}},e]),
  true)$

okltest_omugl2mugl(f) := block([e],
  assert(okltest_omug2mug(f) = true),
  assert(f([[1],[{1}],e]) = [{1},{{1}},e]),
  true)$

okltest_ogg2gg(f) := block([ef,e,e2],
  assert(f([[],[],ef]) = [{},{},ef]),
  assert(f([[1],[],ef]) =  [{1},{},ef]),
  assert(f([[1],[e],ef]) =  [{1},{e},ef]),
  assert(f([[1,2],[e,e2],ef]) = [{1,2},{e,e2},ef]),
  true)$

okltest_mudg2dg(f) := block([e],
  assert(f([{},{},e]) = [{},{}]),
  assert(f([{1},{},e]) = [{1},{}]),
  assert(f([{1,2},{[1,2]},e]) = [{1,2},{[1,2]}]),
  assert(f([{1,2},{[1,2],[2,1]},e]) = [{1,2},{[1,2],[2,1]}]),
  true)$

okltest_mudgl2dgl(f) := block([e],
  assert(f([{},{},e]) = [{},{}]),
  assert(f([{1},{},e]) = [{1},{}]),
  assert(f([{1,2},{[1,2]},e]) = [{1,2},{[1,2]}]),
  assert(f([{1,2},{[1,2],[2,1]},e]) = [{1,2},{[1,2],[2,1]}]),
  assert(f([{1},{[1,1]},e]) = [{1},{[1,1]}]),
  true)$

okltest_gdg2dgl(f) := block([e],
  assert(f([{},{},e]) = [{},{}]),
  assert(f([{1,2},{},e]) = [{1,2},{}]),
  assert(f([{1,2,3},{[1,1],[1,2],[2,3]},identity]) = [{1,2,3},{[1,1],[1,2],[2,3]}]),
  assert(f([{1},{1},lambda([x],[1,1])]) = [{1},{[1,1]}]),
  true)$

okltest_gdg2mudgl(f) := block([e],
  assert(gr_equalp(f([{},{},e]), [{},{},e]) = true),
  assert(gr_equalp(f([{1},{},e]), [{1},{},e]) = true),
  assert(gr_equalp(f([{1},{1,2},lambda([x],[1,1])]), [{1},{[1,1]}, lambda([x],2)]) = true),
  assert(gr_equalp(f([{1,2},{1,2,3,4},lambda([x],[1,2])]), [{1,2},{[1,2]}, lambda([x],4)]) = true),
  true)$

okltest_omudg2odg(f) := block([e],
  assert(f([[],[],e]) = [[],[]]),
  assert(okltest_mudg2dg(buildq([f], lambda([G], odg2dg(f(mudg2omudg(G)))))) = true),
  true)$

okltest_omudgl2odgl(f) := block([e],
  assert(f([[],[],e]) = [[],[]]),
  assert(okltest_mudgl2dgl(buildq([f], lambda([G], odgl2dgl(f(mudgl2omudgl(G)))))) = true),
  true)$

okltest_ogdg2odgl(f) := block([e],
  assert(f([[],[],e]) = [[],[]]),
  assert(okltest_gdg2dgl(buildq([f], lambda([G], odgl2dgl(f(gdg2ogdg(G)))))) = true),
  true)$

okltest_ogdg2omudgl(f) := block([e],
  assert(gr_equalp(f([[],[],e]), [[],[],e]) = true),
  assert(okltest_gdg2mudgl(buildq([f], lambda([G], omudgl2mudgl(f(gdg2ogdg(G)))))) = true),
  true)$

okltest_odg2dg(f) := (
  assert(f([[],[]]) = [{},{}]),
  assert(f([[1],[]]) = [{1},{}]),
  assert(f([[1,2],[[1,2]]]) = [{1,2},{[1,2]}]),
  assert(f([[1,3,2,4],[[3,1],[4,2]]]) = [{1,2,3,4},{[3,1],[4,2]}]),
  true)$

okltest_odgl2dgl(f) := (
  assert(f([[],[]]) = [{},{}]),
  assert(f([[1],[[1,1]]]) = [{1},{[1,1]}]),
  assert(f([[1,2],[[1,2],[2,2]]]) = [{1,2},{[1,2],[2,2]}]),
  assert(okltest_odg2dg(f) = true),
  true)$

okltest_omudg2mudg(f) := block([e],
  assert(f([[],[],e]) = [{},{},e]),
  assert(f([[1,2],[[1,2],[2,1]],e]) = [{1,2},{[1,2],[2,1]},e]),
  true)$

okltest_omudgl2mudgl(f) := block([e],
  assert(f([[],[],e]) = [{},{},e]),
  assert(okltest_omudg2mudg(f) = true),
  assert(f([[1,2],[[1,2],[2,1],[1,1]],e]) = [{1,2},{[1,2],[2,1],[1,1]},e]),
  true)$

okltest_ogdg2gdg(f) := block([e],
  assert(f([[],[],e]) = [{},{},e]),
  assert(f([[1,2],[1,3,-1],e]) = [{1,2},{1,3,-1},e]),
  true)$


/* ***************
   * Conversions *
   ***************
*/

okltest_gl2g(f) := (
  assert(f([{},{}]) = [{},{}]),
  assert(f([{1},{}]) = [{1},{}]),
  assert(f([{1},{{1}}]) = [{1},{}]),
  /* XXX */
  true)$

okltest_gg2g(f) := (
  for n : 0 thru 3 do block([G : dipole_gg(n)],
    if n = 0 then assert(f(G) = [{1,2},{}])
    else assert(f(G) = [{1,2},{{1,2}}])),
  for n : 0 thru 3 do block([G : bouquet_gg(n)],
    assert(f(G) = [{1},{}])),
  assert(okltest_gl2g(buildq([f],lambda([G],f(gl2gg(G)))))),
  true)$

okltest_ogl2og(f) := (
  assert(f([[1,3,2],[{2,3},{1},{1,3},{2}]]) = [[1,3,2],[{2,3},{1,3}]]),
  /* XXX */
  assert(okltest_gl2g(buildq([f],lambda([G],og2g(f(gl2ogl(G))))))),
  true)$

okltest_ogg2og(f) := (
  /* XXX */
  assert(okltest_gg2g(buildq([f],lambda([G],og2g(f(gg2ogg(G))))))),
  true)$

okltest_mugl2mug(f) := (
  /* XXX */
  assert(okltest_gl2g(buildq([f],lambda([G],mug2g(f(gl2mugl(G))))))),
  true)$

okltest_omugl2omug(f) := (
  /* XXX */
  assert(okltest_ogl2og(buildq([f],lambda([G],omug2og(f(ogl2omugl(G))))))),
  true)$

okltest_dgl2dg(f) := (
  assert(f([{},{}]) = [{},{}]),
  assert(f([{1},{[1,1]}]) = [{1},{}]),
  assert(f([{1,2,3},{[1,2],[2,1],[3,3],[1,3]}]) = [{1,2,3},{[1,2],[2,1],[1,3]}]),
  true)$

okltest_odgl2odg(f) := (
    assert(f([[2,1,3],[[1,2],[2,1],[3,3],[1,3]]]) = [[2,1,3],[[1,2],[2,1],[1,3]]]),
  assert(okltest_dgl2dg(buildq([f], lambda([G], odgl2dgl(f(dgl2odgl(G)))))) = true),
  true)$

okltest_dg2g(f) := (
  assert(f([{},{}]) = [{},{}]),
  assert(f([{1},{}]) = [{1},{}]),
  assert(f([{1,2},{[1,2]}]) = [{1,2},{{1,2}}]),
  assert(f([{1,2},{[1,2],[2,1]}]) = [{1,2},{{1,2}}]),
  /* XXX */
  true)$

okltest_odg2og(f) := (
  assert(f([[3,2,1],[[3,1],[2,1],[2,3],[1,3],[1,2]]]) = [[3,2,1],[{1,3},{1,2},{2,3}]]),
  assert(okltest_dg2g(buildq([f],lambda([G],og2g(f(dg2odg(G))))))),
  true)$

okltest_dgl2gl(f) := (
  assert(f([{1},{[1,1]}]) = [{1},{{1}}]),
  assert(okltest_dg2g(f)),
  true)$

okltest_odgl2ogl(f) := (
  /* XXX */
  assert(okltest_odg2og(f)),
  assert(okltest_dgl2gl(buildq([f],lambda([G],ogl2gl(f(dgl2odgl(G))))))),
  true)$

okltest_gdg2gg(f) := (
  for n : 0 thru 3 do block([G : dipole_gdg(n)],
    assert(gr_equalp(f(G), dipole_gg(n)) = true)),
  assert(okltest_dgl2gl(buildq([f],lambda([G],gg2gl(f(dgl2gdg(G))))))),
  true)$

okltest_ogdg2ogg(f) := (
  for n : 0 thru 3 do block([G : dipole_ogdg(n)],
    assert(gr_equalp(f(G), dipole_ogg(n)) = true)),
  assert(okltest_odgl2ogl(buildq([f],lambda([G],ogg2ogl(f(odgl2ogdg(G))))))),
  assert(okltest_gdg2gg(buildq([f],lambda([G],ogg2gg(f(gdg2ogdg(G))))))),
  true)$

okltest_mudg2mug(f) := block([ef],
  assert(gr_equalp(f([{},{},ef]), [{},{},ef]) = true),
  assert(gr_equalp(f([{11},{},ef]), [{11},{},ef]) = true),
  assert(gr_equalp(f([{1,2},{[1,2]},lambda([e],3)]), [{1,2},{{1,2}},lambda([e],3)]) = true),
  assert(gr_equalp(f([{1,2},{[2,1]},lambda([e],3)]), [{1,2},{{1,2}},lambda([e],3)]) = true),
  assert(gr_equalp(f([{1,2},{[1,2],[2,1]},lambda([e],3)]), [{1,2},{{1,2}},lambda([e],6)]) = true),
  assert(okltest_dg2g(buildq([f], lambda([G], mug2g(f(dg2mudg(G)))))) = true),
  true)$

okltest_g2dg(f) := block(
  assert(f([{},{}]) = [{},{}]),
  assert(f([{1},{}]) = [{1},{}]),
  assert(f([{1,2},{{1,2}}]) = [{1,2},{[1,2],[2,1]}]),
  for G in okltest_list_g do
    assert(dgl2gl(f(G)) = G),
  true)$

okltest_gl2dgl(f) := block(
  assert(f([{},{}]) = [{},{}]),
  assert(f([{1},{}]) = [{1},{}]),
  assert(f([{1},{{1}}]) = [{1},{[1,1]}]),
  assert(f([{1,2},{{1,2}}]) = [{1,2},{[1,2],[2,1]}]),
  for G in append(okltest_list_g,okltest_list_gl) do
    assert(dgl2gl(f(G)) = G),
  true)$

okltest_mug2mudg(f) := block([e],
  assert(gr_equalp(f([{},{},e]), [{},{},e]) = true),
  assert(gr_equalp(f([{1},{},e]), [{1},{},e]) = true),
  assert(gr_equalp(f([{1,2},{{1,2}},lambda([e],2)]), [{1,2},{[1,2],[2,1]},lambda([e],2)]) = true),
  for G in okltest_list_mug do block([G2 : mudg2mug(f(G))],
    assert(gr_equalp([G2[1],G2[2],buildq([G2],lambda([e],G2[3](e)/2))], G) = true)
  ),
  true)$

okltest_odg2ostd0dg(f) := (
  assert(f([[],[]]) = [[],[]]),
  assert(f([[1],[]]) = [[0],[]]),
  assert(f([[2,4,7],[[4,2],[2,7]]]) = [[0,1,2],[[1,0],[0,2]]]),
  assert(f([[5,-1,88,44], [[44,88],[88,-1]]]) = [[0,1,2,3],[[3,2],[2,1]]]),
  true)$

okltest_dg2std0dg(f) := (
  assert(f([{},{}]) = [{},{}]),
  assert(f([{2,-3},{[2,-3]}]) = [{0,1},{[1,0]}]),
  assert(f([{-4,0,2},{[0,2],[0,-4]}]) = [{0,1,2},{[1,2],[1,0]}]),
  true)$


/* **************************
   * Basic graph operations *
   **************************
*/

okltest_expand_edge(f) := (
  assert(f({1,2}) = [1,2]),
  assert(f({1}) = [1,1]),
  true)$

okltest_neighbours_g(f) := block([G],
  assert(f(1,[{1},{}]) = {}),
  assert(f(1,[{1,2},{{1,2}}]) = {2}),
  for n : 1 thru 4 do
    assert(f(1,complete_g(setn(n))) = setmn(2,n)),
  true)$

okltest_neighbours_og(f) := block([G],
  assert(f(1,[[1],[]]) = {}),
  assert(f(1,[[1,2],[{1,2}]]) = {2}),
  assert(okltest_neighbours_g(buildq([f], lambda([v,G], f(v,g2og(G))))) = true),
  true)$

okltest_neighbours_gl(f) := block([G],
  assert(f(1,[{1},{{1}}]) = {1}),
  assert(okltest_neighbours_g(buildq([f],lambda([v,G],f(v,G))))),
  G : [{1,2,3,4,5,6,7},{{1,2},{1,3},{1,6},{2,3},{2,5},{3,4},{4},{4,7},{5},{5,7},{6},{6,7}}],
  assert(f(1,G) = {2,3,6}),
  assert(f(6,G) = {1,6,7}),
  assert(okltest_neighbours_g(f)),
  true)$

okltest_neighbours_gg(f) := block(
  okltest_neighbours_gl(buildq([f],lambda([v,G],f(v,gl2gg(G))))),
  for n : 0 thru 2 do block([G : ogg2gg(dipole_ogg(n))],
    for v : 1 thru 2 do
      if n=0 then assert(f(v,G) = {})
      else assert(f(v,G) = disjoin(v,{1,2})
  ),
  for n : 0 thru 2 do block([G : ogg2gg(bouquet_ogg(n))],
    if n=0 then assert(f(1,G) = {})
      else assert(f(1,G) = {1})
  ),
  true))$

okltest_outneighbours_dg(f) := (
  assert(f(1,[{1},{}]) = {}),
  assert(f(1,[{1,2,3},{[1,2],[2,3]}]) = {2}),
  true)$

okltest_outneighbours_dgl(f) := (
  assert(f(1,[{1},{}]) = {}),
  assert(f(1,[{1},{[1,1]}]) = {1}),
  assert(okltest_outneighbours_dg(f) = true),
  true)$

okltest_inneighbours_dg(f) := (
  assert(f(1,[{1},{}]) = {}),
  assert(f(1,[{1,2,3},{[1,2],[2,3]}]) = {}),
  assert(f(1,[{1,2,3},{[2,1],[2,3]}]) = {2}),
  assert(okltest_outneighbours_dg(buildq([f], lambda([v,G],f(v,transposed_dg(G))))) = true),
  true)$

okltest_inneighbours_dgl(f) := (
  assert(f(1,[{1},{}]) = {}),
  assert(f(1,[{1},{[1,1]}]) = {1}),
  assert(okltest_inneighbours_dg(f) = true),
  assert(okltest_outneighbours_dgl(buildq([f], lambda([v,G],f(v,transposed_dgl(G))))) = true),
  true)$

okltest_remove_vertices_gl(f) := (
  assert(f({1,2,3},[{},{}]) = [{},{}]),
  assert(f({},[{},{}]) = [{},{}]),
  assert(f({},[{2,3,4},{{3,4}}]) = [{2,3,4},{{3,4}}]),
  assert(f({1},[{1,2,3},{{1},{1,2},{2,3}}]) = [{2,3},{{2,3}}]),
  assert(f({1,3},[{1,2,3,4},{{1},{2},{1,3},{1,4},{3,2},{2,4}}]) = [{2,4},{{2},{2,4}}]),
  true)$


/* *****************************
   * Basic graph constructions *
   *****************************
*/


okltest_edge_induced_subgraph_g(f) := (
  assert(f({},[{},{}]) = [{},{}]),
  assert(f({},[{1},{}]) = [{},{}]),
  assert(f({{1,2}},[{1,2,3},{{1,2}}]) = [{1,2},{{1,2}}]),
  assert(f({{1,2},{2,3}},[{1,2,3},{{1,2},{2,3}}]) = [{1,2,3},{{1,2},{2,3}}]),
  assert(f({{1,2},{2,3}},[{1,2,3},{{1,2},{2,3},{1,3}}]) = [{1,2,3},{{1,2},{2,3}}]),
  true)$

okltest_edge_induced_subgraph_gl(f) := (
  assert(f({{1}},[{1},{{1}}]) = [{1},{{1}}]),
  assert(f({{1,2}},[{1,2},{{1,2},{2}}]) = [{1,2},{{1,2}}]),
  assert(f({{1,2}},[{1,2,3},{{1,2},{3}}]) = [{1,2},{{1,2}}]),
  true)$

okltest_edge_induced_subgraph_mug(f) := block([edgef],
  assert(gr_equalp(f({},[{},{},edgef]), [{},{},edgef]) = true),
  assert(gr_equalp(f({},[{1},{},edgef]), [{},{},edgef]) = true),
  assert(gr_equalp(f({{1,2}},[{1,2},{{1,2}},lambda([e],1)]), [{1,2},{{1,2}},lambda([e],if e={1,2} then 1)]) = true),
  assert(gr_equalp(f({{1,2}},[{1,2},{{1,2}},lambda([e],2)]), [{1,2},{{1,2}},lambda([e],if e={1,2} then 2)]) = true),
  assert(gr_equalp(f({{1,2}},[{1,2,3},{{1,2},{2,3}},lambda([e],if e={1,2} then 2 elseif e={2,3} then 3)]), [{1,2},{{1,2}},lambda([e],if e={1,2} then 2)]) = true),
  true)$

okltest_edge_induced_subgraph_mugl(f) := block([edgef],
  assert(gr_equalp(f({},[{},{},edgef]), [{},{},edgef]) = true),
  assert(gr_equalp(f({},[{1},{},edgef]), [{},{},edgef]) = true),
  assert(gr_equalp(f({{1}},[{1},{{1}},lambda([e],2)]), [{1},{{1}},lambda([e],if e={1} then 2)]) = true),
  assert(gr_equalp(f({{1}},[{1,2},{{1},{1,2}},lambda([e],if e={1} then 2 else 3)]), [{1},{{1}},lambda([e],if e={1} then 2)]) = true),
  assert(gr_equalp(f({{1,2},{1,3}}, [{1,2,3,4},{{1,2},{1},{1,3},{2,4}},lambda([e],3)]), [{1,2,3},{{1,2},{1,3}},lambda([e],3)]) = true),
  true)$

okltest_edge_induced_subgraph_gg(f) := block([edgef],
  assert(f({},[{},{},edgef]) = [{},{},edgef]),
  assert(f({},[{1},{},edgef]) = [{},{},edgef]),
  assert(f({1},[{1,2},{1},lambda([e],{1,2})]) = [{1,2},{1},lambda([e],{1,2})]),
  assert(f({1},[{1,2,3},{1,2},lambda([e],if e=1 then {1,2} else {2,3})]) = [{1,2},{1},lambda([e],if e=1 then {1,2} else {2,3})]),
  assert(f({1,2},[{1,2,3},{1,2,3},lambda([e],if e=1 then {1,2} elseif e=2 then {2,3} else {1,3})]) = [{1,2,3},{1,2},lambda([e],if e=1 then {1,2} elseif e=2 then {2,3} else {1,3})]),
  assert(gr_equalp(f({1,2},[{1,2,3},{1,2,3},lambda([e],if e=1 then {1,2} elseif e=2 then {2,3} else {1,3})]), [{1,2,3},{1,2},lambda([e],if e=1 then {1,2} elseif e=2 then {2,3})]) = true),
  true)$

okltest_edge_induced_subgraph_dg(f) := (
  assert(f({},[{},{}]) = [{},{}]),
  assert(f({},[{1},{}]) = [{},{}]),
  assert(f({[1,2]},[{1,2,3},{[1,2]}]) = [{1,2},{[1,2]}]),
  assert(f({[1,2],[3,2]},[{1,2,3},{[1,2],[3,2],[1,3]}]) = [{1,2,3},{[1,2],[3,2]}]),
  true)$

okltest_edge_induced_subgraph_dgl(f) := (
  assert(f({},[{1},{[1,1]}]) = [{},{}]),
  assert(f({[1,1]},[{1},{[1,1]}]) = [{1},{[1,1]}]),
  assert(f({[1,2],[1,1]},[{1,2},{[1,2],[1,1]}]) = [{1,2},{[1,2],[1,1]}]),
  assert(f({[1,2]},[{1,2},{[2,2],[1,2]}]) = [{1,2},{[1,2]}]),
  true)$

okltest_edge_induced_subgraph_mudg(f) := block([edgef],
  assert(gr_equalp(f({},[{},{},edgef]), [{},{},edgef]) = true),
  assert(gr_equalp(f({},[{1},{},edgef]), [{},{},edgef]) = true),
  assert(gr_equalp(f({[1,2]},[{1,2},{[1,2]},lambda([e],1)]), [{1,2},{[1,2]},lambda([e],if e=[1,2] then 1)]) = true),
  assert(gr_equalp(f({[1,2]},[{1,2},{[1,2]},lambda([e],2)]), [{1,2},{[1,2]},lambda([e],if e=[1,2] then 2)]) = true),
  assert(gr_equalp(f({[1,2]},[{1,2,3},{[1,2],[2,3]},lambda([e],if e=[1,2] then 2 elseif e=[2,3] then 3)]), [{1,2},{[1,2]},lambda([e],if e=[1,2] then 2)]) = true),
  true)$

okltest_edge_induced_subgraph_mudgl(f) := block([edgef],
  assert(gr_equalp(f({},[{},{},edgef]), [{},{},edgef]) = true),
  assert(gr_equalp(f({},[{1},{},edgef]), [{},{},edgef])),
  assert(gr_equalp(f({[1,1]},[{1},{[1,1]},lambda([e],2)]), [{1},{[1,1]},lambda([e],if e=[1,1] then 2)]) = true),
  assert(gr_equalp(f({[1,1]},[{1,2},{[1,1],[1,2]},lambda([e],if e=[1,1] then 2 else 3)]), [{1},{[1,1]},lambda([e],if e=[1,1] then 2)]) = true),
  true)$

okltest_edge_induced_subgraph_gdg(f) := block([edgef],
  assert(gr_equalp(f({},[{},{},edgef]), [{},{},edgef]) = true),
  assert(gr_equalp(f({},[{1},{},edgef]), [{},{},edgef]) = true),
  assert(gr_equalp(f({1},[{1,2},{1},lambda([e],[1,2])]), [{1,2},{1},lambda([e],if e=1 then [1,2])]) = true),
  assert(gr_equalp(f({1},[{1,2,3},{1,2},lambda([e],if e=1 then [1,2] else [2,3])]), [{1,2},{1},lambda([e],if e=1 then [1,2])]) = true),
  assert(gr_equalp(f({1,2},[{1,2,3},{1,2,3},lambda([e],if e=1 then [1,2] elseif e=2 then [2,3] else [1,3])]), [{1,2,3},{1,2},lambda([e],if e=1 then [1,2] elseif e=2 then [2,3])]) = true),
  true)$

okltest_induced_subgraph_g(f) := (
  assert(f({},[{},{}]) = [{},{}]),
  assert(f({},[{1},{}]) = [{},{}]),
  assert(f({1,2},[{1,2,3},{{1,2}}]) = [{1,2},{{1,2}}]),
  assert(f({1,3},[{1,2,3},{{1,2},{2,3}}]) = [{1,3},{}]),
  assert(f({1,3},[{1,2,3},{{1,2},{2,3},{1,3}}]) = [{1,3},{{1,3}}]),
  true)$

okltest_induced_subgraph_gl(f) := (
  assert(f({1},[{1},{{1}}]) = [{1},{{1}}]),
  assert(f({2},[{1,2},{{1,2},{2}}]) = [{2},{{2}}]),
  assert(f({1,2},[{1,2,3},{{1,2},{3}}]) = [{1,2},{{1,2}}]),
  true)$

okltest_induced_subgraph_dg(f) := (
  assert(f({},[{},{}]) = [{},{}]),
  assert(f({},[{1},{}]) = [{},{}]),
  assert(f({1,2},[{1,2,3},{[1,2]}]) = [{1,2},{[1,2]}]),
  assert(f({1,2},[{1,2,3},{[1,2],[3,2],[1,3]}]) = [{1,2},{[1,2]}]),
  true)$

okltest_induced_subgraph_dgl(f) := (
  assert(f({},[{1},{[1,1]}]) = [{},{}]),
  assert(f({1},[{1},{[1,1]}]) = [{1},{[1,1]}]),
  assert(f({1},[{1,2},{[1,2],[1,1]}]) = [{1},{[1,1]}]),
  assert(f({1},[{1,2},{[2,2],[1,2]}]) = [{1},{}]),
  true)$

okltest_complement_g(f) := (
  assert(f([{},{}]) = [{},{}]),
  assert(f([{1},{}]) = [{1},{}]),
  assert(f([{1,2},{}]) = [{1,2},{{1,2}}]),
  assert(f([{1,2},{{1,2}}]) = [{1,2},{}]),
  assert(f([{1,2,3},{{1,2}}]) = [{1,2,3},{{1,3},{2,3}}]),
  true)$

okltest_transposed_dg(f) := (
  assert(f([{},{}]) = [{},{}]),
  assert(f([{1},{}]) = [{1},{}]),
  assert(f([{1,2,3},{[1,2],[2,3],[3,1]}]) = [{1,2,3},{[1,3],[3,2],[2,1]}]),
  true)$

okltest_transposed_dgl(f) := (
  assert(f([{1},{[1,1]}]) = [{1},{[1,1]}]),
  assert(okltest_transposed_dg(f) = true),
  true)$

okltest_transposed_odg(f) := (
  assert(f([[],[]]) = [[],[]]),
  assert(f([[1],[]]) = [[1],[]]),
  assert(f([[1,2,3],[[1,2],[2,3],[3,1]]]) = [[1,2,3],[[2,1],[3,2],[1,3]]]),
  true)$

okltest_transposed_odgl(f) := (
  assert(f([[1],[[1,1]]]) = [[1],[[1,1]]]),
  assert(okltest_transposed_odg(f) = true),
  true)$


/* **********
   * Tests  *
   **********
*/

okltest_parallel_edges_gg_p(f) := block([EF],
  assert(f([{},{},EF]) = false),
  assert(f([{1},{},EF]) = false),
  assert(f([{1},{1},lambda([e],{1})]) = false),
  assert(f([{1},{1,2},lambda([e],{1})]) = true),
  true)$

okltest_parallel_edges_mug_p(f) := block([EF],
  assert(f([{},{},EF]) = false),
  assert(f([{1},{},EF]) = false),
  assert(f([{1,2},{{1,2}},lambda([e],choose_element(e))]) = false),
  assert(f([{1,2,3},{{2,3}},lambda([e],choose_element(e))]) = true),
  true)$

okltest_parallel_edges_mugl_p(f) := (
  assert(okltest_parallel_edges_mug_p(f) = true),
  assert(f([{1},{{1}},lambda([e],choose_element(e))]) = false),
  assert(f([{2},{{2}},lambda([e],choose_element(e))]) = true),
  true)$

okltest_parallel_edges_ogg_p(f) := (
  assert(okltest_parallel_edges_gg_p(buildq([f],lambda([G],f(gg2ogg(G))))) = true),
  true)$

okltest_parallel_edges_omug_p(f) := (
  assert(okltest_parallel_edges_mug_p(buildq([f],lambda([G],f(mug2omug(G))))) = true),
  true)$

okltest_parallel_edges_omugl_p(f) := (
  assert(okltest_parallel_edges_mugl_p(buildq([f],lambda([G],f(mugl2omugl(G))))) = true),
  true)$

okltest_irreflexive_gl_p(f) := (
  assert(f([{},{}]) = true),
  assert(f([{1},{{1}}]) = false),
  /* XXX */
  true)$

okltest_irreflexive_mugl_p(f) := block([EF],
  assert(f([{},{},EF]) = true),
  assert(f([{1},{{1}},lambda([e],1)]) = false),
  assert(f([{1},{{1}},lambda([e],2)]) = false),
  assert(okltest_irreflexive_gl_p(buildq([f],lambda([G],f(gl2mugl(G))))) = true),
  /* XXX */
  true)$

okltest_irreflexive_gg_p(f) := (
  assert(okltest_irreflexive_mugl_p(buildq([f],lambda([G],f(mugl2gg(G))))) = true),
  true)$

okltest_irreflexive_ogl_p(f) := (
  assert(okltest_irreflexive_gl_p(buildq([f],lambda([G],f(gl2ogl(G))))) = true),
  true)$

okltest_irreflexive_omugl_p(f) := (
  assert(okltest_irreflexive_mugl_p(buildq([f],lambda([G],f(mugl2omugl(G))))) = true),
  true)$

okltest_irreflexive_ogg_p(f) := (
  assert(okltest_irreflexive_gg_p(buildq([f],lambda([G],f(gg2ogg(G))))) = true),
  true)$

okltest_orientedgraph_dg_p(f) := (
  assert(f([{},{}]) = true),
  assert(f([{1},{}]) = true),
  assert(f([{1,2},{}]) = true),
  assert(f([{1,2},{[1,2]}]) = true),
  assert(f([{1,2},{[2,1]}]) = true),
  assert(f([{1,2},{[1,2],[2,1]}]) = false),
  true)$

okltest_orientedgraph_dgl_p(f) := (
  assert(okltest_orientedgraph_dg_p(f) = true),
  assert(f([{1},{[1,1]}]) = true),
  true)$

okltest_orientedgraph_odg_p(f) := (
  assert(okltest_orientedgraph_dg_p(buildq([f], lambda([G],f(dg2odg(G))))) = true),
  true)$

okltest_orientedgraph_odgl_p(f) := (
  assert(okltest_orientedgraph_dgl_p(buildq([f], lambda([G],f(dgl2odgl(G))))) = true),
  true)$

okltest_complete_g_p(f) := (
  assert(f([{},{}]) = true),
  assert(f([{3},{}]) = true),
  assert(f([{3,5},{{3,5}}]) = true),
  assert(f([{1,2},{}]) = false),
  assert(f([{3,5,6},{{3,5},{3,6},{5,6}}]) = true),
  true)$

okltest_complete_gl_p(f) := (
  assert(f([{},{}]) = true),
  assert(f([{3},{}]) = true),
  assert(f([{3},{{3}}]) = true),
  assert(f([{3,5},{{3,5}}]) = true),
  assert(f([{3,5},{{3,5},{5}}]) = true),
  assert(f([{1,2},{}]) = false),
  assert(f([{1,2},{{1}}]) = false),
  assert(f([{3,5,6},{{3,5},{3,6},{5,6}}]) = true),
  true)$

okltest_complete_og_p(f) := (
  assert(f([[],[]]) = true),
  assert(f([[3],[]]) = true),
  assert(f([[3,5],[{3,5}]]) = true),
  assert(f([[1,2],[]]) = false),
  assert(f([[3,5,6],[{3,5},{3,6},{5,6}]]) = true),
  true)$

okltest_complete_ogl_p(f) := (
  assert(f([[],[]]) = true),
  assert(f([[3],[]]) = true),
  assert(f([[3],[{3}]]) = true),
  assert(f([[3,5],[{3,5}]]) = true),
  assert(f([[3,5],[{3,5},{5}]]) = true),
  assert(f([[1,2],[]]) = false),
  assert(f([[1,2],[{1}]]) = false),
  assert(f([[3,5,6],[{3,5},{3,6},{5,6}]]) = true),
  true)$

okltest_complete_mug_p(f) := block([e],
  assert(f([{},{},e]) = true),
  assert(f([{3},{},e]) = true),
  assert(f([{3,5},{{3,5}},e]) = true),
  assert(f([{1,2},{},e]) = false),
  assert(f([{3,5,6},{{3,5},{3,6},{5,6}},e]) = true),
  true)$

okltest_complete_mugl_p(f) := block([e],
  assert(f([{},{},e]) = true),
  assert(f([{3},{},e]) = true),
  assert(f([{3},{{3}},e]) = true),
  assert(f([{3,5},{{3,5}},e]) = true),
  assert(f([{3,5},{{3,5},{5}},e]) = true),
  assert(f([{1,2},{},e]) = false),
  assert(f([{1,2},{{1}},e]) = false),
  assert(f([{3,5,6},{{3,5},{3,6},{5,6}},e]) = true),
  true)$

okltest_complete_omug_p(f) := block([e],
  assert(f([[],[],e]) = true),
  assert(f([[3],[],e]) = true),
  assert(f([[3,5],[{3,5}],e]) = true),
  assert(f([[1,2],[],e]) = false),
  assert(f([[3,5,6],[{3,5},{3,6},{5,6}],e]) = true),
  true)$

okltest_complete_omugl_p(f) := block([e],
  assert(f([[],[],e]) = true),
  assert(f([[3],[],e]) = true),
  assert(f([[3],[{3}],e]) = true),
  assert(f([[3,5],[{3,5}],e]) = true),
  assert(f([[3,5],[{3,5},{5}],e]) = true),
  assert(f([[1,2],[],e]) = false),
  assert(f([[1,2],[{1}],e]) = false),
  assert(f([[3,5,6],[{3,5},{3,6},{5,6}],e]) = true),
  true)$

okltest_complete_gg_p(f) := block([ef],
  assert(f([{},{},ef]) = true),
  assert(f([{1},{},ef]) = true),
  assert(f([{1},{1},lambda([e],{1})]) = true),
  assert(f([{1,2},{{1,2}},identity]) = true),
  assert(f([{1,2},{},ef]) = false),
  assert(f([{1,2},{{1}},identity]) = false),
  assert(okltest_complete_gl_p(buildq([f], lambda([G], f(gl2gg(G))))) = true),
  true)$

okltest_complete_ogg_p(f) := (
  assert(okltest_complete_gg_p(buildq([f], lambda([G], f(gg2ogg(G))))) = true),
  true)$

okltest_dominating_vertex_g_p(f) := (
  assert(f(1,[{1},{}]) = true),
  assert(f(1,[{1,2},{}]) = false),
  assert(f(1,[{1,2},{{1,2}}]) = true),
  true)$

okltest_dominating_vertex_gl_p(f) := (
  assert(f(1,[{1},{}]) = false),
  assert(f(1,[{1,2},{}]) = false),
  assert(f(1,[{1,2},{{1,2}}]) = false),
  assert(f(1,[{1},{{1}}]) = true),
  assert(f(1,[{1,2},{{1,2},{1}}]) = true),
  true)$

okltest_has_dominating_vertex_g(f) := (
  assert(f([{},{}]) = false),
  assert(f([{1},{}]) = true),
  assert(f([{1,2},{}]) = false),
  assert(f([{1,2},{{1,2}}]) = true),
  assert(f([{1,2,3,4},{{1,2},{1,3},{2,4}}]) = false),
  assert(f([{1,2,3,4},{{1,2},{1,3},{1,4}}]) = true),
  true)$

okltest_has_dominating_vertex_gl(f) := (
  assert(f([{},{}]) = false),
  assert(f([{1},{}]) = false),
  assert(f([{1,2},{}]) = false),
  assert(f([{1,2},{{1,2}}]) = false),
  assert(f([{1,2,3,4},{{1,2},{1,3},{2,4}}]) = false),
  assert(f([{1,2,3,4},{{1,2},{1,3},{1,4}}]) = false),
  assert(f([{1},{{1}}]) = true),
  assert(f([{1,2},{{1,2},{2}}]) = true),
  assert(f([{1,2,3,4},{{2,1},{2,3},{2,4},{2}}]) = true),
  true)$

okltest_connected_g_p(f) := (
  assert(f([{},{}]) = true),
  assert(f([{1},{}]) = true),
  assert(f([{1,2},{}]) = false),
  assert(f([{1,2},{{1,2}}]) = true),
  for n : 0 thru 4 do block([G : complete_stdg(n)],
    assert(f(G) = true)),
  for n : 1 thru 4 do block([G : pathgraph_g(n)],
    assert(f(G) = true)),
  true)$

okltest_connected_og_p(f) := (
  assert(okltest_connected_g_p(buildq([f], lambda([G], f(g2og(G))))) = true),
  true)$

okltest_connected_mug_p(f) := (
  assert(f([{1,2},{{1,2}},lambda([e],2)]) = true),
  assert(okltest_connected_g_p(buildq([f], lambda([G], f(g2mug(G))))) = true),
  true)$

okltest_connected_omug_p(f) := (
  assert(okltest_connected_mug_p(buildq([f], lambda([G], f(mug2omug(G))))) = true),
  true)$

okltest_connected_gg_p(f) := (
  assert(f([{1,2},{1,2},lambda([e],{e})]) = false),
  assert(okltest_connected_mug_p(buildq([f], lambda([G], f(mug2gg(G))))) = true),
  true)$

okltest_connected_ogg_p(f) := (
  assert(okltest_connected_gg_p(buildq([f], lambda([G], f(gg2ogg(G))))) = true),
  true)$

okltest_connected_gl_p(f) := (
  assert(okltest_connected_gg_p(buildq([f], lambda([G], f(gg2gl(G))))) = true),
  true)$

okltest_connected_ogl_p(f) := (
  assert(okltest_connected_gl_p(buildq([f], lambda([G], f(gl2ogl(G))))) = true),
  true)$

okltest_connected_mugl_p(f) := (
  assert(okltest_connected_gg_p(buildq([f], lambda([G], f(gg2mugl(G))))) = true),
  true)$

okltest_connected_omugl_p(f) := (
  assert(okltest_connected_mugl_p(buildq([f], lambda([G], f(mugl2omugl(G))))) = true),
  true)$

okltest_sconnected_dg_p(f) := (
  assert(f([{},{}]) = true),
  assert(f([{1,2},{[1,2]}]) = false),
  assert(f([{1,2},{[1,2],[2,1]}]) = true),
  assert(f([{1,2,3},{[1,2],[2,3],[3,1]}]) = true),
  assert(f([{1,2,3},{[1,2],[2,3],[1,3]}]) = false),
  assert(okltest_connected_g_p(buildq([f], lambda([G], f(g2dg(G))))) = true),
  true)$

okltest_sconnected_odg_p(f) := (
  assert(okltest_sconnected_dg_p(buildq([f], lambda([G], f(dg2odg(G))))) = true),
  true)$

okltest_sconnected_mudg_p(f) := (
  assert(okltest_sconnected_dg_p(buildq([f], lambda([G], f(dg2mudg(G))))) = true),
  assert(okltest_connected_mug_p(buildq([f], lambda([G], f(mug2mudg(G))))) = true),
  true)$

okltest_sconnected_omudg_p(f) := (
  assert(okltest_sconnected_mudg_p(buildq([f], lambda([G], f(mudg2omudg(G))))) = true),
  true)$

okltest_sconnected_gdg_p(f) := (
  assert(okltest_sconnected_mudg_p(buildq([f], lambda([G], f(mudg2gdg(G))))) = true),
  assert(okltest_sconnected_dg_p(buildq([f], lambda([G], f(dg2gdg(G))))) = true),
  true)$

okltest_sconnected_ogdg_p(f) := (
  assert(okltest_sconnected_gdg_p(buildq([f], lambda([G], f(gdg2ogdg(G))))) = true),
  true)$

okltest_sconnected_dgl_p(f) := (
  assert(okltest_sconnected_gdg_p(buildq([f], lambda([G], f(gdg2dgl(G))))) = true),
  true)$

okltest_sconnected_odgl_p(f) := (
  assert(okltest_sconnected_ogdg_p(buildq([f], lambda([G], f(ogdg2odgl(G))))) = true),
  true)$

okltest_sconnected_mudgl_p(f) := (
  assert(okltest_sconnected_gdg_p(buildq([f], lambda([G], f(gdg2mudgl(G))))) = true),
  true)$

okltest_sconnected_omudgl_p(f) := (
  assert(okltest_sconnected_mudgl_p(buildq([f], lambda([G], f(mudgl2omudgl(G))))) = true),
  true)$

okltest_minsconnected_dg_p(f) := (
  assert(f([{},{}]) = true),
  assert(f([{1},{}]) = true),
  assert(f([{1,2},{}]) = false),
  assert(f([{1,2},{[1,2]}]) = false),
  assert(f([{1,2},{[1,2],[2,1]}]) = true),
  assert(f([{1,2,3},{[1,2],[2,3],[3,1]}]) = true),
  assert(f([{1,2,3},{[1,2],[2,3],[3,1],[3,2]}]) = false),
  assert(f([{1,2,3,4},{[1,2],[2,3],[3,4],[4,1]}]) = true),
  assert(f([{1,2,3,4},{[1,2],[2,3],[3,4],[4,1],[2,4]}]) = false),
  true)$

okltest_tree_g_p(f) := (
  assert(f([{},{}]) = false),
  assert(f([{1},{}]) = true),
  assert(f([{2},{}]) = true),
  assert(f([{1,2},{}]) = false),
  assert(f([{1,2},{{1,2}}]) = true),
  assert(f([{1,2,3},{}]) = false),
  assert(f([{1,2,3},{{1,2}}]) = false),
  assert(f([{1,2,3},{{1,2},{1,3}}]) = true),
  assert(f([{1,2,3},{{1,2},{2,3}}]) = true),
  assert(f([{1,2,3},{{1,2},{1,3},{2,3}}]) = false),
  for n : 0 thru 4 do
    assert(f(complete_stdg(n)) = if n=1 or n=2 then true else false),
  for n : 1 thru 4 do
    assert(f(pathgraph_g(n)) = true),
  true)$

okltest_tree_og_p(f) := (
  assert(okltest_tree_g_p(buildq([f],lambda([G], f(g2og(G))))) = true),
  true)$

okltest_tree_mug_p(f) := (
  assert(okltest_tree_g_p(buildq([f], lambda([G], f(g2mug(G))))) = true),
  assert(f([{1,2},{{1,2}},lambda([e],2)]) = false),
  true)$

okltest_tree_omug_p(f) := (
  assert(okltest_tree_mug_p(buildq([f], lambda([G], f(mug2omug(G))))) = true),
  true)$

okltest_tree_gg_p(f) := (
  assert(okltest_tree_mug_p(buildq([f], lambda([G], f(mug2gg(G))))) = true),
  assert(f([{1},{{1}},identity]) = false),
  true)$

okltest_tree_ogg_p(f) := (
  assert(okltest_tree_gg_p(buildq([f], lambda([G],f(gg2ogg(G))))) = true),
  true)$

okltest_tree_gl_p(f) := (
  assert(f([{1},{{1}}]) = false),
  assert(okltest_tree_g_p(f) = true),
  true)$

okltest_tree_ogl_p(f) := (
  assert(okltest_tree_gl_p(buildq([f], lambda([G],f(gl2ogl(G))))) = true),
  true)$

okltest_tree_mugl_p(f) := (
  assert(f([{1},{{1}},lambda([e],2)]) = false),
  assert(okltest_tree_gl_p(buildq([f], lambda([G], f(gl2mugl(G))))) = true),
  assert(okltest_tree_mug_p(f) = true),
  true)$

okltest_tree_omugl_p(f) := (
  assert(okltest_tree_mugl_p(buildq([f], lambda([G],f(mugl2omugl(G))))) = true),
  true)$

okltest_regular_g_p(f) := (
  assert(f(0,[{},{}]) = true),
  assert(f(1,[{},{}]) = true),
  assert(f(2,[{},{}]) = true),
  assert(f(0,[{1},{}]) = true),
  assert(f(1,[{1},{}]) = false),
  /* XXX */
  true)$

okltest_regular1_gg_p(f) := (
  /* *** */
  assert(okltest_regular_g_p(buildq([f],lambda([k,G],f(k,g2gg(G)))))),
  true)$

okltest_regular2_gg_p(f) := (
  /* *** */
  assert(okltest_regular_g_p(buildq([f],lambda([k,G],f(k,g2gg(G)))))),
  true)$

okltest_cycle_gg_p(f) := block([ef],
  for n : 1 thru 4 do
    assert(f(ogg2gg(cyclegraph_ogg(n))) = true),
  assert(f([{},{},ef]) = false),
  /* *** */
  true)$

okltest_bipartite_g_p(f) := (
  assert(f([{},{}]) = true),
  assert(f([{1,2,3},{}]) = true),
  assert(f([{1,2,3},{{1,2}}]) = true),
  assert(f([{1,2,3},{{1,2},{2,3}}]) = true),
  assert(f([{1,2,3},{{1,2},{2,3},{3,1}}]) = false)
)$

okltest_completebipartite_g_p(f) := block(
  assert(f([{},{}])=true),
  assert(f([{1},{}]) = true),
  assert(f([{1,2},{{1,2}}]) = true),
  assert(f([{1,2},{}]) = false),
  assert(f([{1,2,3},{{1,2}}]) = false),
  assert(f([{1,2,3},{{1,2},{2,3}}]) = true),
  assert(f([{1,2,3},{{1,2},{2,3},{1,3}}]) = false),
  assert(f([{1,2,3},{}]) = false),
  assert(f([{1,2,3,4},{{1,2},{1,3},{1,4},{2,3}}]) = false),
  assert(f([{1,2,3,4},{{1,2},{1,3}}]) = false),
  assert(f([{1,2,3,4},{{1,2},{3,4},{1,4},{2,3}}]) = true),
  true)$

okltest_completebipartite_gl_p(f) := block(
  assert(f([{1},{{1}}]) = false),
  assert(f([{1,2},{{1,2},{2}}]) = false),
  assert(okltest_completebipartite_g_p(f)),
  true)$

okltest_completebipartite_gg_p(f) := block([G,edgef],
  assert(f([{},{},edgef])=true),
  assert(f([{1},{},edgef]) = true),
  for n : 1 thru 6 do block([G : cyclegraph_gg(n)],
    assert(f(G) = elementp(n,{2,4}))),
  assert(okltest_completebipartite_gl_p(buildq([f],lambda([G],f(gl2gg(G)))))),
  true)$


/* **************
   * Symmetries *
   **************
*/

okltest_output_dreadnaut_std0dg(f) := block([out : make_string_output_stream(), sout1, sout2],
  f([{},{}], out),
  sout1 : get_output_stream_string(out),
  sout2 : "+d
n=0 g
x
",
  assert(sequal(sout1,sout2) = true),
  true)$

okltest_output_dreadnaut_dg(f) := block([out : make_string_output_stream(), sout1, sout2],
  f([{1,2,3},{[1,2],[3,1]}], out),
  sout1 : get_output_stream_string(out),
  sout2 : "+d
n=3 g
1 ;
;
0 .
x
",
  assert(sequal(sout1,sout2) = true),
  true)$


/* ********************************
   * Connections to Maxima-graphs *
   ********************************
*/

okltest_g2mg(f) := block(
  block([G : f([{},{}])],
    assert(is_graph(G) = true),
    assert(setify(vertices(G)) = {}),
    assert(setify(edges(G)) = {})
  ),
  block([G : f([{1},{}])],
    assert(is_graph(G) = true),
    assert(setify(vertices(G)) = {1}),
    assert(setify(edges(G)) = {}),
    assert(get_vertex_label(1,G) = 1)
  ),
  block([G : f([{2},{}])],
    assert(is_graph(G) = true),
    assert(setify(vertices(G)) = {1}),
    assert(setify(edges(G)) = {}),
    assert(get_vertex_label(1,G) = 2)
  ),
  block([G : f([{1,2},{{1,2}}])],
    assert(is_graph(G) = true),
    assert(setify(vertices(G)) = {1,2}),
    assert(setify(edges(G)) = {[1,2]}),
    assert(get_vertex_label(1,G) = 1),
    assert(get_vertex_label(2,G) = 2)
  ),
  block([G : f([{2,4},{{2,4}}])],
    assert(is_graph(G) = true),
    assert(setify(vertices(G)) = {1,2}),
    assert(setify(edges(G)) = {[1,2]}),
    assert(get_vertex_label(1,G) = 2),
    assert(get_vertex_label(2,G) = 4)
  ),
  block([G : f([{1,2,3},{{1,2},{2,3},{3,1}}])],
    assert(is_graph(G) = true),
    assert(setify(vertices(G)) = {1,2,3}),
    assert(setify(edges(G)) = {[1,2],[2,3],[1,3]}),
    assert(get_vertex_label(1,G) = 1),
    assert(get_vertex_label(2,G) = 2),
    assert(get_vertex_label(3,G) = 3)
  ),
  block([G : f([{1,[1,-1],[1,1]},{{1,[1,-1]},{1,[1,1]}}])],
    assert(is_graph(G) = true),
    assert(setify(vertices(G)) = {1,2,3}),
    assert(setify(edges(G)) = {[1,2],[1,3]}),
    assert(get_vertex_label(1,G) = 1),
    assert(get_vertex_label(2,G) = [1,-1]),
    assert(get_vertex_label(3,G) = [1,1])
  ),
  true)$

okltest_mg2og(f) := block(
  assert(f(complete_graph(1)) = [[1], []]),
  assert(f(complete_graph(2)) = [[2,1], [{1,2}]]),
  assert(f(complete_graph(3)) = [[3,2,1], [{2,3},{1,3},{1,2}]]),
  assert(f(empty_graph(0)) = [[],[]]),
  assert(f(empty_graph(1)) = [[1],[]]),
  assert(f(empty_graph(2)) = [[2,1],[]]),
  assert(f(og2mg([[1,2,3],[{1,2},{2,3},{1,3}]])) = [[1,2,3],[{1,3},{2,3},{1,2}]]),
  assert(f(og2mg([[d,b,c,a],[{b,c},{c,d}]])) = [[1,2,3,4],[{1,3},{2,3}]]),
  /* set_random(1),
  assert(f(random_regular_graph(5)) = [[1,2,3,4,5], XXX defect with
  random_regular_graph */
  true)$

okltest_mg2g(f) := block(
  for G in okltest_list_g do
    assert(mg2g(g2mg(G)) = G),
  true)$

okltest_dg2mdg(f) := block(
  block([G : f([{},{}])],
    assert(is_digraph(G) = true),
    assert(setify(vertices(G)) = {}),
    assert(setify(edges(G)) = {})
  ),
  block([G : f([{1},{}])],
    assert(is_digraph(G) = true),
    assert(setify(vertices(G)) = {1}),
    assert(setify(edges(G)) = {}),
    assert(get_vertex_label(1,G) = 1)
  ),
  block([G : f([{2},{}])],
    assert(is_digraph(G) = true),
    assert(setify(vertices(G)) = {1}),
    assert(setify(edges(G)) = {}),
    assert(get_vertex_label(1,G) = 2)
  ),
  block([G : f([{1,2},{[1,2]}])],
    assert(is_digraph(G) = true),
    assert(setify(vertices(G)) = {1,2}),
    assert(setify(edges(G)) = {[1,2]}),
    assert(get_vertex_label(1,G) = 1),
    assert(get_vertex_label(2,G) = 2)
  ),
  block([G : f([{2,4},{[2,4]}])],
    assert(is_digraph(G) = true),
    assert(setify(vertices(G)) = {1,2}),
    assert(setify(edges(G)) = {[1,2]}),
    assert(get_vertex_label(1,G) = 2),
    assert(get_vertex_label(2,G) = 4)
  ),
  block([G : f([{1,2},{[1,2],[2,1]}])],
    assert(is_digraph(G) = true),
    assert(setify(vertices(G)) = {1,2}),
    assert(setify(edges(G)) = {[1,2],[2,1]}),
    assert(get_vertex_label(1,G) = 1),
    assert(get_vertex_label(2,G) = 2)
  ),
  block([G : f([{1,2,3},{[1,2],[2,3],[3,1]}])],
    assert(is_digraph(G) = true),
    assert(setify(vertices(G)) = {1,2,3}),
    assert(setify(edges(G)) = {[1,2],[2,3],[3,1]}),
    assert(get_vertex_label(1,G) = 1),
    assert(get_vertex_label(2,G) = 2),
    assert(get_vertex_label(3,G) = 3)
  ),
  block([G : f([{1,[1,-1],[1,1]},{[1,[1,-1]],[1,[1,1]]}])],
    assert(is_digraph(G) = true),
    assert(setify(vertices(G)) = {1,2,3}),
    assert(setify(edges(G)) = {[1,2],[1,3]}),
    assert(get_vertex_label(1,G) = 1),
    assert(get_vertex_label(2,G) = [1,-1]),
    assert(get_vertex_label(3,G) = [1,1])
  ),
  block([G : f(var_lit_clause_digraph([{1},{}]))],
    assert(is_digraph(G) = true)
  ),
  true);



/*!
\endhtmlonly
*/
