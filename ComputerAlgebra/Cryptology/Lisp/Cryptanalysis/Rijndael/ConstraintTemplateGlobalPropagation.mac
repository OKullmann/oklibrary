/* Matthew Gwynne, 6.12.2010 (Swansea) */
/* Copyright 2010, 2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/ConstraintTemplateGlobalPropagation.mac
  \brief System for taking a set of constraints and propagating the effect of certain constraints across the set.

   As an example, consider systems with equality constraints where the
   equivalence constraints can then be rewrited to replace the two
   sets of variables with a single set (representing the two
   equivalent variables).

Use by

oklib_load("OKlib/ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/ConstraintTemplateGlobalPropagation.mac");

*/

/* TODO : Update specification below */

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/ConstraintTemplateRewriteSystem.mac")$

/* A propagation function takes a list of constraints and a list of variables
   (in most cases, the variable list for the list of constraints) and
   then propagates the effects of certain constraints in the constraint list
   across the list, returning a new constraint list after the effects
   have been propagated along with the new variable list for the
   constraint list.

   For example, prop_eq_csttl takes a constraint list and variable list
   and removes equivalence constraints by replacing the variables
   made equivalent (a=b) by a new variable veq(a,b) and removing the
   constraint.
*/


/********************************
 * Propagation functions        *
 ********************************
*/

/* Given a list of constraint templates, a variable list, and a list of
   propagation functions returns a new list of constraint templates and a new
   variable list after applying each propagation function to both. */
prop_all_csttl(csttl, old_var_l, prop_l) :=
  lreduce(lambda([csttl_new,csttpb], csttpb(csttl_new[1],csttl_new[2])),
    prop_l,[csttl,old_var_l])$


/**************************************************
 * Standard propagation bundles                   *
 **************************************************
*/

/* Equivalence propagation */

declare(veq, noun)$
declare(veq, posfun)$
new_veq([a]) := apply(veq, a)$

/* Given a constraint template list, returns the list of new variables
   introduced by prop_eq_csttl.
*/
prop_eq_vars_l(csttl) := block([cstt_eq_l,new_var_l : []],
  cstt_eq_l : sublist(csttl, lambda([a], cstt_named_p(a, "eq_cst"))),
  while cstt_eq_l # [] do block([cstt_eq_vars_l],
    cstt_eq : first(cstt_eq_l),
    cstt_eq_l : rest(cstt_eq_l),
    cstt_eq_var_l : cstt_vars_l(cstt_eq),
    eq_var_l : 
      partition_elements(cstt_eq_var_l, ceiling(length(cstt_eq_var_l)/2)),
    new_var_l : remove_elements(eq_var_l[1], new_var_l),
    new_var_l : remove_elements(eq_var_l[2], new_var_l),
    new_var_temp_l : map(new_veq, eq_var_l[1], eq_var_l[2]),
    new_var_l : append(new_var_l, new_var_temp_l),
    cstt_eq_l : csttl_rename_vars(cstt_eq_l, eq_var_l[1], new_var_temp_l),
    cstt_eq_l : csttl_rename_vars(cstt_eq_l, eq_var_l[2], new_var_temp_l)),
  return(new_var_l))$

/* Given a constraint template list, returns the list of constraint templates
   where equality constraints (named "eq_cst") have been removed and the pairs
   of equivalent variables in each "eq_cst" constraint replaced with new
   variables (see prop_eq_csttl_vars_l).

   XXX
*/
prop_eq_csttl(csttl, old_var_l) := block(
  [eq_csttl, var_mappings, var_map : sm2hm({}), pre_map : sm2hm({}), new_var_l, count],
  eq_csttl : sublist(csttl, lambda([cstt], cstt_named_p(cstt,"eq_cst"))),
  var_mappings :
    lappend(map(lambda([a], map("[",a[1],a[2])),
      map(lambda([a],partition_elements(a,ceiling(length(a)/2))),
        map(cstt_vars_l, eq_csttl)))),
  if oklib_monitor then print("Starting equivalence mapping!"),
  count : 0,
  for M in var_mappings do block(
      [M1_mapped, M2_mapped, new_var_, preexisting_maps],
    if oklib_monitor then print("Mapping [",count : count + 1, "/", length(var_mappings),"]"),
    M1_mapped : ev_hm_d(var_map,M[1], M[1]),
    M2_mapped : ev_hm_d(var_map,M[2], M[2]),
    new_var_ : new_veq(M1_mapped, M2_mapped),
    set_hm(var_map, M[1], new_var_),
    set_hm(var_map, M[2], new_var_),
    preexisting_maps : append(
      ev_hm_d(pre_map, M1_mapped, []),ev_hm_d(pre_map, M2_mapped, [])),
    for old_map in preexisting_maps do (
      set_hm(var_map, old_map, new_var_)),
    set_hm(pre_map, new_var_, append(preexisting_maps, [M1_mapped,M2_mapped])),
    del_hm(pre_map, M1_mapped), del_hm(pre_map, M2_mapped)),
  new_var_l : map(lambda([a], ev_hm_d(var_map,a,a)), old_var_l),
  csttl : csttl_rename_vars(
    sublist(csttl, lambda([cstt], not(cstt_named_p(cstt,"eq_cst")))),
      old_var_l, new_var_l),
  return([csttl, stable_unique(new_var_l)]))$

/* Rename a list of variables Vi, given the renaming as a function f,
   applying the renaming also *inside* "veq" variables introduced
   by prop_eq_csttl.

   This "lifts" the renaming function to these new variables. */
prop_eq_lift_renaming_var(v,f) :=
  if not(atom(v)) and op(v) = veq then
    apply(new_veq,map(lambda([vp], prop_eq_lift_renaming_var(vp,f)), args(v)))
  else f(v)$
prop_eq_lift_renaming(Vi,f) :=
  map(lambda([v], prop_eq_lift_renaming_var(v,f)), Vi)$

/*!
\endhtmlonly
*/
