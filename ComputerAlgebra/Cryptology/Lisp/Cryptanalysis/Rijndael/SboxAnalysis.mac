/* Matthew Gwynne, 26.3.2008 (Swansea) */
/* Copyright 2008, 2009, 2010, 2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/SboxAnalysis.mac
  \brief Cryptanalysis functions and tools regarding AES/Rijndael Sbox

Use by

oklib_load("OKlib/ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/SboxAnalysis.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/BasicOperations.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/Conversions.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/AdvancedEncryptionStandard.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/SmallScaleAdvancedEncryptionStandard.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ConflictCombinatorics/HittingClauseSets.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/FiniteFunctions/Permutations.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/data/Sbox.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/Generators/Generators.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/FieldOperationsAnalysis.mac")$


/* ******************************************
   * Sbox Analysis                          *
   ******************************************
*/


/* Generation of the full DNF clause-set representing the AES sbox: */
rijnsbox_fulldnf_fcl() := perm2dnffcl(1+aes_sbox_l)$
rijnsbox_fulldnf_fcs() := fcl2fcs(rijnsbox_fulldnf_fcl())$

/* Generation of the full CNF clause-set representing the AES sbox: */
rijnsbox_fullcnf_fcs() :=
 cs2fcs(setdifference(full_cs(16), 
             map(comp_sl,fcs2cs(rijnsbox_fulldnf_fcs()))))$

/* Output the full CNF clause-set of the permutation given by the AES
   S-box to the file "AES_Sbox_full.cnf":
*/
output_rijnsbox_fullcnf_stdname() :=
  output_fcs(
    sconcat("The AES Sbox in full CNF representation."),
    rijnsbox_fullcnf_fcs(),
    "AES_Sbox_full.cnf")$

/* Tests whether a formal CNF clause-set represents the AES sbox:

   This function is useful when generating Sbox representations as
   one can then test whether such representations are equivalent
   to the Sbox. See plans/SboxAnalysis.hpp .
*/
rijnsbox_cnfp(FF) := 
 is(cs2fcs(dualtreehittingcls_fcs(FF,dll_heuristics_first_real)) = rijnsbox_fulldnf_fcs())$

/* ******************************************************
   * Small Scale Sbox Analysis                          *
   ******************************************************
*/


/* Generation of the full DNF clause-set representing the small scale AES Sbox
   given the base of the small scale byte field, the exponent of the field,
   the modulo polynomial defining the field, as well as the sbox matrix and
   affine constant required for the sbox definition: */
ss_sbox_fulldnf_gen_fcl(b,e,mod_poly, sbox_matrix,affine_constant) :=
  perm2dnffcl(1+map(lambda([ap],
        poly2nat(ss_sbox_gen(nat2poly(ap,b),
            b,e,mod_poly, sbox_matrix,affine_constant),b)),
      create_list(i,i,0,b^e-1)))$
ss_sbox_fulldnf_fcl(b,e,mod_poly) :=
  ss_sbox_fulldnf_gen_fcl(b,e,mod_poly,
                          ss_sbox_matrix(b,e),ss_affine_constant(b,e))$
ss_sbox_fulldnf_gen_fcs(b,e,mod_poly, sbox_matrix,affine_constant) :=
  fcl2fcs(ss_sbox_fulldnf_gen_fcl(b,e,mod_poly, sbox_matrix,affine_constant))$
ss_sbox_fulldnf_fcs(b,e,mod_poly) := fcl2fcs(ss_sbox_fulldnf_fcl(b,e,mod_poly))$

/* Generation of the full CNF clause-set representing the small scale AES
   sbox: */
ss_sbox_fullcnf_gen_fcs(b,e,mod_poly,sbox_matrix,sbox_affine_constant) :=
 cs2fcs(setdifference(full_cs(2*e), 
             map(comp_sl,fcs2cs(ss_sbox_fulldnf_fcs(b,e,mod_poly)))))$
ss_sbox_fullcnf_fcs(b,e,mod_poly) :=
  ss_sbox_fullcnf_gen_fcs(b,e,mod_poly,
    ss_sbox_matrix(b,e), ss_affine_constant(b,e))$

/* Output the full CNF clause-set of the permutation given by the small scale
   AES Sbox:
*/
output_ss_sbox_fullcnf_gen_stdname(b,e,mod_poly,sbox_matrix,sbox_affine_constant) :=
  output_fcs(
    sconcat("AES Sbox function given the full CNF representation."),
    ss_sbox_fullcnf_fcs(b,e,mod_poly, sbox_matrix, sbox_affine_constant),
    sconcat("AES_sbox_",b,"_",e,"_full.cnf"))$
output_ss_sbox_fullcnf_stdname(b,e,mod_poly) :=
  output_fcs(
    sconcat("AES Sbox function given the full CNF representation."),
    ss_sbox_fullcnf_fcs(b,e,mod_poly),
    sconcat("AES_sbox_",b,"_",e,"_full.cnf"))$

/* Tests whether a formal CNF clause-set represents the small scale AES sbox
   given the appropriate parameters:

   This function is useful when generating Sbox representations as
   one can then test whether such representations are equivalent
   to the Sbox. See plans/SboxAnalysis.hpp .
*/
ss_sbox_gen_cnfp(FF,b,e,mod_poly,sbox_matrix,sbox_affine_constant) := 
  is(cs2fcs(dualtreehittingcls_fcs(FF,dll_heuristics_first_real)) =
    ss_sbox_fulldnf_gen_fcs(b,e,mod_poly,sbox_matrix,sbox_affine_constant))$
ss_sbox_cnfp(FF,b,e,mod_poly) := 
  ss_sbox_gen_cnfp(FF,b,e,mod_poly, ss_sbox_matrix(b,e),
    ss_affine_constant(b,e))$


/* *****************************************************************
   * Small Scale Sbox linear map Analysis                          *
   *****************************************************************
*/


/* Generation of the full DNF clause-set representing the small scale AES Sbox
   linear map the base of the small scale byte field, the exponent of the
   field, the modulo polynomial defining the field, as well as the sbox
   matrix: */
ss_sbox_linmap_fulldnf_gen_fcl(b,e,mod_poly, sbox_matrix) :=
  ss_field_op_fulldnf_gen_fcl(
    lambda([a], ss_sbox_linmap_gen(a,b,e,mod_poly,sbox_matrix)),b,e)$
ss_sbox_linmap_fulldnf_fcl(b,e,mod_poly) :=
  ss_sbox_linmap_fulldnf_gen_fcl(b,e,mod_poly,
                          ss_sbox_matrix(b,e))$
ss_sbox_linmap_fulldnf_gen_fcs(b,e,mod_poly, sbox_matrix) :=
  fcl2fcs(ss_sbox_linmap_fulldnf_gen_fcl(b,e,mod_poly, sbox_matrix))$
ss_sbox_linmap_fulldnf_fcs(b,e,mod_poly) :=
  fcl2fcs(ss_sbox_linmap_fulldnf_fcl(b,e,mod_poly))$

/* Generation of the full CNF clause-set representing the small scale AES
   sbox linear map: */
ss_sbox_linmap_fullcnf_gen_fcs(b,e,mod_poly,sbox_matrix) :=
  ss_field_op_fullcnf_gen_fcs(
    lambda([a], ss_sbox_linmap_gen(a,b,e,mod_poly,sbox_matrix)),b,e)$
ss_sbox_linmap_fullcnf_fcs(b,e) :=
  ss_sbox_linmap_fullcnf_gen_fcs(b,e,ss_polynomial(b,e),ss_sbox_matrix(b,e))$

/* Converts a matrix to a "_" separated string, row by row: */
ss_matrix2str(m) :=
  if length(m) > 0 then block([l : m2l_r(m)],
    lreduce(lambda([a,b], sconcat(a,"_",b)), rest(l), sconcat(first(l))))$

/* Output the full CNF clause-set of the permutation given by the small scale
   AES Sbox linear map:
*/
output_ss_sbox_linmap_fullcnf_gen_stdname(b,e,mod_poly,sbox_matrix) :=
  output_fcs(
    sconcat("AES Sbox linear (", sbox_matrix ,") map given the full",
      "CNF representation."),
    ss_sbox_linmap_fullcnf_gen_fcs(b,e,mod_poly, sbox_matrix),
    sconcat("AES_sbox_lin_",b,"_",e,"_",ss_matrix2str(sbox_matrix),
      "_full.cnf"))$
output_ss_sbox_linmap_fullcnf_stdname(b,e) := block(
  [sbox_matrix : ss_sbox_matrix(b,e)],
  output_fcs(
    sconcat("AES Sbox linear (", sbox_matrix ,") map given the full",
      "CNF representation."),
    ss_sbox_linmap_fullcnf_fcs(b,e),
    sconcat("AES_sbox_lin_",b,"_",e,"_",ss_matrix2str(sbox_matrix),
      "_full.cnf")))$

/* Tests whether a formal CNF clause-set represents the small scale AES sbox
   linear map given the appropriate parameters.

   This function is useful when generating Sbox representations as
   one can then test whether such representations are equivalent
   to the Sbox. See plans/SboxAnalysis.hpp .
*/
ss_sbox_linmap_gen_cnfp(FF,b,e,mod_poly,sbox_matrix) :=
  ss_field_op_gen_cnfp(FF,
    lambda([a], ss_sbox_linmap_gen(a,b,e,mod_poly,sbox_matrix)),b,e)$
ss_sbox_linmap_cnfp(FF,b,e) := 
  ss_sbox_linmap_gen_cnfp(FF,b,e,ss_polynomial(b,e), ss_sbox_matrix(b,e))$



/* ******************************************************************
   * Small scale multiplication then Sbox linear map analysis       *
   ******************************************************************
*/


/* Generation of the full DNF clause-set representing the small scale AES Sbox
   linear map the base of the small scale byte field, the exponent of the
   field, the modulo polynomial defining the field, as well as the sbox
   matrix: */
ss_mul_w_sbox_linmap_fulldnf_gen_fcl(a,b,e,mod_poly, sbox_matrix) :=
  ss_field_op_fulldnf_gen_fcl(
    lambda([fe], ss_mul_w_sbox_linmap_gen(fe,a,b,e,mod_poly,sbox_matrix)),b,e)$
ss_mul_w_sbox_linmap_fulldnf_fcl(a,b,e,mod_poly) :=
  ss_mul_w_sbox_linmap_fulldnf_gen_fcl(a,b,e,mod_poly,ss_sbox_matrix(b,e))$
ss_mul_w_sbox_linmap_fulldnf_gen_fcs(a,b,e,mod_poly, sbox_matrix) :=
  fcl2fcs(ss_mul_w_sbox_linmap_fulldnf_gen_fcl(a,b,e,mod_poly, sbox_matrix))$
ss_mul_w_sbox_linmap_fulldnf_fcs(a,b,e,mod_poly) :=
  fcl2fcs(ss_mul_w_sbox_linmap_fulldnf_fcl(a,b,e,mod_poly))$

/* Generation of the full CNF clause-set representing the small scale AES
   sbox linear map: */
ss_mul_w_sbox_linmap_fullcnf_gen_fcs(a,b,e,mod_poly,sbox_matrix) :=
  ss_field_op_fullcnf_gen_fcs(
    lambda([fe], ss_mul_w_sbox_linmap_gen(fe,a,b,e,mod_poly,sbox_matrix)),b,e)$
ss_mul_w_sbox_linmap_fullcnf_fcs(a,b,e) :=
  ss_mul_w_sbox_linmap_fullcnf_gen_fcs(a,b,e,ss_polynomial(b,e),
    ss_sbox_matrix(b,e))$

/* Output the full CNF clause-set of the permutation given by the small scale
   AES Sbox linear map:
*/
output_ss_mul_w_sbox_linmap_fullcnf_gen_stdname(a,b,e,mod_poly,sbox_matrix) :=
  output_fcs(
    sconcat("AES Sbox linear (", sbox_matrix ,") map given the full",
      "CNF representation."),
    ss_sbox_fullcnf_fcs(a,b,e,mod_poly, sbox_matrix),
    sconcat("AES_sbox_mul_w_lin_",a,"_",b,"_",e,"_",
      ss_matrix2str(sbox_matrix),"_full.cnf"))$
output_ss_mul_w_sbox_linmap_fullcnf_stdname(a,b,e) := block(
  [sbox_matrix : ss_sbox_matrix(b,e)],
  output_fcs(
    sconcat("AES Sbox linear (", sbox_matrix ,") map given the full",
      "CNF representation."),
    ss_mul_w_sbox_linmap_fullcnf_fcs(a,b,e),
    sconcat("AES_sbox_mul_w_lin_",a,"_",b,"_",e,"_",
      ss_matrix2str(sbox_matrix),"_full.cnf")))$

/* Tests whether a formal CNF clause-set represents the small scale AES sbox
   linear map given the appropriate parameters.

   This function is useful when generating Sbox representations as
   one can then test whether such representations are equivalent
   to the Sbox. See plans/SboxAnalysis.hpp .
*/
ss_mul_w_sbox_linmap_gen_cnfp(FF,a,b,e,mod_poly,sbox_matrix) :=
  ss_field_op_gen_cnfp(FF,
    lambda([fe], ss_mul_w_sbox_linmap_gen(fe,a,b,e,mod_poly,sbox_matrix)),b,e)$
ss_mul_w_sbox_linmap_cnfp(FF,a,b,e) := 
  ss_mul_w_sbox_linmap_gen_cnfp(FF,a,b,e,ss_polynomial(b,e),
    ss_sbox_matrix(b,e))$


/* ******************************************
   * Representations by hitting clause-sets *
   ******************************************
*/

/* Generation of a CNF hitting clause-set, given a heuristics h for
   a backtracking solver (without reduction): */
rijnsbox2hittingcnf_fcs(h) := dualtreehittingcls_condensed_fcs(rijnsbox_fulldnf_fcs(),h)$


/*!
\endhtmlonly
*/
