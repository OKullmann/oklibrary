/* Matthew Gwynne, 28.9.2010 (Swansea) */
/* Copyright 2010, 2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/tests/ConstraintTemplateSmallScaleRewriteRules.mac
  \brief Tests for the small-scale AES constraint template translation functions

Use by

oklib_load("OKlib/ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/tests/ConstraintTemplateSmallScaleRewriteRules.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$

kill(f)$


/* ***********************************************
   * Constraint template rewrite translation     *
   ***********************************************
*/

oktest_generate_ss_constraint_vars(f) := block(
  for i : 0 thru 5 do
    assert(f(i,i-1,lambda([a],a),nounify(id)) = []),
  for i : 0 thru 5 do
    assert(f(i,i, lambda([a],a),nounify(id)) = [ss_v(i,nounify(id))]),
 for i : 0 thru 5 do
    assert(f(i,i, nounify(n),nounify(id)) =
      [nounify(n)(ss_v(i,nounify(id)))]),
  assert(f(1,2, nounify(n),nounify(id)) =
    [nounify(n)(ss_v(1,nounify(id))),nounify(n)(ss_v(2,nounify(id)))]),
  true)$

/* ***********************************************
   * Constraint template rewrite functions       *
   ***********************************************
*/

okltest_ss_ns_var_l(f) := block([cst],
  cst : ["ss_cst",create_list(i,i,1,384),1,
  4,4,2, 8, ss_polynomial_2_8, ss_sbox_matrix_2_8, ss_affine_constant_2_8,
  ss_mixcolumns_matrix_2_8_4,false,lambda([a],a)],
  namespace : cstt_namespace_new(ss_namespace, cst),
  assert(
    f(cst) =
    append(
      map(
        lambda([a],namespace(ss_var(a,nounify(o)))),
        create_list(i,i,1,128)),
      map(
        lambda([a],namespace(ss_var(a,nounify(k)))),
        create_list(i,i,1,256)))),
  true)$

okltest_ss_cstr_cstl(f) := block([ctl,ct],
  cst : ["ss_cst",create_list(i,i,1,384),1,
  4,4,2, 8, ss_polynomial_2_8, ss_sbox_matrix_2_8, ss_affine_constant_2_8,
  ss_mixcolumns_matrix_2_8_4,false,nounify(n)],
  namespace : cstt_namespace_new(ss_namespace, cst),
  ctl : f(cst),
  assert(map(cstt_name,ctl) =
    ["ss_round_cst","ss_add_cst","ss_key_expansion_cst"]),
  assert(map(lambda([a],length(a[2])), ctl) = [384,384,384]),
  assert(every_s(lambda([a], is(last(a) =
          namespace)),ctl)),
  assert(ctl[1][2][50] =
    namespace(ss_v(50,nounify(o)))),
  assert(ctl[2][2][200] =
    namespace(ss_v(72,nounify(k)))),
  if oklib_test_level = 0 then return(true),
  assert(
    setify(ss_ns_var_l(cst)) =
    setdifference(setify(lappend(map(cstt_vars_l,ctl))),
      setify(create_list(i,i,1,384)))),
  true)$

okltest_ss_round_ns_var_l(f) := block([cst],
  cst : ["ss_round_cst",create_list(i,i,1,384),1,
  4,4,2, 8, ss_polynomial_2_8, ss_sbox_matrix_2_8, ss_affine_constant_2_8,
  ss_mixcolumns_matrix_2_8_4, lambda([a],a)],
  namespace : cstt_namespace_new(ss_round_namespace, cst),
  assert(
    f(cst) =
    append(
      map(
        lambda([a],namespace(ss_var(a,nounify(mo)))),
        create_list(i,i,1,128)),
      map(
        lambda([a],namespace(ss_var(a,nounify(ro)))),
        create_list(i,i,1,128)),
      map(
        lambda([a],namespace(ss_var(a,nounify(so)))),
        create_list(i,i,1,128)))),
  true)$

okltest_ss_round_cstr_cstl(f) := block([cst],
  cst : ["ss_round_cst",create_list(i,i,1,384),1,
  4,4,2, 8, ss_polynomial_2_8, ss_sbox_matrix_2_8, ss_affine_constant_2_8,
  ss_mixcolumns_matrix_2_8_4,nounify(n)],
  namespace : cstt_namespace_new(ss_round_namespace, cst),
  ctl : f(cst),
  assert(map(first,ctl) =
    ["ss_add_cst","ss_mixcolumns_cst","ss_shiftrows_cst",
     "ss_subbytes_cst"]),
  assert(map(lambda([a],length(a[2])), ctl) = [384,256,256,256]),
    assert(every_s(lambda([a], is(last(a) =
          namespace)),ctl)),
  if oklib_test_level = 0 then return(true),
  assert(
    setify(ss_round_ns_var_l(cst)) =
    setdifference(setify(lappend(map(cstt_vars_l,ctl))),
      setify(create_list(i,i,1,384)))),
  true)$

okltest_ss_round_core_box_ns_var_l(f) := block([cst],
  cst : ["ss_round_cst",create_list(i,i,1,384),1,
  4,4,2, 8, ss_polynomial_2_8, ss_sbox_matrix_2_8, ss_affine_constant_2_8,
  ss_mixcolumns_matrix_2_8_4, lambda([a],a)],
  namespace : cstt_namespace_new(ss_round_core_box_namespace, cst),
  assert(
    f(cst) =
    append(
      map(lambda([a],namespace(ss_var(a,nounify(mo)))),
          create_list(i,i,1,128)),
      map(lambda([a],namespace(ss_var(a,nounify(ro)))),
          create_list(i,i,1,128)))),
  true)$

okltest_ss_round_core_box_cstr_cstl(f) := block([cst],
  cst : ["ss_round_cst",create_list(i,i,1,384),1,
  4,4,2, 8, ss_polynomial_2_8, ss_sbox_matrix_2_8, ss_affine_constant_2_8,
  ss_mixcolumns_matrix_2_8_4,nounify(n)],
  namespace : cstt_namespace_new(ss_round_core_box_namespace, cst),
  ctl : f(cst),
  assert(map(first,ctl) =
    ["ss_add_cst","ss_round_columns_cst","ss_shiftrows_cst"]),
  assert(map(lambda([a],length(a[2])), ctl) = [384,256,256]),
    assert(every_s(lambda([a], is(last(a) =
          namespace)),ctl)),
  if oklib_test_level = 0 then return(true),
  assert(
    setify(ss_round_core_box_ns_var_l(cst)) =
    setdifference(setify(lappend(map(cstt_vars_l,ctl))),
      setify(create_list(i,i,1,384)))),
  true)$

okltest_ss_final_round_ns_var_l(f) := block([cst],
  cst : ["ss_final_round_cst",create_list(i,i,1,384),
  4,4,2, 8, ss_polynomial_2_8, ss_sbox_matrix_2_8, ss_affine_constant_2_8,
  ss_mixcolumns_matrix_2_8_4, lambda([a],a)],
  namespace : cstt_namespace_new(ss_final_round_namespace, cst),
  assert(
    f(cst) =
    append(
      map(
        lambda([a],namespace(ss_var(a,nounify(ro)))),
        create_list(i,i,1,128)),
      map(
        lambda([a],namespace(ss_var(a,nounify(so)))),
        create_list(i,i,1,128)))),
  true)$


okltest_ss_final_round_cstr_cstl(f) := block([cst],
  cst : ["ss_final_round_cst",create_list(i,i,1,384),
  4,4,2, 8, ss_polynomial_2_8, ss_sbox_matrix_2_8, ss_affine_constant_2_8,
  ss_mixcolumns_matrix_2_8_4, nounify(n)],
  namespace : cstt_namespace_new(ss_final_round_namespace, cst),
  ctl : f(cst),
  assert(map(first,ctl) =
    ["ss_add_cst","ss_shiftrows_cst","ss_subbytes_cst"]),
  assert(map(lambda([a],length(a[2])), ctl) = [384,256,256]),
  assert(every_s(lambda([a], is(last(a) =
          namespace)),ctl)),
  if oklib_test_level = 0 then return(true),
  assert(
    setify(ss_final_round_ns_var_l(cst)) =
    setdifference(setify(lappend(map(cstt_vars_l,ctl))),
      setify(create_list(i,i,1,384)))),
  true)$


okltest_ss_subbytes_ns_var_l(f) := block([cst],
  cst : ["ss_subbytes_cst",create_list(i,i,1,384),nounify(n)],
  assert(f(cst) = []),
  true)$


okltest_ss_subbytes_cstr_cstl(f) := block([cst],
  cst : ["ss_subbytes_cst",create_list(i,i,1,256),
  2, 8, ss_polynomial_2_8, ss_sbox_matrix_2_8, ss_affine_constant_2_8,
  nounify(n)],
  namespace : cstt_namespace_new(ss_subbytes_namespace, cst),
  ctl : f(cst),
  assert(map(first,ctl) = create_list("ss_sbox_cst",i,1,16)),
  assert(map(lambda([a],length(a[2])), ctl) = create_list(16,i,1,16)),
  assert(every_s(lambda([a], is(last(a) =
          namespace)),ctl)),
  true)$


okltest_ss_shiftrows_ns_var_l(f) := block([cst],
  cst : ["ss_shiftrows_cst",create_list(i,i,1,384),nounify(n)],
  assert(f(cst) = []),
  true)$


okltest_ss_shiftrows_cstr_cstl(f) := block([cst],
  cst : ["ss_shiftrows_cst",create_list(i,i,1,256),4,4,nounify(n)],
  namespace : cstt_namespace_new(ss_shiftrows_namespace, cst),
  ctl : f(cst),
  assert(map(first,ctl) = create_list("eq_cst",i,1,128)),
  assert(map(lambda([a],length(a[2])), ctl) = create_list(2,i,1,128)),
  assert(every_s(lambda([a], is(last(a) =
          namespace)),ctl)),
  true)$


okltest_ss_mixcolumns_ns_var_l(f) := block([cst],
  cst : ["ss_mixcolumns_cst",create_list(i,i,1,384),nounify(n)],
  assert(f(cst) = []),
  true)$

okltest_ss_mixcolumns_cstr_cstl(f) := block([cst],
  cst : ["ss_mixcolumns_cst",create_list(i,i,1,256),
  4, 4,2, 8, ss_polynomial_2_8, ss_mixcolumns_matrix_2_8_4,nounify(n)],
  namespace : cstt_namespace_new(ss_mixcolumns_namespace, cst),
  ctl : f(cst),
  assert(map(first,ctl) = create_list("ss_mixcolumn_cst",i,1,4)),
  assert(map(lambda([a],length(a[2])), ctl) = create_list(64,i,1,4)),
  assert(every_s(lambda([a], is(last(a) =
          namespace)),ctl)),
  if oklib_test_level = 0 then return(true),
  assert(
    setify(ss_mixcolumns_ns_var_l(cst)) =
    setdifference(setify(lappend(map(cstt_vars_l,ctl))),
      setify(create_list(i,i,1,384)))),
  true)$


okltest_ss_bi_mixcolumn_ns_var_l(f) := block([cst],
  cstt : ["ss_mixcolumn_cst",create_list(i,i,1,64),
  4,2,8,ss_polynomial_2_8, ss_mixcolumns_matrix_2_8_4,lambda([a],a)],
  cstt_new : cstt_namespace_replace(cstt,
    cstt_namespace_new(ss_bi_mixcolumn_namespace,cstt)),
  namespace_mc : cstt_namespace_new(ss_mixcolumn_namespace,cstt_new),
  namespace_invmc : cstt_namespace_new(ss_inv_mixcolumn_namespace,cstt_new),
  assert(
    length(f(cstt)) = 6*32),
  true)$


okltest_ss_bi_mixcolumn_cstr_cstl(f) := block([cst],
  cst : ["ss_mixcolumn_cst",create_list(i,i,1,64),
  4,2,8,ss_polynomial_2_8, ss_mixcolumns_matrix_2_8_4,nounify(n)],
  cstt_new : cstt_namespace_replace(cst,
    cstt_namespace_new(ss_bi_mixcolumn_namespace,cst)),
  namespace_mc : cstt_namespace_new(ss_mixcolumn_namespace,cstt_new),
  namespace_invmc : cstt_namespace_new(ss_inv_mixcolumn_namespace,cstt_new),
  ctl : f(cst),
  assert(map(lambda([a],[first(a),third(a)]),ctl) =
    [["ss_add_cst",4],["ss_mul_cst",x+1],["ss_mul_cst",x],["ss_add_cst",4],
    ["ss_mul_cst",x],["ss_mul_cst",x+1],["ss_add_cst",4],["ss_mul_cst",x],
    ["ss_mul_cst",x+1],["ss_add_cst",4],["ss_mul_cst",x],["ss_mul_cst",x+1],
    ["ss_add_cst",4],["ss_mul_cst",x^3+x+1],["ss_mul_cst",x^3+x^2+1],
    ["ss_mul_cst",x^3+1],["ss_mul_cst",x^3+x^2+x],["ss_add_cst",4],
    ["ss_mul_cst",x^3+x^2+1],["ss_mul_cst",x^3+1],["ss_mul_cst",x^3+x^2+x],
    ["ss_mul_cst",x^3+x+1],["ss_add_cst",4],["ss_mul_cst",x^3+1],
    ["ss_mul_cst",x^3+x^2+x],["ss_mul_cst",x^3+x+1],
    ["ss_mul_cst",x^3+x^2+1],["ss_add_cst",4],["ss_mul_cst",x^3+x^2+x],
    ["ss_mul_cst",x^3+x+1],["ss_mul_cst",x^3+x^2+1],["ss_mul_cst",x^3+1]]),
  assert(map(lambda([a],length(a[2])), ctl) =
    [40,16,16,40,16,16,40,16,16,40,16,16,40,16,16,16,16,40,16,
     16,16,16,40,16,16,16,16,40,16,16,16,16]),
  assert(every_s(lambda([a], is(last(a) = namespace_mc) or
        is(last(a) = namespace_invmc)),ctl)),
  if oklib_test_level = 0 then return(true),
  assert(
    setify(ss_bi_mixcolumn_ns_var_l(cst)) =
    setdifference(setify(lappend(map(cstt_vars_l,ctl))),
      setify(create_list(i,i,1,384)))),
  true)$


okltest_ss_mixcolumn_ns_var_l(f) := block([cst],
  cst : ["ss_mixcolumn_cst",create_list(i,i,1,64),
  4,2, 8, ss_polynomial_2_8, ss_mixcolumns_matrix_2_8_4,lambda([a],a)],
  namespace : cstt_namespace_new(ss_mixcolumn_namespace, cst),
  assert(
    length(f(cst)) = 64),
  true)$


okltest_ss_mixcolumn_cstr_cstl(f) := block([cst],
  cst : ["ss_mixcolumn_cst",create_list(i,i,1,64),
  4,2, 8, ss_polynomial_2_8, ss_mixcolumns_matrix_2_8_4,nounify(n)],
  namespace : cstt_namespace_new(ss_mixcolumn_namespace, cst),
  ctl : f(cst),
  assert(map(lambda([a],[first(a),third(a)]),ctl) =
    [["ss_add_cst",4],["ss_mul_cst",x+1],["ss_mul_cst",x],
     ["ss_add_cst",4],["ss_mul_cst",x],["ss_mul_cst",x+1],["ss_add_cst",4],
     ["ss_mul_cst",x],["ss_mul_cst",x+1],["ss_add_cst",4],["ss_mul_cst",x],
     ["ss_mul_cst",x+1]]),
  assert(map(lambda([a],length(a[2])), ctl) =
    [40,16,16,40,16,16,40,16,16,40,16,16]),
  assert(every_s(lambda([a], is(last(a) = namespace)),ctl)),
  if oklib_test_level = 0 then return(true),
  assert(
    setify(ss_mixcolumn_ns_var_l(cst)) =
    setdifference(setify(lappend(map(cstt_vars_l,ctl))),
      setify(create_list(i,i,1,384)))),
  true)$

okltest_ss_mixcolumn_boolm_ns_var_l(f) := block([cst],
  cst : ["ss_mixcolumn_cst",create_list(i,i,1,64),
  4,2, 8, ss_polynomial_2_8, ss_mixcolumns_matrix_2_8_4,lambda([a],a)],
  namespace : cstt_namespace_new(ss_mixcolumn_namespace, cst),
  assert(f(cst) = []),
  true)$

okltest_ss_mixcolumn_boolm_cstr_cstl(f) := (
  cst : ["ss_mixcolumn_cst",create_list(i,i,1,64),
  4,2, 8, ss_polynomial_2_8, ss_mixcolumns_matrix_2_8_4,nounify(n)],
  namespace : cstt_namespace_new(ss_mixcolumn_boolm_namespace, cst),
  ctl : f(cst),
  assert(map(lambda([a],[first(a),third(a)]),ctl) =
    [["ss_add_cst",5],["ss_add_cst",7],["ss_add_cst",5],["ss_add_cst",7],
    ["ss_add_cst",7],["ss_add_cst",5],["ss_add_cst",5],["ss_add_cst",5],
    ["ss_add_cst",5],["ss_add_cst",7],["ss_add_cst",5],["ss_add_cst",7],
    ["ss_add_cst",7],["ss_add_cst",5],["ss_add_cst",5],["ss_add_cst",5],
    ["ss_add_cst",5],["ss_add_cst",7],["ss_add_cst",5],["ss_add_cst",7],
    ["ss_add_cst",7],["ss_add_cst",5],["ss_add_cst",5],["ss_add_cst",5],
    ["ss_add_cst",5],["ss_add_cst",7],["ss_add_cst",5],["ss_add_cst",7],
    ["ss_add_cst",7],["ss_add_cst",5],["ss_add_cst",5],["ss_add_cst",5]]),
  assert(map(lambda([a],length(a[2])), ctl) =
    [6,8,6,8,8,6,6,6,6,8,6,8,8,6,6,6,6,8,6,8,8,6,6,6,6,8,6,8,8,6,6,6]),
  assert(every_s(lambda([a], is(last(a) = namespace)),ctl)),
  true)$

okltest_ss_inv_mixcolumn_ns_var_l(f) := block([cst],
  cst : ["ss_mixcolumn_cst",create_list(i,i,1,64),
  4,2,8,ss_polynomial_2_8, ss_mixcolumns_2_8_4,lambda([a],a)],
  namespace : cstt_namespace_new(ss_inv_mixcolumn_namespace, cst),
  assert(
    length(f(cst)) = 128),
  true)$

okltest_ss_inv_mixcolumn_cstr_cstl(f) := block([cst],
  cst : ["ss_inv_mixcolumn_cst",create_list(i,i,1,64),
  4,2, 8, ss_polynomial_2_8, ss_mixcolumns_matrix_2_8_4,nounify(n)],
  namespace : cstt_namespace_new(ss_inv_mixcolumn_namespace, cst),
  ctl : f(cst),
  assert(map(lambda([a],[first(a),third(a)]),ctl) =
    [["ss_add_cst",4],["ss_mul_cst",x^3+x+1],["ss_mul_cst",x^3+x^2+1],
     ["ss_mul_cst",x^3+1],["ss_mul_cst",x^3+x^2+x],["ss_add_cst",4],
     ["ss_mul_cst",x^3+x^2+1],["ss_mul_cst",x^3+1],["ss_mul_cst",x^3+x^2+x],
     ["ss_mul_cst",x^3+x+1],["ss_add_cst",4],["ss_mul_cst",x^3+1],
     ["ss_mul_cst",x^3+x^2+x],["ss_mul_cst",x^3+x+1],["ss_mul_cst",x^3+x^2+1],
     ["ss_add_cst",4],["ss_mul_cst",x^3+x^2+x],["ss_mul_cst",x^3+x+1],
     ["ss_mul_cst",x^3+x^2+1],["ss_mul_cst",x^3+1]]),
  assert(map(lambda([a],length(a[2])), ctl) =
    [40,16,16,16,16,40,16,16,16,16,40,16,16,16,16,40,16,16,16,16]),
  assert(every_s(lambda([a], is(last(a) = namespace)),ctl)),
  assert(
    sublist(
      stable_unique(flatten(map(cstt_vars_l,ctl))),
      lambda([v], elementp(v, setn(64)))) =
    [25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,
     49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,17,18,19,20,21,22,23,24,
     9,10,11,12,13,14,15,16,1,2,3,4,5,6,7,8]),
  if oklib_test_level = 0 then return(true),
  assert(
    setify(ss_inv_mixcolumn_ns_var_l(cst)) =
    setdifference(setify(lappend(map(cstt_vars_l,ctl))),
      setify(create_list(i,i,1,384)))),
  true)$

okltest_ss_key_expansion_ns_var_l(f) := block([cst],
  cst : ["ss_key_expansion_cst",create_list(i,i,1,384),1,
  4,4,2,8,ss_polynomial_2_8,ss_sbox_matrix_2_8,ss_affine_constant_2_8,
  lambda([a],a)],
  namespace : cstt_namespace_new(ss_key_expansion_namespace, cst),
  assert(
    f(cst) =
    append(
      map(
        lambda([a],namespace(ss_var(a,nounify(rc)))),
        create_list(i,i,1,8)),
      map(
        lambda([a],namespace(ss_var(a,nounify(sb)))),
        create_list(i,i,1,32)))),
  true)$


okltest_ss_key_expansion_cstr_cstl(f) := block([cst],
  cst : ["ss_key_expansion_cst",create_list(i,i,1,384),1,
  4,4,2,8,ss_polynomial_2_8,ss_sbox_matrix_2_8,ss_affine_constant_2_8,
  nounify(n)],
  namespace : cstt_namespace_new(ss_key_expansion_namespace, cst),
  ctl : f(cst),
  assert(map(first,ctl) =
    ["ss_add_cst","ss_add_cst","ss_add_cst","ss_add_cst","ss_add_cst",
     "ss_add_cst","ss_add_cst","ss_add_cst","ss_add_cst","ss_add_cst",
     "ss_add_cst","ss_add_cst","ss_add_cst","ss_sbox_cst","ss_add_cst",
     "ss_sbox_cst","ss_add_cst","ss_sbox_cst","ss_add_cst","const_cst",
     "ss_sbox_cst","eq_cst","eq_cst","eq_cst","eq_cst","eq_cst","eq_cst",
     "eq_cst","eq_cst","eq_cst","eq_cst","eq_cst","eq_cst","eq_cst","eq_cst",
     "eq_cst","eq_cst"]),
  assert(map(lambda([a],length(a[2])), ctl) =
    [24,24,24,24,24,24,24,24,24,24,24,24,24,16,24,16,24,16,32,8,16,16,16,16,
     16,16,16,16,16,16,16,16,16,16,16,16,16]),
  assert(every_s(lambda([a], is(last(a) = namespace)),ctl)),
  if oklib_test_level = 0 then return(true),
  assert(
    setify(ss_key_expansion_ns_var_l(cst)) =
    setdifference(setify(lappend(map(cstt_vars_l,ctl))),
      setify(create_list(i,i,1,384)))),
  true)$


/* ****************************************
   * Translation functions                *
   ****************************************
*/


okltest_ss_mul_ts_gen(f) := block([ss_mul_ts_CNF : sm2hm({})],
  assert(f(2,2,4,ss_polynomial_2_4) =
    [[1,2,3,4,5,6,7,8,dts(1),dts(2),dts(3),dts(4),dts(5),dts(6),dts(7),dts(8),
     dts(9),dts(10),dts(11),dts(12),dts(13),dts(14),dts(15),dts(16)],
     [{1,2,3,4,5,6,7,8,dts(1)},{-5,-2,1,3,4,6,7,8,dts(2)},
     {-6,-3,1,2,4,5,7,8,dts(3)},{-6,-5,-3,-2,1,4,7,8,dts(4)},
     {-7,-4,1,2,3,5,6,8,dts(5)},{-7,-5,-4,-2,1,3,6,8,dts(6)},
     {-7,-6,-4,-3,1,2,5,8,dts(7)},{-7,-6,-5,-4,-3,-2,1,8,dts(8)},
     {-8,-4,-1,2,3,5,6,7,dts(9)},{-8,-5,-4,-2,-1,3,6,7,dts(10)},
     {-8,-6,-4,-3,-1,2,5,7,dts(11)},{-8,-6,-5,-4,-3,-2,-1,7,dts(12)},
     {-8,-7,-1,2,3,4,5,6,dts(13)},{-8,-7,-5,-2,-1,3,4,6,dts(14)},
     {-8,-7,-6,-3,-1,2,4,5,dts(15)},{-8,-7,-6,-5,-3,-2,-1,4,dts(16)},
     {-8,-dts(1)},{-7,-dts(1)},{-6,-dts(1)},{-5,-dts(1)},{-4,-dts(1)},
     {-3,-dts(1)},{-2,-dts(1)},{-1,-dts(1)},{-8,-dts(2)},{-7,-dts(2)},
     {-6,-dts(2)},{-4,-dts(2)},{-3,-dts(2)},{-1,-dts(2)},{2,-dts(2)},
     {5,-dts(2)},{-8,-dts(3)},{-7,-dts(3)},{-5,-dts(3)},{-4,-dts(3)},
     {-2,-dts(3)},{-1,-dts(3)},{3,-dts(3)},{6,-dts(3)},{-8,-dts(4)},
     {-7,-dts(4)},{-4,-dts(4)},{-1,-dts(4)},{2,-dts(4)},{3,-dts(4)},
     {5,-dts(4)},{6,-dts(4)},{-8,-dts(5)},{-6,-dts(5)},{-5,-dts(5)},
     {-3,-dts(5)},{-2,-dts(5)},{-1,-dts(5)},{4,-dts(5)},{7,-dts(5)},
     {-8,-dts(6)},{-6,-dts(6)},{-3,-dts(6)},{-1,-dts(6)},{2,-dts(6)},
     {4,-dts(6)},{5,-dts(6)},{7,-dts(6)},{-8,-dts(7)},{-5,-dts(7)},
     {-2,-dts(7)},{-1,-dts(7)},{3,-dts(7)},{4,-dts(7)},{6,-dts(7)},
     {7,-dts(7)},{-8,-dts(8)},{-1,-dts(8)},{2,-dts(8)},{3,-dts(8)},
     {4,-dts(8)},{5,-dts(8)},{6,-dts(8)},{7,-dts(8)},{-7,-dts(9)},
     {-6,-dts(9)},{-5,-dts(9)},{-3,-dts(9)},{-2,-dts(9)},{1,-dts(9)},
     {4,-dts(9)},{8,-dts(9)},{-7,-dts(10)},{-6,-dts(10)},{-3,-dts(10)},
     {1,-dts(10)},{2,-dts(10)},{4,-dts(10)},{5,-dts(10)},{8,-dts(10)},
     {-7,-dts(11)},{-5,-dts(11)},{-2,-dts(11)},{1,-dts(11)},{3,-dts(11)},
     {4,-dts(11)},{6,-dts(11)},{8,-dts(11)},{-7,-dts(12)},{1,-dts(12)},
     {2,-dts(12)},{3,-dts(12)},{4,-dts(12)},{5,-dts(12)},{6,-dts(12)},
     {8,-dts(12)},{-6,-dts(13)},{-5,-dts(13)},{-4,-dts(13)},{-3,-dts(13)},
     {-2,-dts(13)},{1,-dts(13)},{7,-dts(13)},{8,-dts(13)},{-6,-dts(14)},
     {-4,-dts(14)},{-3,-dts(14)},{1,-dts(14)},{2,-dts(14)},{5,-dts(14)},
     {7,-dts(14)},{8,-dts(14)},{-5,-dts(15)},{-4,-dts(15)},{-2,-dts(15)},
     {1,-dts(15)},{3,-dts(15)},{6,-dts(15)},{7,-dts(15)},{8,-dts(15)},
     {-4,-dts(16)},{1,-dts(16)},{2,-dts(16)},{3,-dts(16)},{5,-dts(16)},
     {6,-dts(16)},{7,-dts(16)},{8,-dts(16)},{dts(1),dts(2),dts(3),dts(4),
     dts(5),dts(6),dts(7),dts(8),dts(9),dts(10),dts(11),dts(12),
     dts(13),dts(14),dts(15),dts(16)}]]),
   assert(length(f(2,2,8,ss_polynomial_2_8)[2]) = 4353),
  true)$

okltest_ss_sbox_ts_gen(f) := block([ss_sbox_ts_CNF : sm2hm({})],
  assert(f(2,4,ss_polynomial_2_4) =
  [[1,2,3,4,5,6,7,8,dts(1),dts(2),dts(3),dts(4),dts(5),dts(6),dts(7),dts(8),
  dts(9),dts(10), dts(11),dts(12),dts(13),dts(14),dts(15),dts(16)],
  [{-3,-2,-1,4,5,6,7,8,dts(1)}, {-5,-4,-3,-2,-1,6,7,8,dts(2)},
  {-6,-4,-3,1,2,5,7,8,dts(3)}, {-6,-5,-4,-3,-1,2,7,8,dts(4)},
  {-7,-2,1,3,4,5,6,8,dts(5)}, {-7,-5,-4,-3,-2,1,6,8,dts(6)},
  {-7,-6,1,2,3,4,5,8,dts(7)}, {-7,-6,-5,-4,-2,1,3,8,dts(8)},
  {-8,-4,-2,-1,3,5,6,7,dts(9)}, {-8,-5,-1,2,3,4,6,7,dts(10)},
  {-8,-6,-3,1,2,4,5,7,dts(11)}, {-8,-6,-5,-4,-1,2,3,7,dts(12)},
  {-8,-7,-2,-1,3,4,5,6,dts(13)}, {-8,-7,-5,-4,1,2,3,6,dts(14)},
  {-8,-7,-6,-3,-2,1,4,5,dts(15)}, {-8,-7,-6,-5,-3,-1,2,4,dts(16)},
  {-8,-dts(1)}, {-7,-dts(1)}, {-6,-dts(1)}, {-5,-dts(1)}, {-4,-dts(1)},
  {1,-dts(1)}, {2,-dts(1)}, {3,-dts(1)}, {-8,-dts(2)}, {-7,-dts(2)},
  {-6,-dts(2)}, {1,-dts(2)}, {2,-dts(2)}, {3,-dts(2)}, {4,-dts(2)},
  {5,-dts(2)}, {-8,-dts(3)}, {-7,-dts(3)}, {-5,-dts(3)}, {-2,-dts(3)},
  {-1,-dts(3)}, {3,-dts(3)}, {4,-dts(3)}, {6,-dts(3)}, {-8,-dts(4)},
  {-7,-dts(4)}, {-2,-dts(4)}, {1,-dts(4)}, {3,-dts(4)}, {4,-dts(4)},
  {5,-dts(4)}, {6,-dts(4)}, {-8,-dts(5)}, {-6,-dts(5)}, {-5,-dts(5)},
  {-4,-dts(5)}, {-3,-dts(5)}, {-1,-dts(5)}, {2,-dts(5)}, {7,-dts(5)},
  {-8,-dts(6)}, {-6,-dts(6)}, {-1,-dts(6)}, {2,-dts(6)}, {3,-dts(6)},
  {4,-dts(6)}, {5,-dts(6)}, {7,-dts(6)}, {-8,-dts(7)}, {-5,-dts(7)},
  {-4,-dts(7)}, {-3,-dts(7)}, {-2,-dts(7)}, {-1,-dts(7)}, {6,-dts(7)},
  {7,-dts(7)}, {-8,-dts(8)}, {-3,-dts(8)}, {-1,-dts(8)}, {2,-dts(8)},
  {4,-dts(8)}, {5,-dts(8)}, {6,-dts(8)}, {7,-dts(8)}, {-7,-dts(9)},
  {-6,-dts(9)}, {-5,-dts(9)}, {-3,-dts(9)}, {1,-dts(9)}, {2,-dts(9)},
  {4,-dts(9)}, {8,-dts(9)}, {-7,-dts(10)}, {-6,-dts(10)}, {-4,-dts(10)},
  {-3,-dts(10)}, {-2,-dts(10)}, {1,-dts(10)}, {5,-dts(10)}, {8,-dts(10)},
  {-7,-dts(11)}, {-5,-dts(11)}, {-4,-dts(11)}, {-2,-dts(11)}, {-1,-dts(11)},
  {3,-dts(11)}, {6,-dts(11)}, {8,-dts(11)}, {-7,-dts(12)}, {-3,-dts(12)},
  {-2,-dts(12)}, {1,-dts(12)}, {4,-dts(12)}, {5,-dts(12)}, {6,-dts(12)},
  {8,-dts(12)}, {-6,-dts(13)}, {-5,-dts(13)}, {-4,-dts(13)}, {-3,-dts(13)},
  {1,-dts(13)}, {2,-dts(13)}, {7,-dts(13)}, {8,-dts(13)}, {-6,-dts(14)},
  {-3,-dts(14)}, {-2,-dts(14)}, {-1,-dts(14)}, {4,-dts(14)}, {5,-dts(14)},
  {7,-dts(14)}, {8,-dts(14)}, {-5,-dts(15)}, {-4,-dts(15)}, {-1,-dts(15)},
  {2,-dts(15)}, {3,-dts(15)}, {6,-dts(15)}, {7,-dts(15)}, {8,-dts(15)},
  {-4,-dts(16)}, {-2,-dts(16)}, {1,-dts(16)}, {3,-dts(16)}, {5,-dts(16)},
  {6,-dts(16)}, {7,-dts(16)}, {8,-dts(16)},{dts(1),dts(2),dts(3),dts(4),
  dts(5),dts(6),dts(7),dts(8),dts(9),dts(10),dts(11),dts(12),dts(13),dts(14),
  dts(15),dts(16)}]]),
  assert(length(f(2,8,ss_polynomial_2_8)[2]) = 4353),
  true)$

okltest_ss_sbox_w_mul_ts_gen(f) := block([ss_sbox_w_mul_ts_CNF : sm2hm({})],
  assert(f(1,2,4,ss_polynomial_2_4) =
  [[1,2,3,4,5,6,7,8,dts(1),dts(2),dts(3),dts(4),dts(5),dts(6),dts(7),dts(8),
  dts(9),dts(10), dts(11),dts(12),dts(13),dts(14),dts(15),dts(16)],
  [{-3,-2,-1,4,5,6,7,8,dts(1)}, {-5,-4,-3,-2,-1,6,7,8,dts(2)},
  {-6,-4,-3,1,2,5,7,8,dts(3)}, {-6,-5,-4,-3,-1,2,7,8,dts(4)},
  {-7,-2,1,3,4,5,6,8,dts(5)}, {-7,-5,-4,-3,-2,1,6,8,dts(6)},
  {-7,-6,1,2,3,4,5,8,dts(7)}, {-7,-6,-5,-4,-2,1,3,8,dts(8)},
  {-8,-4,-2,-1,3,5,6,7,dts(9)}, {-8,-5,-1,2,3,4,6,7,dts(10)},
  {-8,-6,-3,1,2,4,5,7,dts(11)}, {-8,-6,-5,-4,-1,2,3,7,dts(12)},
  {-8,-7,-2,-1,3,4,5,6,dts(13)}, {-8,-7,-5,-4,1,2,3,6,dts(14)},
  {-8,-7,-6,-3,-2,1,4,5,dts(15)}, {-8,-7,-6,-5,-3,-1,2,4,dts(16)},
  {-8,-dts(1)}, {-7,-dts(1)}, {-6,-dts(1)}, {-5,-dts(1)}, {-4,-dts(1)},
  {1,-dts(1)}, {2,-dts(1)}, {3,-dts(1)}, {-8,-dts(2)}, {-7,-dts(2)},
  {-6,-dts(2)}, {1,-dts(2)}, {2,-dts(2)}, {3,-dts(2)}, {4,-dts(2)},
  {5,-dts(2)}, {-8,-dts(3)}, {-7,-dts(3)}, {-5,-dts(3)}, {-2,-dts(3)},
  {-1,-dts(3)}, {3,-dts(3)}, {4,-dts(3)}, {6,-dts(3)}, {-8,-dts(4)},
  {-7,-dts(4)}, {-2,-dts(4)}, {1,-dts(4)}, {3,-dts(4)}, {4,-dts(4)},
  {5,-dts(4)}, {6,-dts(4)}, {-8,-dts(5)}, {-6,-dts(5)}, {-5,-dts(5)},
  {-4,-dts(5)}, {-3,-dts(5)}, {-1,-dts(5)}, {2,-dts(5)}, {7,-dts(5)},
  {-8,-dts(6)}, {-6,-dts(6)}, {-1,-dts(6)}, {2,-dts(6)}, {3,-dts(6)},
  {4,-dts(6)}, {5,-dts(6)}, {7,-dts(6)}, {-8,-dts(7)}, {-5,-dts(7)},
  {-4,-dts(7)}, {-3,-dts(7)}, {-2,-dts(7)}, {-1,-dts(7)}, {6,-dts(7)},
  {7,-dts(7)}, {-8,-dts(8)}, {-3,-dts(8)}, {-1,-dts(8)}, {2,-dts(8)},
  {4,-dts(8)}, {5,-dts(8)}, {6,-dts(8)}, {7,-dts(8)}, {-7,-dts(9)},
  {-6,-dts(9)}, {-5,-dts(9)}, {-3,-dts(9)}, {1,-dts(9)}, {2,-dts(9)},
  {4,-dts(9)}, {8,-dts(9)}, {-7,-dts(10)}, {-6,-dts(10)}, {-4,-dts(10)},
  {-3,-dts(10)}, {-2,-dts(10)}, {1,-dts(10)}, {5,-dts(10)}, {8,-dts(10)},
  {-7,-dts(11)}, {-5,-dts(11)}, {-4,-dts(11)}, {-2,-dts(11)}, {-1,-dts(11)},
  {3,-dts(11)}, {6,-dts(11)}, {8,-dts(11)}, {-7,-dts(12)}, {-3,-dts(12)},
  {-2,-dts(12)}, {1,-dts(12)}, {4,-dts(12)}, {5,-dts(12)}, {6,-dts(12)},
  {8,-dts(12)}, {-6,-dts(13)}, {-5,-dts(13)}, {-4,-dts(13)}, {-3,-dts(13)},
  {1,-dts(13)}, {2,-dts(13)}, {7,-dts(13)}, {8,-dts(13)}, {-6,-dts(14)},
  {-3,-dts(14)}, {-2,-dts(14)}, {-1,-dts(14)}, {4,-dts(14)}, {5,-dts(14)},
  {7,-dts(14)}, {8,-dts(14)}, {-5,-dts(15)}, {-4,-dts(15)}, {-1,-dts(15)},
  {2,-dts(15)}, {3,-dts(15)}, {6,-dts(15)}, {7,-dts(15)}, {8,-dts(15)},
  {-4,-dts(16)}, {-2,-dts(16)}, {1,-dts(16)}, {3,-dts(16)}, {5,-dts(16)},
  {6,-dts(16)}, {7,-dts(16)}, {8,-dts(16)},{dts(1),dts(2),dts(3),dts(4),
  dts(5),dts(6),dts(7),dts(8),dts(9),dts(10),dts(11),dts(12),dts(13),dts(14),
  dts(15),dts(16)}]]),
  assert(length(f(1,2,8,ss_polynomial_2_8)[2]) = 4353),
  assert(f('x,2,4,ss_polynomial_2_4) =
    [[1,2,3,4,5,6,7,8,dts(1),dts(2),dts(3),dts(4),dts(5),dts(6),dts(7),dts(8),
    dts(9),dts(10),dts(11),dts(12),dts(13),dts(14),dts(15),dts(16)],
    [{-3,-2,-1,4,5,6,7,8,dts(1)},{-5,-4,-3,1,2,6,7,8,dts(2)},
     {-6,-2,1,3,4,5,7,8,dts(3)}, {-6,-5,1,2,3,4,7,8,dts(4)},
     {-7,-4,-2,-1,3,5,6,8,dts(5)},{-7,-5,-3,1,2,4,6,8,dts(6)},
     {-7,-6,-2,-1,3,4,5,8,dts(7)},{-7,-6,-5,-3,-2,1,4,8,dts(8)},
     {-8,-1,2,3,4,5,6,7,dts(9)},{-8,-5,-4,-1,2,3,6,7,dts(10)},
     {-8,-6,-4,1,2,3,5,7,dts(11)},{-8,-6,-5,-3,-1,2,4,7,dts(12)},
     {-8,-7,-4,-3,-2,-1,5,6,dts(13)},{-8,-7,-5,-4,-3,-1,2,6,dts(14)},
     {-8,-7,-6,-4,-3,-2,1,5,dts(15)},{-8,-7,-6,-5,-4,-2,1,3,dts(16)},
     {-8,-dts(1)},{-7,-dts(1)},{-6,-dts(1)},{-5,-dts(1)},{-4,-dts(1)},
     {1,-dts(1)},{2,-dts(1)},{3,-dts(1)},{-8,-dts(2)},{-7,-dts(2)},
     {-6,-dts(2)},{-2,-dts(2)},{-1,-dts(2)},{3,-dts(2)},{4,-dts(2)},
     {5,-dts(2)},{-8,-dts(3)},{-7,-dts(3)},{-5,-dts(3)},{-4,-dts(3)},
     {-3,-dts(3)},{-1,-dts(3)},{2,-dts(3)},{6,-dts(3)},{-8,-dts(4)},
     {-7,-dts(4)},{-4,-dts(4)},{-3,-dts(4)},{-2,-dts(4)},{-1,-dts(4)},
     {5,-dts(4)},{6,-dts(4)},{-8,-dts(5)},{-6,-dts(5)},{-5,-dts(5)},
     {-3,-dts(5)},{1,-dts(5)},{2,-dts(5)},{4,-dts(5)},{7,-dts(5)},
     {-8,-dts(6)},{-6,-dts(6)},{-4,-dts(6)},{-2,-dts(6)},{-1,-dts(6)},
     {3,-dts(6)},{5,-dts(6)},{7,-dts(6)},{-8,-dts(7)},{-5,-dts(7)},
     {-4,-dts(7)},{-3,-dts(7)},{1,-dts(7)},{2,-dts(7)},{6,-dts(7)},
     {7,-dts(7)},{-8,-dts(8)},{-4,-dts(8)},{-1,-dts(8)},{2,-dts(8)},
     {3,-dts(8)},{5,-dts(8)},{6,-dts(8)},{7,-dts(8)},{-7,-dts(9)},
     {-6,-dts(9)},{-5,-dts(9)},{-4,-dts(9)},{-3,-dts(9)},{-2,-dts(9)},
     {1,-dts(9)},{8,-dts(9)},{-7,-dts(10)},{-6,-dts(10)},{-3,-dts(10)},
     {-2,-dts(10)},{1,-dts(10)},{4,-dts(10)},{5,-dts(10)},{8,-dts(10)},
     {-7,-dts(11)},{-5,-dts(11)},{-3,-dts(11)},{-2,-dts(11)},
     {-1,-dts(11)},{4,-dts(11)},{6,-dts(11)},{8,-dts(11)},{-7,-dts(12)},
     {-4,-dts(12)},{-2,-dts(12)},{1,-dts(12)},{3,-dts(12)},{5,-dts(12)},
     {6,-dts(12)},{8,-dts(12)},{-6,-dts(13)},{-5,-dts(13)},{1,-dts(13)},
     {2,-dts(13)},{3,-dts(13)},{4,-dts(13)},{7,-dts(13)},{8,-dts(13)},
     {-6,-dts(14)},{-2,-dts(14)},{1,-dts(14)},{3,-dts(14)},{4,-dts(14)},
     {5,-dts(14)},{7,-dts(14)},{8,-dts(14)},{-5,-dts(15)},{-1,-dts(15)},
     {2,-dts(15)},{3,-dts(15)},{4,-dts(15)},{6,-dts(15)},{7,-dts(15)},
     {8,-dts(15)},{-3,-dts(16)},{-1,-dts(16)},{2,-dts(16)},{4,-dts(16)},
     {5,-dts(16)},{6,-dts(16)},{7,-dts(16)},{8,-dts(16)},
     {dts(1),dts(2),dts(3),dts(4),dts(5),dts(6),dts(7),dts(8),dts(9),dts(10),
     dts(11),dts(12),dts(13),dts(14),dts(15),dts(16)}]]),
  true)$

okltest_ss_mixcolumn_ts_gen(f) := block([ss_mixcolumn_ts_CNF : sm2hm({})],
  if oklib_test_level = 0 then return(true),
  assert(f(2,4,ss_polynomial_2_4,ss_mixcolumns_matrix(2,4,1)) =
    [[1,2,3,4,5,6,7,8,dts(1),dts(2),dts(3),dts(4),dts(5),dts(6),dts(7),dts(8),
      dts(9),dts(10),dts(11),dts(12),dts(13),dts(14),dts(15),dts(16)],
     [{1,2,3,4,5,6,7,8,dts(1)},{-5,-1,2,3,4,6,7,8,dts(2)},
      {-6,-2,1,3,4,5,7,8,dts(3)},{-6,-5,-2,-1,3,4,7,8,dts(4)},
      {-7,-3,1,2,4,5,6,8,dts(5)},{-7,-5,-3,-1,2,4,6,8,dts(6)},
      {-7,-6,-3,-2,1,4,5,8,dts(7)},{-7,-6,-5,-3,-2,-1,4,8,dts(8)},
      {-8,-4,1,2,3,5,6,7,dts(9)},{-8,-5,-4,-1,2,3,6,7,dts(10)},
      {-8,-6,-4,-2,1,3,5,7,dts(11)},{-8,-6,-5,-4,-2,-1,3,7,dts(12)},
      {-8,-7,-4,-3,1,2,5,6,dts(13)},{-8,-7,-5,-4,-3,-1,2,6,dts(14)},
      {-8,-7,-6,-4,-3,-2,1,5,dts(15)},{-8,-7,-6,-5,-4,-3,-2,-1,dts(16)},
      {-8,-dts(1)},{-7,-dts(1)},{-6,-dts(1)},{-5,-dts(1)},{-4,-dts(1)},
      {-3,-dts(1)},{-2,-dts(1)},{-1,-dts(1)},{-8,-dts(2)},{-7,-dts(2)},
      {-6,-dts(2)},{-4,-dts(2)},{-3,-dts(2)},{-2,-dts(2)},{1,-dts(2)},
      {5,-dts(2)},{-8,-dts(3)},{-7,-dts(3)}, {-5,-dts(3)},{-4,-dts(3)},
      {-3,-dts(3)},{-1,-dts(3)},{2,-dts(3)},{6,-dts(3)},{-8,-dts(4)},
      {-7,-dts(4)},{-4,-dts(4)},{-3,-dts(4)},{1,-dts(4)},{2,-dts(4)},
      {5,-dts(4)},{6,-dts(4)}, {-8,-dts(5)},{-6,-dts(5)},{-5,-dts(5)},
      {-4,-dts(5)},{-2,-dts(5)},{-1,-dts(5)},{3,-dts(5)},{7,-dts(5)},
      {-8,-dts(6)},{-6,-dts(6)},{-4,-dts(6)},{-2,-dts(6)},{1,-dts(6)},
      {3,-dts(6)}, {5,-dts(6)},{7,-dts(6)},{-8,-dts(7)},{-5,-dts(7)},
      {-4,-dts(7)},{-1,-dts(7)},{2,-dts(7)},{3,-dts(7)},{6,-dts(7)},
      {7,-dts(7)},{-8,-dts(8)},{-4,-dts(8)},{1,-dts(8)},{2,-dts(8)},
      {3,-dts(8)},{5,-dts(8)},{6,-dts(8)},{7,-dts(8)},{-7,-dts(9)},
      {-6,-dts(9)},{-5,-dts(9)},{-3,-dts(9)},{-2,-dts(9)},{-1,-dts(9)},
      {4,-dts(9)},{8,-dts(9)},{-7,-dts(10)},{-6,-dts(10)},{-3,-dts(10)},
      {-2,-dts(10)},{1,-dts(10)},{4,-dts(10)},{5,-dts(10)},{8,-dts(10)},
      {-7,-dts(11)},{-5,-dts(11)},{-3,-dts(11)},{-1,-dts(11)},{2,-dts(11)},
      {4,-dts(11)},{6,-dts(11)},{8,-dts(11)},{-7,-dts(12)},{-3,-dts(12)},
      {1,-dts(12)},{2,-dts(12)},{4,-dts(12)},{5,-dts(12)},{6,-dts(12)},
      {8,-dts(12)},{-6,-dts(13)},{-5,-dts(13)},{-2,-dts(13)},{-1,-dts(13)},
      {3,-dts(13)},{4,-dts(13)},{7,-dts(13)},{8,-dts(13)},{-6,-dts(14)},
      {-2,-dts(14)},{1,-dts(14)},{3,-dts(14)},{4,-dts(14)},{5,-dts(14)},
      {7,-dts(14)},{8,-dts(14)},{-5,-dts(15)},{-1,-dts(15)},{2,-dts(15)},
      {3,-dts(15)},{4,-dts(15)},{6,-dts(15)},{7,-dts(15)},{8,-dts(15)},
      {1,-dts(16)},{2,-dts(16)},{3,-dts(16)},{4,-dts(16)},{5,-dts(16)},
      {6,-dts(16)},{7,-dts(16)},{8,-dts(16)},
      {dts(1),dts(2),dts(3),dts(4),dts(5),dts(6),dts(7),dts(8),dts(9),dts(10),
       dts(11),dts(12),dts(13),dts(14),dts(15),dts(16)}]]),
    assert(length(
        f(2,4,ss_polynomial_2_4,ss_mixcolumns_matrix(2,4,2))[2]) = 4353),
  true)$

okltest_ss_round_column_ts_gen(f) := block(
  [ss_round_column_ts_CNF : sm2hm({})],
  if oklib_test_level = 0 then return(true),
  assert(f(2,4,ss_polynomial_2_4,
           ss_sbox_matrix(2,4),ss_affine_constant(2,4),
           ss_mixcolumns_matrix(2,4,1)) =
         [[1,2,3,4,5,6,7,8,dts(1),dts(2),dts(3),dts(4),dts(5),dts(6),dts(7),
           dts(8),dts(9),dts(10),dts(11),dts(12),dts(13),dts(14),dts(15),dts(16)],
          [{-3,-2,-1,4,5,6,7,8,dts(1)},{-5,-4,-3,-2,-1,6,7,8,dts(2)},
           {-6,-4,-3,1,2,5,7,8,dts(3)},{-6,-5,-4,-3,-1,2,7,8,dts(4)},
           {-7,-2,1,3,4,5,6,8,dts(5)},{-7,-5,-4,-3,-2,1,6,8,dts(6)},
           {-7,-6,1,2,3,4,5,8,dts(7)},{-7,-6,-5,-4,-2,1,3,8,dts(8)},
           {-8,-4,-2,-1,3,5,6,7,dts(9)},{-8,-5,-1,2,3,4,6,7,dts(10)},
           {-8,-6,-3,1,2,4,5,7,dts(11)},{-8,-6,-5,-4,-1,2,3,7,dts(12)},
           {-8,-7,-2,-1,3,4,5,6,dts(13)},{-8,-7,-5,-4,1,2,3,6,dts(14)},
           {-8,-7,-6,-3,-2,1,4,5,dts(15)},{-8,-7,-6,-5,-3,-1,2,4,dts(16)},
           {-8,-dts(1)},{-7,-dts(1)},{-6,-dts(1)},{-5,-dts(1)},{-4,-dts(1)},
           {1,-dts(1)},{2,-dts(1)},{3,-dts(1)},{-8,-dts(2)},{-7,-dts(2)},
           {-6,-dts(2)},{1,-dts(2)},{2,-dts(2)},{3,-dts(2)},{4,-dts(2)},
           {5,-dts(2)},{-8,-dts(3)},{-7,-dts(3)},{-5,-dts(3)},{-2,-dts(3)},
           {-1,-dts(3)},{3,-dts(3)},{4,-dts(3)},{6,-dts(3)},{-8,-dts(4)},
           {-7,-dts(4)},{-2,-dts(4)},{1,-dts(4)},{3,-dts(4)},{4,-dts(4)},
           {5,-dts(4)},{6,-dts(4)},{-8,-dts(5)},{-6,-dts(5)},{-5,-dts(5)},
           {-4,-dts(5)},{-3,-dts(5)},{-1,-dts(5)},{2,-dts(5)},{7,-dts(5)},
           {-8,-dts(6)},{-6,-dts(6)},{-1,-dts(6)},{2,-dts(6)},{3,-dts(6)},
           {4,-dts(6)},{5,-dts(6)},{7,-dts(6)},{-8,-dts(7)},{-5,-dts(7)},
           {-4,-dts(7)},{-3,-dts(7)},{-2,-dts(7)},{-1,-dts(7)},{6,-dts(7)},
           {7,-dts(7)},{-8,-dts(8)},{-3,-dts(8)},{-1,-dts(8)},{2,-dts(8)},
           {4,-dts(8)},{5,-dts(8)},{6,-dts(8)},{7,-dts(8)},{-7,-dts(9)},
           {-6,-dts(9)},{-5,-dts(9)},{-3,-dts(9)},{1,-dts(9)},{2,-dts(9)},
           {4,-dts(9)},{8,-dts(9)},{-7,-dts(10)},{-6,-dts(10)},{-4,-dts(10)},
           {-3,-dts(10)},{-2,-dts(10)},{1,-dts(10)},{5,-dts(10)},{8,-dts(10)},
           {-7,-dts(11)},{-5,-dts(11)},{-4,-dts(11)},{-2,-dts(11)},
           {-1,-dts(11)},{3,-dts(11)},{6,-dts(11)},{8,-dts(11)},{-7,-dts(12)},
           {-3,-dts(12)},{-2,-dts(12)},{1,-dts(12)},{4,-dts(12)},{5,-dts(12)},
           {6,-dts(12)},{8,-dts(12)},{-6,-dts(13)},{-5,-dts(13)},
           {-4,-dts(13)},{-3,-dts(13)},{1,-dts(13)},{2,-dts(13)},
           {7,-dts(13)},{8,-dts(13)},{-6,-dts(14)},{-3,-dts(14)},
           {-2,-dts(14)},{-1,-dts(14)},{4,-dts(14)},{5,-dts(14)},{7,-dts(14)},
           {8,-dts(14)},{-5,-dts(15)},{-4,-dts(15)},{-1,-dts(15)},
           {2,-dts(15)},{3,-dts(15)},{6,-dts(15)},{7,-dts(15)},{8,-dts(15)},
           {-4,-dts(16)},{-2,-dts(16)},{1,-dts(16)},{3,-dts(16)},{5,-dts(16)},
           {6,-dts(16)},{7,-dts(16)},{8,-dts(16)},
           {dts(1),dts(2),dts(3),dts(4),dts(5),dts(6),dts(7),dts(8),dts(9),
           dts(10),dts(11),dts(12),dts(13),dts(14),dts(15),dts(16)}]]),
    assert(length(
        f(2,4,ss_polynomial_2_4,ss_sbox_matrix(2,4),ss_affine_constant(2,4),
          ss_mixcolumns_matrix(2,4,2))[2]) = 4353),
  true)$


okltest_ss_sbox_pi_cst_cl(f) := block([cl],
  cl : f(["ss_sbox_cst", create_list(i,i,1,8),2,4,ss_polynomial_2_4]),
  assert(first(cl) = {-4,-3,-2,5}),
  assert(last(cl) = {3,7,8}),
  assert(length(cl) = 22),
  assert(ss_sbox_cnfp(fcl2fcs(cl2fcl(cl)), 2, 4, ss_polynomial_2_4)),
  cl : f(["ss_sbox_cst", create_list(i,i,1,16),2,8,ss_polynomial_2_8]),
  assert(first(cl) = {-10,-9,-7,-6,-5,3,4}),
  assert(last(cl) = {-4,5,7,11,13,14,15,16}),
  assert(length(cl) = 294),
  if oklib_test_level = 0 then return(true),
  assert(ss_sbox_cnfp(fcl2fcs(cl2fcl(cl)), 2, 8, ss_polynomial_2_8)),
  true)$

okltest_ss_sbox_ts_var_l(f) := block([cst],
  cst : ["ss_sbox_cst", create_list(i,i,1,8),2,4,ss_polynomial_2_4,
         nounify(n)],
  namespace : cstt_namespace_new(ss_sbox_ts_namespace, cst),
  assert(f(cst) = create_list(
      namespace(ss_v(i,nounify(sbox_ts))),i,1,16)),
  cst : ["ss_sbox_cst", create_list(i,i,1,16),2,8,ss_polynomial_2_8,
         nounify(n)],
  namespace : cstt_namespace_new(ss_sbox_ts_namespace, cst),
  assert(f(cst) = create_list(
      namespace(ss_v(i,nounify(sbox_ts))),i,1,256)),
  true)$

okltest_ss_sbox_ts_cst_cl(f) := block([cl,cst],
  cst : ["ss_sbox_cst", create_list(i,i,1,8),2,4,ss_polynomial_2_4,
         nounify(n)],
  namespace : cstt_namespace_new(ss_sbox_ts_namespace, cst),
  cl : f(cst),
  assert(first(cl) =
    {-3,-2,-1,4,5,6,7,8,namespace(ss_v(1,nounify(sbox_ts)))}),
  assert(last(rest(cl,-1)) = {8,-namespace(ss_v(16,nounify(sbox_ts)))}),
  assert(length(last(cl)) = 16),
  if oklib_test_level = 0 then return(true),
  cst : ["ss_sbox_cst", create_list(i,i,1,16),2,8,ss_polynomial_2_8,
         nounify(n)],
  namespace : cstt_namespace_new(ss_sbox_ts_namespace, cst),
  cl : f(cst),
  assert(first(cl) =
    {-7,-4,-2,1,3,5,6,8,9,10,11,12,13,14,15,16,
         namespace(ss_v(1,nounify(sbox_ts)))}),
  assert(last(rest(cl,-1)) =
    {16,
         -namespace(ss_v(256,nounify(sbox_ts)))}),
  assert(length(last(cl)) = 256),
  true)$

okltest_ss_sbox_w_mul_ts_var_l(f) := block([cst],
  cst : ["ss_sbox_cst", create_list(i,i,1,8),1,2,4,ss_polynomial_2_4,
         nounify(n)],
  namespace : cstt_namespace_new(ss_sbox_w_mul_ts_namespace, cst),
  assert(f(cst) = create_list(
      namespace(ss_v(i,nounify(sbox_w_mul_ts))),i,1,16)),
  cst : ["ss_sbox_cst", create_list(i,i,1,16),1,2,8,ss_polynomial_2_8,
         nounify(n)],
  namespace : cstt_namespace_new(ss_sbox_w_mul_ts_namespace, cst),
  assert(f(cst) = create_list(
      namespace(ss_v(i,nounify(sbox_w_mul_ts))),i,1,256)),
  true)$

okltest_ss_sbox_w_mul_ts_cst_cl(f) := block([cl,cst],
  cst : ["ss_sbox_cst", create_list(i,i,1,8),1,2,4,ss_polynomial_2_4,
         nounify(n)],
  namespace : cstt_namespace_new(ss_sbox_w_mul_ts_namespace, cst),
  cl : f(cst),
  assert(first(cl) =
    {-3,-2,-1,4,5,6,7,8,namespace(ss_v(1,nounify(sbox_w_mul_ts)))}),
  assert(last(rest(cl,-1)) = {8,-namespace(ss_v(16,nounify(sbox_w_mul_ts)))}),
  assert(length(last(cl)) = 16),
  if oklib_test_level = 0 then return(true),
  cst : ["ss_sbox_cst", create_list(i,i,1,16),1,2,8,ss_polynomial_2_8,
         nounify(n)],
  namespace : cstt_namespace_new(ss_sbox_w_mul_ts_namespace, cst),
  cl : f(cst),
  assert(first(cl) =
    {-7,-4,-2,1,3,5,6,8,9,10,11,12,13,14,15,16,
         namespace(ss_v(1,nounify(sbox_w_mul_ts)))}),
  assert(last(rest(cl,-1)) =
    {16,
    -namespace(ss_v(256,nounify(sbox_w_mul_ts)))}),
  assert(length(last(cl)) = 256),
  true)$

okltest_ss_mul_pi_cst_cl(f) := block([cl],
  assert(length(f(["ss_mul_cst",create_list(i,i,1,8),x,2,4,ss_polynomial_2_4,
        'n])) = 9),
  assert(f(["ss_mul_cst",create_list(i,i,1,8),x+1,2,4,ss_polynomial_2_4,'n]) =
    [{-5,1,2},{-1,2,5},{-6,-3,-2},{-6,-5,-1,3},{-6,1,3,5},{-2,3,6},
     {-5,-3,-1,6},{-3,1,5,6},{-8,-4,-1},{-8,1,4},{-8,-7,-3},{-8,3,7},
     {-4,1,8},{-1,4,8},{-7,3,8},{-3,7,8}]),
  assert(f(["ss_mul_cst",create_list(i,i,1,16),x,2,8,ss_polynomial_2_8,'n]) =
    [{-16,-15,-8},{-16,8,15},{-15,1,8},{-14,7},{-13,-6,-1},{-13,6,16},
     {-12,-5,-1},{-12,1,5},{-11,4},{-10,3},{-9,2},{-8,1,15},{-7,14},{-6,13,16},
     {-5,1,12},{-4,11},{-3,10},{-2,9},{-1,5,12},{-1,6,13}]),
  true)$

okltest_ss_mul_ts_var_l(f) := block([cst],
  cst : ["ss_mul_cst",create_list(i,i,1,8),x,2,4,ss_polynomial_2_4,
         nounify(n)],
  namespace : cstt_namespace_new(ss_mul_ts_namespace, cst),
  assert(f(cst) = create_list(
      namespace(ss_v(i,nounify(mul_ts))),i,1,16)),
  cst : ["ss_mul_cst",create_list(i,i,1,16),x,2,8,ss_polynomial_2_8,
         nounify(n)],
  namespace : cstt_namespace_new(ss_mul_ts_namespace, cst),
  assert(f(cst) = create_list(
      namespace(ss_v(i,nounify(mul_ts))),i,1,256)),
  true)$

okltest_ss_mul_ts_cst_cl(f) := block([cl,cst],
  if oklib_test_level = 0 then return(true),
  cst : ["ss_mul_cst",create_list(i,i,1,8),x,2,4,ss_polynomial_2_4,
         nounify(n)],
  namespace : cstt_namespace_new(ss_mul_ts_namespace, cst),
  cl : f(cst),
  assert(first(cl) =
    {1,2,3,4,5,6,7,8,namespace(ss_v(1,nounify(mul_ts)))}),
  assert(last(rest(cl,-1)) =
    {8,-namespace(ss_v(16,nounify(mul_ts)))}),
  assert(length(last(cl)) = 16),
  if oklib_test_level = 0 then return(true),
  cst : ["ss_mul_cst",create_list(i,i,1,16),x,2,8,ss_polynomial_2_8,
         nounify(n)],
  namespace : cstt_namespace_new(ss_mul_ts_namespace, cst),
  cl : f(cst),
  assert(first(cl) =
    {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,
         namespace(ss_v(1,nounify(mul_ts)))}),
  assert(last(rest(cl,-1)) =
    {16,
         -namespace(ss_v(256,nounify(mul_ts)))}),
  assert(length(last(cl)) = 256),
  true)$

okltest_ss_mixcolumn_ts_var_l(f) := block([cst],
  cst : ["ss_mixcolumn_cst",create_list(i,i,1,16),2,2,4,ss_polynomial_2_4,
         matrix([x+1,x],[x,x+1]),nounify(n)],
  namespace : cstt_namespace_new(ss_mixcolumn_ts_namespace, cst),
  assert(f(cst) = create_list(
      namespace(ss_v(i,nounify(mixcolumn_ts))),i,1,256)),
  true)$

okltest_ss_mixcolumn_ts_cst_cl(f) := block([cl,cst],
  if oklib_test_level = 0 then return(true),
  cst : ["ss_mixcolumn_cst",create_list(i,i,1,16),2,2,4,ss_polynomial_2_4,
         matrix([x+1,x],[x,x+1]),nounify(n)],
  namespace : cstt_namespace_new(ss_mixcolumn_ts_namespace, cst),
  cl : f(cst),
  assert(first(cl) =
    {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,
      namespace(ss_v(1,nounify(mixcolumn_ts)))}),
  assert(last(rest(cl,-1)) =
    {16,-namespace(ss_v(256,nounify(mixcolumn_ts)))}),
  assert(length(last(cl)) = 256),
  true)$


okltest_ss_round_column_ts_var_l(f) := block([cst],
  cst : ["ss_round_column_cst",create_list(i,i,1,16),2,2,4,ss_polynomial_2_4,
         ss_sbox_matrix(2,4), ss_affine_constant(2,4),
         ss_mixcolumns_matrix(2,4,2), nounify(n)],
  namespace : cstt_namespace_new(ss_round_column_ts_namespace, cst),
  assert(f(cst) = create_list(
      namespace(ss_v(i,nounify(round_column_ts))),i,1,256)),
  true)$

okltest_ss_round_column_ts_cst_cl(f) := block([cl,cst],
  if oklib_test_level = 0 then return(true),
  cst : ["ss_round_column_cst",create_list(i,i,1,16),2,2,4,ss_polynomial_2_4,
         ss_sbox_matrix(2,4), ss_affine_constant(2,4),
         ss_mixcolumns_matrix(2,4,2), nounify(n)],
  namespace : cstt_namespace_new(ss_round_column_ts_namespace, cst),
  cl : f(cst),
  assert(first(cl) =
    {-7,-6,-5,-3,-2,-1,4,8,9,10,11,12,13,14,15,16,
      namespace(ss_v(1,nounify(round_column_ts)))}),
  assert(last(rest(cl,-1)) =
    {16,-namespace(ss_v(256,nounify(round_column_ts)))}),
  assert(length(last(cl)) = 256),
  true)$


/*!
\endhtmlonly
*/
