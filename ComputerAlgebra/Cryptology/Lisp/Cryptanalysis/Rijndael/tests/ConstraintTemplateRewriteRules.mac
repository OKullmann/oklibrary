/* Matthew Gwynne, 28.9.2010 (Swansea) */
/* Copyright 2010, 2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/tests/ConstraintTemplateRewriteRules.mac
  \brief Tests for the AES constraint template translation functions

Use by

oklib_load("OKlib/ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/tests/ConstraintTemplateRewriteRules.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$

kill(f)$


/* ***********************************************
   * Constraint template rewrite translation     *
   ***********************************************
*/

oktest_generate_aes_constraint_vars(f) := block(
  for i : 0 thru 5 do
    assert(f(i,i-1,lambda([a],a),nounify(id)) = []),
  for i : 0 thru 5 do
    assert(f(i,i, lambda([a],a),nounify(id)) = [aes_v(i,nounify(id))]),
 for i : 0 thru 5 do
    assert(f(i,i, nounify(n),nounify(id)) =
      [nounify(n)(aes_v(i,nounify(id)))]),
  assert(f(1,2, nounify(n),nounify(id)) =
    [nounify(n)(aes_v(1,nounify(id))),nounify(n)(aes_v(2,nounify(id)))]),
  true)$

/* ***********************************************
   * Constraint template rewrite functions       *
   ***********************************************
*/

okltest_aes_ns_var_l(f) := block([cst],
  cst : ["aes_cst",create_list(i,i,1,384),1,lambda([a],a)],
  namespace : cstt_namespace_new(aes_namespace, cst),
  assert(
    f(cst) =
    append(
      map(
        lambda([a],namespace(aes_var(a,nounify(o)))),
        create_list(i,i,1,128)),
      map(
        lambda([a],namespace(aes_var(a,nounify(k)))),
        create_list(i,i,1,256)))),
  true)$

okltest_aes_cstr_cstl(f) := block([ctl,ct],
  cst : ["aes_cst",create_list(i,i,1,384),1,nounify(n)],
  namespace : cstt_namespace_new(aes_namespace, cst),
  ctl : f(cst),
  assert(map(first,ctl) =
    ["aes_round_cst","aes_add_cst","aes_key_expansion_cst"]),
  assert(map(lambda([a],length(a[2])), ctl) = [384,384,384]),
  assert(every_s(lambda([a], is(last(a) =
          namespace)),ctl)),
  assert(ctl[1][2][50] =
    namespace(aes_v(50,nounify(o)))),
  assert(ctl[2][2][200] =
    namespace(aes_v(72,nounify(k)))),
  if oklib_test_level = 0 then return(true),
  assert(
    setify(aes_ns_var_l(cst)) =
    setdifference(setify(lappend(map(cstt_vars_l,ctl))),
      setify(create_list(i,i,1,384)))),
  true)$

okltest_aes_round_ns_var_l(f) := block([cst],
  cst : ["aes_round_cst",create_list(i,i,1,384),lambda([a],a)],
  namespace : cstt_namespace_new(aes_round_namespace, cst),
  assert(
    f(cst) =
    append(
      map(
        lambda([a],namespace(aes_var(a,nounify(mo)))),
        create_list(i,i,1,128)),
      map(
        lambda([a],namespace(aes_var(a,nounify(ro)))),
        create_list(i,i,1,128)),
      map(
        lambda([a],namespace(aes_var(a,nounify(so)))),
        create_list(i,i,1,128)))),
  true)$

okltest_aes_round_cstr_cstl(f) := block([cst],
  cst : ["aes_round_cst",create_list(i,i,1,384),nounify(n)],
  namespace : cstt_namespace_new(aes_round_namespace, cst),
  ctl : f(cst),
  assert(map(first,ctl) =
    ["aes_add_cst","aes_mixcolumns_cst","aes_shiftrows_cst",
     "aes_subbytes_cst"]),
  assert(map(lambda([a],length(a[2])), ctl) = [384,256,256,256]),
    assert(every_s(lambda([a], is(last(a) =
          namespace)),ctl)),
  if oklib_test_level = 0 then return(true),
  assert(
    setify(aes_round_ns_var_l(cst)) =
    setdifference(setify(lappend(map(cstt_vars_l,ctl))),
      setify(create_list(i,i,1,384)))),
  true)$


okltest_aes_final_round_ns_var_l(f) := block([cst],
  cst : ["aes_final_round_cst",create_list(i,i,1,384),lambda([a],a)],
  namespace : cstt_namespace_new(aes_final_round_namespace, cst),
  assert(
    f(cst) =
    append(
      map(
        lambda([a],namespace(aes_var(a,nounify(ro)))),
        create_list(i,i,1,128)),
      map(
        lambda([a],namespace(aes_var(a,nounify(so)))),
        create_list(i,i,1,128)))),
  true)$


okltest_aes_final_round_cstr_cstl(f) := block([cst],
  cst : ["aes_final_round_cst",create_list(i,i,1,384),nounify(n)],
  namespace : cstt_namespace_new(aes_final_round_namespace, cst),
  ctl : f(cst),
  assert(map(first,ctl) =
    ["aes_add_cst","aes_shiftrows_cst","aes_subbytes_cst"]),
  assert(map(lambda([a],length(a[2])), ctl) = [384,256,256]),
  assert(every_s(lambda([a], is(last(a) =
          namespace)),ctl)),
  if oklib_test_level = 0 then return(true),
  assert(
    setify(aes_final_round_ns_var_l(cst)) =
    setdifference(setify(lappend(map(cstt_vars_l,ctl))),
      setify(create_list(i,i,1,384)))),
  true)$


okltest_aes_subbytes_ns_var_l(f) := block([cst],
  cst : ["aes_subbytes_cst",create_list(i,i,1,384),nounify(n)],
  assert(f(cst) = []),
  true)$


okltest_aes_subbytes_cstr_cstl(f) := block([cst],
  cst : ["aes_subbytes_cst",create_list(i,i,1,256),nounify(n)],
  namespace : cstt_namespace_new(aes_subbytes_namespace, cst),
  ctl : f(cst),
  assert(map(first,ctl) = create_list("aes_sbox_cst",i,1,16)),
  assert(map(lambda([a],length(a[2])), ctl) = create_list(16,i,1,16)),
  assert(every_s(lambda([a], is(last(a) =
          namespace)),ctl)),
  if oklib_test_level = 0 then return(true),
  assert(
    setify(aes_subbytes_ns_var_l(cst)) =
    setdifference(setify(lappend(map(cstt_vars_l,ctl))),
      setify(create_list(i,i,1,384)))),
  true)$


okltest_aes_shiftrows_ns_var_l(f) := block([cst],
  cst : ["aes_shiftrows_cst",create_list(i,i,1,384),nounify(n)],
  assert(f(cst) = []),
  true)$


okltest_aes_shiftrows_cstr_cstl(f) := block([cst],
  cst : ["aes_shiftrows_cst",create_list(i,i,1,256),nounify(n)],
  namespace : cstt_namespace_new(aes_shiftrows_namespace, cst),
  ctl : f(cst),
  assert(map(first,ctl) = create_list("eq_cst",i,1,128)),
  assert(map(lambda([a],length(a[2])), ctl) = create_list(2,i,1,128)),
  assert(every_s(lambda([a], is(last(a) =
          namespace)),ctl)),
  if oklib_test_level = 0 then return(true),
  assert(
    setify(aes_shiftrows_ns_var_l(cst)) =
    setdifference(setify(lappend(map(cstt_vars_l,ctl))),
      setify(create_list(i,i,1,384)))),
  true)$


okltest_aes_mixcolumns_ns_var_l(f) := block([cst],
  cst : ["aes_mixcolumns_cst",create_list(i,i,1,384),nounify(n)],
  assert(f(cst) = []),
  true)$

okltest_aes_mixcolumns_cstr_cstl(f) := block([cst],
  cst : ["aes_mixcolumns_cst",create_list(i,i,1,256),nounify(n)],
  namespace : cstt_namespace_new(aes_mixcolumns_namespace, cst),
  ctl : f(cst),
  assert(map(first,ctl) = create_list("aes_mixcolumn_cst",i,1,4)),
  assert(map(lambda([a],length(a[2])), ctl) = create_list(64,i,1,4)),
  assert(every_s(lambda([a], is(last(a) =
          namespace)),ctl)),
  if oklib_test_level = 0 then return(true),
  assert(
    setify(aes_mixcolumns_ns_var_l(cst)) =
    setdifference(setify(lappend(map(cstt_vars_l,ctl))),
      setify(create_list(i,i,1,384)))),
  true)$


okltest_aes_bi_mixcolumn_ns_var_l(f) := block([cst],
  cstt : ["aes_mixcolumn_cst",create_list(i,i,1,64),lambda([a],a)],
  cstt_new : cstt_namespace_replace(cstt,
    cstt_namespace_new(aes_bi_mixcolumn_namespace,cstt)),
  namespace_mc : cstt_namespace_new(aes_mixcolumn_namespace,cstt_new),
  namespace_invmc : cstt_namespace_new(aes_inv_mixcolumn_namespace,cstt_new),
  assert(
    f(cstt) =
    append(
      map(
        lambda([a],namespace_mc(aes_var(a,nounify(mc3)))),
        create_list(i,i,1,32)),
      map(
        lambda([a],namespace_mc(aes_var(a,nounify(mc2)))),
        create_list(i,i,1,32)),
      map(
        lambda([a],namespace_invmc(aes_var(a,nounify(mc9)))),
        create_list(i,i,1,32)),      
      map(
        lambda([a],namespace_invmc(aes_var(a,nounify(mc13)))),
        create_list(i,i,1,32)),      
      map(
        lambda([a],namespace_invmc(aes_var(a,nounify(mc11)))),
        create_list(i,i,1,32)),      
      map(
        lambda([a],namespace_invmc(aes_var(a,nounify(mc14)))),
        create_list(i,i,1,32)))),
  true)$

okltest_aes_mixcolumn_ns_var_l(f) := block([cst],
  cst : ["aes_mixcolumn_cst",create_list(i,i,1,64),lambda([a],a)],
  namespace : cstt_namespace_new(aes_mixcolumn_namespace, cst),
  assert(
    f(cst) =
    append(
      map(
        lambda([a],namespace(aes_var(a,nounify(mc3)))),
        create_list(i,i,1,32)),
      map(
        lambda([a],namespace(aes_var(a,nounify(mc2)))),
        create_list(i,i,1,32)))),
  true)$


okltest_aes_inv_mixcolumn_ns_var_l(f) := block([cst],
  cst : ["aes_mixcolumn_cst",create_list(i,i,1,64),lambda([a],a)],
  namespace : cstt_namespace_new(aes_inv_mixcolumn_namespace, cst),
  assert(
    f(cst) =
    append(
      map(
        lambda([a],namespace(aes_var(a,nounify(mc9)))),
        create_list(i,i,1,32)),      
      map(
        lambda([a],namespace(aes_var(a,nounify(mc13)))),
        create_list(i,i,1,32)),      
      map(
        lambda([a],namespace(aes_var(a,nounify(mc11)))),
        create_list(i,i,1,32)),      
      map(
        lambda([a],namespace(aes_var(a,nounify(mc14)))),
        create_list(i,i,1,32)))),
  true)$

okltest_aes_bi_mixcolumn_cstr_cstl(f) := block([cst],
  cst : ["aes_mixcolumn_cst",create_list(i,i,1,64),nounify(n)],
  cstt_new : cstt_namespace_replace(cst,
    cstt_namespace_new(aes_bi_mixcolumn_namespace,cst)),
  namespace_mc : cstt_namespace_new(aes_mixcolumn_namespace,cstt_new),
  namespace_invmc : cstt_namespace_new(aes_inv_mixcolumn_namespace,cstt_new),
  ctl : f(cst),
  assert(map(first,ctl) =
    ["aes_add_cst","aes_mul3_cst","aes_mul2_cst","aes_add_cst","aes_mul3_cst",
     "aes_mul2_cst","aes_add_cst","aes_mul3_cst","aes_mul2_cst",
     "aes_add_cst","aes_mul3_cst","aes_mul2_cst",
     "aes_add_cst","aes_mul9_cst","aes_mul13_cst",
     "aes_mul11_cst","aes_mul14_cst",
     "aes_add_cst","aes_mul9_cst","aes_mul13_cst","aes_mul11_cst",
     "aes_mul14_cst","aes_add_cst","aes_mul9_cst",
     "aes_mul13_cst","aes_mul11_cst","aes_mul14_cst","aes_add_cst",
     "aes_mul9_cst","aes_mul13_cst",
     "aes_mul11_cst","aes_mul14_cst"]),
  assert(map(lambda([a],length(a[2])), ctl) =
    [40,16,16,40,16,16,40,16,16,40,16,16,40,16,16,16,16,40,16,
     16,16,16,40,16,16,16,16,40,16,16,16,16]),
  assert(every_s(lambda([a], is(last(a) = namespace_mc) or
        is(last(a) = namespace_invmc)),ctl)),
  if oklib_test_level = 0 then return(true),
  assert(
    setify(aes_bi_mixcolumn_ns_var_l(cst)) =
    setdifference(setify(lappend(map(cstt_vars_l,ctl))),
      setify(create_list(i,i,1,384)))),
  true)$

okltest_aes_mixcolumn_cstr_cstl(f) := block([cst],
  cst : ["aes_mixcolumn_cst",create_list(i,i,1,64),nounify(n)],
  namespace : cstt_namespace_new(aes_mixcolumn_namespace, cst),
  ctl : f(cst),
  assert(map(first,ctl) =
    ["aes_add_cst","aes_mul3_cst","aes_mul2_cst","aes_add_cst","aes_mul3_cst",
     "aes_mul2_cst","aes_add_cst","aes_mul3_cst","aes_mul2_cst",
     "aes_add_cst","aes_mul3_cst","aes_mul2_cst"]),
  assert(map(lambda([a],length(a[2])), ctl) =
    [40,16,16,40,16,16,40,16,16,40,16,16]),
  assert(every_s(lambda([a], is(last(a) = namespace)),ctl)),
  if oklib_test_level = 0 then return(true),
  assert(
    setify(aes_mixcolumn_ns_var_l(cst)) =
    setdifference(setify(lappend(map(cstt_vars_l,ctl))),
      setify(create_list(i,i,1,384)))),
  true)$

okltest_aes_key_expansion_ns_var_l(f) := block([cst],
  cst : ["aes_key_expansion_cst",create_list(i,i,1,384),1,lambda([a],a)],
  namespace : cstt_namespace_new(aes_key_expansion_namespace, cst),
  assert(
    f(cst) =
    append(
      map(
        lambda([a],namespace(aes_var(a,nounify(rc)))),
        create_list(i,i,1,8)),
      map(
        lambda([a],namespace(aes_var(a,nounify(ke)))),
        create_list(i,i,1,8)),
      map(
        lambda([a],namespace(aes_var(a,nounify(sb)))),
        create_list(i,i,1,32)))),
  true)$


okltest_aes_key_expansion_cstr_cstl(f) := block([cst],
  cst : ["aes_key_expansion_cst",create_list(i,i,1,384),1,nounify(n)],
  namespace : cstt_namespace_new(aes_key_expansion_namespace, cst),
  ctl : f(cst),
  assert(map(first,ctl) =
    ["aes_add_cst","aes_add_cst","aes_add_cst","aes_add_cst","aes_add_cst",
     "aes_add_cst","aes_add_cst","aes_add_cst","aes_add_cst","aes_add_cst",
     "aes_add_cst","aes_add_cst","aes_add_cst","aes_sbox_cst","aes_add_cst",
     "aes_sbox_cst","aes_add_cst","aes_sbox_cst","aes_add_cst","const_cst",
     "aes_add_cst","aes_sbox_cst","eq_cst","eq_cst","eq_cst",
     "eq_cst","eq_cst","eq_cst","eq_cst","eq_cst",
     "eq_cst","eq_cst","eq_cst","eq_cst","eq_cst",
     "eq_cst","eq_cst","eq_cst"]),
  assert(map(lambda([a],length(a[2])), ctl) =
    [24,24,24,24,24,24,24,24,24,24,24,24,24,16,24,16,24,16,24,8,24,16,16,16,
     16,16,16,16,16,16,16,16,16,16,16,16,16,16]),
  assert(every_s(lambda([a], is(last(a) = namespace)),ctl)),
  if oklib_test_level = 0 then return(true),
  assert(
    setify(aes_key_expansion_ns_var_l(cst)) =
    setdifference(setify(lappend(map(cstt_vars_l,ctl))),
      setify(create_list(i,i,1,384)))),
  true)$


/* ****************************************
   * Translation functions                *
   ****************************************
*/

okltest_aes_add_cst_cl(f) := block(
  assert(f(["aes_add_cst", create_list(i,i,1,3)]) =
    [{-3,1,2},{-2,1,3},{-1,2,3},{-3,-2,-1}]),
  assert(f(["aes_add_cst", create_list(i,i,1,6)]) =
   [{-5,1,3},{-3,1,5},{-1,3,5},{-5,-3,-1},{-6,2,4},{-4,2,6},{-2,4,6},
    {-6,-4,-2}]),
  assert(f(["aes_add_cst", [7,8,9,10,11,12]]) =
   [{-11,7,9},{-9,7,11},{-7,9,11},{-11,-9,-7},{-12,8,10},{-10,8,12},{-8,10,12},
    {-12,-10,-8}]),
  assert(f(["aes_add_cst", [7,8,9,10,11,12,13,14],3, 'n]) =
    [{-13,7,9,11},{-11,7,9,13},{-9,7,11,13},{-13,-11,-9,7},{-7,9,11,13},
    {-13,-11,-7,9},{-13,-9,-7,11},{-11,-9,-7,13},{-14,8,10,12},{-12,8,10,14},
    {-10,8,12,14},{-14,-12,-10,8},{-8,10,12,14},{-14,-12,-8,10},
    {-14,-10,-8,12},{-12,-10,-8,14}]),
  true)$

okltest_aes_eq_cst_cl(f) := block(
  assert(f(["aes_eq_cst", create_list(i,i,1,2)]) =
    [{-1,2},{1,-2}]),
  assert(f(["aes_eq_cst", create_list(i,i,1,4)]) =
    [{-1,3},{1,-3},{-2,4},{2,-4}]),
  assert(f(["aes_eq_cst", [1,true]]) = [{1}]),
  assert(f(["aes_eq_cst", [1,-2,true,true]]) = [{1},{-2}]),
  true)$

okltest_aes_const_cst_cl(f) := block(
  assert(f(["const_cst",[],1,nounify(g)]) = []),
  assert(f(["const_cst",[1],1,1, nounify(g)]) = [{1}]),
  assert(f(["const_cst",[1,2],1,1,0, nounify(g)]) = [{1},{-2}]),
  true)$

okltest_aes_sbox_pi_cst_cl(f) := block([cl],
  cl : f(["aes_sbox_cst", create_list(i,i,1,16)]),
  assert(cl[1] = {-16,-15,-14,-13,4,11,12}),
  assert(last(cl) = {5,7,10,11,13,14,15,16}),
  assert(length(cl) = 559),
  true)$

okltest_aes_sbox_ts_var_l(f) := block([cst],
  cst : ["aes_sbox_cst", create_list(i,i,1,16),nounify(n)],
  namespace : cstt_namespace_new(aes_sbox_ts_namespace, cst),
  assert(f(cst) = create_list(
      namespace(aes_v(i,nounify(sbox_ts))),i,1,256)),
  true)$

okltest_aes_sbox_ts_cst_cl(f) := block([cl,cst],
  if oklib_test_level = 0 then return(true),
  cst : ["aes_sbox_cst", create_list(i,i,1,16),nounify(n)],
  namespace : cstt_namespace_new(aes_sbox_ts_namespace, cst),
  cl : f(cst),
  assert(cl[1] =
    {-7,-4,-2,1,3,5,6,8,9,10,11,12,13,14,15,16,
         namespace(aes_v(1,nounify(sbox_ts)))}),
  assert(last(rest(cl,-1)) =
    {16,
         -namespace(aes_v(256,nounify(sbox_ts)))}),
  assert(length(last(cl)) = 256),
  true)$

okltest_aes_mul2_pi_cst_cl(f) := block([cl],
  assert(f(["aes_mul2_cst", create_list(i,i,1,16)]) =
    [{-16,-15,-8},{-16,1},{-15,8,16},{-14,7},{-13,-6,-1},{-13,6,16},
     {-12,-5,-1},{-12,5,16},{-11,4},{-10,3},{-9,2},{-8,15,16},{-7,14},
     {-6,13,16},{-5,12,16},{-4,11},{-3,10},{-2,9},{-1,5,12},{-1,6,13},
     {-1,8,15}]),
  true)$

okltest_aes_mul2_ts_var_l(f) := block([cst],
  cst : ["aes_mul2_cst", create_list(i,i,1,16),nounify(n)],
  namespace : cstt_namespace_new(aes_mul2_ts_namespace, cst),
  assert(f(cst) = create_list(
      namespace(aes_v(i,nounify(mul2_ts))),i,1,256)),
  true)$

okltest_aes_mul2_ts_cst_cl(f) := block([cl,cst],
  if oklib_test_level = 0 then return(true),
  cst : ["aes_mul2_cst", create_list(i,i,1,16),nounify(n)],
  namespace : cstt_namespace_new(aes_mul2_ts_namespace, cst),
  cl : f(cst),
  assert(cl[1] =
    {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,
         namespace(aes_v(1,nounify(mul2_ts)))}),
  assert(last(rest(cl,-1)) =
    {16,
         -namespace(aes_v(256,nounify(mul2_ts)))}),
  assert(length(last(cl)) = 256),
  true)$

okltest_aes_mul3_pi_cst_cl(f) := block([cl],
  assert(f(["aes_mul3_cst", create_list(i,i,1,16)]) =
    [{-16,-15,-7},{-16,-8,-1},{-16,1,8},{-16,7,15},{-15,-8,-5,13,14},
     {-15,7,16},{-15,8,9,10,11,12,13,14},{-14,-7,-6},{-14,6,7},{-14,6,15,16},
     {-13,-8,-5,14,15},{-13,-6,-5,1},{-13,-6,-1,5},{-13,-5,-1,6},
     {-13,-5,-1,7,14},{-13,1,5,6},{-13,1,5,7,14},{-13,5,8,14,15},
     {-12,-5,-4,1},{-12,-5,-1,4},{-12,-4,-1,5},{-12,1,4,5},{-12,4,6,13},
     {-12,4,7,13,14},{-12,4,13,14,15,16},{-11,-4,-3},{-11,3,4},
     {-11,3,6,12,13},{-11,3,7,12,13,14},{-11,3,12,13,14,15,16},
     {-11,5,9,10,12},{-10,-9,-3,1},{-10,-9,-3,4,5,12},{-10,-9,-3,5,7,13,14},
     {-10,-3,-2},{-10,-2,-1,5,11,12},{-10,2,3},{-10,2,4,11},
     {-10,2,6,11,12,13},{-10,2,11,12,13,14,15,16},{-9,-2,-1},{-9,1,3,10},
     {-9,1,4,10,11},{-9,5,10,11,12},{-9,8,10,11,12,13,14,15},{-8,1,16},
     {-7,6,14},{-6,-5,-1,13},{-6,1,5,13},{-5,-4,-1,12},{-5,1,4,12},
     {-4,1,5,12},{-4,3,11},{-3,2,10},{-2,1,9},{-2,6,10,11,12,13},{-1,2,9},
     {-1,3,9,10},{-1,4,9,10,11},{-1,8,16},{-1,9,10,11,12,13,14,15,16}]),
  true)$

okltest_aes_mul3_ts_var_l(f) := block([cst],
  cst : ["aes_mul3_cst", create_list(i,i,1,16),nounify(n)],
  namespace : cstt_namespace_new(aes_mul3_ts_namespace, cst),
  assert(f(cst) = create_list(
      namespace(aes_v(i,nounify(mul3_ts))),i,1,256)),
  true)$

okltest_aes_mul3_ts_cst_cl(f) := block([cl,cst],
  if oklib_test_level = 0 then return(true),
  cst : ["aes_mul3_cst", create_list(i,i,1,16),nounify(n)],
  namespace : cstt_namespace_new(aes_mul3_ts_namespace, cst),
  cl : f(cst),
  assert(cl[1] =
    {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,
         namespace(aes_v(1,nounify(mul3_ts)))}),
  assert(last(rest(cl,-1)) =
    {16,
         -namespace(aes_v(256,nounify(mul3_ts)))}),
  assert(length(last(cl)) = 256),
  true)$

okltest_aes_mul14_pi_cst_cl(f) := block([cl],
  assert(f(["aes_mul14_cst", create_list(i,i,1,16)]) =
    [{-16,-14,-11,-10,-3,13},{-16,-14,-3,10,11,13},{-16,-13,-12,-10,-8,4},
     {-16,-13,-12,-10,-4,3,15},{-16,-13,-12,-8,-4,10},{-16,-13,-12,3,4,10,15},
     {-16,-13,-11,-10,-3,14},{-16,-13,-10,-8,-4,12},{-16,-13,-10,3,4,12,15},
     {-16,-13,-8,4,10,12},{-16,-13,-4,3,10,12,15},{-16,-13,-3,10,11,14},
     {-16,-12,-8,4,10,13},{-16,-11,-10,3,13,14},{-16,-11,-6,10},
     {-16,-10,-6,11},{-16,-8,-4,10,12,13},{-16,3,10,11,13,14},
     {-15,-14,-12,-11,-4},{-15,-14,-12,4,11},{-15,-14,-11,4,12},
     {-15,-14,-4,11,12},{-15,-12,-11,4,14},{-15,-12,-4,11,14},
     {-15,-11,-4,12,14},{-15,4,11,12,14},{-14,-13,-3,6},{-14,-12,-11,3,4,8},
     {-14,-12,-11,4,15},{-14,-12,-4,3,8,11},{-14,-12,-4,11,15},
     {-14,-11,-4,3,8,12},{-14,-11,-4,12,15},{-14,-11,-3,10,13,16},
     {-14,-10,-3,11,13,16},{-14,3,4,8,11,12},{-14,3,6,13},{-14,4,11,12,15},
     {-13,-12,-10,-8,-4,16},{-13,-12,-10,3,4,15,16},{-13,-12,-8,4,10,16},
     {-13,-12,-4,3,10,15,16},{-13,-11,-3,10,14,16},{-13,-10,-8,4,12,16},
     {-13,-10,-4,3,12,15,16},{-13,-10,-3,11,14,16},{-13,-8,-4,10,12,16},
     {-13,3,4,10,12,15,16},{-13,3,6,14},{-12,-11,-7,9},{-12,-11,-4,3,8,14},
     {-12,-10,-8,4,13,16},{-12,-9,-7,11},{-12,-6,-3,5,7},{-12,3,4,8,11,14},
     {-12,3,5,6,7},{-12,7,9,11},{-11,-10,-9,-6,-1,4},{-11,-10,-6,-3,-1,2},
     {-11,-10,-6,1,2,3},{-11,-10,-6,1,4,9},{-11,-9,-7,12},{-11,-9,-6,-5,-3},
     {-11,-9,-5,3,6},{-11,-9,-4,1,6,10},{-11,-6,-5,3,9},{-11,-5,-3,6,9},
     {-11,-4,-1,6,9,10},{-11,-3,-1,2,6,10},{-11,1,4,6,9,10},{-11,3,4,8,12,14},
     {-10,-9,-1,4,6,11},{-10,-8,-1,7,11,13},{-10,-4,-3,1,5},{-10,-4,-1,3,5},
     {-10,-3,-1,2,6,11},{-10,-2,-1,5,9},{-10,1,2,3,6,11},{-10,1,3,4,5},
     {-10,1,4,6,9,11},{-10,2,4,5,16},{-9,-8,-7,-6,-4,13},{-9,-8,-7,3,4,14},
     {-9,-8,-7,4,6,13},{-9,-7,-4,14,15},{-9,-6,-5,3,11},{-9,-6,-4,1,10,11},
     {-9,-5,-3,6,11},{-9,-4,-2,3},{-9,-4,-1,16},{-9,-3,-2,4},{-9,1,4,16},
     {-9,2,3,4},{-8,-7,-6,4,9,13},{-8,-7,-4,6,9,13},{-8,-6,-2,3,7,13},
     {-8,1,6,7,13,16},{-8,2,7,14},{-7,4,9,14,15},{-7,9,11,12},{-6,-5,-3,7,12},
     {-6,-5,-3,9,11},{-6,-4,-1,9,10,11},{-6,-3,-1,2,10,11},{-6,1,4,9,10,11},
     {-6,2,7,13,15},{-6,8,13,14,15},{-5,3,6,7,12},{-5,3,6,9,11},
     {-5,9,11,13,14},{-4,-3,-2,9},{-4,-3,-1,5,10},{-4,1,9,16},{-4,2,3,9},
     {-4,2,5,10,16},{-4,3,8,11,12,14},{-3,1,2,16},{-3,1,4,5,10},
     {-3,2,6,7,8,13},{-3,5,6,7,12},{-3,6,13,14},{-3,8,15},{-2,1,5,9,10},
     {-2,3,4,9},{-2,6,7,13,15},{-2,7,8,14},{-1,3,4,5,10},{-1,4,9,16},
     {-1,5,12,13,15,16}]),
  true)$

okltest_aes_mul14_ts_var_l(f) := block([cst],
  cst : ["aes_mul14_cst", create_list(i,i,1,16),nounify(n)],
  namespace : cstt_namespace_new(aes_mul14_ts_namespace, cst),
  assert(f(cst) = create_list(
      namespace(aes_v(i,nounify(mul14_ts))),i,1,256)),
  true)$

okltest_aes_mul14_ts_cst_cl(f) := block([cl,cst],
  if oklib_test_level = 0 then return(true),
  cst : ["aes_mul14_cst", create_list(i,i,1,16),nounify(n)],
  namespace : cstt_namespace_new(aes_mul14_ts_namespace, cst),
  cl : f(cst),
  assert(cl[1] =
    {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,
         namespace(aes_v(1,nounify(mul14_ts)))}),
  assert(last(rest(cl,-1)) =
    {16,
         -namespace(aes_v(256,nounify(mul14_ts)))}),
  assert(length(last(cl)) = 256),
  true)$

okltest_aes_mul11_pi_cst_cl(f) := block([cl],
  assert(f(["aes_mul11_cst", create_list(i,i,1,16)]) =
    [{-16,-13,-11,-9,-3,1,5},{-16,-13,-11,-5,-1,3,9},
     {-16,-13,-10,-5,-2,3,7,11,12},{-16,-13,-10,-3,-2,6},{-16,-13,-5,1,6},
     {-16,-13,-3,1,5,9,11},{-16,-13,-1,4,10,11},{-16,-13,-1,5,6},
     {-16,-11,-1,3,5,9,13},{-16,-10,-9,-5,-2,11,14,15},{-16,-10,-2,3,6,13},
     {-16,-10,-2,5,8},{-16,-10,-2,9,11,13},{-16,-9,-5,-3,-2,12,15},
     {-16,-9,-5,1,10,12,13,14},{-16,-9,-2,3,5,12,15},{-16,-9,-2,10,11,13},
     {-16,-9,-1,3,5,11,13},{-16,-5,-3,1,7,10,15},{-16,-5,-2,7,13,14},
     {-16,-5,-2,8,10},{-16,-5,-1,6,13},{-16,-3,-2,5,9,12,15},{-16,-3,-1,8},
     {-16,1,3,8},{-16,1,4,10,11,13},{-16,1,5,6,13},{-15,-14,-13,5},
     {-15,-14,-5,13},{-15,-13,-5,14},{-15,5,13,14},{-14,-12,-11,-10,-3},
     {-14,-12,-11,3,10},{-14,-12,-10,3,11},{-14,-12,-3,10,11},
     {-14,-11,-10,3,12},{-14,-11,-3,10,12},{-14,-10,-3,11,12},
     {-14,3,10,11,12},{-13,-11,-10,-9,-2,16},{-13,-11,-9,-8,-5},
     {-13,-11,-8,5,9},{-13,-11,-5,1,3,9,16},{-13,-11,-2,9,10,16},
     {-13,-10,-2,9,11,16},{-13,-9,-8,5,11},{-13,-8,-5,9,11},
     {-13,-5,-2,3,4,11,16},{-13,-5,-1,6,16},{-13,-3,-2,6,10,16},
     {-13,-3,-1,7,10,14,16},{-13,1,5,6,16},{-13,1,7,11,12,16},
     {-12,-11,-10,3,14},{-12,-10,-9,-8,-3,15},{-12,-10,-8,3,9,15},
     {-12,-9,-8,3,10,15},{-12,-9,-7,-5,-3},{-12,-9,-7,3,5},
     {-12,-8,-3,9,10,15},{-12,-7,-5,3,9},{-12,-7,-3,5,9},
     {-12,-5,-4,-2,-1,3,7},{-12,-5,-4,2,7,8,16},{-12,-5,-3,7,9},
     {-12,-3,-1,4,5,15,16},{-12,3,5,7,9},{-12,4,7,10},{-12,5,6,7,11},
     {-11,-10,-3,12,14},{-11,-10,-2,9,13,16},{-11,-9,-8,5,13},
     {-11,-9,-7,5,10,14},{-11,-9,-6,3},{-11,-8,-5,9,13},{-11,-6,-3,9},
     {-11,-4,-3,-2,-1,6},{-11,-4,-3,1,2,6},{-11,1,4,10,13,16},
     {-10,-9,-8,3,12,15},{-10,-9,-7,5,11,14},{-10,-9,-5,-4,-3},
     {-10,-9,-4,3,5},{-10,-8,-3,9,12,15},{-10,-7,-5,8,15},{-10,-7,-5,9,11,14},
     {-10,-5,-4,3,9},{-10,-5,-3,1,2},{-10,-5,-2,8,16},{-10,-5,-1,2,3},
     {-10,-4,-3,5,9},{-10,-3,-2,6,13,16},{-10,-3,-1,2,5},{-10,1,2,3,5},
     {-9,-8,-5,11,13},{-9,-8,-3,10,12,15},{-9,-7,-5,3,12},{-9,-7,-3,5,12},
     {-9,-6,-3,11},{-9,-5,-4,3,10},{-9,-4,-3,5,10},{-9,-3,-2,12,13,14,16},
     {-9,-2,-1,4},{-9,1,2,4},{-9,1,3,5,11,13,16},{-9,1,3,11,14,15,16},
     {-8,3,9,10,12,15},{-8,5,9,11,13},{-7,-5,-3,9,12},{-7,3,5,9,12},
     {-7,5,8,10,15},{-7,5,9,10,11,14},{-7,8,10,13,14},{-6,-2,-1,7,14},
     {-6,1,2,7,14},{-6,3,9,11},{-5,-4,-3,9,10},{-5,-3,-2,1,4,7,12},
     {-5,-3,-1,2,4,7,12},{-5,-3,-1,2,10},{-5,-3,-1,4,12,15,16},
     {-5,-3,-1,9,11,13,16},{-5,1,2,3,10},{-5,1,2,6,7,13,15},{-5,1,6,13,16},
     {-5,2,7,13,14,16},{-5,6,7,11,12},{-4,3,5,9,10},{-4,7,10,12},
     {-3,1,2,5,10},{-3,1,2,7,8,15},{-3,1,7,10,13,14,16},{-3,1,8,16},
     {-3,5,7,9,12},{-2,1,3,4,5,7,12},{-2,1,4,9},{-2,1,6,7,14},{-2,5,8,10,16},
     {-2,7,15,16},{-2,9,10,11,13,16},{-1,2,3,5,10},{-1,2,3,7,8,15},{-1,2,4,9},
     {-1,2,5,11,12,14},{-1,2,6,7,14},{-1,3,8,16},{-1,5,6,13,16},
     {-1,7,11,12,13,16},{-1,9,10,12,15,16}]),
  true)$

okltest_aes_mul11_ts_var_l(f) := block([cst],
  cst : ["aes_mul11_cst", create_list(i,i,1,16),nounify(n)],
  namespace : cstt_namespace_new(aes_mul11_ts_namespace, cst),
  assert(f(cst) = create_list(
      namespace(aes_v(i,nounify(mul11_ts))),i,1,256)),
  true)$

okltest_aes_mul11_ts_cst_cl(f) := block([cl,cst],
  if oklib_test_level = 0 then return(true),
  cst : ["aes_mul11_cst", create_list(i,i,1,16),nounify(n)],
  namespace : cstt_namespace_new(aes_mul11_ts_namespace, cst),
  cl : f(cst),
  assert(cl[1] =
    {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,
         namespace(aes_v(1,nounify(mul11_ts)))}),
  assert(last(rest(cl,-1)) =
    {16,
         -namespace(aes_v(256,nounify(mul11_ts)))}),
  assert(length(last(cl)) = 256),
  true)$

okltest_aes_mul13_pi_cst_cl(f) := block([cl],
  assert(f(["aes_mul13_cst", create_list(i,i,1,16)]) =
    [{-16,-15,-14,-13,-11,8},{-16,-15,-14,-13,-8,11},{-16,-15,-14,-11,-8,13},
     {-16,-15,-14,8,11,13},{-16,-15,-13,-11,-8,14},{-16,-15,-13,8,11,14},
     {-16,-15,-11,8,13,14},{-16,-15,-8,11,13,14},{-16,-14,-13,-11,-8,15},
     {-16,-14,-13,8,11,15},{-16,-14,-11,8,13,15},{-16,-14,-8,11,13,15},
     {-16,-13,-11,8,14,15},{-16,-13,-8,11,14,15},{-16,-11,-8,13,14,15},
     {-16,8,11,13,14,15},{-15,-14,-13,-11,-10,-9,-5},
     {-15,-14,-13,-11,-5,9,10},{-15,-14,-13,-10,-5,9,11},
     {-15,-14,-13,-9,-5,10,11},{-15,-14,-5,6,13},{-15,-13,-10,-9,-3,8},
     {-15,-13,-10,-8,-3,9},{-15,-13,-9,-8,-3,10},{-15,-13,-3,8,9,10},
     {-15,-11,-10,-9,-5,13,14},{-15,-11,-5,9,10,13,14},
     {-15,-10,-5,9,11,13,14},{-15,-9,-5,10,11,13,14},{-15,-9,-4,7},
     {-15,-7,-4,9},{-15,-7,-1,3},{-15,1,3,7},{-14,-11,-10,-9,-5,13,15},
     {-14,-11,-10,-9,-3,16},{-14,-11,-10,-9,-2,8},{-14,-11,-5,9,10,13,15},
     {-14,-11,-3,9,10,16},{-14,-11,-2,8,9,10},{-14,-10,-8,2,9,11},
     {-14,-10,-5,9,11,13,15},{-14,-10,-3,9,11,16},{-14,-9,-8,2,10,11},
     {-14,-9,-5,10,11,13,15},{-14,-9,-3,10,11,16},{-14,-8,-2,6},{-14,2,6,8},
     {-13,-11,-10,-9,-5,14,15},{-13,-11,-5,9,10,14,15},{-13,-10,-9,-8,-7,1},
     {-13,-10,-9,-8,-1,7},{-13,-10,-9,1,7,8},{-13,-10,-8,-7,-1,9},
     {-13,-10,-8,1,7,9},{-13,-10,-7,1,8,9},{-13,-10,-5,9,11,14,15},
     {-13,-10,-3,8,9,15},{-13,-10,-1,4,8,15},{-13,-10,-1,7,8,9},
     {-13,-9,-8,1,7,10},{-13,-9,-7,1,8,10},{-13,-9,-5,10,11,14,15},
     {-13,-9,-3,8,10,15},{-13,-9,-1,7,8,10},{-13,-8,-7,1,9,10},
     {-13,-8,-3,6,11,15},{-13,-8,-1,4,10,15},{-13,-8,-1,7,9,10},
     {-13,-7,-1,8,9,10},{-13,1,7,8,9,10},{-12,-11,-10,7},{-12,-11,-7,10},
     {-12,-10,-7,11},{-12,7,10,11},{-11,-10,-9,-8,-2,14},{-11,-10,-9,2,8,14},
     {-11,-10,-6,9},{-11,-9,-6,10},{-11,-8,-3,5,14},{-11,-8,-2,9,10,14},
     {-11,-5,-3,2,6},{-11,-5,-2,3,6},{-11,-3,-2,5,6},{-11,2,8,9,10,14},
     {-10,-9,-7,1,8,13},{-10,-9,-6,11},{-10,-9,-3,8,13,15},{-10,-9,-1,7,8,13},
     {-10,-8,-2,9,11,14},{-10,-8,-1,7,9,13},{-10,-7,-1,8,9,13},
     {-10,-4,-2,1,5},{-10,-4,-1,2,5},{-10,-2,-1,4,5},{-10,1,2,4,5},
     {-10,2,8,9,11,14},{-9,-8,-7,1,10,13},{-9,-8,-3,10,13,15},
     {-9,-8,-2,10,11,14},{-9,-7,-6,12},{-9,-7,-4,15},{-9,-3,-1,4},{-9,1,3,4},
     {-9,1,7,8,10,13},{-9,2,8,10,11,14},{-8,-7,-3,9,11,12,13,15},
     {-8,-7,-1,9,10,13},{-8,-3,-2,1,5,7,13},{-8,1,2,7,15,16},{-8,2,3,16},
     {-8,2,5,13,15},{-8,2,6,14},{-8,3,4,11,12,13},{-7,1,3,15},
     {-7,3,4,8,10,13},{-7,4,5,6,9,13,14},{-7,6,9,12},{-6,7,9,12},{-6,9,10,11},
     {-5,-3,-2,6,11},{-5,2,3,6,11},{-5,7,9,12,13,14,15},{-4,-2,-1,5,10},
     {-4,1,2,5,10},{-4,6,12,15},{-4,7,9,15},{-3,1,4,6,7,12},{-3,1,4,9},
     {-3,2,5,6,11},{-3,5,8,11,14},{-3,6,14,16},{-3,8,9,10,13,15},
     {-2,1,4,5,10},{-2,3,8,16},{-2,3,11,13,14,15},{-2,5,8,13,15},{-2,6,8,14},
     {-1,2,4,5,10},{-1,3,4,6,7,12},{-1,3,4,9},{-1,3,5,6,7,13,14},{-1,3,7,15},
     {-1,7,8,9,10,13}]),
  true)$

okltest_aes_mul13_ts_var_l(f) := block([cst],
  cst : ["aes_mul13_cst", create_list(i,i,1,16),nounify(n)],
  namespace : cstt_namespace_new(aes_mul13_ts_namespace, cst),
  assert(f(cst) = create_list(
      namespace(aes_v(i,nounify(mul13_ts))),i,1,256)),
  true)$

okltest_aes_mul13_ts_cst_cl(f) := block([cl,cst],
  if oklib_test_level = 0 then return(true),
  cst : ["aes_mul13_cst", create_list(i,i,1,16),nounify(n)],
  namespace : cstt_namespace_new(aes_mul13_ts_namespace, cst),
  cl : f(cst),
  assert(cl[1] =
    {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,
         namespace(aes_v(1,nounify(mul13_ts)))}),
  assert(last(rest(cl,-1)) =
    {16,
         -namespace(aes_v(256,nounify(mul13_ts)))}),
  assert(length(last(cl)) = 256),
  true)$

okltest_aes_mul9_pi_cst_cl(f) := block([cl],
  assert(f(["aes_mul9_cst", create_list(i,i,1,16)]) =
    [{-16,-14,-8,11},{-16,-11,-8,14},{-16,3,8},{-15,-12,-4},{-15,4,12},
     {-14,-11,-3},{-14,3,11},{-13,-12,-10,-8,-7,4},{-13,-12,-7,4,8,10},
     {-13,-10,-8,-7,-4,12},{-13,-10,-8,2,3},{-13,-10,-7,8,15},{-13,-10,-3,2,8},
     {-13,-10,-2,16},{-13,-8,-7,10,15},{-13,-8,-2,3,10},
     {-13,-7,-4,8,10,12},{-13,-3,-2,8,10},{-13,2,10,16},{-12,-10,-7,4,8,13},
     {-12,-8,-7,4,10,13},{-12,-3,-2,4,7},{-12,2,3,4,7},{-11,-9,-6,-4,-2,3},
     {-11,-9,-6,2,3,4},{-11,-6,-4,2,3,9},{-11,-6,-2,3,4,9},{-11,-2,-1,3,6},
     {-11,1,2,3,6},{-10,-9,-5,-4,-2},{-10,-9,-5,2,4},{-10,-8,-7,13,15},
     {-10,-7,-4,8,12,13},{-10,-5,-4,2,9},{-10,-5,-2,4,9},{-10,-2,-1,5},
     {-10,1,2,5},{-9,-8,-5,3,4,13},{-9,-6,-4,-3,-2,11},{-9,-6,-4,2,14},
     {-9,-6,-3,2,4,11},{-9,-6,-2,4,14},{-9,-5,-4,2,10},{-9,-5,-4,13,16},
     {-9,-5,-3,8,12,13,15},{-9,-5,-2,4,10},{-9,-4,-1},{-9,1,4},
     {-8,-7,-4,10,12,13},{-8,-5,-4,3,9,13},{-8,1,3,5,13},{-7,8,10,13,15},
     {-6,-4,-3,2,9,11},{-6,-4,-2,9,14},{-6,-3,-2,4,9,11},{-6,2,4,9,14},
     {-5,-4,-3,8,9,13},{-5,-4,-2,9,10},{-5,2,4,9,10},{-5,4,9,13,16},
     {-4,-3,-2,7,12},{-4,1,9},{-4,2,3,7,12},{-3,-2,-1,6,11},{-3,1,2,6,11},
     {-3,1,5,8,13},{-3,2,7,15},{-3,2,8,10,13},{-2,1,5,10},{-2,1,6,14},
     {-2,3,7,15},{-1,2,5,10},{-1,2,6,14},{-1,4,9},{-1,5,13,16}]),
  true)$

okltest_aes_mul9_ts_var_l(f) := block([cst],
  cst : ["aes_mul9_cst", create_list(i,i,1,16),nounify(n)],
  namespace : cstt_namespace_new(aes_mul9_ts_namespace, cst),
  assert(f(cst) = create_list(
      namespace(aes_v(i,nounify(mul9_ts))),i,1,256)),
  true)$

okltest_aes_mul9_ts_cst_cl(f) := block([cl,cst],
  if oklib_test_level = 0 then return(true),
  cst : ["aes_mul9_cst", create_list(i,i,1,16),nounify(n)],
  namespace : cstt_namespace_new(aes_mul9_ts_namespace, cst),
  cl : f(cst),
  assert(cl[1] =
    {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,
         namespace(aes_v(1,nounify(mul9_ts)))}),
  assert(last(rest(cl,-1)) =
    {16,
         -namespace(aes_v(256,nounify(mul9_ts)))}),
  assert(length(last(cl)) = 256),
  true)$
/*
okltest_aes_constraints2cnf_pi_cl(f) := block(
  assert(f([]) = []),
  okltest_aes_eq_cst_cl(buildq([f:f],lambda([a],f([a])))),
  okltest_aes_sbox_pi_cst_cl(buildq([f:f],lambda([a],f([a])))),
  okltest_aes_mul2_pi_cst_cl(buildq([f:f],lambda([a],f([a])))),
  assert(f([["aes_eq_cst", [1,2]],["aes_add_cst", [1,2,3]]]) =
    [{-1,2},{-2,1},{-1,2,3},{-2,1,3},{-3,-2,-1},{-3,1,2}]),
  true)$

okltest_aes_constraints2cnf_ts_cl(f) := block(
  assert(f([]) = []),
  okltest_aes_eq_cst_cl(buildq([f:f],lambda([a],f([a])))),
  okltest_aes_sbox_ts_cst_cl(buildq([f:f],lambda([a],f([a])))),
  okltest_aes_mul2_ts_cst_cl(buildq([f:f],lambda([a],f([a])))),
  assert(f([["aes_eq_cst", [1,2]],["aes_add_cst", [1,2,3]]]) =
    [{-1,2},{-2,1},{-1,2,3},{-2,1,3},{-3,-2,-1},{-3,1,2}]),
  true)$*/


/*!
\endhtmlonly
*/
