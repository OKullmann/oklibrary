/* Matthew Gwynne, 19.8.2008 (Swansea) */
/* Copyright 2008, 2009, 2010, 2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/tests/Translations.mac
  \brief Tests for the AES translation functions

Use by

oklib_load("OKlib/ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/tests/Translations.mac");

  \bug DONE (old code removed)
  C-STACK overflow
  <ul>
   <li> When running at test-level "full" we get the error
   \verbatim
okltest_aes_key_expansion_cp(aes_key_expansion_cp)
Maxima encountered a Lisp error:

 C-STACK overflow at size 557056. Stack can probably be resized.

Automatically continuing.
   \endverbatim
   </li>
   <li> Is there really a stack problem? </li>
  <ul>

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/FiniteFunctions/TseitinTranslation.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/Translations.mac")$

kill(f)$

okltest_aes_mul_ts_gen(f) := block([FF],
  if oklib_test_level = 0 then return(true),
  FF : f(2),
  assert(length(FF[1]) = 16+256),
  assert(elementp(setify(create_list(dts_var(i),i,1,256)),setify(FF[2]))),
  assert(elementp({11,-dts_var(256)}, setify(FF[2]))),
  assert(elementp({-12,-9,-5,-2,1,3,4,6,7,8,10,11,13,14,15,16,dts_var(10)},
    setify(FF[2]))),
  FF : f(3),
  assert(length(FF[1]) = 16+256),
  assert(elementp(setify(create_list(dts_var(i),i,1,256)),setify(FF[2]))),
  assert(elementp({11,-dts_var(256)}, setify(FF[2]))),
  assert(elementp({-12,-9,-4,-3,-2,1,5,6,7,8,10,11,13,14,15,16,dts_var(10)},
    setify(FF[2]))),
  if oklib_test_level = 1 then return(true),
  for e in [9,11,13,14] do (
    FF : f(e),
    assert(length(FF[1]) = 16+256),
    assert(elementp(setify(create_list(dts_var(i),i,1,256)),setify(FF[2])))),
  true)$


okltest_aes_sbox_ts_gen(f) := block([FF],
  if oklib_test_level = 0 then return(true),
  FF : f(),
  assert(length(FF[1]) = 16+256),
  assert(elementp(setify(create_list(dts_var(i),i,1,256)),setify(FF[2]))),
  assert(elementp({-11,-dts_var(90)}, setify(FF[2]))),
  assert(elementp({-12,-9,-7,-6,-4,-1,2,3,5,8,10,11,13,14,15,16,dts_var(10)},
    setify(FF[2]))),
  true)$

/******************************************************************
 * Statistics                                                     *
 ******************************************************************
*/

okltest_nsbox_ss(f) := block([n : 4],
  if oklib_test_level = 0 then n : 2,
  for r : 1 thru n do block([csttl],
    for c : 1 thru n do (
      for rw : 1 thru n do (
        csttl : ss_csttl(r,c, rw, 4, false, aes_mc_forward),
        assert(
          length(sublist(csttl,
              lambda([C], is(cstt_name(C) = "ss_sbox_cst")))) =
          f(r,c,rw))))),
  true)$

okltest_nmul_ss_gen(f) := block(
  [n : 4, rowcols : [1,2,4],mc_trans : [aes_mc_forward,aes_mc_bidirectional],
   f_b_l : [true,false]],
  if oklib_test_level = 0 or oklib_test_level = 1 then (
    n : 1,rowcols : [1,2],f_b_l : [false], mc_trans : [aes_mc_forward]),
  for e in ['x,'x+1] do
    for r : 1 thru n do block([csttl],
      for c in rowcols do (
        for rw in rowcols do 
          for f_b in f_b_l do
            for mc_tran in mc_trans do (
               csttl : ss_csttl(r,c, rw, 4, f_b, mc_tran),
               assert(
                 length(sublist(csttl,
                     lambda([C],is(cstt_name(C) = "ss_mul_cst") and
                       is(C[3] = e)))) =
                 f(e,r,c,4,ss_mixcolumns_matrix(2,4,rw),f_b,mc_tran))))),
  true)$

okltest_nmul_ss(f) := block(
  [n : 4, rowcols : [1,2,4],mc_trans : [aes_mc_forward,aes_mc_bidirectional],
   f_b_l : [true,false]],
  if oklib_test_level = 0 or oklib_test_level = 1 then (
    n : 1,rowcols : [1,2],f_b_l : [false], mc_trans : [aes_mc_forward]),
  for e in ['x,'x+1] do
    for r : 1 thru n do block([csttl],
      for c in rowcols do (
        for rw in rowcols do 
          for f_b in f_b_l do
            for mc_tran in mc_trans do (
               csttl : ss_csttl(r,c, rw, 4, f_b, mc_tran),
               assert(
                 length(sublist(csttl,
                     lambda([C],is(cstt_name(C) = "ss_mul_cst") and
                       is(C[3] = e)))) =
                 f(e,r,c,rw,4,f_b,mc_tran))))),
  true)$

okltest_nadd_ss_sm(f) := block(
  [measure_num_add_f : lambda([cstl],
     multi_list_distribution2list_distribution(
       map(lambda([a],
           if length(a) = 3 then [2,length(a[2])/3]
           else [third(a),length(a[2])/(third(a)+1)]),
         sublist(cstl,lambda([a], is(first(a) = "ss_add_cst"))))))],
  assert(f(1,1,1,4,false,aes_mc_bidirectional) = {[1,8],[2,12]}),
  assert(f(1,1,2,8,false,aes_mc_bidirectional) = {[2,72]}),
  assert(f(1,2,2,8,false,aes_mc_bidirectional) = {[2,152],[3,8]}),
  assert(f(1,2,3,8,false,aes_mc_bidirectional) = {[2,136],[3,104]}),
  assert(f(1,1,3,4,false,aes_mc_forward) = {[2,28],[3,12]}),
  assert(f(1,4,4,8,false,aes_mc_bidirectional) = {[2,376],[3,8],[4,256]}),
  if oklib_test_level = 0 then return(true),
  if oklib_test_level = 1 then return(true),
  for r : 1 thru 4 do
    for c : 1 thru 4 do
      for rw : 1 thru 4 do
        for e in [4,8] do
        for f_b in [true,false] do
            for mc_tran in [aes_mc_forward,aes_mc_bidirectional] do (
              assert(
                f(r,c,rw,e,f_b,mc_tran) =
                setify(measure_num_add_f(ss_csttl(r,c,rw,e,f_b,mc_tran))))),  
  true)$

okltest_nadd_ss(f) := (
  assert(f(1,1,1,4,false,aes_mc_bidirectional) = 20),
  assert(f(1,1,2,8,false,aes_mc_bidirectional) = 72),
  assert(f(1,2,2,8,false,aes_mc_bidirectional) = 160),
  assert(f(1,2,3,8,false,aes_mc_bidirectional) = 240),
  assert(f(1,1,3,4,false,aes_mc_forward) = 40),
  assert(f(1,4,4,8,false,aes_mc_bidirectional) = 640),
  true)$

okltest_nconstants_ss(f) := (
  for r : 1 thru 20 do assert(f(r) = r),
  true)$

okltest_nvar_ss_gen(f) := (
  assert(f(1,1,1,4,ss_mixcolumns_matrix(2,4,1),16,
      [['x,16],['x+1,16]],false,aes_mc_forward) = 68),
  assert(f(1,4,4,8,ss_mixcolumns_matrix(2,8,4),256,
      [['x,256],['x+1,256], [x^3+1,256],[x^3+x+1,256],[x^3+x^2+1,256],
      [x^3+x^2+x,256]],false,aes_mc_bidirectional) = 31400),
  assert(f(1,4,4,8,ss_mixcolumns_matrix(2,8,4),256,
      [], true,aes_mc_bidirectional) = 5928),
  assert(f(1,4,4,8,ss_mixcolumns_matrix(2,8,4),256,
      [], true,aes_mc_forward) = 5928),
  assert(f(1,4,4,8,ss_mixcolumns_matrix(2,8,4),256,
      [[x,256],[x+1,256],[x^3+1,256],[x^3+x+1,256],
      [x^3+x^2+1,256],[x^3+x^2+x,256]], false,aes_mc_forward) = 14504),
  true)$

okltest_nvar_ss(f) := (
  assert(f(1,1,1,4,false,aes_ts_box,aes_mc_forward) = 68),
  assert(f(1,4,4,8,false,aes_ts_box,aes_mc_bidirectional) = 31400),
  assert(f(1,4,4,8,true,aes_ts_box,aes_mc_bidirectional) = 5928),
  assert(f(1,4,4,8,true,aes_ts_box,aes_mc_forward) = 5928),
  assert(f(1,4,4,8,false,aes_ts_box,aes_mc_forward) = 14504),
  assert(f(1,4,4,4,false,aes_small_box,aes_mc_forward) = 596),
  true)$

okltest_ncl_ss_gen(f) := (
    assert(f(1,1,1,4,ss_mixcolumns_matrix(2,4,1),145,
      [['x,145],['x+1,145]],false,aes_mc_forward) = 350),
  assert(f(1,4,4,8,ss_mixcolumns_matrix(2,8,4),4353,
      [['x,4353],['x+1,4353], [x^3+1,4353],[x^3+x+1,4353],[x^3+x^2+1,4353],
      [x^3+x^2+x,4353]],false,aes_mc_bidirectional) = 510620),
  assert(f(1,4,4,8,ss_mixcolumns_matrix(2,8,4),4353,
      [], true,aes_mc_bidirectional) = 88636),
  assert(f(1,4,4,8,ss_mixcolumns_matrix(2,8,4),4353,
      [], true,aes_mc_forward) = 88636),
  assert(f(1,4,4,8,ss_mixcolumns_matrix(2,8,4),4353,
      [[x,4353],[x+1,4353],[x^3+1,4353],[x^3+x+1,4353],
      [x^3+x^2+1,4353],[x^3+x^2+x,4353]], false,aes_mc_forward) = 229980),
  true)$

okltest_ncl_ss(f) := (
  assert(f(1,1,1,4,false,aes_ts_box,aes_mc_forward) = 350),
  assert(f(1,4,4,8,false,aes_ts_box,aes_mc_bidirectional) = 510620),
  assert(f(1,4,4,8,true,aes_ts_box,aes_mc_bidirectional) = 88636),
  assert(f(1,4,4,8,true,aes_ts_box,aes_mc_forward) = 88636),
  assert(f(1,4,4,8,false,aes_ts_box,aes_mc_forward) = 229980),
  assert(f(1,4,4,4,false,aes_small_box,aes_mc_forward) = 2652),
  assert(f(10,4,4,8,true,aes_small_box,aes_mc_forward) = 153048),
  true)$

okltest_ncl_list_ss_gen(f) := (
  assert(f(1,1,1,4,ss_mixcolumns_matrix(2,4,1),
      ncl_list_full_dualts(8,16), [], false, aes_mc_bidirectional) =
    [[1,4],[2,272],[3,48],[9,32],[16,2]]),
  assert(f(1,4,4,8,ss_mixcolumns_matrix(2,8,4),
      ncl_list_full_dualts(16,256), [], true, aes_mc_bidirectional)
    = [[1,8],[2,81920],[3,1504],[4,64],[17,5120],[256,20]]),
  assert(f(1,2,2,4, ss_mixcolumns_matrix(2,4,2),ncl_list_full_dualts(8,16),
      [[x,ncl_list_full_dualts(8,16)],[x+1,ncl_list_full_dualts(8,16)]],
      false, aes_mc_bidirectional) =
    [[1,4],[2,2816],[3,304],[4,32],[9,352],[16,22]]),
  assert(f(1,2,2,4, ss_mixcolumns_matrix(2,4,2),ncl_list_full_dualts(8,16),
      [[x,ncl_list_full_dualts(8,16)],[x+1,ncl_list_full_dualts(8,16)]],
      false, aes_mc_forward) =
    [[1,4],[2,1792],[3,240],[4,32],[9,224],[16,14]]),
  true)$

okltest_ncl_list_ss(f) := (
  assert(f(1,1,1,4,false, aes_ts_box, aes_mc_bidirectional) =
    [[1,4],[2,272],[3,48],[9,32],[16,2]]),
  assert(f(1,4,4,8,true,aes_ts_box, aes_mc_bidirectional)
    = [[1,8],[2,81920],[3,1504],[4,64],[17,5120],[256,20]]),
  assert(f(1,2,2,4,false,aes_ts_box, aes_mc_bidirectional) =
    [[1,4],[2,2816],[3,304],[4,32],[9,352],[16,22]]),
  assert(f(1,2,2,4, false, aes_ts_box, aes_mc_forward) =
    [[1,4],[2,1792],[3,240],[4,32],[9,224],[16,14]]),
  assert(f(1,2,2,4, false, aes_small_box, aes_mc_forward) =
    [[1,4],[2,20],[3,352],[4,120],[5,12]]),
  true)$

okltest_component_statistics_ss_gen(f) := block(
  assert(f(1,4,4,8,ss_mixcolumns_matrix(2,8,4),true, aes_mc_forward) =
    [0,1,16,256,[],4,128,8]),
  assert(f(1,4,4,8,ss_mixcolumns_matrix(2,8,4),false, aes_mc_forward) =
    [1,0,16,384,[[1,32],[x,16],[x+1,16]],4,128,8]),
  if oklib_test_level = 0 then return(true),
  if oklib_test_level = 1 then return(true),
  for r : 1 thru 4 do
    for c in [1,2,4] do
      for rw in [1,2,4] do
        for e in [4,8] do
        for f_b in [true,false] do
            for mc_tran in [aes_mc_forward,aes_mc_bidirectional] do (
              assert(
                f(r,c,rw,e,ss_mixcolumns_matrix(2,e,rw),f_b,mc_tran)[4] +
                f(r,c,rw,e,ss_mixcolumns_matrix(2,e,rw),f_b,mc_tran)[7] =
                sum_l(map(second,listify(nadd_ss_sm(r,c,rw,e,f_b,mc_tran)))))),
  true)$

/******************************************************************
 * Data translation                                               *
 ******************************************************************
*/

okltest_aes_hex2pa(f) := block(
  assert(f("",[]) = {}),
  assert(f("0",[1,2,3,4,5,6,7,8]) = {-8,-7,-6,-5,-4,-3,-2,-1}),
  assert(f("00",[1,2,3,4,5,6,7,8]) = {-8,-7,-6,-5,-4,-3,-2,-1}),
  assert(f("01",[1,2,3,4,5,6,7,8]) = {8,-7,-6,-5,-4,-3,-2,-1}),
  assert(f("A5",[1,2,3,4,5,6,7,8]) =  {-7,-5,-4,-2,1,3,6,8}),
  assert(f("54A5",[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) = 
    {-15,-13,-12,-10,-8,-7,-5,-3,-1,2,4,6,9,11,14,16}),
  true)$

okltest_ss_random_matrix(f) := block(
  set_random_state(make_random_state(0)),
  assert(f(2,4,ss_polynomial_2_4,1,1) = matrix([x^3+x^2])),
  set_random_state(make_random_state(0)),
  assert(f(2,8,ss_polynomial_2_8,4,4) =
    matrix([x^7+x^5+x^3+x^2,x^5+x^3+x^2+x+1,x^6+x^5+x^4+x^2+1,x^7+x^6],
      [x^6+x+1,x^7+x^6+x^5+x^4+x^3+x+1,x^7+x^6+x+1,x^6+x^5+x^2+x+1],
      [x^3+1,x^7+x^6+x^4+x+1,x^4+x^2+1,x^7+x^6+x^5+x^4+x],
      [x^5+x^2,x^6+x^4+x^2+x+1,x^6+x^2+x,x^7+x^6+x^4+x^3])),
  true)$

okltest_ss_matrix2pa(f) := block(
  assert(f(matrix(),[],2,1,1) = []),
  assert(f(matrix([1]),[1],2,1,1) = [1]),
  assert(f(matrix([1],[0]),[1,2],2,1,1) = [1,-2]),
  assert(f(matrix([x^6+x^4+x^3,x^7+x^3+x^2,x^5+x^4+x^3+x,x^7+x^6+1],
        [x^7+x^6+x^5+x^2+x,x^5+x^2+x+1,x^6+x^4+x^2+x+1,x^7+x^5+x^3+x^2+x],
        [x^6+x^4+x^3,x^6+x^4+1,x^7+x^5+x^2+1,x^4+x^3+1],
        [x^6+x^3+x^2+1,x^6+x^3,x^3+1,x^7+x^4+x^2]),create_list(i,i,1,128),
      2,8,ss_polynomial_2_8) =
      [-1,2,-3,4,5,-6,-7,-8,9,10,11,-12,-13,14,15,-16,-17,18,-19,20,21,
      -22,-23,-24,-25,26,-27,-28,29,30,-31,32,33,-34,-35,-36,37,38,-39,
      -40,-41,-42,43,-44,-45,46,47,48,-49,50,-51,52,-53,-54,-55,56,-57,
      58,-59,-60,61,-62,-63,-64,-65,-66,67,68,69,-70,71,-72,-73,74,-75,76,
      -77,78,79,80,81,-82,83,-84,-85,86,-87,88,-89,-90,-91,-92,93,-94,-95,
      96,97,98,-99,-100,-101,-102,-103,104,105,-106,107,-108,109,110,111,
      -112,-113,-114,-115,116,117,-118,-119,120,121,-122,-123,124,-125,126,
      -127,-128]),
  true)$

okltest_ss_pa2matrix(f) := block(
  assert(f([],[],2,1,1,1) = matrix()),
  assert(f([1],[1],2,1,1,1) = matrix([1])),
  assert(f([1,-2],[1,2],2,1,1,2) = matrix([1],[0])),
  assert(f([-1,2,-3,4,5,-6,-7,-8,9,10,11,-12,-13,14,15,-16,-17,18,-19,20,21,
      -22,-23,-24,-25,26,-27,-28,29,30,-31,32,33,-34,-35,-36,37,38,-39,
      -40,-41,-42,43,-44,-45,46,47,48,-49,50,-51,52,-53,-54,-55,56,-57,
      58,-59,-60,61,-62,-63,-64,-65,-66,67,68,69,-70,71,-72,-73,74,-75,76,
      -77,78,79,80,81,-82,83,-84,-85,86,-87,88,-89,-90,-91,-92,93,-94,-95,
      96,97,98,-99,-100,-101,-102,-103,104,105,-106,107,-108,109,110,111,
      -112,-113,-114,-115,116,117,-118,-119,120,121,-122,-123,124,-125,126,
      -127,-128],create_list(i,i,1,128),2,8,ss_polynomial_2_8,4) =
    matrix([x^6+x^4+x^3,x^7+x^3+x^2,x^5+x^4+x^3+x,x^7+x^6+1],
        [x^7+x^6+x^5+x^2+x,x^5+x^2+x+1,x^6+x^4+x^2+x+1,x^7+x^5+x^3+x^2+x],
        [x^6+x^4+x^3,x^6+x^4+1,x^7+x^5+x^2+1,x^4+x^3+1],
        [x^6+x^3+x^2+1,x^6+x^3,x^3+1,x^7+x^4+x^2])),
  true)$

/*!
\endhtmlonly
*/
