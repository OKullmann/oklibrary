/* Matthew Gwynne, 22.5.2011 (Swansea) */
/* Copyright 2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/DataEncryptionStandard/GeneralisedConstraintTranslation.mac
  \brief Translating the computation of generalised DES into a system of "constraints"

Use by

oklib_load("OKlib/ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/DataEncryptionStandard/GeneralisedConstraintTranslation.mac");

*/

/*!
\htmlonly
*/

/* We use the same variables and round-specific functions as the full DES
   translation, so include them: */
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/DataEncryptionStandard/ConstraintTranslation.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/DataEncryptionStandard/RoundFunction.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/DataEncryptionStandard/KeySchedule.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$

/*
  Considering generalised DES, that is, DES with an arbitrary number of rounds.
*/

/* ***********************
   * The complete system *
   ***********************
*/

/* All xor-constraints: */
des_xor_gen(r) := lappend(create_list(des_round_xor(r_t),r_t,1,r))$

/* All sbox-constraints: */
des_sboxc_gen(r) := lappend(create_list(des_sbox_deso(r_t),r_t,1,r))$

/* All (constraint-)variables: */
des_var_gen(r) := append(
 /* Key variables first as they don't change */
 create_list(desk_var(i), i,1,64),
 lappend(
   create_list(
     append(
       create_list(desr_var(i,r_t),i,1,32),
       if r_t > 0 then create_list(desi_var(i,r_t),i,1,48) else [],
       if r_t > 0 then create_list(deso_var(i,r_t),i,1,32) else []),
     r_t,-1,r)))$

/*
  Translating plaintext-, ciphertext- and key-assignments into formal
  clause-sets, using partial boolean vectors.
  A "partial boolean vector" contains besides 0,1 also possibly "und".
*/

/* plain is a partial boolean vector of length 64: */
des_plain2fcl_gen(plain,r) := des_plain2fcl(plain)$

/* cipher is a partial boolean vector of length 64: */
des_cipher2fcl_gen(cipher,r) := block(
[V : create_list(desr_var(i,r_t), r_t,[r,r-1], i,1,32)],
 [V,
  delete(und,
         create_list(
           block([x:cipher[i]],
             if x=und then und else {(2*x-1)*V[des_final_permutation[i]]}),
           i,1,64))])$

/* key is a partial boolean vector of length 64: */
des_key2fcl_gen(key,r) := des_key2fcl(key)$

/* ***********************
   * CNF translation     *
   ***********************
*/

/* Generates a CNF formal clause-list representing the r-round DES.

   Sbox i is translated using the formal clause-list sbox_l[i] for i in
   {1,...,8}. The input and output variables of Sbox i are
   [sbox_l[i][1],...,sbox_l[i][10]]. All other variables in sbox_l[i] are
   auxilliary variables used by the representation.
   Xor constraints are translated using their prime implicates. */
des2fcl_gen(sbox_l, r) := block(
  [xor_cl_l, sbox_cl_l : [], num_sbox_aux_var_l,
   new_var_ind : 1, rename_aux_vars],
  xor_cl_l : create_list(
    boolm_mul2cnf_wv_fcl(matrix([1,1]),C[1])[2], C, des_xor_gen(r)),
  num_sbox_aux_var_l : create_list(length(sbox_l[i][1])-10, i, 1, 8),
  rename_aux_vars : lambda([sbox_cst],
    block([aux_vars],
      aux_vars :
        create_list(desaux_var(i),
          i, new_var_ind, new_var_ind + num_sbox_aux_var_l[sbox_cst[1]]-1),
      new_var_ind : new_var_ind + num_sbox_aux_var_l[sbox_cst[1]],
      rename_fcl(sbox_l[sbox_cst[1]],
        append(sbox_cst[2],sbox_cst[3],aux_vars))[2])),
  sbox_cl_l : map(rename_aux_vars, des_sboxc_gen(r)),
  return([append(des_var_gen(r),create_list(desaux_var(i),i,1,new_var_ind-1)),
          lappend(append(xor_cl_l,reverse(sbox_cl_l)))]))$

/*!
\endhtmlonly
*/
