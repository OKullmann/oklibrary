/* Matthew Gwynne, 22.5.2011 (Swansea) */
/* Copyright 2011, 2012 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/DataEncryptionStandard/GeneralisedConstraintTranslation.mac
  \brief Translating the computation of generalised DES into a system of "constraints"

Use by

oklib_load("OKlib/ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/DataEncryptionStandard/GeneralisedConstraintTranslation.mac");

*/

/*!
\htmlonly
*/

/* We use the same variables and round-specific functions as the full DES
   translation, so include them: */
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/Conversions.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/ClauseSets/PartialAssignments.mac");
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/DataEncryptionStandard/ConstraintTranslation.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/DataEncryptionStandard/RoundFunction.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/DataEncryptionStandard/KeySchedule.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$

/*
  Considering generalised DES, that is, DES with an arbitrary number of rounds.
*/

/* ***********************
   * The complete system *
   ***********************
*/

/* All xor-constraints: */
des_xor_gen(r) := lappend(create_list(des_round_xor(r_t),r_t,1,r))$

/* All sbox-constraints: */
des_sboxc_gen(r) := lappend(create_list(des_sbox_deso(r_t),r_t,1,r))$


/*
   Allowing arbitrary DES S-box constraints built from 6x1-bit S-box functions,
   where the boxes are specified by lists of the indices of the output-bits
   they output (1,...,32).
*/

/* Inputs bits (indices) necessary to compute the given output bit: */
des_sbox_output2inputs(i) := create_list(floor((i-1)/4)*6 + j, j, 1, 6)$
des_sbox_outputs2inputs(L) := stable_unique(lappend(map(des_sbox_output2inputs,L)))$
/* Computing the S-boxes constraints for r in {1,...,16}, where out_l is a
   list of lists of indices in 1,..,32
   (one list for each "arbitrary"/"combined" S-box): */
des_sbox_deso_l(out_l,r) := block(
 [I : create_list(create_list(desi_var(i,r),i,des_sbox_outputs2inputs(C)),C,out_l),
  O : create_list(create_list(deso_var(i,r),i,C),C,out_l)],
  create_list([i,I[i],O[i]], i,1,length(out_l)))$
/* Specifying the output bits each S-box outputs; allowing arbitary
   (possibly smaller or larger) S-boxes to be used: */
des_sboxc_gen_l(output_bits_l, r) :=
  lappend(create_list(des_sbox_deso_l(output_bits_l, r_t),r_t,1,r))$


/* All (constraint-)variables: */
des_var_gen(r) := append(
 /* Key variables first as they don't change */
 create_list(desk_var(i), i,1,64),
 lappend(
   create_list(
     append(
       create_list(desr_var(i,r_t),i,1,32),
       if r_t > 0 then create_list(desi_var(i,r_t),i,1,48) else [],
       if r_t > 0 then create_list(deso_var(i,r_t),i,1,32) else []),
     r_t,-1,r)))$


/* **************************************************************
   * Assignments to plaintext, key and ciphertext variables     *
   **************************************************************
*/


/*
  Translating plaintext-, ciphertext- and key-assignments into formal
  clause-sets and partial assignments, using partial boolean vectors.
  A "partial boolean vector" contains besides 0,1 also possibly "und".
*/

/* Synonym for des_plain2pa for DES with an arbitrary number or rounds: */
des_plain2pa_gen(plain) := des_plain2pa(plain)$
/* Synonym for des_plain2fcl for DES with an arbitrary number or rounds: */
des_plain2fcl_gen(plain) := des_plain2fcl(plain)$
/* The plaintext variables are always the same list of variables, no matter
   the number of rounds. */

/* Translating the partial boolean vector, cipher, of length 64, to
   the corresponding partial assignment on the DES ciphertext variables. The
   partial assignment sets the i-th ciphertext variable of the r-round DES
   to cipher[i], for all i where cipher[i] is defined. */
des_cipher2pa_gen(cipher,r) := block(
  [V : create_list(desr_var(i,r_t), r_t,[r,r-1], i,1,32)],
  setify(
    delete(und,
         create_list(block([x:cipher[i]],
             if x=und then und else (2*x-1)*V[des_final_permutation[i]]),
           i,1,64))))$
/* Now translating cipher to a formal clause-list containing exactly the
   unit-clauses satisfied by des_cipher2pa(cipher). The variable list is
   the list of all ciphertext variables. The order of the variable-
   and clause-lists is the standard one on the DES ciphertext variables. */
des_cipher2fcl_gen(cipher,r) := block(
  [V : create_list(desr_var(i,r_t), r_t,[r,r-1], i,1,32), L],
  L : sort(listify(des_cipher2pa(cipher)), l2order_p(interleave_l(-V,V))),
  [V, map(set,L)])$

/* Synonym for des_key2pa for DES with an arbitrary number or rounds: */
des_key2pa_gen(key) := des_key2pa(key)$
/* Synonym for des_key2fcl for DES with an arbitrary number or rounds: */
des_key2fcl_gen(key) := des_key2fcl(key)$
/* The key variables are always the same list of variables, no matter the
   number of rounds. */


/* Generating random plaintext-key-ciphertext triples: */


/* Generating a triple of DES plaintext, key and ciphertext as 64-element
   boolean-vectors where the plaintext and key have been generated by a
   pseudo-random number generator. The pseudo-random number generator is
   initialised using positive-integer seed. */
des_random_pkctriple(seed,r) := block([P_hex,K_hex,C_hex],
  set_random(make_random_state(seed)),
  P_hex : lpad(int2hex(random(2**64)),"0",16),
  K_hex : lpad(int2hex(random(2**64)),"0",16),
  C_hex : des_encryption_hex_gen(r, P_hex,K_hex),
  return(map(hexstr2binv, [P_hex,K_hex,C_hex])))$


/* A pseudo-random plaintext-key-ciphertext-triple as a partial assignment: */
des_random_pkctriple_pa(seed,r) := block([rnd_pkc,P,K,C,pa],
  rnd_pkc : des_random_pkctriple(seed,r),
  P : des_plain2pa_gen(rnd_pkc[1]),
  K : des_key2pa_gen(rnd_pkc[2]),
  C : des_cipher2pa_gen(rnd_pkc[3],r),
  return(union(P,K,C)))$
/* A pseudo-random plaintext-key-ciphertext-triple as a partial assignment,
   standardising the variable names to 1,...,length(des_var_gen(r));
   the order given by des_var_gen(r): */
des_random_pkctriple_pa_std(seed,r) := block([pa, std_var_map],
  std_var_map : sm2hm(l2osm_inv(des_var_gen(r))),
  pa : des_random_pkctriple_pa(seed,r),
  pa : substitutetotal_c(pa,std_var_map),
  return(pa))$
/* Now outputting the pseudo-random plaintext-key-ciphertext-triple as a
   partial assignment, with standardised variable names to the file
   des_pkctriple_r${r}_s${seed}.pa: */
output_des_random_pkctriple_pa_std(seed,r) :=
  output_pa(
    des_random_pkctriple_pa_std(seed,r),
    sconcat("des_pkctriple_r",r,"_s",seed,".pa"))$
/* Now generating a pseudo-random plaintext-key-ciphertext-triple as a
   partial assignment, without the key variables in the output: */
des_random_pcpair_pa(seed,r) := block([rnd_pkc, P, C, pa],
  rnd_pkc : des_random_pkctriple(seed,r),
  P : des_plain2pa_gen(rnd_pkc[1]),
  C : des_cipher2pa_gen(rnd_pkc[3],r),
  return(union(P,C)))$
des_random_pcpair_pa_std(seed,r) := block([pa, std_var_map],
  std_var_map : sm2hm(l2osm_inv(des_var_gen(r))),
  pa : des_random_pcpair_pa(seed,r),
  pa : substitutetotal_c(pa,std_var_map),
  return(pa))$
output_des_random_pc_pa_std(seed,r) :=
  output_pa(
    des_random_pcpair_pa_std(seed,r),
    sconcat("des_pcpair_r",r,"_s",seed,".pa"))$
/* Now generating a pseudo-random plaintext-key-ciphertext-triple as a
   partial assignment, without the ciphertext variables in the output: */
des_random_pkpair_pa(seed,r) := block([rnd_pkc, P, K, pa],
  rnd_pkc : des_random_pkctriple(seed,r),
  P : des_plain2pa_gen(rnd_pkc[1]),
  K : des_key2pa_gen(rnd_pkc[2]),
  return(union(P,K)))$
des_random_pkpair_pa_std(seed,r) := block([pa, std_var_map],
  std_var_map : sm2hm(l2osm_inv(des_var_gen(r))),
  pa : des_random_pkpair_pa(seed,r),
  pa : substitutetotal_c(pa,std_var_map),
  return(pa))$
output_des_random_pk_pa_std(seed,r) :=
  output_pa(
    des_random_pkpair_pa_std(seed,r),
    sconcat("des_pkpair_r",r,"_s",seed,".pa"))$
/* Now generating a pseudo-random plaintext-key-ciphertext-triple as a
   partial assignment, without the plaintext variables in the output: */
des_random_kcpair_pa(seed,r) := block([rnd_pkc, K, C, pa],
  rnd_pkc : des_random_pkctriple(seed,r),
  K : des_key2pa_gen(rnd_pkc[2]),
  C : des_cipher2pa_gen(rnd_pkc[3],r),
  return(union(K,C)))$
des_random_kcpair_pa_std(seed,r) := block([pa, std_var_map],
  std_var_map : sm2hm(l2osm_inv(des_var_gen(r))),
  pa : des_random_kcpair_pa(seed,r),
  pa : substitutetotal_c(pa,std_var_map),
  return(pa))$
output_des_random_kc_pa_std(seed,r) :=
  output_pa(
    des_random_kcpair_pa_std(seed,r),
    sconcat("des_kcpair_r",r,"_s",seed,".pa"))$


/* ***********************
   * CNF translation     *
   ***********************
*/

/* Generates a CNF formal clause-list representing the r-round DES.

   Sbox i is translated using the formal clause-list sbox_l[i] for i in
   {1,...,8}. The input and output variables of Sbox i are
   [sbox_l[i][1],...,sbox_l[i][10]]. All other variables in sbox_l[i] are
   auxilliary variables used by the representation.
   Xor constraints are translated using their prime implicates. */
des2fcl_gen(sbox_l, r) := block(
  [xor_cl_l, sbox_cl_l : [], num_sbox_aux_var_l,
   new_var_ind : 1, rename_aux_vars],
  xor_cl_l : create_list(
    boolm_mul2cnf_wv_fcl(matrix([1,1]),C[1])[2], C, des_xor_gen(r)),
  num_sbox_aux_var_l : create_list(length(sbox_l[i][1])-10, i, 1, 8),
  rename_aux_vars : lambda([sbox_cst],
    block([aux_vars],
      aux_vars :
        create_list(desaux_var(i),
          i, new_var_ind, new_var_ind + num_sbox_aux_var_l[sbox_cst[1]]-1),
      new_var_ind : new_var_ind + num_sbox_aux_var_l[sbox_cst[1]],
      rename_fcl(sbox_l[sbox_cst[1]],
        append(sbox_cst[2],sbox_cst[3],aux_vars))[2])),
  sbox_cl_l : map(rename_aux_vars, des_sboxc_gen(r)),
  return([append(des_var_gen(r),create_list(desaux_var(i),i,1,new_var_ind-1)),
          lappend(append(xor_cl_l,reverse(sbox_cl_l)))]))$
/* Outputting the DES translation to file, where sbox_name is an alphanumeric
   string without spaces identifying the S-box translation: */
output_des2fcl_gen(sbox_name, sbox_l, r, n) := block([Fs],
  Fs : standardise_fcl(des2fcl_gen(sbox_fcl_l,r)),
  output_fcl_v(
    sconcat(r, "-round DES; translated using the ", sbox_name,
            " translation for the S-boxes (6-to-4)."),
    Fs[1],n, Fs[2]))$
output_des2fcl_gen_std(sbox_name, sbox_l, r) :=
  output_des2fcl_gen(sbox_name, sbox_l, r,
    sconcat("des_6t4_",sbox_name,"_r",r,".cnf"))$
/* Allowing arbitrary S-boxes specified by a list of lists of the output
   bits they produce (the inputs bits are determined from these): */
des2fcl_gen_l(sbox_l,sbox_outputs_l, r) := block(
  [xor_cl_l, sbox_cl_l : [], num_sbox_aux_var_l,
   new_var_ind : 1, rename_aux_vars],
  xor_cl_l : create_list(
    boolm_mul2cnf_wv_fcl(matrix([1,1]),C[1])[2], C, des_xor_gen(r)),
  rename_aux_vars : lambda([sbox_cst],
    block([aux_vars,
       num_aux_vars :
         length(sbox_l[sbox_cst[1]][1]) -
           (length(sbox_cst[2]) + length(sbox_cst[3]))],
      aux_vars :
        create_list(desaux_var(i),
          i, new_var_ind, new_var_ind + num_aux_vars-1),
      new_var_ind : new_var_ind + num_aux_vars,
      rename_fcl(sbox_l[sbox_cst[1]],
        append(sbox_cst[2],sbox_cst[3],aux_vars))[2])),
  sbox_cl_l : map(rename_aux_vars, des_sboxc_gen_l(sbox_outputs_l,r)),
  return([append(des_var_gen(r),create_list(desaux_var(i),i,1,new_var_ind-1)),
          lappend(append(xor_cl_l,reverse(sbox_cl_l)))]))$

/*!
\endhtmlonly
*/
