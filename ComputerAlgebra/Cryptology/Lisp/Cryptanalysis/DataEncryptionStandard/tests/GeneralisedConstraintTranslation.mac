/* Matthew Gwynne, 22.5.2011 (Swansea) */
/* Copyright 2011, 2012 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/DataEncryptionStandard/tests/GeneralisedConstraintTranslation.mac
  \brief Tests regarding constraint translations of DES with arbitrary numbers of rounds

Use by

oklib_load("OKlib/ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/DataEncryptionStandard/tests/GeneralisedConstraintTranslation.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/DataEncryptionStandard/tests/ConstraintTranslation.mac")$
oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$

kill(f)$


/* ***********************
   * The complete system *
   ***********************
*/

okltest_des_sbox_output2inputs(f) := block(
  assert(f(1) = [1,2,3,4,5,6]),
  assert(f(2) = [1,2,3,4,5,6]),
  assert(f(3) = [1,2,3,4,5,6]),
  assert(f(4) = [1,2,3,4,5,6]),
  assert(f(5) = [7,8,9,10,11,12]),
  assert(f(6) = [7,8,9,10,11,12]),
  assert(f(7) = [7,8,9,10,11,12]),
  assert(f(8) = [7,8,9,10,11,12]),
  assert(f(9) = [13,14,15,16,17,18]),
  assert(f(10) = [13,14,15,16,17,18]),
  assert(f(11) = [13,14,15,16,17,18]),
  assert(f(12) = [13,14,15,16,17,18]),
  assert(f(13) = [19,20,21,22,23,24]),
  assert(f(14) = [19,20,21,22,23,24]),
  assert(f(15) = [19,20,21,22,23,24]),
  assert(f(16) = [19,20,21,22,23,24]),
  assert(f(17) = [25,26,27,28,29,30]),
  assert(f(18) = [25,26,27,28,29,30]),
  assert(f(19) = [25,26,27,28,29,30]),
  assert(f(20) = [25,26,27,28,29,30]),
  assert(f(21) = [31,32,33,34,35,36]),
  assert(f(22) = [31,32,33,34,35,36]),
  assert(f(23) = [31,32,33,34,35,36]),
  assert(f(24) = [31,32,33,34,35,36]),
  assert(f(25) = [37,38,39,40,41,42]),
  assert(f(26) = [37,38,39,40,41,42]),
  assert(f(27) = [37,38,39,40,41,42]),
  assert(f(28) = [37,38,39,40,41,42]),
  assert(f(29) = [43,44,45,46,47,48]),
  assert(f(30) = [43,44,45,46,47,48]),
  assert(f(31) = [43,44,45,46,47,48]),
  assert(f(32) = [43,44,45,46,47,48]),
  true)$

okltest_des_sbox_outputs2inputs(f) := block(
  assert(f([]) = []),
  assert(
    okltest_des_sbox_output2inputs(buildq([f], lambda([i], f([i]))))),
  assert(f([1,5]) = [1,2,3,4,5,6,7,8,9,10,11,12]),
  assert(f([1,5,6]) = [1,2,3,4,5,6,7,8,9,10,11,12]),
  assert(f([1,5,6,9]) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]),
  assert(f([1,9]) = [1,2,3,4,5,6,13,14,15,16,17,18]),
  true)$


/* **************************************************************
   * Assignments to plaintext, key and ciphertext variables     *
   **************************************************************
*/

okltest_des_cipher2fcl_gen(f) := block(
  assert(
    okltest_des_cipher2fcl(
      buildq([f],lambda([a],f(a,16))))),
  true)$

okltest_des_cipher2pa_gen(f) := block(
  assert(okltest_des_cipher2pa(buildq([f],lambda([cipher], f(cipher,16))))),
  true)$

okltest_des_random_pkctriple(f) := block(
  assert(map(binv2hexstr,f(1,1)) =
    ["FF4780EB6AC1F425","EEBC1448B8672F8C","EE03C5BF2AC1A160"]),
  assert(map(binv2hexstr,f(1,16)) =
    ["FF4780EB6AC1F425","EEBC1448B8672F8C","9AB8D366109AB260"]),
  assert(map(binv2hexstr,f(2,16)) =
    ["2F618A0F6F9D5CA8","EE79764806A319ED","476E21472ACCE009"]),
  if oklib_test_level = 0 then return(true),
  for r : 1 thru 16 do
    assert(map(binv2hexstr,f(1,r)) =
      ["FF4780EB6AC1F425","EEBC1448B8672F8C",
       des_encryption_hex_gen(r,"FF4780EB6AC1F425","EEBC1448B8672F8C")]),
  assert(map(binv2hexstr, f(2^75,1)) =
    ["97C4AA2F8C7F0AAC","D821CCC0B716A675","C384EB6B993F5FFC"]),
  true)$


okltest_des_random_pkctriple_pa(f) := block(
  assert(f(1,1) =
    {desk(1),-desr(1,-1),-desr(1,0),desr(1,1),desk(2),desr(2,-1),
     desr(2,0),-desr(2,1),desk(3),desr(3,-1),desr(3,0),desr(3,1),
     -desk(4),desr(4,-1),-desr(4,0),-desr(4,1),desk(5),desr(5,-1),
     desr(5,0),-desr(5,1),desk(6),-desr(6,-1),desr(6,0),desr(6,1),
     desk(7),desr(7,-1),-desr(7,0),-desr(7,1),-desk(8),desr(8,-1),
     desr(8,0),desr(8,1),desk(9),-desr(9,-1),desr(9,0),-desr(9,1),
     -desk(10),desr(10,-1),desr(10,0),-desr(10,1),desk(11),
     -desr(11,-1),-desr(11,0),-desr(11,1),desk(12),-desr(12,-1),
     desr(12,0),-desr(12,1),desk(13),-desr(13,-1),desr(13,0),
     desr(13,1),desk(14),-desr(14,-1),-desr(14,0),-desr(14,1),
     -desk(15),-desr(15,-1),-desr(15,0),-desr(15,1),-desk(16),
     desr(16,-1),desr(16,0),-desr(16,1),-desk(17),desr(17,-1),
     -desr(17,0),-desr(17,1),-desk(18),desr(18,-1),-desr(18,0),
     -desr(18,1),-desk(19),-desr(19,-1),-desr(19,0),-desr(19,1),
     desk(20),-desr(20,-1),desr(20,0),-desr(20,1),-desk(21),
     -desr(21,-1),desr(21,0),desr(21,1),desk(22),-desr(22,-1),
     -desr(22,0),desr(22,1),-desk(23),desr(23,-1),-desr(23,0),
     -desr(23,1),-desk(24),desr(24,-1),desr(24,0),desr(24,1),
     -desk(25),desr(25,-1),-desr(25,0),-desr(25,1),desk(26),
     -desr(26,-1),-desr(26,0),desr(26,1),-desk(27),desr(27,-1),
     -desr(27,0),desr(27,1),-desk(28),-desr(28,-1),desr(28,0),
     -desr(28,1),desk(29),desr(29,-1),desr(29,0),desr(29,1),
     -desk(30),-desr(30,-1),-desr(30,0),desr(30,1),-desk(31),
     desr(31,-1),desr(31,0),desr(31,1),-desk(32),desr(32,-1),
     desr(32,0),-desr(32,1),desk(33),-desk(34),desk(35),desk(36),
     desk(37),-desk(38),-desk(39),-desk(40),-desk(41),desk(42),
     desk(43),-desk(44),-desk(45),desk(46),desk(47),desk(48),
     -desk(49),-desk(50),desk(51),-desk(52),desk(53),desk(54),
     desk(55),desk(56),desk(57),-desk(58),-desk(59),-desk(60),
     desk(61),desk(62),-desk(63),-desk(64)}),
  assert(f(1,16) =
    {desk(1),-desr(1,-1),-desr(1,0),-desr(1,15),desr(1,16),desk(2),
     desr(2,-1),desr(2,0),desr(2,15),-desr(2,16),desk(3),
     desr(3,-1),desr(3,0),desr(3,15),-desr(3,16),-desk(4),
     desr(4,-1),-desr(4,0),-desr(4,15),-desr(4,16),desk(5),
     desr(5,-1),desr(5,0),-desr(5,15),desr(5,16),desk(6),
     -desr(6,-1),desr(6,0),desr(6,15),desr(6,16),desk(7),
     desr(7,-1),-desr(7,0),desr(7,15),-desr(7,16),-desk(8),
     desr(8,-1),desr(8,0),desr(8,15),-desr(8,16),desk(9),
     -desr(9,-1),desr(9,0),desr(9,15),-desr(9,16),-desk(10),
     desr(10,-1),desr(10,0),desr(10,15),desr(10,16),desk(11),
     -desr(11,-1),-desr(11,0),-desr(11,15),desr(11,16),desk(12),
     -desr(12,-1),desr(12,0),-desr(12,15),desr(12,16),desk(13),
     -desr(13,-1),desr(13,0),desr(13,15),-desr(13,16),desk(14),
     -desr(14,-1),-desr(14,0),-desr(14,15),desr(14,16),-desk(15),
     -desr(15,-1),-desr(15,0),desr(15,15),desr(15,16),-desk(16),
     desr(16,-1),desr(16,0),-desr(16,15),desr(16,16),-desk(17),
     desr(17,-1),-desr(17,0),-desr(17,15),-desr(17,16),-desk(18),
     desr(18,-1),-desr(18,0),-desr(18,15),-desr(18,16),-desk(19),
     -desr(19,-1),-desr(19,0),desr(19,15),-desr(19,16),desk(20),
     -desr(20,-1),desr(20,0),-desr(20,15),-desr(20,16),-desk(21),
     -desr(21,-1),desr(21,0),-desr(21,15),desr(21,16),desk(22),
     -desr(22,-1),-desr(22,0),-desr(22,15),-desr(22,16),-desk(23),
     desr(23,-1),-desr(23,0),desr(23,15),-desr(23,16),-desk(24),
     desr(24,-1),desr(24,0),desr(24,15),-desr(24,16),-desk(25),
     desr(25,-1),-desr(25,0),-desr(25,15),-desr(25,16),desk(26),
     -desr(26,-1),-desr(26,0),desr(26,15),-desr(26,16),-desk(27),
     desr(27,-1),-desr(27,0),desr(27,15),-desr(27,16),-desk(28),
     -desr(28,-1),desr(28,0),-desr(28,15),-desr(28,16),desk(29),
     desr(29,-1),desr(29,0),desr(29,15),-desr(29,16),-desk(30),
     -desr(30,-1),-desr(30,0),desr(30,15),desr(30,16),-desk(31),
     desr(31,-1),desr(31,0),-desr(31,15),-desr(31,16),-desk(32),
     desr(32,-1),desr(32,0),desr(32,15),-desr(32,16),desk(33),
     -desk(34),desk(35),desk(36),desk(37),-desk(38),-desk(39),
     -desk(40),-desk(41),desk(42),desk(43),-desk(44),-desk(45),
     desk(46),desk(47),desk(48),-desk(49),-desk(50),desk(51),
     -desk(52),desk(53),desk(54),desk(55),desk(56),desk(57),
     -desk(58),-desk(59),-desk(60),desk(61),desk(62),-desk(63),
     -desk(64)}),
  true)$

okltest_des_random_pkctriple_pa_std(f) := block(
  assert(f(1,1) =
    {-160,-156,-153,-151,-148,-147,-146,-145,-144,-143,-142,-140,
    -139,-138,-137,-135,-133,-132,-130,-126,-123,-122,-121,-119,
    -118,-115,-114,-113,-111,-110,-107,-103,-100,-97,-94,-92,-90,
    -86,-85,-84,-83,-79,-78,-77,-76,-75,-73,-70,-65,-64,-63,-60,
    -59,-58,-52,-50,-49,-45,-44,-41,-40,-39,-38,-34,-32,-31,-30,
    -28,-27,-25,-24,-23,-21,-19,-18,-17,-16,-15,-10,-8,-4,1,2,3,
    5,6,7,9,11,12,13,14,20,22,26,29,33,35,36,37,42,43,46,47,48,
    51,53,54,55,56,57,61,62,66,67,68,69,71,72,74,80,81,82,87,88,
    89,91,93,95,96,98,99,101,102,104,105,106,108,109,112,116,117,
    120,124,125,127,128,129,131,134,136,141,149,150,152,154,155,
    157,158,159}),
  assert(f(1,16) =
    {-1840,-1839,-1837,-1836,-1835,-1834,-1833,-1832,-1831,-1830,
     -1828,-1827,-1826,-1825,-1821,-1817,-1816,-1815,-1812,-1811,
     -1810,-1727,-1724,-1721,-1718,-1717,-1716,-1714,-1713,-1712,
     -1710,-1708,-1707,-1701,-1700,-1697,-126,-123,-122,-121,
     -119,-118,-115,-114,-113,-111,-110,-107,-103,-100,-97,-94,
     -92,-90,-86,-85,-84,-83,-79,-78,-77,-76,-75,-73,-70,-65,-64,
     -63,-60,-59,-58,-52,-50,-49,-45,-44,-41,-40,-39,-38,-34,-32,
     -31,-30,-28,-27,-25,-24,-23,-21,-19,-18,-17,-16,-15,-10,-8,
     -4,1,2,3,5,6,7,9,11,12,13,14,20,22,26,29,33,35,36,37,42,43,
     46,47,48,51,53,54,55,56,57,61,62,66,67,68,69,71,72,74,80,81,
     82,87,88,89,91,93,95,96,98,99,101,102,104,105,106,108,109,
     112,116,117,120,124,125,127,128,1698,1699,1702,1703,1704,
     1705,1706,1709,1711,1715,1719,1720,1722,1723,1725,1726,1728,
     1809,1813,1814,1818,1819,1820,1822,1823,1824,1829,1838}),
   assert(f(2,16) =
     {-1839,-1836,-1835,-1834,-1830,-1828,-1826,-1825,-1824,-1823,
      -1822,-1821,-1820,-1819,-1818,-1817,-1814,-1812,-1809,-1726,
      -1723,-1722,-1721,-1720,-1718,-1717,-1714,-1712,-1709,-1707,
      -1705,-1704,-1703,-1702,-1701,-1700,-1697,-127,-123,-122,
      -121,-119,-110,-109,-107,-106,-104,-103,-101,-100,-98,-94,
      -90,-89,-87,-86,-81,-80,-79,-78,-77,-76,-73,-72,-70,-69,-67,
      -65,-63,-60,-55,-54,-51,-50,-49,-46,-45,-44,-42,-40,-37,-36,
      -35,-34,-33,-32,-31,-30,-28,-27,-25,-24,-21,-17,-15,-14,-9,
      -8,-4,1,2,3,5,6,7,10,11,12,13,16,18,19,20,22,23,26,29,38,39,
      41,43,47,48,52,53,56,57,58,59,61,62,64,66,68,71,74,75,82,83,
      84,85,88,91,92,93,95,96,97,99,102,105,108,111,112,113,114,
      115,116,117,118,120,124,125,126,128,1698,1699,1706,1708,
      1710,1711,1713,1715,1716,1719,1724,1725,1727,1728,1810,1811,
      1813,1815,1816,1827,1829,1831,1832,1833,1837,1838,1840}),
  true)$

okltest_des_random_pcpair_pa(f) := block(
  assert(f(1,1) =
    {-desr(1,-1),-desr(1,0),desr(1,1),desr(2,-1),desr(2,0),
     -desr(2,1),desr(3,-1),desr(3,0),desr(3,1),desr(4,-1),
     -desr(4,0),-desr(4,1),desr(5,-1),desr(5,0),-desr(5,1),
     -desr(6,-1),desr(6,0),desr(6,1),desr(7,-1),-desr(7,0),
     -desr(7,1),desr(8,-1),desr(8,0),desr(8,1),-desr(9,-1),
     desr(9,0),-desr(9,1),desr(10,-1),desr(10,0),-desr(10,1),
     -desr(11,-1),-desr(11,0),-desr(11,1),-desr(12,-1),
     desr(12,0),-desr(12,1),-desr(13,-1),desr(13,0),desr(13,1),
     -desr(14,-1),-desr(14,0),-desr(14,1),-desr(15,-1),
     -desr(15,0),-desr(15,1),desr(16,-1),desr(16,0),-desr(16,1),
     desr(17,-1),-desr(17,0),-desr(17,1),desr(18,-1),-desr(18,0),
     -desr(18,1),-desr(19,-1),-desr(19,0),-desr(19,1),
     -desr(20,-1),desr(20,0),-desr(20,1),-desr(21,-1),desr(21,0),
     desr(21,1),-desr(22,-1),-desr(22,0),desr(22,1),desr(23,-1),
     -desr(23,0),-desr(23,1),desr(24,-1),desr(24,0),desr(24,1),
     desr(25,-1),-desr(25,0),-desr(25,1),-desr(26,-1),
     -desr(26,0),desr(26,1),desr(27,-1),-desr(27,0),desr(27,1),
     -desr(28,-1),desr(28,0),-desr(28,1),desr(29,-1),desr(29,0),
     desr(29,1),-desr(30,-1),-desr(30,0),desr(30,1),desr(31,-1),
     desr(31,0),desr(31,1),desr(32,-1),desr(32,0),-desr(32,1)}),
  assert(f(1,16) =
    {-desr(1,-1),-desr(1,0),-desr(1,15),desr(1,16),desr(2,-1),
     desr(2,0),desr(2,15),-desr(2,16),desr(3,-1),desr(3,0),
     desr(3,15),-desr(3,16),desr(4,-1),-desr(4,0),-desr(4,15),
     -desr(4,16),desr(5,-1),desr(5,0),-desr(5,15),desr(5,16),
     -desr(6,-1),desr(6,0),desr(6,15),desr(6,16),desr(7,-1),
     -desr(7,0),desr(7,15),-desr(7,16),desr(8,-1),desr(8,0),
     desr(8,15),-desr(8,16),-desr(9,-1),desr(9,0),desr(9,15),
     -desr(9,16),desr(10,-1),desr(10,0),desr(10,15),desr(10,16),
     -desr(11,-1),-desr(11,0),-desr(11,15),desr(11,16),
     -desr(12,-1),desr(12,0),-desr(12,15),desr(12,16),
     -desr(13,-1),desr(13,0),desr(13,15),-desr(13,16),
     -desr(14,-1),-desr(14,0),-desr(14,15),desr(14,16),
     -desr(15,-1),-desr(15,0),desr(15,15),desr(15,16),
     desr(16,-1),desr(16,0),-desr(16,15),desr(16,16),desr(17,-1),
     -desr(17,0),-desr(17,15),-desr(17,16),desr(18,-1),
     -desr(18,0),-desr(18,15),-desr(18,16),-desr(19,-1),
     -desr(19,0),desr(19,15),-desr(19,16),-desr(20,-1),
     desr(20,0),-desr(20,15),-desr(20,16),-desr(21,-1),
     desr(21,0),-desr(21,15),desr(21,16),-desr(22,-1),
     -desr(22,0),-desr(22,15),-desr(22,16),desr(23,-1),
     -desr(23,0),desr(23,15),-desr(23,16),desr(24,-1),desr(24,0),
     desr(24,15),-desr(24,16),desr(25,-1),-desr(25,0),
     -desr(25,15),-desr(25,16),-desr(26,-1),-desr(26,0),
     desr(26,15),-desr(26,16),desr(27,-1),-desr(27,0),
     desr(27,15),-desr(27,16),-desr(28,-1),desr(28,0),
     -desr(28,15),-desr(28,16),desr(29,-1),desr(29,0),
     desr(29,15),-desr(29,16),-desr(30,-1),-desr(30,0),
     desr(30,15),desr(30,16),desr(31,-1),desr(31,0),-desr(31,15),
     -desr(31,16),desr(32,-1),desr(32,0),desr(32,15),
     -desr(32,16)}),
  assert(f(2,16) =
    {-desr(1,-1),desr(1,0),-desr(1,15),-desr(1,16),desr(2,-1),
     -desr(2,0),desr(2,15),desr(2,16),-desr(3,-1),desr(3,0),
     desr(3,15),desr(3,16),desr(4,-1),-desr(4,0),-desr(4,15),
     -desr(4,16),-desr(5,-1),-desr(5,0),-desr(5,15),desr(5,16),
     -desr(6,-1),desr(6,0),-desr(6,15),-desr(6,16),desr(7,-1),
     -desr(7,0),-desr(7,15),desr(7,16),-desr(8,-1),-desr(8,0),
     -desr(8,15),desr(8,16),-desr(9,-1),desr(9,0),-desr(9,15),
     -desr(9,16),desr(10,-1),-desr(10,0),desr(10,15),
     -desr(10,16),desr(11,-1),-desr(11,0),-desr(11,15),
     -desr(11,16),-desr(12,-1),desr(12,0),desr(12,15),
     -desr(12,16),-desr(13,-1),-desr(13,0),-desr(13,15),
     -desr(13,16),-desr(14,-1),-desr(14,0),desr(14,15),
     -desr(14,16),-desr(15,-1),desr(15,0),desr(15,15),
     -desr(15,16),-desr(16,-1),desr(16,0),-desr(16,15),
     -desr(16,16),-desr(17,-1),desr(17,0),desr(17,15),
     -desr(17,16),desr(18,-1),desr(18,0),-desr(18,15),
     -desr(18,16),desr(19,-1),desr(19,0),desr(19,15),desr(19,16),
     desr(20,-1),desr(20,0),desr(20,15),-desr(20,16),desr(21,-1),
     desr(21,0),-desr(21,15),desr(21,16),-desr(22,-1),desr(22,0),
     -desr(22,15),-desr(22,16),-desr(23,-1),-desr(23,0),
     desr(23,15),desr(23,16),desr(24,-1),desr(24,0),-desr(24,15),
     desr(24,16),-desr(25,-1),-desr(25,0),-desr(25,15),
     desr(25,16),-desr(26,-1),-desr(26,0),-desr(26,15),
     -desr(26,16),desr(27,-1),-desr(27,0),-desr(27,15),
     -desr(27,16),desr(28,-1),desr(28,0),desr(28,15),
     -desr(28,16),desr(29,-1),desr(29,0),desr(29,15),desr(29,16),
     -desr(30,-1),desr(30,0),-desr(30,15),desr(30,16),
     desr(31,-1),-desr(31,0),desr(31,15),-desr(31,16),
     desr(32,-1),desr(32,0),desr(32,15),desr(32,16)}),
  true)$

okltest_des_random_pcpair_pa_std(f) := block(
  assert(f(1,1) =
    {-160,-156,-153,-151,-148,-147,-146,-145,-144,-143,-142,-140,
     -139,-138,-137,-135,-133,-132,-130,-126,-123,-122,-121,-119,
     -118,-115,-114,-113,-111,-110,-107,-103,-100,-97,-94,-92,
     -90,-86,-85,-84,-83,-79,-78,-77,-76,-75,-73,-70,-65,66,67,
     68,69,71,72,74,80,81,82,87,88,89,91,93,95,96,98,99,101,102,
     104,105,106,108,109,112,116,117,120,124,125,127,128,129,131,
     134,136,141,149,150,152,154,155,157,158,159}),
  assert(f(1,16) =
    {-1840,-1839,-1837,-1836,-1835,-1834,-1833,-1832,-1831,-1830,
     -1828,-1827,-1826,-1825,-1821,-1817,-1816,-1815,-1812,-1811,
     -1810,-1727,-1724,-1721,-1718,-1717,-1716,-1714,-1713,-1712,
     -1710,-1708,-1707,-1701,-1700,-1697,-126,-123,-122,-121,
     -119,-118,-115,-114,-113,-111,-110,-107,-103,-100,-97,-94,
     -92,-90,-86,-85,-84,-83,-79,-78,-77,-76,-75,-73,-70,-65,66,
     67,68,69,71,72,74,80,81,82,87,88,89,91,93,95,96,98,99,101,
     102,104,105,106,108,109,112,116,117,120,124,125,127,128,
     1698,1699,1702,1703,1704,1705,1706,1709,1711,1715,1719,1720,
     1722,1723,1725,1726,1728,1809,1813,1814,1818,1819,1820,1822,
     1823,1824,1829,1838}),
  assert(f(2,16) =
    {-1839,-1836,-1835,-1834,-1830,-1828,-1826,-1825,-1824,-1823,
     -1822,-1821,-1820,-1819,-1818,-1817,-1814,-1812,-1809,-1726,
     -1723,-1722,-1721,-1720,-1718,-1717,-1714,-1712,-1709,-1707,
     -1705,-1704,-1703,-1702,-1701,-1700,-1697,-127,-123,-122,
     -121,-119,-110,-109,-107,-106,-104,-103,-101,-100,-98,-94,
     -90,-89,-87,-86,-81,-80,-79,-78,-77,-76,-73,-72,-70,-69,-67,
     -65,66,68,71,74,75,82,83,84,85,88,91,92,93,95,96,97,99,102,
     105,108,111,112,113,114,115,116,117,118,120,124,125,126,128,
     1698,1699,1706,1708,1710,1711,1713,1715,1716,1719,1724,1725,
     1727,1728,1810,1811,1813,1815,1816,1827,1829,1831,1832,1833,
     1837,1838,1840}),
  true)$

okltest_des_random_pkpair_pa(f) := block([phi],
  phi : f(1,1),
  asset(phi =
    {desk(1),-desr(1,-1),-desr(1,0),desk(2),desr(2,-1),desr(2,0),
     desk(3),desr(3,-1),desr(3,0),-desk(4),desr(4,-1),-desr(4,0),
     desk(5),desr(5,-1),desr(5,0),desk(6),-desr(6,-1),desr(6,0),
     desk(7),desr(7,-1),-desr(7,0),-desk(8),desr(8,-1),desr(8,0),
     desk(9),-desr(9,-1),desr(9,0),-desk(10),desr(10,-1),
     desr(10,0),desk(11),-desr(11,-1),-desr(11,0),desk(12),
     -desr(12,-1),desr(12,0),desk(13),-desr(13,-1),desr(13,0),
     desk(14),-desr(14,-1),-desr(14,0),-desk(15),-desr(15,-1),
     -desr(15,0),-desk(16),desr(16,-1),desr(16,0),-desk(17),
     desr(17,-1),-desr(17,0),-desk(18),desr(18,-1),-desr(18,0),
     -desk(19),-desr(19,-1),-desr(19,0),desk(20),-desr(20,-1),
     desr(20,0),-desk(21),-desr(21,-1),desr(21,0),desk(22),
     -desr(22,-1),-desr(22,0),-desk(23),desr(23,-1),-desr(23,0),
     -desk(24),desr(24,-1),desr(24,0),-desk(25),desr(25,-1),
     -desr(25,0),desk(26),-desr(26,-1),-desr(26,0),-desk(27),
     desr(27,-1),-desr(27,0),-desk(28),-desr(28,-1),desr(28,0),
     desk(29),desr(29,-1),desr(29,0),-desk(30),-desr(30,-1),
     -desr(30,0),-desk(31),desr(31,-1),desr(31,0),-desk(32),
     desr(32,-1),desr(32,0),desk(33),-desk(34),desk(35),desk(36),
     desk(37),-desk(38),-desk(39),-desk(40),-desk(41),desk(42),
     desk(43),-desk(44),-desk(45),desk(46),desk(47),desk(48),
     -desk(49),-desk(50),desk(51),-desk(52),desk(53),desk(54),
     desk(55),desk(56),desk(57),-desk(58),-desk(59),-desk(60),
     desk(61),desk(62),-desk(63),-desk(64)}),
  assert(phi = f(1,16)),
  assert(f(2,16) =
    {desk(1),-desr(1,-1),desr(1,0),desk(2),desr(2,-1),-desr(2,0),
     desk(3),-desr(3,-1),desr(3,0),-desk(4),desr(4,-1),
     -desr(4,0),desk(5),-desr(5,-1),-desr(5,0),desk(6),
     -desr(6,-1),desr(6,0),desk(7),desr(7,-1),-desr(7,0),
     -desk(8),-desr(8,-1),-desr(8,0),-desk(9),-desr(9,-1),
     desr(9,0),desk(10),desr(10,-1),-desr(10,0),desk(11),
     desr(11,-1),-desr(11,0),desk(12),-desr(12,-1),desr(12,0),
     desk(13),-desr(13,-1),-desr(13,0),-desk(14),-desr(14,-1),
     -desr(14,0),-desk(15),-desr(15,-1),desr(15,0),desk(16),
     -desr(16,-1),desr(16,0),-desk(17),-desr(17,-1),desr(17,0),
     desk(18),desr(18,-1),desr(18,0),desk(19),desr(19,-1),
     desr(19,0),desk(20),desr(20,-1),desr(20,0),-desk(21),
     desr(21,-1),desr(21,0),desk(22),-desr(22,-1),desr(22,0),
     desk(23),-desr(23,-1),-desr(23,0),-desk(24),desr(24,-1),
     desr(24,0),-desk(25),-desr(25,-1),-desr(25,0),desk(26),
     -desr(26,-1),-desr(26,0),-desk(27),desr(27,-1),-desr(27,0),
     -desk(28),desr(28,-1),desr(28,0),desk(29),desr(29,-1),
     desr(29,0),-desk(30),-desr(30,-1),desr(30,0),-desk(31),
     desr(31,-1),-desr(31,0),-desk(32),desr(32,-1),desr(32,0),
     -desk(33),-desk(34),-desk(35),-desk(36),-desk(37),desk(38),
     desk(39),-desk(40),desk(41),-desk(42),desk(43),-desk(44),
     -desk(45),-desk(46),desk(47),desk(48),-desk(49),-desk(50),
     -desk(51),desk(52),desk(53),-desk(54),-desk(55),desk(56),
     desk(57),desk(58),desk(59),-desk(60),desk(61),desk(62),
     -desk(63),desk(64)}),
  true)$

okltest_des_random_pkpair_pa_std(f) := block([phi],
  phi : f(1,1),
  assert(phi =
    {-126,-123,-122,-121,-119,-118,-115,-114,-113,-111,-110,-107,
     -103,-100,-97,-94,-92,-90,-86,-85,-84,-83,-79,-78,-77,-76,
     -75,-73,-70,-65,-64,-63,-60,-59,-58,-52,-50,-49,-45,-44,-41,
     -40,-39,-38,-34,-32,-31,-30,-28,-27,-25,-24,-23,-21,-19,-18,
     -17,-16,-15,-10,-8,-4,1,2,3,5,6,7,9,11,12,13,14,20,22,26,29,
     33,35,36,37,42,43,46,47,48,51,53,54,55,56,57,61,62,66,67,68,
     69,71,72,74,80,81,82,87,88,89,91,93,95,96,98,99,101,102,104,
     105,106,108,109,112,116,117,120,124,125,127,128}),
  assert(f(1,16) = phi),
  assert(f(2,16) =
    {-127,-123,-122,-121,-119,-110,-109,-107,-106,-104,-103,-101,
         -100,-98,-94,-90,-89,-87,-86,-81,-80,-79,-78,-77,-76,-73,
         -72,-70,-69,-67,-65,-63,-60,-55,-54,-51,-50,-49,-46,-45,-44,
         -42,-40,-37,-36,-35,-34,-33,-32,-31,-30,-28,-27,-25,-24,-21,
         -17,-15,-14,-9,-8,-4,1,2,3,5,6,7,10,11,12,13,16,18,19,20,22,
         23,26,29,38,39,41,43,47,48,52,53,56,57,58,59,61,62,64,66,68,
         71,74,75,82,83,84,85,88,91,92,93,95,96,97,99,102,105,108,
         111,112,113,114,115,116,117,118,120,124,125,126,128}),
  true)$

okltest_des_random_kcpair_pa(f) := block(
  assert(f(1,1) =
    {desk(1),-desr(1,0),desr(1,1),desk(2),desr(2,0),-desr(2,1),
     desk(3),desr(3,0),desr(3,1),-desk(4),-desr(4,0),-desr(4,1),
     desk(5),desr(5,0),-desr(5,1),desk(6),desr(6,0),desr(6,1),
     desk(7),-desr(7,0),-desr(7,1),-desk(8),desr(8,0),desr(8,1),
     desk(9),desr(9,0),-desr(9,1),-desk(10),desr(10,0),
     -desr(10,1),desk(11),-desr(11,0),-desr(11,1),desk(12),
     desr(12,0),-desr(12,1),desk(13),desr(13,0),desr(13,1),
     desk(14),-desr(14,0),-desr(14,1),-desk(15),-desr(15,0),
     -desr(15,1),-desk(16),desr(16,0),-desr(16,1),-desk(17),
     -desr(17,0),-desr(17,1),-desk(18),-desr(18,0),-desr(18,1),
     -desk(19),-desr(19,0),-desr(19,1),desk(20),desr(20,0),
     -desr(20,1),-desk(21),desr(21,0),desr(21,1),desk(22),
     -desr(22,0),desr(22,1),-desk(23),-desr(23,0),-desr(23,1),
     -desk(24),desr(24,0),desr(24,1),-desk(25),-desr(25,0),
     -desr(25,1),desk(26),-desr(26,0),desr(26,1),-desk(27),
     -desr(27,0),desr(27,1),-desk(28),desr(28,0),-desr(28,1),
     desk(29),desr(29,0),desr(29,1),-desk(30),-desr(30,0),
     desr(30,1),-desk(31),desr(31,0),desr(31,1),-desk(32),
     desr(32,0),-desr(32,1),desk(33),-desk(34),desk(35),desk(36),
     desk(37),-desk(38),-desk(39),-desk(40),-desk(41),desk(42),
     desk(43),-desk(44),-desk(45),desk(46),desk(47),desk(48),
     -desk(49),-desk(50),desk(51),-desk(52),desk(53),desk(54),
     desk(55),desk(56),desk(57),-desk(58),-desk(59),-desk(60),
     desk(61),desk(62),-desk(63),-desk(64)}),
  assert(f(1,16) =
    {desk(1),-desr(1,15),desr(1,16),desk(2),desr(2,15),
     -desr(2,16),desk(3),desr(3,15),-desr(3,16),-desk(4),
     -desr(4,15),-desr(4,16),desk(5),-desr(5,15),desr(5,16),
     desk(6),desr(6,15),desr(6,16),desk(7),desr(7,15),
     -desr(7,16),-desk(8),desr(8,15),-desr(8,16),desk(9),
     desr(9,15),-desr(9,16),-desk(10),desr(10,15),desr(10,16),
     desk(11),-desr(11,15),desr(11,16),desk(12),-desr(12,15),
     desr(12,16),desk(13),desr(13,15),-desr(13,16),desk(14),
     -desr(14,15),desr(14,16),-desk(15),desr(15,15),desr(15,16),
     -desk(16),-desr(16,15),desr(16,16),-desk(17),-desr(17,15),
     -desr(17,16),-desk(18),-desr(18,15),-desr(18,16),-desk(19),
     desr(19,15),-desr(19,16),desk(20),-desr(20,15),-desr(20,16),
     -desk(21),-desr(21,15),desr(21,16),desk(22),-desr(22,15),
     -desr(22,16),-desk(23),desr(23,15),-desr(23,16),-desk(24),
     desr(24,15),-desr(24,16),-desk(25),-desr(25,15),
     -desr(25,16),desk(26),desr(26,15),-desr(26,16),-desk(27),
     desr(27,15),-desr(27,16),-desk(28),-desr(28,15),
     -desr(28,16),desk(29),desr(29,15),-desr(29,16),-desk(30),
     desr(30,15),desr(30,16),-desk(31),-desr(31,15),-desr(31,16),
     -desk(32),desr(32,15),-desr(32,16),desk(33),-desk(34),
     desk(35),desk(36),desk(37),-desk(38),-desk(39),-desk(40),
     -desk(41),desk(42),desk(43),-desk(44),-desk(45),desk(46),
     desk(47),desk(48),-desk(49),-desk(50),desk(51),-desk(52),
     desk(53),desk(54),desk(55),desk(56),desk(57),-desk(58),
     -desk(59),-desk(60),desk(61),desk(62),-desk(63),-desk(64)}),
  assert(f(2,16) =
    {desk(1),-desr(1,15),-desr(1,16),desk(2),desr(2,15),
     desr(2,16),desk(3),desr(3,15),desr(3,16),-desk(4),
     -desr(4,15),-desr(4,16),desk(5),-desr(5,15),desr(5,16),
     desk(6),-desr(6,15),-desr(6,16),desk(7),-desr(7,15),
     desr(7,16),-desk(8),-desr(8,15),desr(8,16),-desk(9),
     -desr(9,15),-desr(9,16),desk(10),desr(10,15),-desr(10,16),
     desk(11),-desr(11,15),-desr(11,16),desk(12),desr(12,15),
     -desr(12,16),desk(13),-desr(13,15),-desr(13,16),-desk(14),
     desr(14,15),-desr(14,16),-desk(15),desr(15,15),-desr(15,16),
     desk(16),-desr(16,15),-desr(16,16),-desk(17),desr(17,15),
     -desr(17,16),desk(18),-desr(18,15),-desr(18,16),desk(19),
     desr(19,15),desr(19,16),desk(20),desr(20,15),-desr(20,16),
     -desk(21),-desr(21,15),desr(21,16),desk(22),-desr(22,15),
     -desr(22,16),desk(23),desr(23,15),desr(23,16),-desk(24),
     -desr(24,15),desr(24,16),-desk(25),-desr(25,15),desr(25,16),
     desk(26),-desr(26,15),-desr(26,16),-desk(27),-desr(27,15),
     -desr(27,16),-desk(28),desr(28,15),-desr(28,16),desk(29),
     desr(29,15),desr(29,16),-desk(30),-desr(30,15),desr(30,16),
     -desk(31),desr(31,15),-desr(31,16),-desk(32),desr(32,15),
     desr(32,16),-desk(33),-desk(34),-desk(35),-desk(36),
     -desk(37),desk(38),desk(39),-desk(40),desk(41),-desk(42),
     desk(43),-desk(44),-desk(45),-desk(46),desk(47),desk(48),
     -desk(49),-desk(50),-desk(51),desk(52),desk(53),-desk(54),
     -desk(55),desk(56),desk(57),desk(58),desk(59),-desk(60),
     desk(61),desk(62),-desk(63),desk(64)}),
  true)$

okltest_des_random_kcpair_pa_std(f) := block(
  assert(f(1,1) =
    {-160,-156,-153,-151,-148,-147,-146,-145,-144,-143,-142,-140,
     -139,-138,-137,-135,-133,-132,-130,-126,-123,-122,-121,-119,
     -118,-115,-114,-113,-111,-110,-107,-103,-100,-97,-64,-63,
     -60,-59,-58,-52,-50,-49,-45,-44,-41,-40,-39,-38,-34,-32,-31,
     -30,-28,-27,-25,-24,-23,-21,-19,-18,-17,-16,-15,-10,-8,-4,1,
     2,3,5,6,7,9,11,12,13,14,20,22,26,29,33,35,36,37,42,43,46,47,
     48,51,53,54,55,56,57,61,62,98,99,101,102,104,105,106,108,
     109,112,116,117,120,124,125,127,128,129,131,134,136,141,149,
     150,152,154,155,157,158,159}),
  assert(f(1,16) =
    {-1840,-1839,-1837,-1836,-1835,-1834,-1833,-1832,-1831,-1830,
     -1828,-1827,-1826,-1825,-1821,-1817,-1816,-1815,-1812,-1811,
     -1810,-1727,-1724,-1721,-1718,-1717,-1716,-1714,-1713,-1712,
     -1710,-1708,-1707,-1701,-1700,-1697,-64,-63,-60,-59,-58,-52,
     -50,-49,-45,-44,-41,-40,-39,-38,-34,-32,-31,-30,-28,-27,-25,
     -24,-23,-21,-19,-18,-17,-16,-15,-10,-8,-4,1,2,3,5,6,7,9,11,
     12,13,14,20,22,26,29,33,35,36,37,42,43,46,47,48,51,53,54,55,
     56,57,61,62,1698,1699,1702,1703,1704,1705,1706,1709,1711,
     1715,1719,1720,1722,1723,1725,1726,1728,1809,1813,1814,1818,
     1819,1820,1822,1823,1824,1829,1838}),
  assert(f(2,16) =
    {-1839,-1836,-1835,-1834,-1830,-1828,-1826,-1825,-1824,-1823,
     -1822,-1821,-1820,-1819,-1818,-1817,-1814,-1812,-1809,-1726,
     -1723,-1722,-1721,-1720,-1718,-1717,-1714,-1712,-1709,-1707,
     -1705,-1704,-1703,-1702,-1701,-1700,-1697,-63,-60,-55,-54,
     -51,-50,-49,-46,-45,-44,-42,-40,-37,-36,-35,-34,-33,-32,-31,
     -30,-28,-27,-25,-24,-21,-17,-15,-14,-9,-8,-4,1,2,3,5,6,7,10,
     11,12,13,16,18,19,20,22,23,26,29,38,39,41,43,47,48,52,53,56,
     57,58,59,61,62,64,1698,1699,1706,1708,1710,1711,1713,1715,
     1716,1719,1724,1725,1727,1728,1810,1811,1813,1815,1816,1827,
     1829,1831,1832,1833,1837,1838,1840}),
  true)$

/*!
\endhtmlonly
*/
