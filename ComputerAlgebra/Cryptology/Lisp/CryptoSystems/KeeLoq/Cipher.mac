/* Matthew Gwynne, 27.2.2012 (Swansea) */
/* Copyright 2012 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Cryptology/Lisp/CryptoSystems/KeeLoq/Cipher.mac
  \brief The KeeLoq cipher

Use by

oklib_load("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/KeeLoq/Cipher.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/NumberTheory/Lisp/Auxiliary.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/FiniteFunctions/Basics.mac")$



/* *****************
   * KeeLoq cipher *
   *****************
*/

/* Keeloq is a 32-bit shift-register block cipher with 32-bit plaintext and
   ciphertext, a 64-bit key, and 528 rounds.

   All additions and multiplications are in ZZ_2.

   The encryption algorithm for KeeLoq, as described in [Algebraic and Slide
   attacks on KeeLoq; Gregory Bard, Nicholas Courtois and David Wagner], is:
    1) The inputs are
          - plaintext, P_s, a 32-bit binary string, and
          - key, K_s, a 64-bit binary strings.
       A k-bit binary string here is a string over {0,1} of length k.
    2) Declare (0-indexed) {0,1}-valued arrays
          - K, of size 32, and
          - L, of size 560,
       both initialised to all 0.
    3) Set K to reverse(K_s).
       K[31] is the leftmost bit of K_s, K[0] the rightmost.
    4) Set the first 32 values of L to reverse(P_s).
       L[31] is the leftmost bit of P_s, L[0] the rightmost.
    5) For i in 0 to 527 do
           L[i+32]= K[i mod 64] + L[i] + L[i+16] +
                      NLF(L[i+31], L[i+26],L[i+20],L[i+9],L[i+1])
    6) The ciphertext is the 32-bit string of 0s and 1s corresponding to
       L[559],...,L[528] where L[559] is the leftmost bit and
       L[528] is the rightmost digit.

   The non-linear feedback function is defined as an ANF as follows

    NLF(a,b,c,d,e) := d + e + ac + ae + bc + be + cd + de + ade + ace
                      + abd + abc.

   The arrays above are 0-based for simplicity, given the use of mod.
   The binary strings P_s, K_s and the ciphertext are reversed
   because they are indexed in reverse (e.g., the leftmost plaintext
   bit has index 31) in [Algebraic and Slide attacks on KeeLoq; Gregory Bard,
   Nicholas Courtois and David Wagner].

   The todo "Good definition" in
   Cryptology/Lisp/CryptoSystems/KeeLoq/plans/general.hpp discusses replacing
   this definition with an equivalent definition which better fits into the
   OKlibrary.

*/

/* The KeeLoq non-linear feedback function: */
/* ??? what are a,b,c,d,e ??? */
keeloq_nlf(a,b,c,d,e) :=
  mod(d+e+a*c+a*e+b*c+b*e+c*d+d*e+a*d*e+a*c*e+a*b*d+a*b*c, 2)$

/* The Keeloq round taking an 8-bit vector as input: */
/* ??? what is V w.r.t. our system (see below) ??? what is the output ??? */
keeloq_round(V) :=
  mod(V[1] + V[2] + V[3] + keeloq_nlf(V[4],V[5],V[6],V[7],V[8]),2)$
/* (8+1)-bit boolean function for the KeeLoq round: */
keeloq_round_bf(V) := [mod(keeloq_round(rest(V,-1))+V[9]+1, 2)]$


/* Encrypting plaintext P, a boolean list of length 32, with key K, a boolean
   list of length 64 for r-round KeeLoq: */
/* ??? what is a "boolean list" ??? what is the output ??? */
keeloq_encryption_gen(r, P,K) := block([P_c : reverse(P), K_rev : reverse(K)],
  for i : 0 thru r-1 do
    P_c : endcons(
      keeloq_round([K_rev[mod(i,64)+1],P_c[i+1],P_c[i+16+1],P_c[i+31+1],
        P_c[i+26+1],P_c[i+20+1],P_c[i+9+1],P_c[i+1+1]]), P_c),
  return(reverse(rest(P_c, length(P_c) - 32))))$
keeloq_encryption(P,K) := keeloq_encryption_gen(528,P,K)$

/* ??? Where is the validation information ??? */


/*!
\endhtmlonly
*/
