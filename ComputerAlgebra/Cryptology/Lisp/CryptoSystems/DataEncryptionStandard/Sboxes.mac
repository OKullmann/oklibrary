/* Oliver Kullmann, 19.3.2011 (Swansea) */
/* Copyright 2011, 2012 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Cryptology/Lisp/CryptoSystems/DataEncryptionStandard/Sboxes.mac
  \brief The 8 S-boxes of DES

Use by

oklib_load("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/DataEncryptionStandard/Sboxes.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/NumberTheory/Lisp/Auxiliary.mac")$
oklib_include("OKlib/ComputerAlgebra/Satisfiability/Lisp/FiniteFunctions/Basics.mac")$

des_sbox_matrices : [
matrix(
[14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7],
[0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8],
[4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0],
[15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13]
),
matrix(
[15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10],
[3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5],
[0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15],
[13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9]
),
matrix(
[10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8],
[13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1],
[13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7],
[1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12]
),
matrix(
[7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15],
[13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9],
[10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4],
[3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14]
),
matrix(
[2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9],
[14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6],
[4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14],
[11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3]
),
matrix(
[12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11],
[10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8],
[9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6],
[4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13]
),
matrix(
[4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1],
[13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6],
[1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2],
[6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12]
),
matrix(
[13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7],
[1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2],
[7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8],
[2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11]
)
]$

/* Converting a des-matrix to a 6 x 4 boolean function: */
desmatrix2bf(M) := buildq([M], lambda([x],
 block([
  row :  polyadic2int([x[1],x[6]],2)+1,
  column : polyadic2int([x[2],x[3],x[4],x[5]],2)+1],
   int2polyadic_padd(M[row,column], 2, 4)
 )))$

/* The i-th DES S-box as 6 x 4 boolean function: */
des_sbox_bf(i) := desmatrix2bf(des_sbox_matrices[i])$
/* The j-th output bit of the i-th DES S-box as a 6x1 boolean function: */
des_6t1_sbox_bf(i,j) := buildq([i,j], lambda([v], [des_sbox_bf(i)(v)[j]]))$

/* The combined DES "box" made by taking the conjunction of the i-th
   6x1-bit DES S-boxes for i in L, as an mxn boolean function.
   L is non-repeating, and in ascending numeric order, and has elements
   in {1,...,32} (indices for the 32 6x1-bit S-boxes).

   We have that:
     - m is the number of unique input variables across
       all i-th 6x1 DES S-boxes for i in L;
     - n is the number of elements in L;
     - The input to des_sbox_bf(L) should be the inputs to the DES S-boxes
       specified in L, in the order given by L, where "variables" shared by
       multiple S-boxes are not repeated in the input (they occur at their
       earliest index).
     - The output of des_sbox_bf(L) has the same size as L, one output-bit
       for each 6x1-bit S-box in indexed in L.

*/
des_comb_sbox_bf(L) := buildq([L], lambda([x], block(
    [V_res : [], curr_index : 1, last_output_bit : 0],
  sbox6t1_to_6t4sbox_ind_ : lambda([i], floor((i-1)/4)+1),
  sbox6t1_to_6t4sbox_out_ind_ : lambda([i], mod(i-1,4)+1),
  in_same_6t4_sbox : lambda([i,j],
    is(sbox6t1_to_6t4sbox_ind_(i) = sbox6t1_to_6t4sbox_ind_(j))),
  for i : 1 thru length(L) do block([sbox6t1_inputs],
    sbox6t1_inputs : create_list(x[j],j, curr_index, curr_index + 5),
    if i < length(L) and not(in_same_6t4_sbox(L[i],L[i+1])) then
      curr_index : curr_index + 6,
    V_res : cons(
      des_6t1_sbox_bf(sbox6t1_to_6t4sbox_ind_(L[i]),
                      sbox6t1_to_6t4sbox_out_ind_(L[i]))(x)[1], V_res)),
  return(reverse(V_res)))))$
/* For example, we have that:
     - des_comb_sbox_bf([1,2,3,4]) = des_sbox_bf(1)
     - des_comb_sbox_bf([5,6,7,8]) = des_sbox_bf(2)
     - des_comb_sbox_bf([9,10,11,12]) = des_sbox_bf(3)
     - des_comb_sbox_bf([1,2,3,4,5,6,7,8]) is the combination of
       des_sbox_bf(1) and des_sbox_bf(2).
     - des_comb_sbox_bf([1,2,3,4,5,6]) is the combination of
       des_sbox_bf(1) and half of des_sbox_bf(2).
*/



/*!
\endhtmlonly
*/
