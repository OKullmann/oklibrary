/* Oliver Kullmann, 20.3.2011 (Swansea) */
/* Copyright 2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Cryptology/Lisp/CryptoSystems/DataEncryptionStandard/Cipher.mac
  \brief DES encryption and decryption

Use by

oklib_load("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/DataEncryptionStandard/Cipher.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/DataEncryptionStandard/RoundFunction.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/DataEncryptionStandard/KeySchedule.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$

des_init_permutation : [
58,50,42,34,26,18,10,2,60,52,44,36,28,20,12,4,
62,54,46,38,30,22,14,6,64,56,48,40,32,24,16,8,
57,49,41,33,25,17,9,1,59,51,43,35,27,19,11,3,
61,53,45,37,29,21,13,5,63,55,47,39,31,23,15,7]$

des_final_permutation : [
40,8,48,16,56,24,64,32,39,7,47,15,55,23,63,31,
38,6,46,14,54,22,62,30,37,5,45,13,53,21,61,29,
36,4,44,12,52,20,60,28,35,3,43,11,51,19,59,27,
34,2,42,10,50,18,58,26,33,1,41,9,49,17,57,25]$

/* text and key are boolean vectors of length 64: */
des_template(text, roundkeys) := block([previous,current,result],
 text : map(lambda([x],text[x]), des_init_permutation),
 previous : take_l(32,text),
 current : rest(text,32),
 for key in roundkeys do block(
  [new : des_round(previous,current,key)],
   previous : current,
   current : new
 ),
 result : append(current,previous),
 map(lambda([x],result[x]), des_final_permutation))$

/* plaintext, ciphertext and key are boolean vectors of length 64: */
des_encryption(plaintext, key) :=
 des_template(plaintext, des_round_keys(key))$
des_decryption(ciphertext, key) :=
 des_template(ciphertext, reverse(des_round_keys(key)))$

/* variants with an arbitrary number of rounds */
des_encryption_gen(r, plaintext, key) :=
  des_template(plaintext, take_elements(r,des_round_keys(key)))$
des_decryption_gen(r, plaintext, key) :=
  des_template(plaintext, reverse(take_elements(r,des_round_keys(key))))$

des_validation_key : [
0,0,0,0, 0,0,0,1, 0,0,1,0, 0,0,1,1, 0,1,0,0, 0,1,0,1, 0,1,1,0, 0,1,1,1,
1,0,0,0, 1,0,0,1, 1,0,1,0, 1,0,1,1, 1,1,0,0, 1,1,0,1, 1,1,1,0, 1,1,1,1]$

des_validation_plain :  [
0,0,0,0, 0,0,0,1, 0,0,1,0, 0,0,1,1, 0,1,0,0, 0,1,0,1, 0,1,1,0, 0,1,1,1,
1,0,0,0, 1,0,0,1, 1,0,1,0, 1,0,1,1, 1,1,0,0, 1,1,0,1, 1,1,1,0, 0,1,1,1]$

des_validation_cipher : [
1,1,0,0, 1,0,0,1, 0,1,0,1, 0,1,1,1, 0,1,0,0, 0,1,0,0, 0,0,1,0, 0,1,0,1,
0,1,1,0, 1,0,1,0, 0,1,0,1, 1,1,1,0, 1,1,0,1, 0,0,1,1, 0,0,0,1, 1,1,0,1]$

/* is(des_encryption(des_validation_plain,des_validation_key)=des_validation_cipher)
   = true
   is(des_decryption(des_validation_cipher, des_validation_key)=des_validation_plain)
   = true
*/

/* The hexadecimal versions: */
des_encryption_hex(plaintext, key) :=
 binv2hexstr(des_encryption(hexstr2binv(plaintext), hexstr2binv(key)))$
des_decryption_hex(ciphertext, key) :=
 binv2hexstr(des_decryption(hexstr2binv(ciphertext), hexstr2binv(key)))$
des_encryption_hex_gen(r, plaintext, key) :=
 binv2hexstr(des_encryption_gen(r, hexstr2binv(plaintext), hexstr2binv(key)))$
des_decryption_hex_gen(r, ciphertext, key) :=
 binv2hexstr(des_decryption_gen(r, hexstr2binv(ciphertext), hexstr2binv(key)))$

des_validation_key_hex : "15FBC08D31B0D521"$
des_validation_plain_hex : "038E596D4841D03B"$
des_validation_cipher_hex : "A2FB6032638EC79D"$

/* is(des_encryption_hex(des_validation_plain_hex,des_validation_key_hex)=des_validation_cipher_hex)
   = true
   is(des_decryption_hex(des_validation_cipher_hex, des_validation_key_hex)=des_validation_plain_hex)
   = true
*/

/*!
\endhtmlonly
*/
