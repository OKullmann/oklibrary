/* Matthew Gwynne, 15.2.2008 (Swansea) */
/* Copyright 2008, 2009, 2010, 2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/tests/AdvancedEncryptionStandard.mac
  \brief Tests for Advanced Encryption Standard

Use by

oklib_load("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/tests/AdvancedEncryptionStandard.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/ByteField.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/AdvancedEncryptionStandard.mac")$


kill(f)$

/* *********
   * S box *
   *********
*/

okltest_rijn_sbox_vec(f) := block(
  assert(f([0,0,0,0,0,0,0,0]) = [0,1,1,0,0,0,1,1]),
  assert(f([0,0,0,0,0,0,0,1]) = [0,1,1,1,1,1,0,0]),
  assert(f([0,1,0,1,0,0,1,0]) = [0,0,0,0,0,0,0,0]),
  assert(f([1,1,1,1,1,1,1,1]) = [0,0,0,1,0,1,1,0]),
  if oklib_test_level=0 then return(true),
  for b : 0 thru 255 do
    assert(f(nat2vecbin_rijn(b)) = nat2vecbin_rijn(rijn_lookup_sbox_nat(b))),
  true)$

okltest_rijn_sbox_nat(f) := block(
  assert(f(0) = 99),
  assert(f(82) = 0),
  assert(f(255) = 22),
  if oklib_test_level=0 then return(true),
  for b : 0 thru 255 do
    assert(f(b) = rijn_lookup_sbox_nat(b)),
  true)$

okltest_rijn_sbox(f) := block(
  assert(f(0) = x^6+x^5+x+1),
  assert(f(x^6+x^4+x) = 0),
  assert(f(x^7+x^6+x^5+x^4+x^3+x^2+x+1) = x^4+x^2+x),
  if oklib_test_level=0 then return(true),
  for b : 0 thru 255 do
    assert(f(b) = rijn_lookup_sbox(b)),
  true)$

okltest_rijn_inv_sbox_vec(f) := block(
  assert(f([0,1,1,0,0,0,1,1]) = [0,0,0,0,0,0,0,0]),
  assert(f([0,1,1,1,1,1,0,0]) = [0,0,0,0,0,0,0,1]),
  assert(f([0,0,0,0,0,0,0,0]) = [0,1,0,1,0,0,1,0]),
  assert(f([0,0,0,1,0,1,1,0]) = [1,1,1,1,1,1,1,1]),
  if oklib_test_level=0 then return(true),
  for b : 0 thru 255 do
    assert(f(nat2vecbin_rijn(b)) =
      nat2vecbin_rijn(rijn_lookup_inv_sbox_nat(b)))
  )$

okltest_rijn_inv_sbox_nat(f) := block(
  assert(f(0) = 82),
  assert(f(99) = 0),
  assert(f(22) = 255),
  if oklib_test_level=0 then return(true),
  for b : 0 thru 255 do
    assert(f(b) = rijn_lookup_inv_sbox_nat(b)),
  true)$

okltest_rijn_inv_sbox(f) := block(
  assert(f(0) = x^6+x^4+x),
  assert(f(x^6+x^5+x+1) = 0),
  assert(f(x^4+x^2+x) = x^7+x^6+x^5+x^4+x^3+x^2+x+1),
  if oklib_test_level=0 then return(true),
  for b : 0 thru 255 do
    assert(f(b) = rijn_lookup_inv_sbox(b)),
  true)$

okltest_rijn_sbox_pmtf(f) := (
  assert(create_list(f(i)-1,i,1,256) =
    [99,124,119,123,242,107,111,197,48,1,103,43,254,215,171,118,202,130,201,
     125,250,89,71,240,173,212,162,175,156,164,114,192,183,253,147,38,54,63,
     247,204,52,165,229,241,113,216,49,21,4,199,35,195,24,150,5,154,7,18,128,
     226,235,39,178,117,9,131,44,26,27,110,90,160,82,59,214,179,41,227,47,132,
     83,209,0,237,32,252,177,91,106,203,190,57,74,76,88,207,208,239,170,251,
     67,77,51,133,69,249,2,127,80,60,159,168,81,163,64,143,146,157,56,245,188,
     182,218,33,16,255,243,210,205,12,19,236,95,151,68,23,196,167,126,61,100,
     93,25,115,96,129,79,220,34,42,144,136,70,238,184,20,222,94,11,219,224,50,
     58,10,73,6,36,92,194,211,172,98,145,149,228,121,231,200,55,109,141,213,
     78,169,108,86,244,234,101,122,174,8,186,120,37,46,28,166,180,198,232,
     221,116,31,75,189,139,138,112,62,181,102,72,3,246,14,97,53,87,185,134,
     193,29,158,225,248,152,17,105,217,142,148,155,30,135,233,206,85,40,223,
     140,161,137,13,191,230,66,104,65,153,45,15,176,84,187,22]),
  true)$

okltest_rijn_inv_sbox_pmtf(f) := (
  assert(create_list(f(i)-1,i,1,256) = 
  [82,9,106,213,48,54,165,56,191,64,163,158,129,243,215,251,124,227,57,130,
   155,47,255,135,52,142,67,68,196,222,233,203,84,123,148,50,166,194,35,61,
   238,76,149,11,66,250,195,78,8,46,161,102,40,217,36,178,118,91,162,73,109,
   139,209,37,114,248,246,100,134,104,152,22,212,164,92,204,93,101,182,146,
   108,112,72,80,253,237,185,218,94,21,70,87,167,141,157,132,144,216,171,0,
   140,188,211,10,247,228,88,5,184,179,69,6,208,44,30,143,202,63,15,2,193,175,
   189,3,1,19,138,107,58,145,17,65,79,103,220,234,151,242,207,206,240,180,230,
   115,150,172,116,34,231,173,53,133,226,249,55,232,28,117,223,110,71,241,26,
   113,29,41,197,137,111,183,98,14,170,24,190,27,252,86,62,75,198,210,121,32,
   154,219,192,254,120,205,90,244,31,221,168,51,136,7,199,49,177,18,16,89,39,
   128,236,95,96,81,127,169,25,181,74,13,45,229,122,159,147,201,156,239,160,
   224,59,77,174,42,245,176,200,235,187,60,131,83,153,97,23,43,4,126,186,119,
   214,38,225,105,20,99,85,33,12,125]),
  true)$

/* *************
   * Sub-bytes *
   *************
*/

okltest_rijn_subbytes(f) := (
  assert(f(diagmatrix(4,0),rijn_sbox) =
    genmatrix(lambda([a,b],x^6+x^5+x+1),4,4)),
  assert(f(diagmatrix(4,1),rijn_sbox) =
    genmatrix(lambda([a,b],
      if a = b then x^6+x^5+x^4+x^3+x^2 else x^6+x^5+x+1),4,4)),
  assert(f(rijn_l2m(
        map(nat2polybin,[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])),rijn_sbox) =
    rijn_l2m(map(nat2polybin,
        [124,119,123,242,107,111,197,48,1,103,43,254,215,171,118,202]))),
  true)$

okltest_rijn_inv_subbytes(f) := (
  assert(f(genmatrix(lambda([a,b],x^6+x^5+x+1),4,4),rijn_inv_sbox) =
    diagmatrix(4,0)),
  assert(f(
      genmatrix(lambda([a,b],
          if a = b then x^6+x^5+x^4+x^3+x^2
          else x^6+x^5+x+1),4,4),rijn_inv_sbox) = diagmatrix(4,1)),
  assert(totaldisrep(f(rijn_l2m(map(nat2polybin,[124,119,123,242,107,111,197,
            48,1,103,43,254,215,171,118,202])),rijn_inv_sbox)) =
    rijn_l2m(map(nat2polybin, [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))),
  true)$
    


/* **************
   * Shift rows *
   **************
*/

okltest_aes_shiftrows(f) := block(
  assert(f(diagmatrix(4,0))=diagmatrix(4,0)),
  assert(f(genmatrix(lambda([a,b],[a,b]),4,4)) =
    genmatrix(lambda([a,b],[a,mod((b-1)+(a-1),4)+1]),4,4)),
  true)$

okltest_aes_inv_shiftrows(f) := block(
  assert(f(diagmatrix(4,0))=diagmatrix(4,0)),
  assert(f(genmatrix(lambda([a,b],[a,mod((b-1)+(a-1),4)+1]),4,4)) =
    genmatrix(lambda([a,b],[a,b]),4,4)),
  true)$


/* ***************
   * Mix columns *
   ***************
*/

okltest_rijn_mixcolumn(f) := block(
  assert(f(rijn_natl2m([0,0,0,0])) = rijn_natl2m([0,0,0,0])),
  assert(f(rijn_natl2m([50,67,7,52]))=
    rijn_natl2m([146, 137, 35, 122])),
  true)$

okltest_rijn_inv_mixcolumn(f) := block(
  assert(f(rijn_natl2m([0,0,0,0])) = rijn_natl2m([0,0,0,0])),
  assert(f(rijn_natl2m([146, 137, 35, 122]))=
    rijn_natl2m([50,67,7,52])),
  true)$

okltest_rijn_mixcolumns(f) := block(
  assert(f(rijn_natl2m([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
        rijn_mixcolumn) = rijn_natl2m([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])),
  assert(f(rijn_natl2m(
          [50,136,49,224,67,90,49,55,246,48,152,7,168,141,162,52]),
        rijn_mixcolumn)= rijn_natl2m(
      [54,138,227,52,110,147,34,192,56,34,228,167,81,96,38,164])),
  true)$

okltest_rijn_inv_mixcolumns(f) := block(
  assert(f(rijn_natl2m([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
        rijn_inv_mixcolumn) = rijn_natl2m([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])),
  assert(f(rijn_natl2m(
          [54,138,227,52,110,147,34,192,56,34,228,167,81,96,38,164])
      ,rijn_inv_mixcolumn)= rijn_natl2m(
    [50,136,49,224,67,90,49,55,246,48,152,7,168,141,162,52])),
  true)$ 


/* *****************
   * Key expansion *
   *****************
*/

okltest_aes_key_expansion(f) := block(
  /* Extreme Cases for sbox */
  assert(f(rijn_natl2m([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),10,rijn_lookup_sbox) =  map(rijn_natl2m,
      [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
       [98,99,99,99,98,99,99,99,98,99,99,99,98,99,99,99],
       [155,152,152,201,249,251,251,170,155,152,152,201,249,251,251,170],
       [144,151,52,80,105,108,207,250,242,244,87,51,11,15,172,153],
       [238,6,218,123,135,106,21,129,117,158,66,178,126,145,238,43],
       [127,46,43,136,248,68,62,9,141,218,124,187,243,75,146,144],
       [236,97,75,133,20,37,117,140,153,255,9,55,106,180,155,167],
       [33,117,23,135,53,80,98,11,172,175,107,60,198,27,240,155],
       [14,249,3,51,59,169,97,56,151,6,10,4,81,29,250,159],
       [177,212,216,226,138,125,185,218,29,123,179,222,76,102,73,65],
       [180,239,91,203,62,146,226,17,35,233,81,207,111,143,24,142]])),
  true)$


/* *********************************
   * AES encryption and decryption *
   *********************************
*/

okltest_aes_round(f) := block(
  assert(f(rijn_natl2m([25,160,154,233,61,244,198,248,227,226,141,72,190,43,
    42,8]),rijn_natl2m([160,136,35,42,250,84,163,108,254,44,57,118,23,177,57,5]),
    rijn_lookup_sbox,rijn_mixcolumn)=
    rijn_natl2m([164,238,162,207,252,114,239,68,45,86,113,142,141,81,242,28])),
  assert(f(rijn_natl2m([72,103,77,214,108,29,227,95,78,157,177,88,238,13,56,
    231]),rijn_natl2m([239,168,182,219,68,82,113,11,165,91,37,173,65,127,59,0]),
    rijn_lookup_sbox,rijn_mixcolumn) =
    rijn_natl2m([224,126,108,114,247,65,112,85,181,48,74,109,254,31,10,56])),
  true)$

okltest_aes_inv_round(f) := block(
  assert(f(rijn_natl2m([164,238,162,207,252,114,239,68,45,86,113,142,141,81,
    242,28]),rijn_natl2m([160,136,35,42,250,84,163,108,254,44,57,118,23,177,57,5]),
    rijn_lookup_inv_sbox,rijn_inv_mixcolumn)=
    rijn_natl2m([25,160,154,233,61,244,198,248,227,226,141,72,190,43,42,8])),
  assert(f(rijn_natl2m([224,126,108,114,247,65,112,85,181,48,74,109,254,31,10,
    56]),rijn_natl2m([239,168,182,219,68,82,113,11,165,91,37,173,65,127,59,0]),
    rijn_lookup_inv_sbox,rijn_inv_mixcolumn) =
    rijn_natl2m([72,103,77,214,108,29,227,95,78,157,177,88,238,13,56,231])),
  true)$

okltest_aes_encrypt_gen(f) := block(
  assert(f(rijn_natl2m([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),rijn_natl2m([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),10,
    rijn_lookup_sbox,rijn_mixcolumn) = 
    rijn_natl2m([102,233,75,212,239,138,44,59,136,76,250,89,202,52,43,46])),
  assert(f(rijn_natl2m(
        [50,136,49,224,67,90,49,55,246,48,152,7,168,141,162,52]),
      rijn_natl2m([43,40,171,9,126,174,247,207,21,210,21,79,22,166,136,60]),10,
      rijn_lookup_sbox,rijn_mixcolumn) = 
    rijn_natl2m([87,22,170,250,44,198,139,155,139,155,229,13,48,227,242,6])),
  true)$

okltest_aes_decrypt_gen(f) := block(
  assert(f(rijn_natl2m(
        [87,22,170,250,44,198,139,155,139,155,229,13,48,227,242,6]),
      rijn_natl2m([43,40,171,9,126,174,247,207,21,210,21,79,22,166,136,60]),10,
      rijn_lookup_sbox,rijn_lookup_inv_sbox,rijn_inv_mixcolumn) = 
    rijn_natl2m([50,136,49,224,67,90,49,55,246,48,152,7,168,141,162,52])),
  assert(f(rijn_natl2m([102,233,75,212,239,138,44,59,136,76,250,89,202,52,43,46]),rijn_natl2m([0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0]),10,rijn_sbox,rijn_lookup_inv_sbox,
    rijn_inv_mixcolumn) = 
    rijn_natl2m([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])),
  true)$

/* Performs integration testing on the AES encryption and decryption functions */
/* MG : Should this be higher test levels of the aes_encrypt and aes_decrypt
 * tests? */
/* OK: What is this function doing??? */
okltest_aes(f_e,f_d) := block([inputList, outputList],
  inputList : [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  keyList : [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  for i : 0 thru 20 do
    inputList : f_e(inputList,keyList,rijn_lookup_sbox,
      rijn_mixcolumn,rijn_nataddl),
  for i : 0 thru 20 do 
    inputList : f_d(inputList,keyList,rijn_lookup_sbox,
      rijn_lookup_inv_sbox,rijn_inv_mixcolumn, rijn_aes_log_gf2t8_add),
  assert(inputList = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
  true)$


/* *************************************
   * Convenience instantiations of AES *
   *************************************
*/

/* The generic aes-encryption test function, where the inputs as well as the
   output is given as a list of polynomials:
*/
okltest_aes_encrypt_generic(f) := block([V1],
/* Test values according to [The Design of Rijndael; Daemen, Rijmen, 
   Appendix D.3]
*/
  V1 : rijn_natl2m(map(hex2int, ["66","E9","4B","D4","EF","8A","2C","3B","88","4C","FA","59","CA","34","2B","2E"])),
  assert(f(diagmatrix(4,0),diagmatrix(4,0),10) = V1),
  assert(f(V1, diagmatrix(4,0),10) = rijn_natl2m(map(hex2int, ["F7","95","BD","4A","52","E2","9E","D7","13","D3","13","FA","20","E9","8D","BC"]))),
  true)$

/* The generic aes-encryption test function, where the inputs as well as the
   output is given as a list of bytes:
*/
okltest_aes_encrypt_nat_generic(f) := block([V1],
/* Test values according to [The Design of Rijndael; Daemen, Rijmen, 
   Appendix D.3]
*/
  V1 : map(hex2int, ["66","E9","4B","D4","EF","8A","2C","3B","88","4C","FA","59","CA","34","2B","2E"]),
  assert(f(pad_block_16([]),pad_block_16([]),10) = V1),
  assert(f(V1, pad_block_16([]),10) = map(hex2int, ["F7","95","BD","4A","52","E2","9E","D7","13","D3","13","FA","20","E9","8D","BC"])),
  true)$

/* The generic aes-decryption test function, where the inputs as well as the
   output is given as a list of polynomials:
*/
okltest_aes_decrypt_generic(f) := block([V1],
/* Test values according to [The Design of Rijndael; Daemen, Rijmen, 
   Appendix D.3]
*/
  V1 : rijn_natl2m(map(hex2int, ["66","E9","4B","D4","EF","8A","2C","3B","88","4C","FA","59","CA","34","2B","2E"])),
  assert(totaldisrep(f(rijn_natl2m(map(hex2int, ["F7","95","BD","4A","52","E2","9E","D7","13","D3","13","FA","20","E9","8D","BC"])), diagmatrix(4,0),10)) = V1),
  assert(f(V1, diagmatrix(4,0),10) = diagmatrix(4,0)),
  true)$

/* The generic aes-decryption test function, where the inputs as well as the
   output is given as a list of bytes:
*/
okltest_aes_decrypt_nat_generic(f) := block([V1],
/* Test values according to [The Design of Rijndael; Daemen, Rijmen, 
   Appendix D.3]
*/
  V1 : map(hex2int, ["66","E9","4B","D4","EF","8A","2C","3B","88","4C","FA","59","CA","34","2B","2E"]),
  assert(totaldisrep(f(map(hex2int, ["F7","95","BD","4A","52","E2","9E","D7","13","D3","13","FA","20","E9","8D","BC"]), pad_block_16([]),10)) = V1),

  assert(f(V1, pad_block_16([]),10) = pad_block_16([])),
  true)$

okltest_aes_encrypt_bin(f) := (
  assert(f(create_list(0,i,1,128),create_list(0,i,1,128),10) =
    hexstr2binv("66E94BD4EF8A2C3B884CFA59CA342B2E")),
  assert(
    f(hexstr2binv("3243F6A8885A308D313198A2E0370734"),
      hexstr2binv("2B7E151628AED2A6ABF7158809CF4F3C"),2) =
      hexstr2binv("AA8F5F0361DDE3EF82D24AD26832469A")),
  true)$

okltest_aes_decrypt_bin(f) := (
  assert(
    f(hexstr2binv("66E94BD4EF8A2C3B884CFA59CA342B2E"),
      create_list(0,i,1,128),10) = create_list(0,i,1,128)),
  assert(
    f(hexstr2binv("AA8F5F0361DDE3EF82D24AD26832469A"),
      hexstr2binv("2B7E151628AED2A6ABF7158809CF4F3C"),2) =
    hexstr2binv("3243F6A8885A308D313198A2E0370734")),
  true)$

okltest_aes_encrypt_hex(f) := (
  assert(f("0","0",10) = "66E94BD4EF8A2C3B884CFA59CA342B2E"),
  assert(f("00","000",10) = "66E94BD4EF8A2C3B884CFA59CA342B2E"),
    assert(f("3243F6A8885A308D313198A2E0370734",
        "2B7E151628AED2A6ABF7158809CF4F3C",2) =
      "AA8F5F0361DDE3EF82D24AD26832469A"),
  true)$

okltest_aes_decrypt_hex(f) := (
  assert(f("66E94BD4EF8A2C3B884CFA59CA342B2E","0",10) = lpad("","0",32)),
  assert(f("66E94BD4EF8A2C3B884CFA59CA342B2E","000",10) = lpad("","0",32)),
  assert(f("AA8F5F0361DDE3EF82D24AD26832469A",
      "2B7E151628AED2A6ABF7158809CF4F3C",2) =
    "3243F6A8885A308D313198A2E0370734"),
  true)$


okltest_aes_int(f) := (
  assert(f(0,0,10) = 136792598789324718765670228683992083246), 
  true)$

/*!
\endhtmlonly
*/
