/* Matthew Gwynne, 28.1.2010 (Swansea) */
/* Copyright 2010, 2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/tests/SmallScaleAdvancedEncryptionStandard.mac
  \brief Tests for small scale Advanced Encryption Standard

Use by

oklib_load("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/tests/SmallScaleAdvancedEncryptionStandard.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/ByteField.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/Block.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/SmallScaleAdvancedEncryptionStandard.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/AdvancedEncryptionStandard.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/tests/AdvancedEncryptionStandard.mac")$
oklib_plain_include(eigen)$ /* (for function columnvector) */


kill(f)$

/* **************************************
   * Special bit-linear byte operations *
   **************************************
*/

okltest_ss_sbox_linmap_gen(f) := block(
  assert(f(0,2,4,ss_polynomial_2_4,ss_sbox_matrix(2,4)) = 0),
  assert(f(1,2,4,ss_polynomial_2_4,ss_sbox_matrix(2,4)) = x^3+x^2+1),
  assert(f(x,2,4,ss_polynomial_2_4,ss_sbox_matrix(2,4)) = x^3+x+1),
  true)$

okltest_ss_mul_w_sbox_linmap_gen(f) := block(
  assert(okltest_ss_sbox_linmap_gen(
      buildq([f], lambda([field_element,b,e,mod_poly, sbox_matrix],
          f(field_element,1,b,e,mod_poly, sbox_matrix))))),
  assert(f(x,x,2,4,ss_polynomial_2_4,ss_sbox_matrix(2,4)) = x^2+1),
  true)$


/* *********
   * S box *
   *********
*/

okltest_ss_sbox_linmap_gen(f) := block(
  assert(f(0,2,4,ss_polynomial_2_4,ss_sbox_matrix(2,4)) = 0),
  assert(f(1,2,4,ss_polynomial_2_4,ss_sbox_matrix(2,4)) = x^3+x^2+1),
  assert(f(x,2,4,ss_polynomial_2_4,ss_sbox_matrix(2,4)) = x^3+x+1),
  true)$

okltest_ss_sbox_gen(f) := block(
  /* Test vector for b=2 e=4 generated using "Small Scale Variants of the AES
  (SR) Polynomial System Generator" in Sage */
  assert(create_list(poly2nat(
        f(nat2poly(i,2),2,4,ss_polynomial_2_4,
          ss_sbox_matrix_2_4,ss_affine_constant_2_4),2),i,0,15) =
    [6,11,5,4,2,14,7,10,9,13,15,12,3,1,0,8]),
  assert(f(0,2,8,ss_polynomial_2_8,
      ss_sbox_matrix_2_8,ss_affine_constant_2_8) = x^6+x^5+x+1),
  assert(f(x^6+x^4+x,2,8,ss_polynomial_2_8,
      ss_sbox_matrix_2_8,ss_affine_constant_2_8) = 0),
  assert(f(x^7+x^6+x^5+x^4+x^3+x^2+x+1,2,8,ss_polynomial_2_8,
      ss_sbox_matrix_2_8,ss_affine_constant_2_8) = x^4+x^2+x),
  if oklib_test_level=0 then return(true),
  for b : 0 thru 255 do
    assert(f(b,2,8,ss_polynomial_2_8,
      ss_sbox_matrix_2_8,ss_affine_constant_2_8) = rijn_lookup_sbox(b)),
  true)$

okltest_ss_inv_sbox_gen(f) := block(
  assert(create_list(poly2nat(
        f(nat2poly(i,2),2,4,ss_polynomial_2_4,
          ss_inv_sbox_matrix_2_4,ss_inv_affine_constant_2_4),2),i,
      [6,11,5,4,2,14,7,10,9,13,15,12,3,1,0,8]) =
    [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]),
  assert(f(0,2,8,ss_polynomial_2_8,
      ss_inv_sbox_matrix_2_8,ss_inv_affine_constant_2_8) = x^6+x^4+x),
  assert(f(x^6+x^5+x+1,2,8,ss_polynomial_2_8,
      ss_inv_sbox_matrix_2_8,ss_inv_affine_constant_2_8) = 0),
  assert(f(x^4+x^2+x,2,8,ss_polynomial_2_8,
      ss_inv_sbox_matrix_2_8,ss_inv_affine_constant_2_8) =
    x^7+x^6+x^5+x^4+x^3+x^2+x+1),
  if oklib_test_level=0 then return(true),
  for b : 0 thru 255 do
    assert(f(b,2,8,ss_polynomial_2_8,
      ss_inv_sbox_matrix_2_8,ss_inv_affine_constant_2_8) =
    rijn_lookup_inv_sbox(b)),
  true)$


okltest_ss_sbox_bf(f) := (
  assert(okltest_rijn_sbox_vec(buildq([f], lambda([V],f(V,2,8))))),
  true)$

okltest_ss_sbox_w_add_bf(f) := (
  assert(f([0,0,0,0,0,0,0,0],2,4) = [0,1,1,0]),
  assert(f([0,0,0,0,0,0,0,1],2,4) = [0,1,1,1]),
  assert(f([0,0,0,0,1,0,0,1],2,4) = [1,1,1,1]),
  assert(f([0,0,0,0,1,1,0,1],2,4) = [1,0,1,1]),
  assert(f([1,1,1,1,0,0,0,0],2,4) = [1,0,0,0]),
  assert(f([1,1,1,1,1,1,1,1],2,4) = [0,1,1,1]),
  assert(f([1,0,1,1,1,0,1,0],2,4) = [0,1,1,0]),
  true)$

okltest_ss_sbox_w_mul_bf(f) := (
  assert(f([0,0,0,0],1,2,4) = [0,1,1,0]),
  assert(f([0,0,0,1],1,2,4) = [1,0,1,1]),
  assert(f([1,0,0,1],1,2,4) = [1,1,0,1]),
  assert(f([0,0,0,0],x,2,4) = [1,1,0,0]),
  assert(f([0,0,0,1],x,2,4) = [0,1,0,1]),
  assert(f([1,0,0,1],x,2,4) = [1,0,0,1]),
  true)$


/* *************
   * Sub-bytes *
   *************
*/


okltest_ss_subbytes(f) := block([sbox_f],
  sbox_f : lambda([p],ss_sbox(p,2,8)),
  assert(f(diagmatrix(4,0),sbox_f) =
    genmatrix(lambda([a,b],x^6+x^5+x+1),4,4)),
  assert(f(diagmatrix(4,1),sbox_f) =
    genmatrix(lambda([a,b],
      if a = b then x^6+x^5+x^4+x^3+x^2 else x^6+x^5+x+1),4,4)),
  assert(f(rijn_l2m(
        map(nat2polybin,[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])),sbox_f) =
    rijn_l2m(map(nat2polybin,
        [124,119,123,242,107,111,197,48,1,103,43,254,215,171,118,202]))),
  true)$

okltest_ss_inv_subbytes(f) := block([inv_sbox_f],
  inv_sbox_f : lambda([p], ss_inv_sbox(p,2,8)),
  assert(f(genmatrix(lambda([a,b],x^6+x^5+x+1),4,4),inv_sbox_f) =
    diagmatrix(4,0)),
  assert(f(
      genmatrix(lambda([a,b],
          if a = b then x^6+x^5+x^4+x^3+x^2
          else x^6+x^5+x+1),4,4),inv_sbox_f) = diagmatrix(4,1)),
  assert(totaldisrep(f(rijn_l2m(map(nat2polybin,[124,119,123,242,107,111,197,
            48,1,103,43,254,215,171,118,202])),inv_sbox_f)) =
    rijn_l2m(map(nat2polybin, [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))),
  true)$

/* **************
   * Shift rows *
   **************
*/

okltest_ss_shiftrows(f) := block(
  assert(f(diagmatrix(4,0))=diagmatrix(4,0)),
  assert(f(apply(matrix,create_list([0,1,x,x+1],i,0,3))) =
      apply(matrix,create_list(rotate([0,1,x,x+1],-i),i,0,3))),
  true)$

okltest_ss_inv_shiftrows(f) := block(
  assert(f(diagmatrix(4,0))=diagmatrix(4,0)),
  assert(f(apply(matrix,create_list(rotate([0,1,x,x+1],-i),i,0,3))) =
      apply(matrix,create_list([0,1,x,x+1],i,0,3))),
  true)$

/* ***************
   * Mix columns *
   ***************
*/

okltest_ss_mixcolumn_gen(f) := block(
  assert(f(ss_natl2m([0,0,0,0],2,4),2,8,
      ss_polynomial_2_8,ss_mixcolumns_matrix_2_8_4) =
    ss_natl2m([0,0,0,0],2,4)),
  assert(f(ss_natl2m([50,67,7,52],2,4),2,8,
      ss_polynomial_2_8,ss_mixcolumns_matrix_2_8_4) =
    ss_natl2m([146, 137, 35, 122],2,4)),
  true)$

okltest_ss_mixcolumn_gen_bf(f) := block(
  assert(f(create_list(0,i,1,32),2,8,
      ss_polynomial_2_8,ss_mixcolumns_matrix_2_8_4) =
    create_list(0,i,1,32)),
  assert(f(
      [0,0,1,1,0,0,1,0,0,1,0,0,0,0,1,1,0,0,0,0,0,1,1,1,0,0,1,1,0,1,0,0],2,8,
      ss_polynomial_2_8,ss_mixcolumns_matrix_2_8_4) =
    [1,0,0,1,0,0,1,0,1,0,0,0,1,0,0,1,0,0,1,0,0,0,1,1,0,1,1,1,1,0,1,0]),
  true)$

okltest_ss_mixcolumn_gen_boolm(f) := block(
  assert(f(2,4,ss_polynomial(2,4),ss_mixcolumns_matrix(2,4,4)) =
    matrix(
      [0,1,0,0,1,1,0,0,1,0,0,0,1,0,0,0],
      [0,0,1,0,0,1,1,0,0,1,0,0,0,1,0,0],
      [1,0,0,1,1,0,1,1,0,0,1,0,0,0,1,0],
      [1,0,0,0,1,0,0,1,0,0,0,1,0,0,0,1],
      [1,0,0,0,0,1,0,0,1,1,0,0,1,0,0,0],
      [0,1,0,0,0,0,1,0,0,1,1,0,0,1,0,0],
      [0,0,1,0,1,0,0,1,1,0,1,1,0,0,1,0],
      [0,0,0,1,1,0,0,0,1,0,0,1,0,0,0,1],
      [1,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0],
      [0,1,0,0,0,1,0,0,0,0,1,0,0,1,1,0],
      [0,0,1,0,0,0,1,0,1,0,0,1,1,0,1,1],
      [0,0,0,1,0,0,0,1,1,0,0,0,1,0,0,1],
      [1,1,0,0,1,0,0,0,1,0,0,0,0,1,0,0],
      [0,1,1,0,0,1,0,0,0,1,0,0,0,0,1,0],
      [1,0,1,1,0,0,1,0,0,0,1,0,1,0,0,1],
      [1,0,0,1,0,0,0,1,0,0,0,1,1,0,0,0])),
  assert(
    okltest_ss_mixcolumn_gen_bf(
      buildq([f],
        lambda([V,b,e,mod_poly,mixcolumns_matrix],
          ss_stand_vec(
            m2l_r(f(b,e,mod_poly,mixcolumns_matrix) . columnvector(V)),2))))),
  true)$

okltest_ss_round_column_gen_bf(f) := block(
    assert(f(create_list(0,i,1,32),2,8,
      ss_polynomial_2_8,ss_mixcolumns_matrix_2_8_4,
      lambda([p],ss_sbox(p,2,8))) =
    [0,1,1,0,0,0,1,1,0,1,1,0,0,0,1,1,0,1,1,0,0,0,1,1,0,1,1,0,0,0,1,1]),
  assert(f(
      [0,0,1,1,0,0,1,0,0,1,0,0,0,0,1,1,0,0,0,0,0,1,1,1,0,0,1,1,0,1,0,0],2,8,
      ss_polynomial_2_8,ss_mixcolumns_matrix_2_8_4,
      lambda([p],ss_sbox(p,2,8))) =
    [1,0,1,1,0,1,0,1,0,1,0,1,1,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0]),
  if oklib_test_level = 0 then return(true),
  okltest_ss_mixcolumn_gen_bf(
    buildq([f],lambda([V,b,e,poly,mc],f(V,b,e,poly,mc,lambda([p],p))))),
  true)$

okltest_ss_inv_mixcolumn_gen(f) := block(
  assert(f(ss_natl2m([0,0,0,0],2,4),2,8,
      ss_polynomial_2_8,ss_inv_mixcolumns_matrix_2_8_4) =
    ss_natl2m([0,0,0,0],2,4)),
  assert(f(ss_natl2m([146, 137, 35, 122],2,4),2,8,
      ss_polynomial_2_8,ss_inv_mixcolumns_matrix_2_8_4)=
    ss_natl2m([50,67,7,52],2,4)),
  true)$

okltest_ss_mixcolumns_gen(f) := block([mixcolumn_f],
  assert(f(matrix([0]), 2,4,ss_polynomial(2,4),
      ss_mixcolumns_matrix(2,4,1)) = matrix([0])),
  assert(f(ss_natl2m([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],2,4),
        2,8,ss_polynomial(2,8),ss_mixcolumns_matrix(2,8,4)) =
      ss_natl2m([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],2,4)),
  assert(f(ss_natl2m(
          [50,136,49,224,67,90,49,55,246,48,152,7,168,141,162,52],2,4),
        2,8,ss_polynomial(2,8), ss_mixcolumns_matrix(2,8,4))= ss_natl2m(
      [54,138,227,52,110,147,34,192,56,34,228,167,81,96,38,164],2,4)),
  true)$

okltest_ss_inv_mixcolumns_gen(f) := block([inv_mixcolumn_f],
  assert(f(ss_natl2m([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],2,4),
        2,8,ss_polynomial(2,8),ss_inv_mixcolumns_matrix(2,8,4)) =
      ss_natl2m([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],2,4)),
  assert(f(ss_natl2m(
          [54,138,227,52,110,147,34,192,56,34,228,167,81,96,38,164],2,4),
        2,8,ss_polynomial(2,8),ss_inv_mixcolumns_matrix(2,8,4))= ss_natl2m(
    [50,136,49,224,67,90,49,55,246,48,152,7,168,141,162,52],2,4)),
  true)$

/* *****************
   * Key expansion *
   *****************
*/

okltest_ss_key_expansion_gen(f) := block(
  assert(f(ss_natl2m([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],2,4),10,2,
      ss_polynomial_2_4,lambda([p],ss_sbox(p,2,4))) =
    map(lambda([p], ss_natl2m(p,2,4)),
      partition_elements(map(hex2int,charlist(
        sconcat("00000000000000007666766676667666211C577A211C577ACBE",
          "29C98BD84EAFEB3E22F7A92FE780015883AF2A80CD00C13B9294B81475",
          "14B6177483CC97B9830451A0D26C45D5C6D22042F22EB7FB7122958067",
          "AED055A17"))),16))),
  assert(f(ss_natl2m([0,0,0,0],2,2),10,2,
      ss_polynomial_2_4,lambda([p],ss_sbox(p,2,4))) =
    map(lambda([p], ss_natl2m(p,2,2)),
      partition_elements(map(hex2int,charlist(
        sconcat("000076762C5A92C88149632AF6DC07DB76AD3994B420"))),4))),
  assert(f(ss_natl2m([0],2,1),10,2,
      ss_polynomial_2_4,lambda([p],ss_sbox(p,2,4))) =
    map(lambda([p],ss_natl2m(p,2,2)),
      map("[",map(hex2int,charlist(sconcat("078D9E6B7F2")))))),
  /* Extreme Cases for sbox */
  assert(f(ss_natl2m([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],2,4),10,2,
      ss_polynomial_2_8,rijn_sbox) =
    map(lambda([p],ss_natl2m(p,2,4)),
      [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
       [98,99,99,99,98,99,99,99,98,99,99,99,98,99,99,99],
       [155,152,152,201,249,251,251,170,155,152,152,201,249,251,251,170],
       [144,151,52,80,105,108,207,250,242,244,87,51,11,15,172,153],
       [238,6,218,123,135,106,21,129,117,158,66,178,126,145,238,43],
       [127,46,43,136,248,68,62,9,141,218,124,187,243,75,146,144],
       [236,97,75,133,20,37,117,140,153,255,9,55,106,180,155,167],
       [33,117,23,135,53,80,98,11,172,175,107,60,198,27,240,155],
       [14,249,3,51,59,169,97,56,151,6,10,4,81,29,250,159],
       [177,212,216,226,138,125,185,218,29,123,179,222,76,102,73,65],
       [180,239,91,203,62,146,226,17,35,233,81,207,111,143,24,142]])),
  true)$

/* *********************************
   * AES encryption and decryption *
   *********************************
*/

okltest_ss_round_gen(f) := block(
  assert(f(matrix([0]),matrix([0]),2,4,ss_polynomial_2_4,
      lambda([a],ss_sbox(a,2,4)),ss_mixcolumns_matrix(2,4,1)) =
    matrix([x^2+x])),
  assert(f(ss_natl2m([25,160,154,233,61,244,198,248,227,226,141,72,190,43,
    42,8],2,4),ss_natl2m([160,136,35,42,250,84,163,108,254,44,57,118,23,177,57,5],2,4),2,8,ss_polynomial_2_8,
    rijn_lookup_sbox,ss_mixcolumns_matrix(2,8,4))=
    ss_natl2m([164,238,162,207,252,114,239,68,45,86,113,142,141,81,242,28],2,4)),
  assert(f(ss_natl2m([72,103,77,214,108,29,227,95,78,157,177,88,238,13,56,
    231],2,4),ss_natl2m([239,168,182,219,68,82,113,11,165,91,37,173,65,127,59,0],2,4),2,8,ss_polynomial_2_8,
    rijn_lookup_sbox,ss_mixcolumns_matrix(2,8,4)) =
    ss_natl2m([224,126,108,114,247,65,112,85,181,48,74,109,254,31,10,56],2,4)),
  true)$

okltest_ss_inv_round_gen(f) := block(
  assert(f(ss_natl2m([164,238,162,207,252,114,239,68,45,86,113,142,141,81,
    242,28],2,4),ss_natl2m([160,136,35,42,250,84,163,108,254,44,57,118,23,177,57,5],2,4),2,8,ss_polynomial(2,8),
    rijn_lookup_inv_sbox,ss_inv_mixcolumns_matrix(2,8,4))=
    ss_natl2m([25,160,154,233,61,244,198,248,227,226,141,72,190,43,42,8],2,4)),
  assert(f(ss_natl2m([224,126,108,114,247,65,112,85,181,48,74,109,254,31,10,
    56],2,4),ss_natl2m([239,168,182,219,68,82,113,11,165,91,37,173,65,127,59,0],2,4),2,8,ss_polynomial(2,8),
    rijn_lookup_inv_sbox,ss_inv_mixcolumns_matrix(2,8,4)) =
    ss_natl2m([72,103,77,214,108,29,227,95,78,157,177,88,238,13,56,231],2,4)),
  true)$


okltest_ss_encrypt_wf_gen(f) := block(
    assert(f(ss_natl2m([0],2,1),ss_natl2m([0],2,1),10,2,4,ss_polynomial_2_4,
        lambda([p],ss_sbox(p,2,4)),ss_mixcolumns_matrix(2,4,1)) =
      ss_natl2m([7],2,1)),
  assert(f(ss_natl2m([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],2,4),ss_natl2m([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],2,4),10,2,8,ss_polynomial_2_8,
    rijn_lookup_sbox,ss_mixcolumns_matrix(2,8,4)) = 
    ss_natl2m([102,233,75,212,239,138,44,59,136,76,250,89,202,52,43,46],2,4)),
  assert(f(ss_natl2m(
        [50,136,49,224,67,90,49,55,246,48,152,7,168,141,162,52],2,4),
      ss_natl2m([43,40,171,9,126,174,247,207,21,210,21,79,22,166,136,60],2,4),10,2,8,ss_polynomial_2_8,
      rijn_lookup_sbox,ss_mixcolumns_matrix(2,8,4)) = 
    ss_natl2m([87,22,170,250,44,198,139,155,139,155,229,13,48,227,242,6],2,4)),
  true)$

okltest_ss_encrypt_gen(f) := block(
    assert(f(ss_natl2m([0],2,1),ss_natl2m([0],2,1),10,2,4,ss_polynomial_2_4,
        lambda([p],ss_sbox(p,2,4)),ss_mixcolumns_matrix(2,4,1)) =
      ss_natl2m([7],2,1)),
    assert(f(diagmatrix(4,0),diagmatrix(4,0),10,2,8,ss_polynomial_2_8,
        lambda([p],ss_sbox(p,2,8)),
        ss_mixcolumns_matrix(2,8,4)) =
      ss_natl2m([14,30,142,142,75,16,210,251,167,99,179,16,123,178,155,169],
        2,4)),    
    true)$

okltest_ss_decrypt_wf_gen(f) := block(
    assert(f(ss_natl2m([7],2,1),ss_natl2m([0],2,1),10,2,4,ss_polynomial_2_4,
        lambda([p],ss_sbox(p,2,4)),lambda([p],ss_inv_sbox(p,2,4)),
        ss_inv_mixcolumns_matrix(2,4,1)) = ss_natl2m([0],2,1)),
  assert(f(
      ss_natl2m([102,233,75,212,239,138,44,59,136,76,250,89,202,52,43,46],2,4),
      ss_natl2m([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],2,4),10,2,8,
      ss_polynomial_2_8,rijn_lookup_sbox,rijn_lookup_inv_sbox,
      ss_inv_mixcolumns_matrix(2,8,4)) = 
    ss_natl2m([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],2,4)),
  assert(f(ss_natl2m(
        [87,22,170,250,44,198,139,155,139,155,229,13,48,227,242,6],2,4),
      ss_natl2m([43,40,171,9,126,174,247,207,21,210,21,79,22,166,136,60],2,4),
      10,2,8,ss_polynomial_2_8,rijn_lookup_sbox,rijn_inv_sbox,
      ss_inv_mixcolumns_matrix(2,8,4)) =
    ss_natl2m([50,136,49,224,67,90,49,55,246,48,152,7,168,141,162,52],2,4)
    ),
  true)$

okltest_ss_decrypt_gen(f) := block(
    assert(f(ss_natl2m([7],2,1),ss_natl2m([0],2,1),10,2,4,ss_polynomial_2_4,
        lambda([p],ss_sbox(p,2,4)),lambda([p],ss_inv_sbox(p,2,4)),
        ss_inv_mixcolumns_matrix(2,4,1)) = ss_natl2m([0],2,1)),
    assert(f(
        ss_natl2m([14,30,142,142,75,16,210,251,167,99,179,16,123,178,155,169],
        2,4),diagmatrix(4,0),10,2,8,ss_polynomial_2_8,
        lambda([p],ss_sbox(p,2,8)),lambda([p],ss_inv_sbox(p,2,8)),
        ss_inv_mixcolumns_matrix(2,8,4)) = diagmatrix(4,0)),
    true)$

/* **********************************************************
   * Small scale AES instantiations                         *
   **********************************************************
*/

okltest_ss_encrypt(f) := block(
    assert(f(ss_natl2m([0],2,1),ss_natl2m([0],2,1),10,2,4) =
      ss_natl2m([7],2,1)),
    assert(f(diagmatrix(4,0),diagmatrix(4,0),10,2,8) =
      ss_natl2m([14,30,142,142,75,16,210,251,167,99,179,16,123,178,155,169],
        2,4)),    
    true)$

okltest_ss_encrypt_wf(f) := block(
    assert(f(ss_natl2m([0],2,1),ss_natl2m([0],2,1),10,2,4) =
      ss_natl2m([7],2,1)),
  assert(f(ss_natl2m([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],2,4),ss_natl2m([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],2,4),10,2,8) = 
    ss_natl2m([102,233,75,212,239,138,44,59,136,76,250,89,202,52,43,46],2,4)),
  assert(f(ss_natl2m(
        [50,136,49,224,67,90,49,55,246,48,152,7,168,141,162,52],2,4),
      ss_natl2m([43,40,171,9,126,174,247,207,21,210,21,79,22,166,136,60],2,4),10,2,8) = 
    ss_natl2m([87,22,170,250,44,198,139,155,139,155,229,13,48,227,242,6],2,4)),
  true)$

okltest_ss_decrypt_wf(f) := block(
    assert(f(ss_natl2m([7],2,1),ss_natl2m([0],2,1),10,2,4) =
      ss_natl2m([0],2,1)),
  assert(f(
      ss_natl2m([102,233,75,212,239,138,44,59,136,76,250,89,202,52,43,46],2,4),
      ss_natl2m([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],2,4),10,2,8) = 
    ss_natl2m([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],2,4)),
  assert(f(ss_natl2m(
        [87,22,170,250,44,198,139,155,139,155,229,13,48,227,242,6],2,4),
      ss_natl2m([43,40,171,9,126,174,247,207,21,210,21,79,22,166,136,60],2,4),
      10,2,8) =
    ss_natl2m([50,136,49,224,67,90,49,55,246,48,152,7,168,141,162,52],2,4)
    ),
  true)$

okltest_ss_decrypt(f) := block(
    assert(f(ss_natl2m([7],2,1),ss_natl2m([0],2,1),10,2,4) =
      ss_natl2m([0],2,1)),
    assert(f(
        ss_natl2m([14,30,142,142,75,16,210,251,167,99,179,16,123,178,155,169],
        2,4),diagmatrix(4,0),10,2,8) = diagmatrix(4,0)),
    true)$

okltest_ss_encrypt_natl(f) := block(
    assert(f([0],[0],10,2,4,1) = [7]),
    assert(f(create_list(0,i,1,16),create_list(0,i,1,16),10,2,8,4) =
      [14,30,142,142,75,16,210,251,167,99,179,16,123,178,155,169]),
    true)$

okltest_ss_decrypt_natl(f) := block(
    assert(f([7],[0],10,2,4,1) = [0]),
    assert(
      f(
        [14,30,142,142,75,16,210,251,167,99,179,16,123,178,155,169],
        create_list(0,i,1,16),10,2,8,4) = create_list(0,i,1,16)),
    true)$

okltest_ss_encrypt_bin(f) := block(
    assert(f([0,0,0,0],[0,0,0,0],10,2,4,1) = [0,1,1,1]),
    assert(f(create_list(0,i,1,128),create_list(0,i,1,128),10,2,8,4) =
      hexstr2binv("0E1E8E8E4B10D2FBA763B3107BB29BA9")),
    true)$

okltest_ss_decrypt_bin(f) := block(
    assert(f([0,1,1,1],[0,0,0,0],10,2,4,1) = [0,0,0,0]),
    assert(
      f(hexstr2binv("0E1E8E8E4B10D2FBA763B3107BB29BA9"),
        create_list(0,i,1,128),10,2,8,4) = create_list(0,i,1,128)),
    true)$

okltest_ss_encrypt_hex(f) := block(
    assert(f("0","0",10,2,4,1,1) = "7"),
    assert(f("0","0",10,2,8,4,4) =
      "0E1E8E8E4B10D2FBA763B3107BB29BA9"),
    true)$

okltest_ss_decrypt_hex(f) := block(
    assert(f("7","0",10,2,4,1,1) = "0"),
    assert(
      f("0E1E8E8E4B10D2FBA763B3107BB29BA9",
        "0",10,2,8,4,4) = "00000000000000000000000000000000"),
    true)$

/*!
\endhtmlonly
*/
