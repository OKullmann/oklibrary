/* Matthew Gwynne, 6.9.2007 (Swansea) */
/* Copyright 2007, 2008, 2009, 2010, 2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/AdvancedEncryptionStandard.mac
  \brief Implementing AES (Rijndael) and generalisations

Use by

oklib_load("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/AdvancedEncryptionStandard.mac");

*/

/*!
\htmlonly
*/

/* The following two files are guaranteed to be included: */
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/BitField.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/Block.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/ByteField.mac")$

oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/Conversions.mac")$
oklib_include("OKlib/ComputerAlgebra/Algebra/Lisp/FiniteFields.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/data/Sbox.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/data/InvSbox.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/data/FieldMultiplications.mac")$
oklib_include("OKlib/ComputerAlgebra/Cryptology/Lisp/CryptoSystems/IteratedBlockCipher.mac")$
oklib_include("OKlib/ComputerAlgebra/CombinatorialMatrices/Lisp/Basics.mac")$

oklib_plain_include(eigen)$ /* (for function columnvector) */

/*
   The following functions implement AES with 128 bit up to
   192 bit block sizes and with the corresponding key block
   sizes, but for simplicity of implementation, not unequal block/key
   sizes.
*/


/* *********
   * S box *
   *********
*/

/* Constant used in the affine transformation within sbox: */
rijn_affine_constant : '(x^6 + x^5 + x + 1)$
/* Constant used in the affine transformation within inv_sbox: */
rijn_inv_affine_constant : '(x^2 + 1)$ 

/* Matrix used in the affine transformation within rijn_sbox: */
rijn_sbox_matrix : apply(matrix,
  create_list(rotate([1,1,1,1,1,0,0,0],i),i,0,7))$
/* Matrix used in the affine transformation within inv_sbox: */
rijn_inv_sbox_matrix : apply(matrix,
  create_list(rotate([0,1,0,1,0,0,1,0],i),i,0,7))$

/* The AES sbox */

/* Takes a value from the byte field as vector and returns the result
   of applying the Rijndael Sbox operation (as vector): */
rijn_sbox_vec(v) := polybin2vecbin_rijn(rijn_sbox(vecbin2polybin(v)))$
/* Now representing bytes as natural numbers: */
rijn_sbox_nat(i) := polybin2nat(rijn_sbox(nat2polybin(i)))$
/* Now representing bytes as polynomials (the standard representation): */
rijn_sbox(p) := 
  rijn_stand(
    mvecbin2polybin( rijn_sbox_matrix . polybin2mvecbin_rijn(rijn_einv(p)) ) +
    rijn_affine_constant)$

/* Inverse of Sbox: */
rijn_inv_sbox_vec(v) := polybin2vecbin_rijn(rijn_inv_sbox(vecbin2polybin(v)))$
rijn_inv_sbox_nat(i) := polybin2nat(rijn_inv_sbox(nat2polybin(i)))$
rijn_inv_sbox(p) :=
  rijn_einv(
    mvecbin2polybin( rijn_inv_sbox_matrix . polybin2mvecbin_rijn(p) ) +
    rijn_inv_affine_constant)$

/* Sbox implementation that utilises a lookup array to provide fast operation:
*/
rijn_lookup_sbox_nat(i) := sbox_data[i+1]$
rijn_lookup_sbox(p) := nat2polybin(sbox_data[polybin2nat(rijn_stand(p))+1])$

/* Inverse Sbox implementation that utilises a lookup array to provide 
   fast operation: */
rijn_lookup_inv_sbox_nat(i) := inv_sbox_data[i+1]$
rijn_lookup_inv_sbox(p) :=
  nat2polybin(inv_sbox_data[polybin2nat(rijn_stand(p))+1])$

/* As a permutation-function (i.e., as a map from {1,...,256} to
  {1,...,256}):
*/
rijn_sbox_pmtf(n) := rijn_lookup_sbox_nat(n-1)+1$
rijn_inv_sbox_pmtf(n) := rijn_lookup_inv_sbox_nat(n-1)+1$

/* As a 8 x 8 boolean function: */
rijn_sbox_bf(x) := rijn_sbox_vec(x)$
rijn_inv_sbox_bf(x) := rijn_inv_sbox_vec(x)$


/* *************
   * Sub-bytes *
   *************
*/

/* 
   Takes the input block as a matrix of arbitrary polynomials and applies the
   sbox operation to each polynomial, returning the matrix of the resultant
   polynomials:
*/
rijn_subbytes(inputmatrix, sbox_f) := matrixmap(sbox_f, inputmatrix)$

/* 
   Takes the input block as a matrix of arbitrary polynomials in the range
   and applies the inverse sbox operation to each polynomial, returning the
   list of resultant polynomials:
*/
rijn_inv_subbytes(inputmatrix,inv_sbox_f) := matrixmap(inv_sbox_f, inputmatrix)$


/* **************
   * Shift rows *
   **************
*/

/*
   Takes a matrix and performs the shiftrows operation,
   returning a matrix where each row has been shifted
   cyclically by the specified amount (see aes_shiftrows_shifts[i]
   for the shift for the i'th row).
*/
aes_shiftrows(inputmatrix) := 
  apply(matrix,
    create_list(rotate(inputmatrix[abs(r)+1],-r), r, 0,3))$

/*
   Takes a matrix and performs the inverse shiftrows operation,
   returning a matrix where each row has been shifted
   cyclically by the specified amount (see -aes_shiftrows_shifts[i]
   for the shift for the i'th row).
*/
aes_inv_shiftrows(inputmatrix) :=
  apply(matrix,
    create_list(rotate(inputmatrix[abs(r)+1],r), r, 0,3))$


/* ***************
   * Mix columns *
   ***************
*/

/*
   Matrix of polynomials used in the Mixcolumns step to model the 
   multiplication of each 4-byte column by a constant
   in a polynomial ring of at most order 4 with coefficients in
   GF(2^8):
*/
rijn_mixcolumns_matrix : block([x], apply(matrix, 
  create_list(rotate([x, x + 1, 1, 1], i),i,0,3)))$
/* Inverse of the rijn_mix_columns_matrix: */
rijn_inv_mixcolumns_matrix : block([x], apply(matrix,
  create_list(rotate([x^3+x^2+x,x^3+x+1,x^3+x^2+1,x^3+1], i),i,0,3)))$

/* Given a 4 x 1 matrix of arbitrary polynomials, returns the result
   of multiplying the Mixcolumns matrix (of polynomials) by the given matrix.
*/
rijn_mixcolumn(inputmatrixi) :=
  matrixmap(rijn_stand,
      rijn_mixcolumns_matrix . inputmatrixi);

/* Given a 4 x n matrix (for 0<=n) of arbitrary polynomials, returns the result
   of applying mixcolumn_f to each column (as a matrix) in the matrix.

   In most case mixcolumn_f should be rijn_mixcolumn.
*/
rijn_mixcolumns(inputmatrix,mixcolumn_f) := block([M : matrix()],
  for i : 1 thru 4 do M : addcol(M,mixcolumn_f(col(inputmatrix,i))),
  return(M))$

/* The inverse of the rijn_mixcolumn operation. */
rijn_inv_mixcolumn(inputmatrix) :=
  block([rijn_mixcolumns_matrix : rijn_inv_mixcolumns_matrix],
    rijn_mixcolumn(inputmatrix))$

/* Given a 4 x n matrix (for 0<=n) of arbitrary polynomials, returns the result
   of applying inv_mixcolumn_f to each column (as a matrix) in the matrix.

   In most case mixcolumn_f should be rijn_inv_mixcolumn.
*/
rijn_inv_mixcolumns(inputmatrix,inv_mixcolumn_f) := 
  rijn_mixcolumns(inputmatrix,inv_mixcolumn_f)$


/* *****************
   * Key expansion *
   *****************
*/

/*
   Takes an AES round key for round r as a list of
   polynomials and returns the round key for round r+1 as a list
   of polynomials of the same size.
 */
aes_keyschedule(keymatrix, r, sbox_f) := block(
  [newcols : matrix(), n_k : length(matrixcolumns(keymatrix)), round_constant : x^(r-1)],
  newcols : addcol(newcols,columnvector(
      create_list(
        keymatrix[i,1] + sbox_f(keymatrix[mod(i,4)+1,n_k]) + 
        if i = 1 then round_constant else 0,i,1,4))),
  for j : 2 thru n_k do
    newcols : addcol(newcols,columnvector(
      create_list(keymatrix[i,j] + newcols[i,j-1],i,1,4))),
  return(matrixmap(rijn_stand,newcols)))$

/* Given the AES key as a list of polynomials representing the
   byte field elements in the AES key block, column by column,
   returns a list of polynomials representing the byte field elements
   of the concatenation of the round key blocks for all AES rounds,
   column by column.
 */
 aes_key_expansion(keymatrix, num_rounds, sbox_f) := block(
  [ks : lambda([keymatrix,r],
    endcons(aes_keyschedule(last(keymatrix),r,sbox_f),keymatrix))],
  lreduce(ks, create_list(i,i,1,num_rounds), [keymatrix]))$


/* *********************************
   * AES encryption and decryption *
   *********************************
*/

/* 
   Takes the plaintext matrix of polynomials and the 
   round key for this round as a list of polynomials, and
   returns a matrix of the same size of polynomials as the plaintext
   as the result of the round operation:
 */
aes_round_wa(pl,sbox_f,mixcolumn_f) := /* Without round key addition */
    rijn_mixcolumns(aes_shiftrows(
        rijn_subbytes(pl,sbox_f)),mixcolumn_f)$
aes_round(pl, rkl, sbox_f, mixcolumn_f) := 
  matrixmap(rijn_stand,
    aes_round_wa(pl,sbox_f,mixcolumn_f)+rkl)$
aes_inv_round_wa(pl,inv_sbox_f,inv_mixcolumn_f) := 
    rijn_inv_subbytes(aes_inv_shiftrows(
        rijn_inv_mixcolumns(pl,inv_mixcolumn_f)), inv_sbox_f)$
aes_inv_round(pl,rkl,inv_sbox_f,inv_mixcolumn_f) := 
    aes_inv_round_wa(pl+rkl, inv_sbox_f, inv_mixcolumn_f)$


/* 
   Takes the plaintext matrix of polynomials and the 
   round key for this round as a list of polynomials, and
   returns a matrix of the same size of polynomials as the plaintext
   as the result of the round operation (without mixcolumn):
 */
aes_final_round_wa(pl,sbox_f) := /* Without round key addition */
    aes_shiftrows(
        rijn_subbytes(pl,sbox_f))$
aes_final_round(pl, rkl, sbox_f) := 
  matrixmap(rijn_stand,aes_final_round_wa(pl,sbox_f)+rkl)$
aes_inv_final_round_wa(pl,inv_sbox_f) := 
    rijn_inv_subbytes(aes_inv_shiftrows(pl), inv_sbox_f)$
aes_inv_final_round(pl,rkl,inv_sbox_f) := 
    aes_inv_final_round_wa(pl+rkl, inv_sbox_f)$

/* 
   Takes the plaintext matrix of 16 polynomials, the key matrix of 16
   polynomials and returns the result of applying the AES 
   encryption algorithm:
*/
aes_encrypt_gen(pl, kl, num_rounds, sbox_f, mixcolumn_f) := (
  /* Initial Rounds */
  ekl : aes_key_expansion(kl,num_rounds,sbox_f),
  initial_rk : first(ekl), final_rk : last(ekl),
  initial_result : 
    lreduce(lambda([a,b],
        aes_round(a,b,sbox_f,mixcolumn_f)),
    rest(rest(ekl), -1), pl + initial_rk),
  /* Final Round */
  matrixmap(rijn_stand,
    if num_rounds = 10 then
      aes_final_round(initial_result, final_rk, sbox_f)
    else
      aes_round(
          initial_result,final_rk, sbox_f, mixcolumn_f))
)$

/* 
   Takes the plaintext matrix of 16 polynomials, the key matrix of 16
   polynomials and returns the result of applying the AES 
   decryption algorithm:
*/
aes_decrypt_gen(pl, kl, num_rounds, sbox_f, inv_sbox_f,inv_mixcolumn_f) := (
  /* Initial Rounds */
  ekl : aes_key_expansion(kl,num_rounds,sbox_f),
  initial_rk : first(ekl), final_rk : last(ekl),
  /* Final Round */
  if num_rounds = 10 then
    initial_result : aes_inv_final_round(pl,final_rk,inv_sbox_f)
  else
    initial_result :
      aes_inv_round(pl,final_rk, inv_sbox_f,inv_mixcolumn_f),
  matrixmap(rijn_stand,
    rreduce(
      lambda([a,b],aes_inv_round(a,b,inv_sbox_f,inv_mixcolumn_f)), 
      rest(rest(ekl), -1), initial_result) + initial_rk)
)$


/* ***********************************
   * AES as an iterated block cipher *
   ***********************************
*/


/* Combined AES round: */
/* OK: what does this mean? */
aes_round_ibc(plain_text, round, sbox_f,mixcolumn_f) :=
  if round = 0 then plain_text
  else if round = 10 then
    aes_final_round_wa(plain_text,sbox_f)
  else
    aes_round_wa(plain_text, sbox_f, mixcolumn_f)$

/* AES encryption as ibc (see
   Cryptology/Lisp/CryptoSystems/IteratedBlockCipher.mac): */
/* OK: this should just be a helper-function */
aes_encrypt_ibc_gen(plaintext, key, num_rounds, sbox_f, mixcolumn_f) :=
    ibc_0(
      buildq([sbox_f],lambda([key,r], aes_keyschedule(key,r,sbox_f))),
      buildq([sbox_f,mixcolumn_f],
        lambda([p,r], aes_round_ibc(p,r,sbox_f,mixcolumn_f))),
      lambda([a,b],
        matrixmap(rijn_stand,a+b)))(plaintext,key,num_rounds+1)$


/* *************************************
   * Convenience instantiations of AES *
   *************************************
*/


/* Different forms of computation */

/* AES Encryption using field operations: */
/* The default AES encryption function. */
aes_encrypt(p,k,num_rounds) := 
  aes_encrypt_gen(p,k,num_rounds,rijn_sbox,rijn_mixcolumn)$
aes_encrypt_std(p,k) := aes_encrypt_f(p,k,10)$
aes_encrypt_nat(p,k,num_rounds) := 
  rijn_m2natl(
    aes_encrypt_gen(rijn_natl2m(p),rijn_natl2m(k),num_rounds,
      rijn_sbox,rijn_mixcolumn))$
aes_encrypt_nat_std(p,k) := aes_encrypt_nat(p,k,10)$

/* AES Encryption using lookup tables: */
aes_encrypt_l(p,k,num_rounds) := 
  aes_encrypt_gen(p,k,num_rounds,rijn_lookup_sbox,rijn_mixcolumn)$
aes_encrypt_l_std(p,k) := aes_encrypt_l(p,k,10)$
aes_encrypt_nat_l(p,k,num_rounds) := 
  rijn_m2natl(
    aes_encrypt_gen(rijn_natl2m(p),rijn_natl2m(k),num_rounds,
      rijn_lookup_sbox,rijn_mixcolumn))$
aes_encrypt_nat_l_std(p,k) := aes_encrypt_nat_l(p,k,10)$

/* AES Encryption as an iterated block cipher */
/* NOTE: This is equivalent to aes_encrypt */
aes_encrypt_ibc(p,k,num_rounds) :=
  aes_encrypt_ibc_gen(p,k,num_rounds,rijn_sbox,rijn_mixcolumn)$
aes_encrypt_ibc_std(p,k) := aes_encrypt_ibc(p,k,10)$
aes_encrypt_nat_ibc(p,k,num_rounds) :=
  rijn_m2natl(
    aes_encrypt_ibc_gen(rijn_natl2m(p),rijn_natl2m(k),num_rounds,
      rijn_sbox,rijn_mixcolumn))$
aes_encrypt_nat_ibc_std(p,k) := aes_encrypt_nat_ibc_std(p,k,10)$

/* AES Decryption using field operations: */
/* The default AES decryption function. */
aes_decrypt(c,k,num_rounds) := 
  aes_decrypt_gen(c,k,num_rounds,rijn_sbox,rijn_inv_sbox,rijn_inv_mixcolumn)$
aes_decrypt_std(c,k) := aes_decrypt_f(c,k,10)$
aes_decrypt_nat(c,k,num_rounds) := 
  rijn_m2natl(
    aes_decrypt_gen(rijn_natl2m(c),rijn_natl2m(k),num_rounds,
      rijn_sbox,rijn_inv_sbox,rijn_inv_mixcolumn))$
aes_decrypt_nat_std(c,k) := aes_decrypt_nat(c,k,10)$
  
/* AES Decryption using lookup tables: */
aes_decrypt_l(c,k,num_rounds) := 
  aes_decrypt_gen(c,k,num_rounds,rijn_lookup_sbox,rijn_lookup_inv_sbox,rijn_inv_mixcolumn)$
aes_decrypt_l_std(c,k) := aes_decrypt_l_std(c,k,10)$
aes_decrypt_nat_l(c,k,num_rounds) := 
  rijn_m2natl(
    aes_decrypt_gen(rijn_natl2m(c),rijn_natl2m(k),num_rounds,
      rijn_lookup_sbox,rijn_lookup_inv_sbox,rijn_inv_mixcolumn))$
aes_decrypt_nat_l_std(c,k) := aes_decrypt_nat_l_std(c,k,10)$
  


/* Various representations of input/output */


/* Input and output as lists of binary numbers of size 128: */
aes_encrypt_bin(p,k,num_rounds) :=
  lappend(
    map(lambda([m],int2polyadic_padd(m,2,8)),
      aes_encrypt_nat_l(
        map(binv2int, partition_elements(p,8)),
        map(binv2int, partition_elements(k,8)),
        num_rounds)))$
aes_encrypt_bin_std(p,k) := aes_encrypt_bin(p,k,10)$
aes_decrypt_bin(p,k,num_rounds) :=
  lappend(
    map(lambda([m],int2polyadic_padd(m,2,8)),
      aes_decrypt_nat_l(
        map(binv2int, partition_elements(p,8)),
        map(binv2int, partition_elements(k,8)),
        num_rounds)))$
aes_decrypt_bin_std(p,k) := aes_decrypt_bin(p,k,10)$


/* Input and output as hexadecimal values (the input does not need
   leading zeros, but the output is always padded to 32 hexadecimal
   digits): */
aes_encrypt_hex(p,k,num_rounds) := 
  binv2hexstr(
    aes_encrypt_bin(
      hexstr2binv(lpad(p,"0",32)), hexstr2binv(lpad(k,"0",32)), num_rounds))$
aes_encrypt_hex_std(p,k) := aes_encrypt_hex(p,k,10)$
aes_decrypt_hex(p,k,num_rounds) :=
  binv2hexstr(
    aes_decrypt_bin(
      hexstr2binv(lpad(p,"0",32)), hexstr2binv(lpad(k,"0",32)), num_rounds))$
aes_decrypt_hex_std(p,k) := aes_decrypt_hex(p,k,10)$

/* The AES-chiffre as number-theoretical function: */
aes_int(p,k,num_rounds) :=
  polyadic2int(
    aes_encrypt_nat_l(
      pad_block_16(int2polyadic(p,256)), 
      pad_block_16(int2polyadic(k,256)),
      num_rounds
    ),
    256)$
aes_int_std(p,k) := aes_int(p,k,10)$
aes_int_decrypt(c,k,num_rounds) :=
  polyadic2int(
    aes_decrypt_nat_l(
      pad_block_16(int2polyadic(c,256)), 
      pad_block_16(int2polyadic(k,256)),
      num_rounds
    ),
    256)$
aes_int_decrypt_std(c,k) := aes_int_decrypt(c,k,10)$


/*!
\endhtmlonly
*/
