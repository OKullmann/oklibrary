/* Oliver Kullmann, 13.12.2020 (Swansea) */
/* Copyright 2020 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Numerical/Lisp/Zeros.mac
  \brief Zeros (Nullstellen) of arbitrary functions

Use by

oklib_load("OKlib/ComputerAlgebra/Numerical/Lisp/Zeros.mac");

*/

/*!
\htmlonly
*/

/* *********************
   * Interval nesting  *
   *********************
*/

zero_interval(f,a,b,epsilon) := block([m : (a+b)/2],
  if b-a < epsilon then m
  elseif f(a)*f(m) < 0 then zero_interval(f,a,m,epsilon)
  else zero_interval(f,m,b,epsilon)
)$

/* Examples:

fpprec:30;
  30
zero_interval(lambda([x], x*x-2), 0, 4, 10^-20);
  417402170410649030795/295147905179352825856
bfloat(zero_interval(lambda([x], x*x-2), 0, 4, 10^-20));
  1.41421356237309504880105752271b0
float(sqrt(2));
  1.4142135623730951
zero_interval(lambda([x], x*x-2), 0.0, 4.0, 10^-15);
  1.4142135623730954
zero_interval(lambda([x], x*x-2), 0.0b0, 4.0b0, 10^-20);
  1.41421356237309504880105752271b0

*/

/*!
\endhtmlonly
*/
