/* Oliver Kullmann, 15.7.2012 (Swansea) */
/* Copyright 2012, 2016 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/Hypergraphs/Lisp/Generators/Schur.mac
  \brief Maxima functions for generating Schur-hypergraphs

Use by

oklib_load("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Generators/Schur.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Basics.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$
oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/Generators/VanderWaerden.mac")$
oklib_include("OKlib/ComputerAlgebra/Algebra/Lisp/Groupoids/BasicNotions.mac")$
oklib_include("OKlib/ComputerAlgebra/Algebra/Lisp/Groupoids/Groups/CyclicGroups.mac")$
oklib_include("OKlib/ComputerAlgebra/Algebra/Lisp/Groupoids/Groups/SymmetricGroups.mac")$
oklib_include("OKlib/ComputerAlgebra/Algebra/Lisp/Groupoids/InvertibleElements.mac")$
oklib_include("OKlib/ComputerAlgebra/NumberTheory/Lisp/Quadratics.mac")$


/* *******************
   * Schur's theorem *
   *******************
*/

/* The hypergraph with vertex set {1, ..., n} (n >= 0) and hyperedges {x,y,z}
   with x+y=z (note that x=y is possible, while z notin {x,y}).
   The order is monotonic (larger n add hyperedges to the end), with first
   z increasing, and second x increasing.
*/
schurtriples_ohg(n) :=
 [create_list(i,i,1,n), create_list({x,z-x,z}, z,2,n, x,1,floor(z/2))]$
schurtriples_hg(n) := ohg2hg(schurtriples_ohg(n))$
/* Without subsumptions ("me" for "minimal elements"):
   Precisely the hyperedges {x,2x} with 3x <= n subsume other hyperedges,
   namely precisely the hyperedge {x,2x,3x}.
*/
schurtriples_me_ohg(n) :=
 [create_list(i,i,1,n),
  delete(0,create_list(if x#z/3 then {x,z-x,z} else 0, z,2,n, x,1,floor(z/2)))]$
schurtriples_me_hg(n) := ohg2hg(schurtriples_me_ohg(n))$

/* The "weak" form, now not allowing x=y: */
wschurtriples_ohg(n) :=
 [create_list(i,i,1,n), create_list({x,z-x,z}, z,2,n, x,1,floor((z-1)/2))]$
wschurtriples_hg(n) := ohg2hg(wschurtriples_ohg(n))$
/* wschurtriples_ohg(n) is obtained from schurtriples_ohg(n) by removing
   hyperedges of length 2. So wschurtriples_hg(n) is 3-uniform.
*/

/* Statistics functions: */

nver_schurtriples_hg(n) := n$
nver_schurtriples_ohg(n) := n$
nver_wschurtriples_hg(n) := n$
nver_wschurtriples_ohg(n) := n$

nhyp_list_schurtriples_hg(n) := if n <= 1 then [] elseif n=2 then [[2,1]] else
 [[2, floor(n/2)], [3, floor((n-1)/2) * ceiling((n-1)/2)]]$
nhyp_list_schurtriples_ohg(n) := nhyp_list_schurtriples_hg(n)$
nhyp_list_schurtriples_me_hg(n) := if n <= 1 then [] elseif n<=3 then [[2,1]]
 else [[2, floor(n/2)], [3, floor((n-1)/2)*ceiling((n-1)/2) - floor(n/3)]]$
nhyp_list_schurtriples_me_ohg(n) := nhyp_list_schurtriples_me_hg(n)$
nhyp_list_wschurtriples_hg(n) := if n <= 2 then [] else
 [[3, floor((n-1)/2) * ceiling((n-1)/2)]]$
nhyp_list_wschurtriples_ohg(n) := nhyp_list_wschurtriples_hg(n)$

nhyp_schurtriples_hg(n) := floor(n/2) + nhyp_wschurtriples_hg(n)$
nhyp_schurtriples_ohg(n) := nhyp_schurtriples_hg(n)$
nhyp_schurtriples_me_hg(n) := nhyp_schurtriples_hg(n) - floor(n/3)$
nhyp_schurtriples_me_ohg(n) := nhyp_schurtriples_me_hg(n)$
nhyp_wschurtriples_hg(n) := floor(((n-1)/2)^2)$
/* We have
   nhyp_wschurtriples_hg(n) = floor((n-1)/2) * ceiling((n-1)/2).
*/
nhyp_wschurtriples_ohg(n) := nhyp_wschurtriples_hg(n)$


/* Testing whether the set S contains a Schur triple (that is, whether there
   are x,y in S with x+y in S).
   Works if S is a set of integers. In general we need + and order, while
   the precise general assumptions have to be investigated.
*/
has_schurtriple(S) :=
 if emptyp(S) then false
 else block([x : first_element(S)],
   if subsetp({x,x+x}, S) then return(true),
   S : disjoin(x,S),
   some_s(lambda([y], subsetp({y,x+y}, S)), S) or has_schurtriple(S))$

/* Now not considering the cases where x=y: */
has_wschurtriple(S) :=
 if emptyp(S) then false
 else block([x : first_element(S)],
   S : disjoin(x,S),
   some_s(lambda([y], subsetp({y,x+y}, S)), S) or has_wschurtriple(S))$



/* ************
   * Symmetry *
   ************
*/

/* The palindromic versions of the Schur-triples hypergraphs, with
   colexicographical order (note that this is different from
   schurtriples_ohg) and with subsumptions eliminated:
*/

mirrorfold_schur(n) := block([div:ceiling(n/2)],
 if mod(n+1,3)#0 then buildq([n,div],
     lambda([v], if v >= div+1 then n-v+1 else v))
 else buildq([n,div,excl:2*(n+1)/3],
     lambda([v], if v >= div+1 and v#excl then n-v+1 else v)))$

ver_schurtriples_pd_ohg(n) :=
  if mod(n+1,3)#0 then create_list(i,i,1,ceiling(n/2))
  else endcons(2*(n+1)/3, create_list(i,i,1,ceiling(n/2)))$

schurtriples_pd_ohg(n) := block(
 [G : schurtriples_ohg(n), m : mirrorfold_schur(n)],
  [ver_schurtriples_pd_ohg(n),
   map(setify,
       sort(map(listify,
              min_elements_l(unique(
                map(lambda([H], map(m, H)), second(G))))),
            colex_lessp_l))])$
schurtriples_pd_hg(n) := ohg2hg(schurtriples_pd_ohg(n))$

/* Remarks:
 - If the direct construction, as for wschurtriples_pd_ohg, would be
   employed here, then exactly in case of 3 divides n+1 a unit-hyperedge would
   be created, namely {(n+1)/3}, from {(n+1)/3, 2(n+1)/3}.
 - In [Symmetric Sum-Free Partitions and Lower Bounds for Schur Numbers;
   Fredricksen and Sweet, 2000] these unit-hyperedges (which make the
   hypergraphs non-colourable) are excluded, apparently by not contracting
   (n+1)/3 and 2(n+1)/3, and this is what we do with schurtriples_pd_ohg.
*/

/* The palindromic versions of the weak Schur-triples hypergraphs, with
   colexicographical order (note that this is different from
   wschurtriples_ohg) and with subsumptions eliminated: */

mirrorfold_wschur(n) := mirrorfold_vdw(n)$
ver_wschurtriples_pd_ohg(n) := create_list(i,i,1,ceiling(n/2))$
wschurtriples_pd_ohg(n) := block(
 [G : wschurtriples_ohg(n), m : mirrorfold_wschur(n)],
  [ver_wschurtriples_pd_ohg(n),
   map(setify,
       sort(map(listify,
              min_elements_l(unique(
                map(lambda([H], map(m, H)), second(G))))),
            colex_lessp_l))])$
wschurtriples_pd_hg(n) := ohg2hg(wschurtriples_pd_ohg(n))$

/* Remarks:
 - wschurtriples_pd_ohg(n) = palindromise_vdw_ohg(wschurtriples_ohg(n)).
*/


/* Statistics functions: */

nver_schurtriples_pd_hg(n) :=
 if mod(n+1,3)#0 then ceiling(n/2) else ceiling(n/2)+1$
nver_schurtriples_pd_ohg(n) := nver_schurtriples_pd_hg(n)$

nver_wschurtriples_pd_hg(n) := ceiling(n/2)$
nver_wschurtriples_pd_ohg(n) := nver_wschurtriples_pd_hg(n)$


/* *****************
   * Group triples *
   *****************
*/

/* Generalisation (in some form) via using a group (G,*,e):
   The hyperedges are now of the form {x,y,x*y} with x,y,x*y # e.
*/

/* Creating the hyperedges by running through all x,y and removing hyperedges
   containing the neutral elemenet:
*/
grouptriples_ougrp2ohg(G) := block(
 [V : rest(first(G)), compo_ : second(G), e : third(G)],
  [V,
   sublist(create_list({x,y,compo_(x,y)}, x,V, y,V),
           lambda([H], not elementp(e, H)))])$
/* Note that here in general we have multiple occurrences of hyperedges. */
grouptriples_ugrp2hg(G) := ohg2hg(grouptriples_ougrp2ohg(ugrp2ougrp(G)))$

/* Eliminating subsumptions: */
grouptriples_me_ougrp2ohg(G) := block([H : grouptriples_ougrp2ohg(G)],
 [first(H), min_elements_l(second(H))])$
grouptriples_me_ugrp2hg(G) := block([H : grouptriples_ugrp2hg(G)],
 [first(H), min_elements(second(H))])$

/* The sub-hypergraphs containing exactly the hyperedges of length 3: */
wgrouptriples_ougrp2ohg(G) := block(
 [V : rest(first(G)), compo_ : second(G), e : third(G)],
  [V,
   sublist(create_list({x,y,compo_(x,y)}, x,V, y,V),
           lambda([H], not elementp(e, H) and length(H)#2))])$
wgrouptriples_ugrp2hg(G) := ohg2hg(wgrouptriples_ougrp2ohg(ugrp2ougrp(G)))$


/* Statistics functions: */

nver_grouptriples_ougrp2ohg(G) := length(first(G)) - 1$
nver_grouptriples_ugrp2hg(G) := length(first(G)) - 1$
nver_grouptriples_me_ougrp2ohg(G) := length(first(G)) - 1$
nver_grouptriples_me_ugrp2hg(G) := length(first(G)) - 1$
nver_wgrouptriples_ougrp2ohg(G) := length(first(G)) - 1$
nver_wgrouptriples_ugrp2hg(G) := length(first(G)) - 1$

nhyp_grouptriples_ougrp2ohg(G) := block([n : length(first(G))], (n-1)*(n-2))$
nhyp_wgrouptriples_ougrp2ohg(G) := block([n : length(first(G))],
 (n-1)*(n-3) + length(involutions_ugrd(ougrd2ugrd(G))))$
/* Remark: Compared to nhyp_grouptriples_ougrp2ohg, we have to subtract
   the 2-hyperedges {x,x*x}, where now the involutions are doubly-counted
   (also as hyperedges {x,e}).
*/


/* Special cases: */

/* Modular Schur-triples (n >= 0): */
mschurtriples_ohg(n) := grouptriples_ougrp2ohg(cyclic_ougrp(n+1))$
mschurtriples_hg(n) := grouptriples_ugrp2hg(cyclic_ugrp(n+1))$
mschurtriples_me_ohg(n) := grouptriples_me_ougrp2ohg(cyclic_ougrp(n+1))$
mschurtriples_me_hg(n) := grouptriples_me_ugrp2hg(cyclic_ugrp(n+1))$
wmschurtriples_ohg(n) := wgrouptriples_ougrp2ohg(cyclic_ougrp(n+1))$
wmschurtriples_hg(n) := wgrouptriples_ugrp2hg(cyclic_ugrp(n+1))$

nver_mschurtriples_ohg(n) := n$
nver_mschurtriples_hg(n) := n$
nver_mschurtriples_me_ohg(n) := n$
nver_mschurtriples_me_hg(n) := n$
nver_wmschurtriples_ohg(n) := n$
nver_wmschurtriples_hg(n) := n$

nhyp_mschurtriples_ohg(n) := n*(n-1)$
/* Remark: This is (basically) http://oeis.org/A002378 . */
/* nhyp_mschurtriples_hg(n) := unknown$ */
/* nhyp_mschurtriples_me_ohg(n) := unknown$ */
/* nhyp_mschurtriples_me_hg(n) := unknown$ */
nhyp_wmschurtriples_ohg(n) := n*(n-2) + mod(n,2)$
/* Remark: This is http://oeis.org/A137932 = n^2 - 2*n + mod(n,2).
   For every x#0 there are two y which do not lead to acceptable z = x + y,
   namely y = x and y = -x; this coincides in case of x = -x <=> 2x = 0,
   which is a unique solution in case n is odd, and no solution for even n.
   This is a special case of nhyp_wgrouptriples_ougrp2ohg(G).
*/
/* nhyp_wmschurtriples_hg(n) := unknown$ */


/* Symmetric groups (n >= 0): */
symmetrictriples_ohg(n) := grouptriples_ougrp2ohg(sym_l_ougrp(n))$
symmetrictriples_hg(n) := grouptriples_ugrp2hg(sym_l_ugrp(n))$
symmetrictriples_me_ohg(n) := grouptriples_me_ougrp2ohg(sym_l_ougrp(n))$
symmetrictriples_me_hg(n) := grouptriples_me_ugrp2hg(sym_l_ugrp(n))$
wsymmetrictriples_ohg(n) := wgrouptriples_ougrp2ohg(sym_l_ougrp(n))$
wsymmetrictriples_hg(n) := wgrouptriples_ugrp2hg(sym_l_ugrp(n))$

nver_symmetrictriples_ohg(n) := n!-1$
nver_symmetrictriples_hg(n) := n!-1$
nver_symmetrictriples_me_ohg(n) := n!-1$
nver_symmetrictriples_me_hg(n) := n!-1$
nver_wsymmetrictriples_ohg(n) := n!-1$
nver_wsymmetrictriples_hg(n) := n!-1$

nhyp_symmetrictriples_ohg(n) := block([f : n!], (f-1)*(f-2))$
nhyp_wsymmetrictriples_ohg(n) := block([f : n!],
 (f-1)*(f-3) + numinvolutions_symgrp(n) - 1)$


/* ****************
   * Schur tuples *
   ****************
*/

/* k >= 3 */
/* To be completed. */
linequations_ohg(k,n) := block([V : setn(n)],
  0)$
/* Remark: linequations_ohg(3,n) = schurtriples_ohg(3). */


/* ***********************
   * Pythagorean Triples *
   ***********************
*/

pythtriples_ohg(n) := [create_list(i,i,1,n), map(setify,pythtrip_le_byDickson_sorted(n))]$
pythtriples_hg(n) := [setn(n), pythtripses_le_byDickson(n)]$


/* **********************
   * Pythagorean Tuples *
   **********************
*/

pythquad_ohg(n) := [create_list(i,i,1,n), map(setify,pythquad_le_bydef_sorted(n))]$
pythquad_hg(n) := [setn(n), pythquadses_le_bydef(n)]$

/* To be completed:
pythtuples_ohg(k,n) := XXX
*/
/* Remark: pythtuples_ohg(3,n) = pythtriples_ohg(n). */


/*!
\endhtmlonly
*/
