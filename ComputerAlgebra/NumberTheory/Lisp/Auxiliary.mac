/* Oliver Kullmann, 7.6.2008 (Swansea) */
/* Copyright 2008, 2009, 2010, 2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/NumberTheory/Lisp/Auxiliary.mac
  \brief Functions for number theory functions which more or less augment/correct Maxima functions

Use by

oklib_load("OKlib/ComputerAlgebra/NumberTheory/Lisp/Auxiliary.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/Hypergraphs/Lisp/SetSystems.mac")$
oklib_include("OKlib/ComputerAlgebra/DataStructures/Lisp/Lists.mac")$


/* **************
   * Logarithms *
   **************
*/

/* The binary logarithm: */
ld(x) := radcan(log(x) / log(2))$
/* The decimal logarithm: */
log10(x) := radcan(log(x) / log(10))$

/* The integer binary logarithm for natural numbers n (minf for n=0). */
/* This is just floor(ld(n)) (for n <> 0), however our computation is
   actually faster (except for very big n, say, with over 5000 decimal digits).
*/
fld(n) := if n = 0 then minf else 
 block([l : 0, b : 1], while b < n do (l : l + 1, b : b * 2),
  if b > n then return(l-1) else return(l))$
/* Now ceiling(ld(n)), again with faster computation: */
cld(n) := if n = 0 then minf else 
 block([l : 0, b : 1], while b < n do (l : l + 1, b : b * 2), l)$

/* Returns the floor of the logarithm of n base b, correcting
   for issues in precision causing round off. Cannot handle large
   numbers. */
floorlog(n,b) := block([l : floor(float(log(n)/log(b)))], 
  if b^(l+1) <= n then (l+1) else
  if b^(l) > n then (l-1) else l)$ /* handles issues with precision */
/* We have 
   floorlog(n,b) = floor(log(n)/log(b)),
   however for n for which floorlog(n,b) is defined it is much faster.
*/


/* ******************************
   * Representations of numbers *
   ******************************
*/

/* Converts a string to a list of characters: */
str2chrl(str) := create_list(charat(str, i), i,1,slength(str))$

/* Converts a digit of the form "0", "1", ..., "9", "A", ..., "Z" to an
   integer from 0 to 35: */
digit2int(d) := 
  if cgreaterp("A",d) then cint(d) - cint("0")
  else 10 + (cint(d) - cint("A"))$
/* The inverse, converting an integer from 0 to 35 to a digit: */
int2digit(m) :=
    if m < 10 then ascii(cint("0") + m)
    else ascii(cint("A") + (m-10))$

/* Transforming a list N representing a natural number n to base b (big endian,
   that is leading coefficients first) into n. */
/* More generally, N can interpreted as the list of coefficients of a 
   polynomial in an unknown x, but with leading coefficient first, and
   this polynomial then is evaluating (via Horner scheme) at argument value b.
*/
polyadic2int(N,b) := 
  lreduce(lambda([x,y], x * b + y), N, 0)$
/* Converts an non-empty string representing an integer in base b to an
   integer. */
/* Prerequisite: b a natural number, 1 <= b <= 36; "digits" might be equal to b
   or even be greater (but must be characters from 0-9 and A-Z). */
polyadicstr2int(str,b) := if charat(str,1) = "-" then 
  -polyadic2int(map(digit2int,str2chrl(substring(str,2))),b)
else 
  polyadic2int(map(digit2int,str2chrl(str)),b)$
binv2int(l) := polyadic2int(l,2)$
bin2int(str) := polyadicstr2int(str,2)$
oct2int(str) := polyadicstr2int(str,8)$
dec2int(str) := polyadicstr2int(str,10)$
hex2int(str) := polyadicstr2int(str,16)$

/* Computing the representation of a number m to base b 
   (as a list, big endian). */
/* Prerequisites: m a natural number >= 0, b a natural number >= 2
   (where in case m=0 also b in {0,1} is possible). */
int2polyadic(m,b) :=
  if m = 0 then [0]
  else block([result : []],
    while m > 0 do block([d : divide(m,b)],
      result : cons(d[2], result),
      m : d[1]),
    return(result))$
/* Adding leading zeros if the result does not have length l: */
int2polyadic_padd(m,b,l) := block([L : int2polyadic(m,b)],
  append(create_list(0,i,1,l-length(L)), L))$

/* Converts a given integer m to its base b representation as a
   string, where 2 <= b <= 36 is a natural number. */
int2polyadicstr(m,b) := if m >= 0 then
  simplode(map(int2digit,int2polyadic(m,b)))
else
  sconcat("-", simplode(map(int2digit,int2polyadic(-m,b))))$
int2bin(m) := int2polyadicstr(m,2)$
int2boct(m) := int2polyadicstr(m,8)$
int2dec(m) := int2polyadicstr(m,10)$
int2hex(m) := int2polyadicstr(m,16)$

/* Converting an hexadecimal string str into a binary vector, where str
   can use upper- or lower-case letters (also mixed): */
hexstr2binv(str) := lappend(map(lambda([x],int2polyadic_padd(x,2,4)),map(digit2int,str2chrl(supcase(str)))))$
/* Converting a binary vector v into a hexadecimal string (using upper-case):
*/
binv2hexstr(v) := simplode(map(int2digit,map(lambda([x],polyadic2int(x,2)),partition_elements(v,4))))$


/* ************
   * Rounding *
   ************
*/

round_fdd(x,d) := float(round(x*10^d)/10^d)$
round_bfdd(x,d) := bfloat(round(x*10^d)/10^d)$

/* **********************
   * Integer partitions *
   **********************
*/

/* An "integer partition" of n in ZZ is a list L of natural numbers (>= 1),
   sorted in ascending order, which sums up to n.
*/

/* The set of all integer partitions of n (an integer): */
ext_integer_partitions(n) :=
 if n < 0 then {}
 elseif n = 0 then {[]}
 else integer_partitions(n)$
/* Remark: The Maxima-function integer_partitions is false for n=0, and
   undefined for n < 0. */
/* The number of integer partitions: */
num_ext_integer_partitions(n) :=
 if n < 0 then 0
 elseif n = 0 then 1
 else num_partitions(n)$

/* An "unordered integer partition" of n in ZZ is a list L of natural numbers
   (>= 1) which sums up to n.
*/
/* The set of unordered integer partitions (n is an integer): */
uinteger_partitions(n) :=
 lunion(map(permutations,ext_integer_partitions(n)));
num_uinteger_partitions(n) := if n<0 then 0 elseif n=0 then 1
 else 2^(n-1)$


/* ***********************
   * Corrected functions *
   ***********************
*/

/* The corrected power-function: */
pow(b,e) := block([ze : is(equal(e,0))],
 if ze=true then return(1)
 elseif ze=false then return(b^e)
 else block([zb : is(equal(b,0))],
   if zb=true then return(if equal(e,0) then 1 else 0)
   elseif zb=false then return(b^e)
   else return(ev(pow(b,e),noeval))))$


/*!
\endhtmlonly
*/

