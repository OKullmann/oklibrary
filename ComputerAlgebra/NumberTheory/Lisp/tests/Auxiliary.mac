/* Oliver Kullmann, 7.6.2008 (Swansea) */
/* Copyright 2008, 2009, 2010, 2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/NumberTheory/Lisp/tests/Auxiliary.mac
  \brief Tests for auxiliary number theory functions

Use by

oklib_load("OKlib/ComputerAlgebra/NumberTheory/Lisp/tests/Auxiliary.mac");

*/

/*!
\htmlonly
*/

oklib_include("OKlib/ComputerAlgebra/TestSystem/Lisp/Asserts.mac")$
oklib_include("OKlib/ComputerAlgebra/NumberTheory/Lisp/Auxiliary.mac")$

kill(f)$

/* **************
   * Logarithms *
   **************
*/

okltest_ld(f) := (
  for n : 0 thru 10 do
    assert(f(2^n) = n),
  true)$

okltest_log10(f) := (
  for n : 0 thru 10 do
    assert(f(10^n) = n),
  true)$

okltest_fld(f) := (
  assert(f(0) = minf),
  assert(f(1) = 0),
  assert(f(2) = 1),
  assert(f(3) = 1),
  assert(f(4) = 2),
  assert(f(5) = 2),
  assert(f(2^10) = 10),
  assert(f(2^10-1) = 9),
  assert(f(2^10+1) = 10),
  for n : 1 thru 100 do
    assert(f(n) = floor(log(n)/log(2))),
  true)$

okltest_cld(f) := (
  assert(f(0) = minf),
  for n : 1 thru 100 do
    assert(f(n) = ceiling(log(n)/log(2))),
  true)$

okltest_floorlog(f) := (
  assert(okltest_fld(buildq([f],
    lambda([x], if x=0 then minf else f(x,2))))),
  for b : 3 thru 7 do
    for e : 0 thru 5 do
      assert(f(b^e,b) = e),
  /* XXX */
  true)$


/* ******************************
   * Representations of numbers *
   ******************************
*/

okltest_str2chrl(f) := block(
  assert(f("") = []),
  assert(f("1") = ["1"]),
  assert(f("a") = ["a"]),
  assert(f("10") = ["1","0"]),
  assert(f("abcd") = ["a","b","c","d"]),
  true)$

okltest_digit2int(f) := block(
  for n : 0 thru 9 do
    assert(f(string(n)) = n),
  assert(f("A") = 10),
  assert(f("F") = 15),
  assert(f("Z") = 35),
  true)$

okltest_int2digit(f) := block(
  for n : 0 thru 9 do
    assert(f(n) = string(n)),
  assert(f(10) = "A"),
  assert(f(15) = "F"),
  assert(f(35) = "Z"),
  true)$

okltest_polyadic2int(f) := (
  assert(f([],0) = 0),
  assert(f([],1) = 0),
  assert(f([0],0) = 0),
  assert(f([1],0) = 1),
  assert(f([0],1) = 0),
  assert(f([1],1) = 1),
  assert(f([1,1,1],0) = 1),
  assert(f([-2,3,-1],2) = -3),
  true)$

okltest_polyadicstr2int(f) := block(
  for n : 0 thru 3 do
    assert(f("0",n) = 0),
  for n : 0 thru 3 do
    assert(f("00000",n) = 0),
  for n : 0 thru 3 do
    assert(f("10",n) = n),
  assert(f("1110101",1) = 5),
  for n : -3 thru 3 do
    assert(f(string(n),abs(n)+1) = n),
  assert(f("FGDD",0) = 13),
  assert(f("EE8C04",16) = 15633412),
  assert(f("-EE8C04",16) = -15633412),
  assert(f("MK014LZDF",36) = 63631769456211), 
  assert(f("-MK014LZDF",36) = -63631769456211),
  true)$

okltest_int2polyadic(f) := (
  assert(f(0,0) = [0]),
  assert(f(0,1) = [0]),
  assert(f(9,10) = [9]),
  assert(f(99,10) = [9,9]),
  assert(f(100,101) = [100]),
  assert(f(101,101) = [1,0]).
  assert(f(136792598789324718765670228683992083246,256) = 
    map(hex2int, ["66","E9","4B","D4","EF","8A","2C","3B","88","4C","FA","59","CA","34","2B","2E"])),
  true)$

okltest_int2polyadic_padd(f) := (
  assert(f(0,0,0) = [0]),
  assert(f(0,0,1) = [0]),
  assert(f(0,0,2) = [0,0]),
  assert(f(9,10,0) = [9]),
  assert(f(9,10,1) = [9]),
  assert(f(9,10,2) = [0,9]),
  true)$

okltest_int2polyadicstr(f) := block(
  for n : 0 thru 3 do
    assert(f(0,n) = "0"),
  for n : 2 thru 12 do
    assert(f(n,n) = "10"),
  for n : -9 thru 9 do
    assert(f(n,10) = string(n)),
  assert(f(15633412,16) = "EE8C04"),
  assert(f(-15633412,16) = "-EE8C04"),
  assert(f(63631769456211,36) = "MK014LZDF"), 
  assert(f(-63631769456211,36) = "-MK014LZDF"),
  true)$


okltest_hexstr2binv(f) := block(
  assert(f("") = []),
  assert(f("0") = [0,0,0,0]),
  assert(f("0") = [0,0,0,0]),
  assert(f("1") = [0,0,0,1]),
  assert(f("2") = [0,0,1,0]),
  assert(f("3") = [0,0,1,1]),
  assert(f("7") = [0,1,1,1]),
  assert(f("E") = [1,1,1,0]),
  for i : 2 thru 10 do
    assert(
      f(apply(sconcat, create_list("0",j,1,i))) =
      lappend(create_list([0,0,0,0],j,1,i))),
  for i : 2 thru 10 do
    assert(
      f(apply(sconcat, create_list("F",j,1,i))) =
      lappend(create_list([1,1,1,1],j,1,i))),
  assert(f("F3A21001A012B3ABB2") =
    [1,1,1,1,0,0,1,1,1,0,1,0,0,0,1,0,0,0,0,1,0,0,
     0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,1,
     0,0,1,0,1,0,1,1,0,0,1,1,1,0,1,0,1,0,1,1,1,0,
     1,1,0,0,1,0]),
  true)$

okltest_binv2hexstr(f) := block(
  assert(f([]) = ""),
  assert(f([0]) = "0"),
  assert(f([1]) = "1"),
  assert(f([1,0]) = "2"),
  assert(f([0,1,0]) = "2"),
  assert(f([0,0,1,0]) = "2"),
  assert(f([0,0,1,1]) = "3"),
  assert(f([1,1,1]) = "7"),
  assert(f([1,1,1,1]) = "F"),
  assert(f([1,1,1,1,1]) = "F1"),
  assert(f([1,1,1,1,0,1]) = "F1"),
  assert(f([1,1,1,1,0,0,1]) = "F1"),
  for i : 2 thru 10 do
    assert(
      f(lappend(create_list([1,1,1,1],k,1,i))) =
      apply(sconcat, create_list("F",k,1,i))),
  for i : 2 thru 10 do
      assert(
        f(lappend(create_list([0,0,0,0],k,1,i))) =
        apply(sconcat, create_list("0",k,1,i))),
  /* Testing non-multiple-of-4 values */
  for i : 2 thru 10 do
    assert(
      f(append(lappend(create_list([1,1,1,1],k,1,i)),[1])) =
      sconcat(apply(sconcat, create_list("F",k,1,i)),"1")),
  for i : 2 thru 10 do
    assert(
      f(append(lappend(create_list([1,1,1,1],k,1,i)),[0,1])) =
      sconcat(apply(sconcat, create_list("F",k,1,i)),"1")),
  true)$


/* ************
   * Rounding *
   ************
*/

okltest_round_fdd(f) := (
  for d : 0 thru 4 do block([r : f(1,d)],
    assert(equal(r,1)),
    assert(floatnump(f(1,d)) = true)
  ),
  assert(equal(f(10.0,0), 10)),
  assert(equal(f(10.1,0), 10)),
  assert(equal(f(10.2,0), 10)),
  assert(equal(f(10.3,0), 10)),
  assert(equal(f(10.4,0), 10)),
  assert(equal(f(10.5,0), 10)),
  assert(equal(f(10.6,0), 11)),
  assert(equal(f(10.7,0), 11)),
  assert(equal(f(10.8,0), 11)),
  assert(equal(f(10.9,0), 11)),
  assert(equal(f(11.5,0), 12)),
  assert(equal(f(10.50,1), 10.5)),
  assert(equal(f(10.51,1), 10.5)),
  assert(equal(f(10.52,1), 10.5)),
  assert(equal(f(10.53,1), 10.5)),
  assert(equal(f(10.54,1), 10.5)),
  assert(equal(f(10.55,1), 10.6)),
  assert(equal(f(10.56,1), 10.6)),
  assert(equal(f(10.57,1), 10.6)),
  assert(equal(f(10.58,1), 10.6)),
  assert(equal(f(10.59,1), 10.6)),
  assert(equal(f(10.65,1), 10.6)),
  assert(equal(f(10.66,1), 10.7)),
  true)$

okltest_round_bfdd(f) := block(
 [fpprec : 16],
   for d : 0 thru 4 do block([r : f(1,d)],
     assert(equal(r,1)),
     assert(bfloatp(r) = true)
  ),
  assert(equal(f(10.0,0), 10)),
  assert(equal(f(10.1,0), 10)),
  assert(equal(f(10.2,0), 10)),
  assert(equal(f(10.3,0), 10)),
  assert(equal(f(10.4,0), 10)),
  assert(equal(f(10.5,0), 10)),
  assert(equal(f(10.6,0), 11)),
  assert(equal(f(10.7,0), 11)),
  assert(equal(f(10.8,0), 11)),
  assert(equal(f(10.9,0), 11)),
  assert(equal(f(11.5,0), 12)),
  assert(equal(f(10.50,1), 10.5)),
  assert(equal(f(10.51,1), 10.5)),
  assert(equal(f(10.52,1), 10.5)),
  assert(equal(f(10.53,1), 10.5)),
  assert(equal(f(10.54,1), 10.5)),
  assert_bfloat_equal(f(10.55,1), 10.6, 16),
  assert_bfloat_equal(f(10.56,1), 10.6, 16),
  assert_bfloat_equal(f(10.57,1), 10.6, 16),
  assert_bfloat_equal(f(10.58,1), 10.6, 16),
  assert_bfloat_equal(f(10.59,1), 10.6, 16),
  assert_bfloat_equal(f(10.65,1), 10.6, 16),
  assert_bfloat_equal(f(10.66,1), 10.7, 16),
  true)$


/* **********************
   * Integer partitions *
   **********************
*/

okltest_ext_integer_partitions(f) := (
  assert(f(-1) = {}),
  assert(f(0) = {[]}),
  assert(f(1) = {[1]}),
  assert(f(2) = {[1,1],[2]}),
  assert(f(3) = {[1,1,1],[2,1],[3]}),
  assert(f(4) = {[1,1,1,1],[2,1,1],[3,1],[2,2],[4]}),
  true)$

okltest_num_ext_integer_partitions(f) := (
  for n : 0 thru 6 do
    assert(f(n) = length(ext_integer_partitions(n))),
  true)$

okltest_uinteger_partitions(f) := (
  assert(f(-1) = {}),
  assert(f(0) = {[]}),
  assert(f(1) = {[1]}),
  assert(f(2) = {[1,1],[2]}),
  assert(f(3) = {[1,1,1],[2,1],[1,2],[3]}),
  assert(f(4) = {[1,1,1,1],[2,1,1],[1,2,1],[1,1,2],[3,1],[1,3],[2,2],[4]}),
  true)$

okltest_num_uinteger_partitions(f) := (
  for n : 0 thru 7 do
    assert(f(n) = length(uinteger_partitions(n))),
  true)$


/* ***********************
   * Corrected functions *
   ***********************
*/

okltest_pow(f) := block([x,y,a],
  assert(pow(0,0) = 1),
  assert(pow(0,1) = 0),
  assert(pow(1,0) = 1),
  assert(pow(1,1) = 1),
  assert(pow(2,2) = 4),
  assert(pow(2,-2) = 1/4),
  assert(pow(x,0) = 1),
  assert(pow(0,x) = if equal(x,0) then 1 else 0),
  assert(pow(x,1) = x),
  assert(pow(1,x) = 1),
  assert(pow(x,y) = ev(pow(x,y),uneval)),
  a : pow(x,y),
  assert(a = ev(pow(x,y),uneval)),
  y : 1,
  assert(ev(a) = x),
  y : 0,
  assert(ev(a) = 1),
  kill(y), 
  assert(a = ev(pow(x,y),uneval)),
  x : 0,
  assert(ev(a) = if equal(y,0) then 1 else 0),
  y : 0,
  assert(ev(a) = 1),
  true)$

/*!
\endhtmlonly
*/
