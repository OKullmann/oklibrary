/* Oliver Kullmann, 6.10.2019 (Swansea) */
/* Copyright 2019 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ComputerAlgebra/NumberTheory/Lisp/CoveringSystems.mac
  \brief Functions related to covering systems

Use by

oklib_load("OKlib/ComputerAlgebra/NumberTheory/Lisp/CoveringSystems.mac");

*/

/*!
\htmlonly
*/

/* ******************************
   * The Odd Modulus Conjecture *
   ******************************
*/

/* Searching for a counter-example of deficiency 1

   Growing a counter-example, greedily (which might here be w.l.o.g.):

   The "mu-value" mu is the number of leaves which can be immediately closed
   (upon expansion).
   The stack S is a list of mu-values.

   The current width w is the number of leaves for the next expansion-step.

   nds is the number of nodes in the tree.
*/

/* Close one path, with constant w, updating S, nds: */
oddmodconj_mu1_expand(mu0,w) := block([mu:mu0, new_leaves],
  for i:0 while mu < w do (
    nds : nds + w,
    new_leaves : w - mu - 1,
    mu : mu + mu0,
    S : append(makelist(mu, new_leaves), S)
  ),
  nds : nds + w
)$

/* Starting with domain-size 3 and closing one child of the root,
   return the next width, the current number of open leaves, and
   the number of nodes accumulated:
*/
oddmodconj_mu1_counterexample(maxnds,nextf) :=
 block([S:[2], nds:1+3+3+3, w:nextf(3), mu],
  for i:0 while nds < maxnds and not emptyp(S) do (
    mu : first(S), S : rest(S),
    oddmodconj_mu1_expand(mu, w),
    w : nextf(w)
  ),
  [w,length(S),nds]
)$

/* Counterexample for (just) var-stratification:
oddmodconj_mu1_counterexample(50, lambda([x],x+1));
  [6,0,28]
0 open leaves means that a counterexample was found, using widths 3,4,5,
and 28 nodes.

   Search for Counterexample for full conjecture:
oddmodconj_mu1_counterexample(25,next_prime);
  [7,2,25]
oddmodconj_mu1_counterexample(10^10,next_prime);
  [502133,254371,10000008852]
oddmodconj_mu1_counterexample(10^12,next_prime);
  [5477033,1019740,1000005387080]

Possibly it suffices just to use widths 3,5,7,8,9,... :
oddmodconj_mu1_counterexample(1e3,lambda([x],if x<=3 then x+2 else x+1));
  [16,0,175]
So just excluding width 4 is not sufficient, by an example using widths
3,5,6,7,...,15, and 175 nodes.
oddmodconj_mu1_counterexample(1e10,lambda([x],if x<=5 then x+2 else x+1));
  [141393,136959,10000130190]
oddmodconj_mu1_counterexample(1e12,lambda([x],if x<=5 then x+2 else x+1));
  [1414185,1207014,1000001367319]

*/

/* Square-free: */

/* Close one path, wupdating w, S, nds: */
oddmodconj_mu1sqfr_expand(mu0) := block([mu:mu0, new_leaves],
  for i:0 while mu < w do (
    nds : nds + w,
    new_leaves : w - mu - 1,
    mu : 2*mu,
    S : append(makelist(mu, new_leaves), S),
    w : nextf(w)
  ),
  nds : nds + w, w : nextf(w)
)$

/* Return the next width, the current number of open leaves, and
   the number of nodes accumulated:
*/
oddmodconj_mu1sqfr_counterexample(startw, maxnds, nextf) :=
 block([S:[1], nds:1, w:startw, mu],
  for i:0 while nds < maxnds and not emptyp(S) do (
    mu : first(S), S : rest(S),
    oddmodconj_mu1sqfr_expand(mu)
  ),
  [w,length(S),nds]
)$

/* Examples for completed trees when starting with width 2:

First plain var-stratification:

oddmodconj_mu1sqfr_counterexample(2, 10, lambda([x], x+1));
  [5,0,10]
This is the caterpillar tree with widths 2,3,4 (and 1+2+3+4=10 nodes);
note 2-2^0=1, 3-2^1=1, 4-2^2=0.

Now also with prime-values:
oddmodconj_mu1sqfr_counterexample(2, 18, next_prime);
  [11,0,18]
Again a caterpillar tree, with widths 2,3,5,7 (and 1+2+3+5+7=18 nodes);
note 2-2^0=1, 3-2^1=1, 5-2^2=1, 7-2^3=-1.

Searching for counterexamples for plain var-stratification:
oddmodconj_mu1sqfr_counterexample(3, 10^9, lambda([x], x+1));
  [44722,37072,1000006279]
oddmodconj_mu1sqfr_counterexample(3, 10^10, lambda([x], x+1));
  [141422,136945,10000020329]
oddmodconj_mu1sqfr_counterexample(3, 10^11, lambda([x], x+1));
  [447215,339033,100000404503]
oddmodconj_mu1sqfr_counterexample(3, 10^12, lambda([x], x+1));
  [1414215,1206999,1000001326003]

*/

/*!
\endhtmlonly
*/
