// Oliver Kullmann, 23.9.2009 (Swansea)
/* Copyright 2009 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file Experimentation/Investigations/RamseyTheory/GasarchProblems/plans/general.hpp
  \brief On investigations into Gasarch problems (including Gasarch numbers)

  Problems generated by output_gasarch_stdname(r,p,q).


  \todo Basic notions
  <ul>
   <li> Let gasarch(r) by the smallest d such that gasarch_nbfclud(r,d,d)
   is unsatisfiable. </li>
   <li> Since the problems are special bipartite Ramsey problems, we better
   introduce bipartite Ramsey problems in general, and then consider the
   Gasarch problems as finding a monochromatic 2x2-subgraph. </li>
  </ul>


  \todo Best local search algorithms
  <ul>
   <li> Evaluating
   \verbatim
E = run_ubcsat("Gasarch_4-17-17.cnf")
   \endverbatim
   by plot(E$alg,E$best) shows that adaptnovelty+ is clearly strongest
   (default values, that is, cutoff=10^5). </li>
  </ul>


  \todo Investigating the 16 x 16 case
  <ul>
   <li> Problem generation by output_gasarch_stdname(4,16,16). </li>
   <li> With cutoff=10^5 a solution was found in run 8. </li>
  </ul>


  \todo Investigating the 16 x 17 case
  <ul>
   <li> Problem generation by output_gasarch_stdname(4,16,17). </li>
   <li> cutoff=10^5:
   \verbatim
> ubcsat-okl -alg adaptnovelty+ -cutoff 100000 -runs 100 -i Gasarch_4-16-17.cnf -solve | tee Gasarch_4-16-17.cnf_OUT
> E = read_ubcsat("Gasarch_4-16-17.cnf_OUT");
 4  5  6  7  8
 4 31 44 20  1
100
> summary(E$osteps)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
   3534   14390   40630   41660   64290   98750
     \endverbatim
     </li>
     <li> cutoff=10^6:
     \verbatim
> E = read_ubcsat("Gasarch_4-16-17.cnf_OUT2");
 4  5  6
42 57  1
100
> summary(E$osteps)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
   6984  116100  267100  324700  490500  998400
   \endverbatim
   </li>
   <li> cutoff=10^7
   \verbatim
> ubcsat-okl -alg adaptnovelty+ -cutoff 10000000 -runs 100 -i Gasarch_4-16-17.cnf -solve | tee Gasarch_4-16-17.cnf_OUT3
> E = read_ubcsat("Gasarch_4-16-17.cnf_OUT3");
 3  4
22 78
100
> summary(E$osteps)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
  73910  647600 1763000 2432000 3618000 9801000
> ubcsat-okl -alg adaptnovelty+ -cutoff 10000000 -runs 2000 -i Gasarch_4-16-17.cnf -solve | tee Gasarch_4-16-17.cnf_OUT5
Clauses = 67184
Variables = 1088
TotalLiterals = 265472
FlipsPerSecond = 170466
BestStep_Mean = 2394165.637000
Steps_Mean = 10000000.000000
Steps_Max = 10000000.000000
PercentSuccess = 0.00
BestSolution_Mean = 3.765000
BestSolution_Median = 4.000000
BestSolution_Min = 2.000000
BestSolution_Max = 5.000000
> E=read_ubcsat("Gasarch_4-16-17.cnf_OUT5")
   2    3    4    5
   4  467 1524    5
2000
> summary(E$osteps)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
  26330  641300 1540000 2394000 3291000 9990000
> E[E$min==2,]
     sat min  osteps msteps       seed
529    0   2 9152422  1e+07 3103656038
550    0   2 3109812  1e+07 2805697975
1846   0   2 7230811  1e+07  356507595
1987   0   2 2546463  1e+07 1382936908
   \endverbatim
   Running these four seeds with 4*10^9 steps still yields only min=2.
   </li>
   <li> cutoff=10^8:
   \verbatim
>  ubcsat-okl -alg adaptnovelty+ -cutoff 100000000 -runs 100 -i Gasarch_4-16-17.cnf -solve | tee Gasarch_4-16-17.cnf_OUT4
> E = read_ubcsat("Gasarch_4-16-17.cnf_OUT4");
 3  4
39  4
43
> summary(E$osteps)
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max.
   92170  8709000 23920000 31800000 50790000 93420000
   \endverbatim
   </li>
   <li> With minisat2-preprocessing:
    <ol>
     <li> cutoff=10^6 (adaptnovelty+):
     \verbatim
 5  6  7  8  9 10
 3 14 38 28 12  5
100
     \endverbatim
     </li>
     <li> cutoff=10^7
     \verbatim
> ubcsat-okl -alg adaptnovelty+ -cutoff 10000000 -runs 100 -i Gasarch_4-16-17-m2pp.cnf -solve | tee Gasarch_4-16-17-m2pp.cnf_OUT2
Clauses = 66096
Variables = 1088
TotalLiterals = 393312
FlipsPerSecond = 30907
BestStep_Mean = 3805127.530000
Steps_Mean = 10000000.000000
Steps_Max = 10000000.000000
PercentSuccess = 0.00
BestSolution_Mean = 5.830000
BestSolution_Median = 6.000000
BestSolution_Min = 4.000000
BestSolution_Max = 7.000000
> E=read_ubcsat("Gasarch_4-16-17-m2pp.cnf_OUT2")
 4  5  6  7
 2 26 59 13
100
     \endverbatim
     So here again it seems that the preprocessing doesn't help; and
     furthermore the flips-per-second seem to be drastically reduced
     compared to without preprocessing (the number of literal occurrences
     has just been increased by a factor of 393312/265472 = 1.481557). </li>
     <li> One needs to consider whether other algorithms might be better on
     this instance:
     \verbatim
> E = run_ubcsat("Gasarch_4-16-17-m2pp.cnf", cutoff=1000000,runs=100)
plot(E$alg,E$best)
> table(E$best[E$alg=="adaptnoveltyp"])
 5  6  7  8  9 10
 2 19 34 27 15  3
> table(E$best[E$alg=="hwsat"])
 6  7  8  9 10
16 26 34 23  1
     \endverbatim
     shows clearly that also here adaptnovelty+ is best, followed by hwsat.
     </li>
    </ol>
   </li>
   <li> Complete solvers:
    <ol>
     <li> march_pl doesn't make progress at all. </li>
     <li> minisat2 and picosat apparently also don't make progress. </li>
     <li> Hard to say about satz215, but also nothing happens. </li>
     <li> OKsolver with or without minisat2-preprocessing doesn't complete
     a node at level 30 within a day:
     \verbatim
> OKsolver_2002-m2pp -M -D30 Gasarch_4-16-17.cnf
s UNKNOWN
c sat_status                            2
c initial_maximal_clause_length         12
c initial_number_of_variables           816
c initial_number_of_clauses             66096
c initial_number_of_literal_occurrences 393312
c number_of_initial_unit-eliminations   0
c reddiff_maximal_clause_length         0
c reddiff_number_of_variables           0
c reddiff_number_of_clauses             0
c reddiff_number_of_literal_occurrences 0
c number_of_2-clauses_after_reduction   816
c running_time(sec)                     37419.5
c number_of_nodes                       244589
c number_of_single_nodes                24758
c number_of_quasi_single_nodes          0
c number_of_2-reductions                889054
c number_of_pure_literals               0
c number_of_autarkies                   0
c number_of_missed_single_nodes         16367
c max_tree_depth                        194
c number_of_table_enlargements          0
c number_of_1-autarkies                 0
c number_of_new_2-clauses               0
c maximal_number_of_added_2-clauses     0
c file_name                             Gasarch_4-16-17.cnf_m2pp_8228
> OKsolver_2002-O3-DNDEBUG -M -D30 Gasarch_4-16-17.cnf
s UNKNOWN
c sat_status                            2
c initial_maximal_clause_length         4
c initial_number_of_variables           1088
c initial_number_of_clauses             67184
c initial_number_of_literal_occurrences 265472
c number_of_initial_unit-eliminations   0
c reddiff_maximal_clause_length         0
c reddiff_number_of_variables           0
c reddiff_number_of_clauses             0
c reddiff_number_of_literal_occurrences 0
c number_of_2-clauses_after_reduction   1632
c running_time(sec)                     10937.1
c number_of_nodes                       700231
c number_of_single_nodes                37899
c number_of_quasi_single_nodes          0
c number_of_2-reductions                5878849
c number_of_pure_literals               0
c number_of_autarkies                   302
c number_of_missed_single_nodes         30075
c max_tree_depth                        233
c number_of_table_enlargements          0
c number_of_1-autarkies                 147596107
c number_of_new_2-clauses               0
c maximal_number_of_added_2-clauses     0
c file_name                             Gasarch_4-16-17.cnf
     \endverbatim
     Unclear whether preprocessing helps or not.
     </li>
    </ol>
   </li>
  </ul>


  \todo Investigating the 17 x 17 case
  <ul>
   <li> This was shown to be 4-colorable in "Most Complex Four-Colored
   Rectangle-free Grids - Solution of an Open Multiple-Valued Problem" at
   ISMVL 2012 by Christian Posthoff and Bernd Steinbach (to appear). </li>
   <li> A 4-coloring is available at
   http://www.cs.umd.edu/~gasarch/BLOGPAPERS/17.txt with discussion at
   http://blog.computationalcomplexity.org/2012/02/17x17-problem-solved-also-18x18.html.
   </li>
   <li> Problem generation by output_gasarch_stdname(4,17,17). </li>
   <li> cutoff=10^7:
   \verbatim
> ubcsat-okl -alg adaptnovelty+ -cutoff 10000000 -runs 100 -i Gasarch_4-17-17.cnf -solve
Clauses = 76007
Variables = 1156
TotalLiterals = 300560
FlipsPerSecond = 119833
BestStep_Mean = 2985189.990000
Steps_Mean = 10000000.000000
Steps_Max = 10000000.000000
PercentSuccess = 0.00
BestSolution_Mean = 6.450000
BestSolution_Median = 6.500000
BestSolution_Min = 5.000000
BestSolution_Max = 7.000000
   \endverbatim
   </li>
   <li> cutoff=10^8:
   \verbatim
> E = read_ubcsat("Gasarch_4-17-17.cnf_OUT");
 5  6
 8 39
47
> summary(E$osteps)
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max.
   40950  6445000 13800000 17590000 21600000 66880000
   \endverbatim
   Looks as if 5 would be the global minimum. </li>
   <li> OKsolver_2002 looks hopeless:
   \verbatim
> OKsolver_2002-O3-DNDEBUG -M -D30 Gasarch_4-17-17.cnf
s UNKNOWN
c sat_status                            2
c initial_maximal_clause_length         4
c initial_number_of_variables           1156
c initial_number_of_clauses             76007
c initial_number_of_literal_occurrences 300560
c number_of_initial_unit-eliminations   0
c reddiff_maximal_clause_length         0
c reddiff_number_of_variables           0
c reddiff_number_of_clauses             0
c reddiff_number_of_literal_occurrences 0
c number_of_2-clauses_after_reduction   1734
c running_time(sec)                     286.8
c number_of_nodes                       2184
c number_of_single_nodes                79
c number_of_quasi_single_nodes          0
c number_of_2-reductions                7789
c number_of_pure_literals               0
c number_of_autarkies                   16
c number_of_missed_single_nodes         124
c max_tree_depth                        243
c number_of_table_enlargements          0
c number_of_1-autarkies                 668409
c number_of_new_2-clauses               0
c maximal_number_of_added_2-clauses     0
c file_name                             Gasarch_4-17-17.cnf
   \endverbatim
   without reaching a monitoring node. </li>
   <li> Also with m2pp-preprocessing it looks hopeless:
   \verbatim
s UNKNOWN
c sat_status                            2
c initial_maximal_clause_length         12
c initial_number_of_variables           867
c initial_number_of_clauses             74851
c initial_number_of_literal_occurrences 445638
c number_of_initial_unit-eliminations   0
c reddiff_maximal_clause_length         0
c reddiff_number_of_variables           0
c reddiff_number_of_clauses             0
c reddiff_number_of_literal_occurrences 0
c number_of_2-clauses_after_reduction   867
c running_time(sec)                     283.9
c number_of_nodes                       596
c number_of_single_nodes                47
c number_of_quasi_single_nodes          0
c number_of_2-reductions                2397
c number_of_pure_literals               0
c number_of_autarkies                   0
c number_of_missed_single_nodes         10
c max_tree_depth                        177
c number_of_table_enlargements          0
c number_of_1-autarkies                 0
c number_of_new_2-clauses               0
c maximal_number_of_added_2-clauses     0
c file_name                             Gasarch_4-17-17.cnf_m2pp_22254
   \endverbatim
   </li>
   <li> minisat2 also looks hopeless, and aborted after 25 restarts (average
   length of clauses learned around 140). </li>
  </ul>


  \todo Investigating the 18 x 18 case
  <ul>
   <li> This was shown to be 4-colorable in "Most Complex Four-Colored
   Rectangle-free Grids - Solution of an Open Multiple-Valued Problem" at
   ISMVL 2012 by Christian Posthoff and Bernd Steinbach (to appear). </li>
   <li> Discussion of this and the coloring for 17x17 is at
   http://blog.computationalcomplexity.org/2012/02/17x17-problem-solved-also-18x18.html.
   </li>
  </ul>


  \todo Investigating the transversals
  <ul>
   <li> The full transversal hypergraph:
   \verbatim
fGh(d) := block([G : gasarch_hg(d,d), T],
 T : transversal_hg_rs(G),
 print(d, statistics_fcs(G), statistics_fcs(T),  ncl_list_fcs(T)),
 T
)$

fGh(1)$
1 [1,0,0,-1,inf] [1,1,0,0,0] [[0,1]]

fGh(2)$
2 [4,1,4,4,4] [4,4,4,1,1] [[1,4]]


fGh(3)$
3 [9,9,36,4,4] [9,51,198,4,3] [[3,6],[4,45]]

fGh(4)$
4 [16,36,144,4,4] [16,1240,10320,9,7] [[7,96],[8,648],[9,496]]
   \endverbatim
   </li>
   <li> Now just the sizes and the numbers of minimum hyperedges; first at 
   Maxima/Lisp level, then at C++ level. The generator here needs to be
   written so that only one vertex is added at a time.
   \verbatim
gasarch_sqatomic_ohg(n) := block([d : ceiling(n^(1/2)), G, V, VS, E],
 G : gasarch_ohg(d,d),
 V : take_elements(n,G[1]),
 VS : setify(V),
 E : sublist(G[2], lambda([H], subsetp(H, VS))),
 [V,E])$
gasarch_sqatomic_hg(n) := ohg2hg(gasarch_sqatomic_ohg(n))$

oklib_monitor : true$
Gh_36 : minimum_transversals_mongen(36,gasarch_sqatomic_hg,[{}])$
   1 0 1
2 0 1
3 0 1
   4 1 4
5 1 4
6 2 12
7 2 12
8 2 2
   9 3 6
10 3 6
11 4 30
12 5 72
13 5 72
14 5 12
15 6 42
   16 7 96
17 7 96
18 8 504
19 9 1320
20 10 2640
21 10 2640
22 10 480
23 11 1728
24 12 4056
   25 13 7800
26 13 7800
27 13 720
28 14 2520
29 15 5760
30 16 10800
31 16 10800
32 16 1440
33 17 6480
34 18 17280
35 19 36000
36 20 64800

gasarch_sqatomic_stdohg(n) := block([d : ceiling(n^(1/2)), G, V, VS, E],
 G : gasarch_stdohg(d,d),
 V : take_elements(n,G[1]),
 VS : setify(V),
 E : sublist(G[2], lambda([H], subsetp(H, VS))),
 [V,E])$
gasarch_sqatomic_stdhg(n) := ohg2hg(gasarch_sqatomic_stdohg(n))$

oklib_monitor : true$
Gh_64 : minimum_transversals_mongen(64,gasarch_sqatomic_stdhg,[{}])$
1 0 1
2 0 1
3 0 1
    4 1 4
5 1 3
6 2 11
7 2 11
8 2 2
    9 3 6
10 3 1
11 4 23
12 5 65
13 5 65
14 5 12
15 6 42
    16 7 96
17 7 3
18 8 399
19 9 1179
20 10 2499
21 10 2499
22 10 480
23 11 1728
24 12 4056
    25 13 7800
26 13 20

   \endverbatim
   so d in [1,2,3,4,5,6] -> tau(d) = 0, 1, 3, 7, 13, 20 yielding densities 
   0, 0.25, 0.33, 0.4375, 0.52, 0.5{period}, where the numbers of minimum 
   transversals are 1, 4, 6, 96, 7800, 64800, with 4=2^2, 6=2 * 3, 96=2^5 * 3, 
   7800=2^3 * 3 * 5^2 * 13, 64800=2^6 * 3^4 * 5^3.
   </li>
  </ul>

*/

