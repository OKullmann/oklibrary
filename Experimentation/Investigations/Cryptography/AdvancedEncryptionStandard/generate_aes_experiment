#!/bin/bash
# Matthew Gwynne, 3.2.2011 (Swansea)
# Copyright 2011, 2012 Oliver Kullmann
# This file is part of the OKlibrary. OKlibrary is free software; you can redistribute 
# it and/or modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation and included in this library; either version 3 of the 
# License, or any later version.

#
# Generates AES CNF translations and plaintext-ciphertext-pair variable assignments
# for experimentation.
#
# Takes eight arguments:
#
#   - The number r of rounds to run the experiment over.
# BUG: what means "over"? "rounds" can have many meanings -- do we run the experiment several times?
#   - The number k of plaintext-ciphertext-pairs to generate per round.
#   - The number c of columns in the AES block (1-4).
#   - The number rw of rows in the AES block (1-4).
#   - The size e of the element field (4 or 8).
#   - Whether or not to use a special final round by variable fin_b (true or
#     false).
#   - The AES box translation to use, by variable box_tran, with values:
#       - aes_ts_box - the canonical translation for all boxes.
#       - aes_small_box - the smallest CNF translations for all boxes.
#       - aes_rbase_box - the smallest r_1 bases for each box.
#   - Which MixColumns translation to use, by variable mc_tran, with values:
#       - aes_mc_forward - translating MixColumns in the forward direction.
#       - aes_mc_bidirectional - translating MixColumns in the both directions.
# 
# The script outputs a Dimacs file containing the CNF translation of the AES
# encryption scheme with the given parameters for each round size in (1-r)
# BUG: what is "in (1-r)" ??
# and for each round k Dimacs files are created containing the 
# plaintext-ciphertext-pair variable assignments for random
# plaintext-ciphertext-pair
# BUG: apparently the files are just spilled into the current directory??
# chosen using seeds 1-k.
#
# To monitor the progress of the experiment generation, set the "oklib_monitor"
# environment variable to "true".
#
# To use specialised Maxima functions for faster generation (at the loss of
# readability of the variable names), set the "oklib_fast" environment variable
# to true.
#
# The files names of the translation output, and plaintext-ciphertext-pair
# assignment files are:
#
#  ssaes_r${ri}_c${c}_rw${rw}_e${e}_f${fin_z}.cnf
#  ssaes_pcpair_r${r}_c${c}_rw${rw}_f${fin_z}_s${ki}
#
# resp., where fin_z is 1 if fin_b is true and 0 otherwise, ri ranges from 
# 1-r and ki ranges from 1-k. These files are created in the
#
#   ssaes_r1-${r}_c${c}_rw${rw}_e${e}_f${fin_z}_k1-${k}_${box_tran}_${mc_tran}
#
# directory (created by this script).
#
# Each translation CNF file will contain a full variable mapping explaining
# the origin of each variable at the top of the Dimacs file in the comments.
#
# See output_ss_fcl_std and ss_random_pc_pair in 
# OKlib/ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/Translations.mac
# for relevant functions at the Maxima level.
#
# Dependencies:
#   This script depends on both the Maxima functions output_ss_fcl_std
#   and ss_random_pc_pair yielding files with names in the format
#   ss_r${r}_* and ssaes_pcpair_r${r}_*_s${k}.cnf.
# 

set -o errexit
set -o nounset

script_name="generate_aes_experiment"
err="ERROR[${script_name}]:"
version="0.1.2"

if [[ ! $# -eq 8 ]]; then
  echo -n "${err} Takes exactly eight arguments, the number of rounds, number ",
  echo -n "of plaintext-ciphertext-pairs per round, the number of columns, "
  echo -n "the number of rows, the field size, whether or not to use a special "
  echo -n "final round, which box translation to use and which MixColumn "
  echo "translation to use."
  exit 1;
fi  

# Check if monitor is set from the environment and set it if not.
if [[ ! -n ${oklib_monitor+1} ]]; then
    oklib_monitor=false
fi
rounds=$1
unique_keys_per_round=$2
columns=$3
rows=$4
e=$5
fin_b=$6
box_tran=$7
mc_tran=$8

if [[ ${fin_b} == "true" ]]; then
  fin_z=1
else
  fin_z=0
fi

exp_directory_name=ssaes_r1-${rounds}_c${columns}_rw${rows}_e${e}_f${fin_z}_k1-${unique_keys_per_round}_${box_tran}_${mc_tran}
mkdir ${exp_directory_name}
cd ${exp_directory_name}


# Work out the number of arguments for the assignment clauses generator
# Note, it doesn't take the two final translation arguments.
shift 2
args=$(echo "$@" | cut -d " " -f "1-" --output-delimiter=",")
let num_key_args=$#-2
key_gen_args=$(echo "${@:1:${num_key_args}}" | cut -d " " -f "1-" --output-delimiter=",")


if [[ ! -n ${oklib_fast+1} ]]; then
    oklib_fast=false
fi

# Specialised Maxima clause-set renaming and variable generation functions
# which use Maxima's associative arrays instead of hash tables for a speed
# up. They are introduced here as their use of global variables means they
# aren't suitable for general use in the Maxima system.
if [[ ${oklib_fast} == "true" ]]; then
    fast_rename_code=$(cat <<EOF
rename_fcl(FF,VL) := block([count : -1], local(h),
  for V in map(\"[\", FF[1], VL) do h[V[1]] : V[2],
  return([create_list(i,i,1,length(FF[1])),
   map(
     lambda([C], (  
       if oklib_monitor then 
           (count : count + 1, 
            if mod(count,1000) = 0 then 
              print(\"Renaming \", count, \"/\",length(FF[2]))),
       map(lambda([L], if L > 0 then h[L] else -h[-L]), C))), FF[2])]));
gen_count : 384;
generate_ss_constraint_vars(n,m,namespace, id) := 
  create_list(
          if integerp(gen_h[namespace(ss_var(i,id))]) then gen_h[namespace(ss_var(i,id))]
          else gen_h[namespace(ss_var(i,id))] : (gen_count : gen_count +1),
          i,n,m);
EOF
    )
    fast_rename_code=$(echo ${fast_rename_code} | tr '\n' ' ')
else
    fast_rename_code=""
fi

if [[ ${oklib_monitor} == "true" ]]; then
    oklib --maxima --batch-string="\"oklib_load(\\\"OKlib/ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/Translations.mac\\\"); oklib_monitor : true; ${fast_rename_code} file_search_maxima : cons(\\\"$(pwd)\\\",file_search_maxima); print(file_search_demo); oklib_plain_include(\\\"AESExperimentAuxilliary.mac\\\"); for r : 1 thru ${rounds} do ( output_ss_fcl_std(r,${args}), for i : 1 thru ${unique_keys_per_round} do output_ss_random_pc_pair(i,r,${key_gen_args}));\""
else
    oklib --maxima --batch-string="\"oklib_load(\\\"OKlib/ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/Translations.mac\\\"); ${fast_rename_code} file_search_maxima : cons(\\\"$(pwd)\\\",file_search_maxima);  print(file_search_demo); if file_search(\\\"AESExperimentAuxilliary.mac\\\") # false then oklib_plain_include(\\\"AESExperimentAuxilliary.mac\\\"); for r : 1 thru ${rounds} do ( output_ss_fcl_std(r,${args}), for i : 1 thru ${unique_keys_per_round} do output_ss_random_pc_pair(i,r,${key_gen_args}));\"" 2>&1 > /dev/null
fi

