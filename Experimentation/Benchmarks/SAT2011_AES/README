# Matthew Gwynne 2.3.2011 (Swansea)

I Directory content:

  - Benchmarks/B/aes_B_N_keyfind_*.cnf are the N round B-bit AES benchmark
    instances
  - Assignments/B/aes_ass_B_N_keyfind_*.cnf are the N round B-bit AES benchmark
    plain-text/cipher-text variable assignments
  - Formulas/B/aes_ass_B_N_keyfind_*.cnf are the N round B-bit AES benchmark
    uninstantiated AES formulas
  - MD5_BenchmarksB contains the md5 hash values of the B-bit AES
    benchmark instances for B = 32, 64 or 128.
  - MD5_FormulasB contains the md5 hash values of the B-bit AES
    formulas for B = 32, 64 or 128.
  - MD5_AssignmentsB contains the md5 hash values of the B-bit AES
    assignments for B = 32, 64 or 128.
  - clause-set concatenation tool ./AppendDimacs-O3-DNDEBUG
  - this README file.


II Advanced Encryption Standard I benchmarks

We provide translations of the Advanced Encryption Standard (AES) and small
scale variants as key discovery problems. All provided instances are 
satisfiable and the solutions for these benchmarks correspond to valid keys
for fixed choices of plain-text and cipher-text. We also provide template 
formulas for generating more key discovery instances (see IV).


III Background

We call the translation used to generate these instances "the minimum box 
translation". This translation uses CNF representations of minimum size of 
the components of the AES, with the aim of producing a translation with as
few clauses as possible. These components ("boxes") are 8-bit permutations and
yield 16-bit boolean functions. Composition happens by using new variables.

Whether some of these boxes are in fact of minimum size is still an open
question. See the related SAT2011 benchmarks for MAXSAT and pseudo-boolean
benchmarks for these optimisation problems.

Such an approach is a natural starting point, minimising size, but just the
beginning. We investigate better representations in the OKlibrary (see X) and
consider what constitutes a good translation in a forthcoming technical report
on attacking the AES cipher using SAT

@TechReport{GwynneKullmann2008AES,
  author =       {Matthew Gwynne and Oliver Kullmann},
  title =        {Attacking {AES} via {SAT}},
  institution =  {arXiv},
  year =         2011,
  number =       {arXiv:??? [cs.DM]},
  month =        {April},
  annote =       {In preparation.}
}

Additional to this benchmark set, we separately provide "The AES 
challenge" benchmark, a single 10 round AES instance with an unknown key; 
an open challenge to the SAT community. 


IV The 26 instances are already provided, but can also be generated by running

bits=128; for r in 1 2 3 10; do for s in 1 2; do ./AppendDimacs-O3-DNDEBUG Formulas/${bits}/aes_${bits}_${r}.cnf Assignments/${bits}/aes_ass_${bits}_${r}_keyfind_${s}.cnf > Benchmarks/${bits}/aes_${bits}_${r}_keyfind_${s}.cnf; done; done

bits=64; for r in 1 2 3 4; do for s in 1 2; do ./AppendDimacs-O3-DNDEBUG Formulas/${bits}/aes_${bits}_${r}.cnf Assignments/${bits}/aes_ass_${bits}_${r}_keyfind_${s}.cnf > Benchmarks/${bits}/aes_${bits}_${r}_keyfind_${s}.cnf; done; done

bits=32; for r in 1 2 3 4 5; do for s in 1 2; do ./AppendDimacs-O3-DNDEBUG Formulas/${bits}/aes_${bits}_${r}.cnf Assignments/${bits}/aes_ass_${bits}_${r}_keyfind_${s}.cnf > Benchmarks/${bits}/aes_${bits}_${r}_keyfind_${s}.cnf; done; done

in this directory.


V Instances

  - with size in bytes
  - "e" for easy, "m" for "medium", "h" for "hard", "vh" for "very hard",
    "eh" for extremely hard", "leh" for "likely excessively hard"

2032954  aes_128_1_keyfind_1.cnf   sat (vh)
2032956  aes_128_1_keyfind_2.cnf   sat (vh)
4089629  aes_128_2_keyfind_1.cnf   sat (eh)
4089625  aes_128_2_keyfind_2.cnf   sat (eh)
6116119  aes_128_3_keyfind_1.cnf   sat (eh)
6116120  aes_128_3_keyfind_2.cnf   sat (eh)
19211912 aes_128_10_keyfind_1.cnf  sat (leh)
19211911 aes_128_10_keyfind_2.cnf  sat (leh)
549932   aes_64_1_keyfind_1.cnf    sat (m)
549936   aes_64_1_keyfind_2.cnf    sat (m)
1078344  aes_64_2_keyfind_1.cnf    sat (h)
1078342  aes_64_2_keyfind_2.cnf    sat (h)
1617002  aes_64_3_keyfind_1.cnf    sat (vh)
1616999  aes_64_3_keyfind_2.cnf    sat (vh)
2157917  aes_64_4_keyfind_1.cnf    sat (vh)
2157908  aes_64_4_keyfind_2.cnf    sat (vh)
221357   aes_32_1_keyfind_1.cnf    sat (e)
221355   aes_32_1_keyfind_2.cnf    sat (e)
433383   aes_32_2_keyfind_1.cnf    sat (e)
433390   aes_32_2_keyfind_2.cnf    sat (e)
645450   aes_32_3_keyfind_1.cnf    sat (h)
645453   aes_32_3_keyfind_2.cnf    sat (h)
857550   aes_32_4_keyfind_1.cnf    sat (h)
857544   aes_32_4_keyfind_2.cnf    sat (h)
1071064  aes_32_5_keyfind_1.cnf    sat (h)
1071061  aes_32_5_keyfind_2.cnf    sat (h)


VI Template formulas

For each of the benchmarks in Benchmarks/B/aes_B_N_keyfind_*.cnf the 
uninstantiated B-bit AES formula for N rounds is provided in 
Formulas/B/aes_B_N.cnf. The plain-text/cipher-text assignments, given as 
clause-sets with 2*N unit clauses, are then provided in 
Assignments/B/aes_ass_B_N_keyfind_*.cnf. The hexidecimal representations
of the plain-text, key and cipher-text are given in the first comment line
of the assignment files.

See IV for instructions on generating the provided benchmarks using the 
uninstantiated formulas and assignments.


VII The Advanced Encryption Standard and variants

We provide translations of the Advanced Encryption Standard key discovery 
problem into SAT. Benchmarks/B/aes_B_N_keyfind_S.cnf is a clause-set which is 
satisfied by a total assignment phi iff for the variables 1,...,3*B, we have 
that
  
  AES((1,...,B),(B+1,...,2*B)) = (2*B+1,...,3*B)

for N round B-bit AES. That is, that the plain-text variables, given by 1,...,B 
and key variables given by B+1,...,2*B encrypt using the corresponding AES
encryption to the cipher-text bits 2*B+1,...,3*B. All other variables within 
the clause-sets are uniquely determined given the plain-text, key and 
cipher-text variables.

For the 128-bit ten round AES (B=128, N=10), we consider the 
standard AES with nine full rounds, one special final round (key addition, 
SubBytes and ShiftRows) and then the final key addition. For all other 
instances, we consider the AES with N full rounds (key addition, SubBytes, 
ShiftRows and MixColumns), followed by a final key addition. 

The 64 and 32-bit AES instances refer to small scale variants of the standard
AES given in [Algebraic Aspects of the Advanced Encryption Standard; Cid, 
Murphy and Robshaw]. For more information, see the following references:

@Book{DaemenRijmen2001Rijndael,
  author =	 {Joan Daemen and Vincent Rijmen},
  title = 	 {The Design of Rijndael},
  publisher = 	 {Springer},
  year = 	 2001,
  address =	 {Berlin},
  note =	 {ISBN 3-540-42580-2; QA76.9.A25 D32 2001}
}

@Book{CidMurphyRobshaw2006AlgebraicAES,
  author =       {Carlos Cid and Sean Murphy and Matthew Robshaw},
  title =        {Algebraic Aspects of the Advanced Encryption Standard},
  publisher =    {Springer},
  year =         2006,
  note =         {ISBN-10 0-387-24363-1}
}


VIII Example

Finding the key 128-bit key 86FE8B9D1965FC8EB292EA3214D49C44 from the plain-text 
25FF4FCCEB89C0478CCB90ED488581FC and cipher-text 
40FBC7D2468AD643DF44554CA65C47C3 for the 10 round 128-bit AES:

SAT2011_AES> AppendDimacs-O3-DNDEBUG Formulas/128/aes_128_10.cnf Assignments/128/aes_ass_128_10_keyfind_1.cnf > Benchmarks/128/aes_128_10_keyfind_1.cnf
SAT2011_AES> ./solve Benchmarks/128/aes_128_10_keyfind_1.cnf

where "./solve" is a SAT solver of your choice. Assuming the SAT solver solves
the instances, examining variables 129,...,256 yields the key
86FE8B9D1965FC8EB292EA3214D49C44.

So the first 16 bits of the key are variables 129,...,144, and the assignment

129,-130,-131,-132,-133,134,135,-136,137,138,139,140,141,142,143,-144

gives the first 4 hexidecimal digits of the key 86FE.



IX On the choice of instances

The Advanced Encryption Standard is a widely used encryption algorithm and
the performance of SAT solvers on these instances has a bearing the 
cryptographic security of the cipher.

We include the 128-bit benchmarks as these are of direct relevance to the
security of the AES. The 64 and 32 bit small scale variant instances are
similar enough in construction and cryptographic properties that finding
their solutions should yield insights into the AES itself or the notions
of security surrounding block ciphers. Such smaller instances are more
likely to be tractable.


X The OKlibrary http://www.ok-sat-library.org

All developments took place within the OKlibrary, an open-source research
platform around the SAT problem. Also the translation framework used to
generate the instances, formulas and assignments is provided there.

List of relevant directories in OKplatform/OKsystem/OKlib (where OKplatform
is the directory of the unpacked OKlibrary-package):

 - Experimentation/Benchmarks: all our benchmark packages (typically without
   the instances)
 - Experimentation/Investigations/Cryptography/AdvancedEncryptionStandard: all
   current investigations into AES
 - ComputerAlgebra/Cryptology/Lisp/CryptoSystems/Rijndael/: an AES 
   implementation in the Maxima computer algebra system
 - ComputerAlgebra/Cryptology/Lisp/Cryptanalysis/Rijndael/: the AES 
   translation in the Maxima computer algebra system

The OKlibrary-internal documentation for the SAT2011-benchmarks is provided at

http://cs.swan.ac.uk/~csoliver/ok-sat-library/internet_html/doc/doxygen_html/d3/d83/SAT2011_8hpp.html

