#!/usr/bin/env bash
# Oliver Kullmann, 19.3.2019 (Swansea)
# Copyright 2019 Oliver Kullmann
# This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
# it and/or modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation and included in this library; either version 3 of the
# License, or any later version. */

# USAGE:

# RunTime command arguments

# runs "command" N times with the arguments, determining the user-time per
# execution,and computing the minimum and maximum, printing out
# each timing result.
# At the end, call the command with -v, and print minimum and maximum.

# For example in this directory:
# ./RunTime ./TimingGeneration 1e9

# For changing N=20 (the default), use e.g.
# N=5 ./RunTime ./TimingGeneration 1e9

# TODOS:

# 1. An alternative is to use avgtime; for example to simulate the above, and
# with histogram, and first call discarded:
# avgtime -r20 -d -q -h ./TimingGeneration 1e9
# For our cases, only the minimum is of relevance.
# But some of the other functionalities might be of interest, for example
# the histogram and discarding the first call (whatever this means).

# 2. Monitoring of the core-frequency
# (a) Via "taskset" one can determine and restrict/set the core on which a pid
# or a job to be created is running.
# (b) Determine the current frequency: "cpupower" seems the best tool,
# for example to get the list of all current frequencies in GHz:
# cpupower -c 0-75 frequency-info -m -f | grep "kernel" | cut -d ' ' -f 6 | tr '\n' ' '; echo
# One needed to write a little tool, to show better that information.
# Via e.g.
# cpupower -c 77 frequency-info -m -f | grep "kernel" | cut -d ' ' -f 6
# one gets the current frequency of core 77. Without "-m" one gets apparently
# a more precise number, in khz.
# (c) Remains the question how to handle the measurement. Fixing the core,
# and polling the frequency every 0.1s say, running on a different core.
# (d) At the start RunTime determines its pid, and fixes its core.
# Then for the job to be run either a single different core is given,
# or, if it runs in parallel, a group of cores.
# The frequencies of this core will be monitored by RunTime.
# Likely a dedicated tool for monitoring frequencies is needed.
# There is "cpustat", which might suffice.
#
# The above tools can be installed on our main machines.


set -o errexit
set -o nounset

program="RunTime"
version="0.1.2"

: ${N:=20}

output_file="Output_RunTime.$$"

run_and_time() {
  /usr/bin/time -f "%U %e %S" "$@" 2>&1 > ${output_file}
}
extract_utime() {
  echo "$1"
}
extract_wtime() {
  echo "$2"
}
extract_stime() {
  echo "$3"
}

greater() {
  echo "$1 > $2" | bc
}

timings=$(run_and_time "$@")
min_utime=$(extract_utime ${timings})
max_utime=${min_utime}
min_wtime=$(extract_wtime ${timings})
max_wtime=${min_wtime}
min_stime=$(extract_stime ${timings})
max_stime=${min_stime}

echo "1 ${min_utime} ${min_wtime} MIN MAX"

for ((i=2; i <= N; ++i)); do
  timings=$(run_and_time "$@")
  utime=$(extract_utime ${timings})
  wtime=$(extract_wtime ${timings})
  stime=$(extract_stime ${timings})

  if [ $(greater ${utime} ${max_utime}) = 1 ]; then
    max_utime=${utime}
    echo -n "$i ${utime} MAX"
  elif [ $(greater ${min_utime} ${utime}) = 1 ]; then
    min_utime=${utime}
    echo -n "$i ${utime} MIN"
  else
    echo -n "$i ${utime}"
  fi

  if [ $(greater ${wtime} ${max_wtime}) = 1 ]; then
    max_wtime=${wtime}
    echo " ${wtime} MAX"
  elif [ $(greater ${min_wtime} ${wtime}) = 1 ]; then
    min_wtime=${wtime}
    echo " ${wtime} MIN"
  else
    echo " ${wtime}"
  fi

  if [ $(greater ${stime} ${max_stime}) = 1 ]; then
    max_stime=${stime}
  elif [ $(greater ${min_stime} ${stime}) = 1 ]; then
    min_stime=${stime}
  fi
done

$1 -v
echo "Output program:"
cat ${output_file}
echo "MIN + MAX user times:"
echo "${min_utime} ${max_utime}"
echo "MIN + MAX wallclock times:"
echo "${min_wtime} ${max_wtime}"
echo "MIN + MAX system times:"
echo "${min_stime} ${max_stime}"
rm ${output_file}

exit 0
