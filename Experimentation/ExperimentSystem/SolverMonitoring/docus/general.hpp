// Matthew Gwynne, 25.8.2011 (Swansea)
/* Copyright 2011 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file ExperimentSystem/SolverMonitoring/docus/general.hpp
  \brief Docus on monitoring solvers


  <h1> %Tools for extracting and monitoring </h1>

  %Tools for extracting data from and monitoring the running of solvers on
  experiments.


  <h2> Overview </h2>

  We provide tools for running solvers and extracting data associated with
  the instance, environment, solver and it's output. This allows one to run
  experiments over many instances, extracting all relevant data from each
  solver-run into experiment directories.


  <h2> Running experiments </h2>

  With any kind of experiment, in which a SAT solver is run on a CNF instance
  within the OKlibrary, the following experiment scripts should likely be
  used. These scripts run the solver and extract all of the solver data into
  formats readable by systems such as R.

  Each script has a name of the form <code>RunX</code> where X is the solver
  name. For example, <code>RunMinisat</code> should be used to run the
  <code>minisat-2.2.0</code> solver on an experiment instance.

  Each script takes the path to the instance to run the solver on as it's only
  argument. The script then runs the solver, and creates a directory
  <code>ExperimentMinisat_instance_timestamp</code> with the following files:
  <ul>
   <li> <code>Log</code>: general logging information. </li>
   <li> <code>Parameter</code>: the version of this script, the instance, and
   the solver used. </li>
   <li> <code>%Environment</code>: information on the computer environment </li>
   <li> A copy of the instance-file. </li>
   <li> <code>F</code>: contains the name of the (local) instance-file. </li>
   <li> <code>Result</code>: the solver output. </li>
   <li> <code>Statistics</code>: the extracted statistics, in R-readable
   format. </li>
  </ul>


  <h2> Extracting data </h2>

  The following tools extract data from existing solver output:
  <ul>
   <li> <code>ExtractMinisat</code>:
   </li>
  </ul>

  For example:
  \verbatim
> cat Result
WARNING: for repeatability, setting FPU to use double precision
============================[ Problem Statistics ]=============================
|                                                                             |
|  Number of variables:           576                                         |
|  Number of clauses:            5536                                         |
|  Parse time:                   0.00 s                                       |
|  Eliminated clauses:           0.00 Mb                                      |
|  Simplification time:          0.00 s                                       |
restarts              : 1726
conflicts             : 807682         (31799 /sec)
decisions             : 916640         (0.00 % random) (36088 /sec)
propagations          : 59107785       (2327078 /sec)
conflict literals     : 15525217       (34.76 % deleted)
Memory used           : 20.00 MB
CPU time              : 25.4 s
SATISFIABLE

> cat Result | ExtractMinisat
rn rc t sat cfs dec rts r1 mem ptime stime cfl
576 5536 25.4 1 807682 916640 1726 59107785 20.00 0.00 0.00 15525217
  \endverbatim

  The extraction scripts allow one to extract R-compatible data tables from
  existing solver output, or in cases where the experiment running scripts
  such as <code>RunMinisat</code> couldn't be used. However, in general the
  experiment scripts such as <code>RunMinisat</code> should be used in
  preference to calling the solver directly.


  <h2> Extracted data </h2>

  The extraction tools and <code>Statistics</code> file generated by
  the experiment scripts collect the following data:
  <ul>
   <li> rn : integer, number of variables. </li>
   <li> rc : integer, number of clauses. </li>
   <li> rl : integer, number of literal occurrences. </li>
   <li> Such general measures (n, c and l) always refer to the original
   input after removal of tautological clauses and repeated literals (not
   after preprocessing). </li>
   <li> t : double, solution time (in seconds). </li>
   <li> sat : in {0,1,2} for UNSAT, SAT, UNKNOWN. </li>
   <li> nds : double, number of nodes for look-ahead solvers. </li>
   <li> cfs : double, number of conflicts for conflict-driven solvers. </li>
   <li> dec : double, number of decisions for conflict-driven solvers. </li>
   <li> rts : double, number of restarts. </li>
   <li> r1 : double, number of unit-clause propagations. </li>
   <li> r2 : double, number of failed-literal reductions. </li>
   <li> pls : double, number of pure literals. </li>
   <li> ats : double, number of autarkies (not pure literals). </li>
   <li> h : integer, height of search-tree for look-ahead solvers. </li>
   <li> mem : double, in MB. </li>
   <li> ptime : double, parse time (in seconds). </li>
   <li> file : string. </li>
  </ul>

  All attributes always occur in extracted output, and <code>Statistics</code>
  file in the order given above. The values are those as reported by solver.

  Not all columns are output by all solvers; which columns occur in
  the extracted output depends on which solver's output is being extracted.
  The following data columns are extracted from the following solvers:
  <ul>
   <li> <code>minisat-2.2.0</code>:
   \verbatim
> cat Experimentation/ExperimentSystem/SolverMonitoring/headers/minisat; echo
rn rc t sat cfs dec rts r1 mem ptime stime cfl
   \endverbatim
   </li>
  </ul>

*/
