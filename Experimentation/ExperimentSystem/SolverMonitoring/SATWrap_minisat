#!/usr/bin/env bash
# Oliver Kullmann, 2.4.2020 (Swansea)
# Copyright 2020 Oliver Kullmann
# This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
# it and/or modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation and included in this library; either version 3 of the
# License, or any later version. */

# USAGE:

# SATWrap_minisat ...

# reads from standard input and creates a directory, containing the files
# representing the minisat-computation and results:
#  - err    : contains error-output (to standard error) of the solver
#  - log    : contains all the normal output (to standard output) of the solver
#  - status : the return-code of the solver
#  - stats  : the extracted data, in R format (with header)
#  - pass   : the partial assignments, as a clause (the literals set to true)

# The arguments of SATWrap_minisat are passed to the solver, as options
# (before the files for input and assignment, which are provided by the wrapper).

# No solver-error iff the err-file is empty iff status contains one of 0,10,20;
# here warnings of minisat are treated as errors (since output to stderr),
# but the computation proceeded nonetheless (return-value is one of 0,10,20).
# If pass is not disabled: (by setting it to /dev/null -- see below):
#   pass exists iff minisat did not return unknown, where
#     minisat determined unsatisfiability iff pass is empty,
#     minisat determined satisfiability iff pass is non-empty.

# A return-value different from 0 of the SATWrap-script means an error
# in executing the script, not an error of the solver.
# If SIGINT is sent to the script, and the solver wasn't called yet, then
# log and err are empty, and status and pass don't exist.
# The gnu-tool rdbuf is used to force flushing of output to the log-file
# for every completed line.

# Variables for customisation, and their default-values:

# solvercall      = "minisat-2.2.0"
# extractioncall  = "ExtractMinisat"
# inputfile       = "/dev/stdin"

# outputdirectory = "SATWrap_minisat_${inputfilename}_${timestamp}"

# outputfile      = "/dev/stdout"
# assignmentfile  = "${outputdirectory}/pass"
# logfile         = "${outputdirectory}/log"
# errfile         = "${outputdirectory}/err"
# statusfile      = "${outputdirectory}/status"
# extractfile     = "${outputdirectory}/stats"

# Not producing one of the six outputs can happen via using "/dev/null".

# EXAMPLES:

# Solving a random CNF:
# ./BRG "500*100,3" | SATWrap_minisat

# Using a file for input, plus option-arguments:
# > BRG "800*200,3" "" "" ""
# Output to file "BlRaGe_200_800_1009.dimacs".
# > inputfile="BlRaGe_200_800_1009.dimacs" SATWrap_minisat -no-pre
# SATWrap_minisat_BlRaGe_200_800_1009.dimacs_1586036512995052639
# > ls -l SATWrap_minisat_BlRaGe_200_800_1009.dimacs_1586036512995052639
# 0 Apr  4 22:41 err
# 2017 Apr  4 22:41 log
# 788 Apr  4 22:41 pass
# 108 Apr  4 22:41 stats
# 3 Apr  4 22:41 status


# #########################

set -o errexit
set -o nounset

program="SATWrap_minisat"
version="0.3.0"

: ${solvercall:="minisat-2.2.0"}
: ${extractioncall:="ExtractMinisat"}

: ${inputfile:="/dev/stdin"}
inputfilename="$(basename ${inputfile})"

: ${outputfile:="/dev/stdout"}

timestamp="$(date +%s%N)"

: ${outputdirectory:="${program}_${inputfilename}_${timestamp}"}

mkdir ${outputdirectory}

: ${assignmentfile:="${outputdirectory}/pass"}
: ${logfile:="${outputdirectory}/log"}
: ${errfile:="${outputdirectory}/err"}
: ${statusfile:="${outputdirectory}/status"}
: ${extractfile:="${outputdirectory}/stats"}

handler() {
  if [ -s ${logfile} ]; then
    echo "0" > ${statusfile}
    if [ ${assignmentfile} != "/dev/null" ]; then
      rm ${assignmentfile}
    fi
  fi
  cat ${logfile} | ${extractioncall} > ${extractfile}
  echo " ${outputdirectory}" >> ${outputfile}
  exit 0
}

trap handler SIGINT

if [ ${assignmentfile} == "/dev/null" ]; then
  set +e
  stdbuf-oL ${solvercall} "$@" ${inputfile} 1> ${logfile} 2> ${errfile}
  exitstatus=$?
  set -e
  echo "${exitstatus}" > ${statusfile}
else
  set +e
  stdbuf -oL ${solvercall} "$@" ${inputfile} ${assignmentfile} 1> ${logfile} 2> ${errfile}
  exitstatus=$?
  set -e
  echo "${exitstatus}" > ${statusfile}
  if [[ ${exitstatus} == 0 ]]; then
    rm ${assignmentfile}
  elif [[ ${exitstatus} == 10 ]] || [[ ${exitstatus} == 20 ]]; then
    sed -i "1d" ${assignmentfile}
  fi
fi

cat ${logfile} | ${extractioncall} > ${extractfile}

echo "${outputdirectory}" >> ${outputfile}
