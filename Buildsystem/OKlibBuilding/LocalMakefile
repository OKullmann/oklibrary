# Oliver Kullmann, 2.3.2019 (Swansea)
# Copyright 2019, 2020, 2021 Oliver Kullmann
# This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
# it and/or modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation and included in this library; either version 3 of the
# License, or any later version.

# Version: 0.7.0

# TODOS:
#
# 1. Once make version 4.3 is available on our platforms, reconsider the use of
#    MAKEFLAGS below for setting the --jobs - option: what we want is that
#    it can be overwritten by just using say "make -j7" -- then we can
#    set it here to unbounded parallelism, since it's easy for the user
#    to use a more restricted value.
#
# 2. DONE Compiling via clang++.
#   - If g++ is replaced by clang++ (version 10), then warnings and errors appear.
#     Accoding to the warnings, clang++ does not support the following compilation
#     flags:
#     -fwhole-program
#     -funsafe-loop-optimizations
#     This should be minor. However, clang++ currently does not support
#     static_asserts in FloatingPoint.hpp: "static_assert expression is not an
#     integral constant expression".
#   - DONE This needs to be somewhat investigated: for the first such error, one
#     needs to investigate whether indeed the standard says that the function
#     used is indeed constexpr.
#
# Comment: now both g++ and clang++ can be used for compilation.
# Versions 10 and 11 of clang++ were tested.
# g++ is used by default, while clang++ can be chosen via the key CXX:
# make CXX=clang++

SHELL = /bin/bash
.SUFFIXES :

.PHONY : all programs optimised debug test regtest apptest fuzzing clean cleanall

# DISABLED for now:
# By default always run in parallel (unrestriced); overwrite by e.g.
# make MAKEFLAGS=""
# or say for two jobs:
# make MAKEFLAGS="-j2"
# MAKEFLAGS += --jobs
# A bug has been introduced with make 4.2.0, so that this doesn't work,
# and this effects openSuse version Leap 15.1. In this case, for parallelism
# use either
# make -j
# for unbounded parallelism, or say
# make -j2
# for only allowing two parallel jobs at a time.


git_id = $(shell git rev-parse HEAD)
git_macro = -DGITID="\"$(git_id)\""
machine_name = $(shell hostname)
machine_macro = -DMACHINE="\"$(machine_name)\""
bogomips_value = $(shell grep -m 1 "bogomips" /proc/cpuinfo | cut -f2 | cut -d' ' -f2)
bogomips_macro = -DBOGOMIPS=$(bogomips_value)

special_macros = $(machine_macro) $(bogomips_macro) $(git_macro)


CXX = g++

LStandard_options = --std=c++20 -pedantic
Warning_options = -fmax-errors=5 -Wall -Wextra -Wno-missing-field-initializers -Wno-dangling-else
Optimisation_core = -Ofast -DNDEBUG -march=native
# "plus" means extensions, "minus" means restriction:
Optimisation_plus = -fwhole-program -static
Optimisation_minus =
Optimisation_options = $(Optimisation_core) $(Optimisation_plus) $(Optimisation_minus)
numerics_plus =-fno-math-errno -fno-trapping-math -fno-rounding-math -fno-signaling-nans
numerics_minus = -fno-unsafe-math-optimizations -fno-finite-math-only -fno-associative-math -fno-reciprocal-math -fsigned-zeros
numerics_options = $(numerics_plus) $(numerics_minus)
Debug_options = -g -D_GLIBCXX_DEBUG
# Options to reproduce compilation:
repr_macro = -DOPTIMISATION="\"$(LStandard_options) $(Optimisation_options) $(numerics_options) $(CPPFLAGS) $(CXXFLAGS) $(LDFLAGS)\""
reprdebug_macro = -DOPTIMISATION="\"$(LStandard_options) $(Warning_options) $(Debug_options) $(CPPFLAGS) $(CXXFLAGS) $(LDFLAGS)\""


testtool = valgrind -q
# better "valgrind -q --exit-on-first-error=yes" when available on all our machines

programmingloc = $(oklibloc)/Programming
satisfiabilityloc = $(oklibloc)/Satisfiability
include_options = -I $(programmingloc) -I $(satisfiabilityloc) -I $(oklibloc)


all : programs test

programs : optimised debug

optimised : $(opt_progs)

debug : $(debug_progs)

test : regtest apptest


clean :
	- rm $(debug_progs)

cleanall : clean
	- rm $(opt_progs)


$(opt_progs) :
	$(CXX) $(LStandard_options) $(Warning_options) $(include_options) $(Optimisation_options) $(numerics_options) $(special_macros) $(repr_macro) $(CPPFLAGS) $(CXXFLAGS) $< $(LDFLAGS) -o $@

$(debug_progs) :
	$(CXX) $(LStandard_options) $(Warning_options) $(include_options) $(Debug_options) $(special_macros) $(reprdebug_macro) $(CPPFLAGS) $(CXXFLAGS) $< $(LDFLAGS) -o $@

profrunargs = "-p"
profsuff = "_${profrunargs}"
$(popt_progs) : p-% :
	- rm $*${profsuff}
	CXXFLAGS="-fprofile-generate" make -B $*
	./$* ${profrunargs}
	rm $*
	CXXFLAGS="-fprofile-use" make $*
	mv $* $*${profsuff}
	rm $*.gcda
