// Matthew Gwynne, 19.8.2011 (Swansea)
/* Copyright 2011, 2012 Oliver Kullmann
This file is part of the OKlibrary. OKlibrary is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation and included in this library; either version 3 of the
License, or any later version. */

/*!
  \file Buildsystem/ExternalSources/SpecialBuilds/plans/Cryptography.hpp
  \brief Plans regarding building and making available of cryptology software and benchmarks


  \todo Connections
  <ul>
   <li> Buildsystem/ExternalSources/SpecialBuilds/plans/Mhash.hpp is about
   the old external library for cryptographic algorithms. </li>
  </ul>


  \todo Terminology
  <ul>
   <li> The general term for both design and analysis of systems is
   "cryptology". </li>
   <li> This is used throughout in the OKlibrary. </li>
   <li> "Cryptography" is concerned with the design, "cryptanalysis" with
   the analysis. </li>
   <li> However "cryptography" is used by some people (for example the English
   Wikipedia) to stand for the whole field. This is unfortunate (historically
   false), but just means we should not use the term "cryptography", but
   "crytological system" (or so). </li>
   <li> "Cryptology" is unambigous, standing always for the whole field. </li>
   <li> At the build-system level, we should have just one file for everything,
   and thus this file should become "Cryptology.hpp". </li>
  </ul>


  \todo New library (replacing Mhash)
  <ul>
   <li> Crypto++ http://www.cryptopp.com/ seems like a strong library.
    <ol>
     <li> Building via "PREFIX=XXX make all test install" yields an error (it
     uses "GNUmakefile"; version 5.6.1):
     \verbatim
cp: cannot stat `*.so': No such file or directory
make: *** [install] Error 1
     \endverbatim
     So the dynamic link-library is not created. </li>
     <li> We could ignore it, using only the .a-library. </li>
     <li> But better to contact the developers (also for testing how strong
     the community is; the build-process looks a bit ad-hoc). </li>
    </ol>
   </li>
  </ul>


  \todo Grain of salt
  <ul>
   <li> Available at http://www.msoos.org/grain-of-salt . </li>
   <li> Grain of salt is a general system for translating
   shift register-based stream ciphers. </li>
   <li> The ciphers already available for translation in
   grain of salt are:
    <ul>
     <li> Grain, </li>
     <li> Trivium, </li>
     <li> Bivium-B, </li>
     <li> HiTag2, and </li>
     <li> Crypto1. </li>
    </ul>
   </li>
   <li> This system is written in C++ and allows parts of
   the cipher to be "optimised" using espresso. </li>
   <li> This system should be installed and investigated. </li>
   <li> It should be possible to extend this system to also use
   our own methods of translating "boxes", as
   discussed in "Translating stream ciphers using our translations" in
   Experimentation/Investigations/Cryptography/plans/general.hpp. </li>
  </ul>


  \todo Create documentation
  <ul>
   <li> See "DES benchmarks" in
   Investigations/Cryptography/DataEncryptionStandard/plans/general.hpp. </li>
  </ul>


  \todo Argo DES instances
  <ul>
   <li> The Argo DES benchmarks are available in
   SAT09/APPLICATIONS/crypto/desgen/ in
   http://www.cril.univ-artois.fr/SAT09/bench/appli.7z .
   </li>
   <li> These instances were generated by the Argo group;
   see http://argo.matf.bg.ac.rs/?content=research . </li> 
   <li> We should make them available in the library. </li>
   <li> We should also contact the Argo group and ask for the generators. </li>
  </ul>


  \todo Kreuzer DES instances
  <ul>
   <li> In [Algrebraic Attacks using SAT-solvers; Jovanovic and Kreuzer] the
   authors mention a translation to DES using the ApCoCoA system. </li>
   <li> We should contact the authors and ask if this translation is available.
   </li>
  </ul>


  \todo DES generator
  <ul>
   <li> http://disi.unitn.it/~massacci/CryptoSAT/ contains the generator
   and an update. </li>
   <li> The sources are in sources/SAT/Des. </li>
   <li> We need this for comparison (and for historical reasons). </li>
   <li> Installing the DES generator:
   \verbatim
ExternalSources/builds/SAT/> mkdir Des && cd Des
ExternalSources/builds/SAT/Des/> tar zxvf ../../../sources/SAT/Des/des2fml-0.9.tgz
ExternalSources/builds/SAT/Des/> cd des2fml-0.9
ExternalSources/builds/SAT/Des/des2fml-0.9/> zcat ../../../../sources/SAT/Des/des2fml-0.9-newgcc.diff.gz | patch -p1
ExternalSources/builds/SAT/Des/des2fml-0.9> make
   \endverbatim
   </li>
   <li> Using the tool:
    <ul>
     <li> The plaintext, key are available in the files plaintxt and key_des.
     </li>
     <li> By default many plaintexts are provided. All but one must be removed
     if one wants to generate an instance with a single plaintext-ciphertext
     pair. </li>
     <li> Run
     \verbatim
ExternalSources/builds/Des/des2fml-0.9> rounds=1
ExternalSources/builds/Des/des2fml-0.9> ./des -r${rounds}
     \endverbatim
     to generate the ciphertext in ciph_text from plaintxt and key_des for
     ${rounds} rounds.
     </li>
     <li> Then run
     \verbatim
ExternalSources/builds/Des/des2fml-0.9> ./des2fml -r${rounds} -p -c -f1
     \endverbatim
     to generate the file formulae. This contains a CNF but in Dimacs format.
     </li>
     <li> Converting formulae to Dimacs:
     \verbatim
./clausify formulae test.cnf
     \endverbatim
     </li>
     <li> So for example with
     \verbatim
0xe9 0xa6 0x52 0x90 0x90 0x62 0x60 0xf7
     \endverbatim
     in plaintext, and
     \verbatim
0x1b 0x6c 0x26 0xa7 0x20 0x03 0x3d 0xa2
     \endverbatim
     in key_des, we get the following:
     \verbatim
ExternalSources/builds/Des/des2fml-0.9> round=3 && ./des -r${round} && ./des2fml -r${round} -p -c -f1 && ./clausify formulae test.cnf
############# DES with 3 round/rounds #############
     
Key: 1b6c26a720033da2
Plaintext: e9a65290906260f7
Ciphertext (after 3 round/rounds): 72fe6cf9cfcebb57

####### Block number 1 #######
Plaintext: e9a65290906260f7
Ciphertext (after 3 round/rounds): 72fe6cf9cfcebb57

ExternalSources/builds/Des/des2fml-0.9> OKsolver-O3-DNDEBUG test.cnf
s SATISFIABLE
c sat_status                            1
c initial_maximal_clause_length         24
c initial_number_of_variables           1531
c initial_number_of_clauses             9286
c initial_number_of_literal_occurrences 25522
c number_of_initial_unit-eliminations   0
c number_of_2-clauses_after_reduction   7421
c running_time(sec)                     8.1
c number_of_nodes                       266
c number_of_single_nodes                0
c number_of_quasi_single_nodes          0
c number_of_2-reductions                25797
c number_of_pure_literals               0
c number_of_autarkies                   0
c number_of_missed_single_nodes         0
c max_tree_depth                        10
c number_of_table_enlargements          0
c number_of_1-autarkies                 4
c number_of_new_2-clauses               0
c maximal_number_of_added_2-clauses     0
c file_name                             test.cnf
     \endverbatim
     </li>
    </ul>
   </li>
   <li> What to call the tool?
    <ul>
     <li> When installing the tool in ExternalSources we must have
     a name to use for configuration and build files. </li>
     <li> "Des" is likely too general. </li>
     <li> Something like "DesMassacci" places a lot of emphasis on the author
     which we don't do for other packages. </li>
     <li> "des2fml" is the name of the package as provided by Massacci,
     however, the question is whether we will remember this. </li>
    </ul>
   </li>
   <li> How to use the tool outside of its directory?
    <ul>
     <li> The executable "des2fml" expects various files to be in
     the directory it executes in. </li>
     <li> For example:
     \verbatim
OKlib> ../../ExternalSources/builds/SAT/Des/des2fml-0.9/des2fml -b1 -f1 -r1

####### Block number 1 #######
Error: file ./S-fml/S11 doesn't exist
     \endverbatim
     </li>
     <li> des2fml requires that the files containing the S-box representations
     (S-fml/SXX) are available, as well as the files containing the plaintext
     and ciphertext (plaintxt and ciphtxt) in the current directory. </li>
     <li> We wish to install this script and make it runnable in the
     setting of the global library, so we should write a simple wrapper
     script to allow this, running the script from the context of its
     directory. </li>
     <li> We should also investigate further (todos are needed) the
     representations that are actually used for the S-boxes by des2fml and
     try using our own. </li>
    </ul>
   </li>
  </ul>

*/

